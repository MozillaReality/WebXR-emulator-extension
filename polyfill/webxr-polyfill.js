function WebXRPolyfillInjection() {
(function (global, factory) {
                typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
                typeof define === 'function' && define.amd ? define(factory) :
                (global = global || self, global.CustomWebXRPolyfill = factory());
}(this, (function () { 'use strict';

                const _global = typeof global !== 'undefined' ? global :
                                typeof self !== 'undefined' ? self :
                                typeof window !== 'undefined' ? window : {};

                const PRIVATE = Symbol('@@webxr-polyfill/EventTarget');
                class EventTarget {
                  constructor() {
                    this[PRIVATE] = {
                      listeners: new Map(),
                    };
                  }
                  addEventListener(type, listener) {
                    if (typeof type !== 'string') { throw new Error('`type` must be a string'); }
                    if (typeof listener !== 'function') { throw new Error('`listener` must be a function'); }
                    const typedListeners = this[PRIVATE].listeners.get(type) || [];
                    typedListeners.push(listener);
                    this[PRIVATE].listeners.set(type, typedListeners);
                  }
                  removeEventListener(type, listener) {
                    if (typeof type !== 'string') { throw new Error('`type` must be a string'); }
                    if (typeof listener !== 'function') { throw new Error('`listener` must be a function'); }
                    const typedListeners = this[PRIVATE].listeners.get(type) || [];
                    for (let i = typedListeners.length; i >= 0; i--) {
                      if (typedListeners[i] === listener) {
                        typedListeners.pop();
                      }
                    }
                  }
                  dispatchEvent(type, event) {
                    const typedListeners = this[PRIVATE].listeners.get(type) || [];
                    const queue = [];
                    for (let i = 0; i < typedListeners.length; i++) {
                      queue[i] = typedListeners[i];
                    }
                    for (let listener of queue) {
                      listener(event);
                    }
                    if (typeof this[`on${type}`] === 'function') {
                      this[`on${type}`](event);
                    }
                  }
                }

                const EPSILON = 0.000001;
                let ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;

                function create() {
                  let out = new ARRAY_TYPE(16);
                  if(ARRAY_TYPE != Float32Array) {
                    out[1] = 0;
                    out[2] = 0;
                    out[3] = 0;
                    out[4] = 0;
                    out[6] = 0;
                    out[7] = 0;
                    out[8] = 0;
                    out[9] = 0;
                    out[11] = 0;
                    out[12] = 0;
                    out[13] = 0;
                    out[14] = 0;
                  }
                  out[0] = 1;
                  out[5] = 1;
                  out[10] = 1;
                  out[15] = 1;
                  return out;
                }
                function copy(out, a) {
                  out[0] = a[0];
                  out[1] = a[1];
                  out[2] = a[2];
                  out[3] = a[3];
                  out[4] = a[4];
                  out[5] = a[5];
                  out[6] = a[6];
                  out[7] = a[7];
                  out[8] = a[8];
                  out[9] = a[9];
                  out[10] = a[10];
                  out[11] = a[11];
                  out[12] = a[12];
                  out[13] = a[13];
                  out[14] = a[14];
                  out[15] = a[15];
                  return out;
                }
                function identity(out) {
                  out[0] = 1;
                  out[1] = 0;
                  out[2] = 0;
                  out[3] = 0;
                  out[4] = 0;
                  out[5] = 1;
                  out[6] = 0;
                  out[7] = 0;
                  out[8] = 0;
                  out[9] = 0;
                  out[10] = 1;
                  out[11] = 0;
                  out[12] = 0;
                  out[13] = 0;
                  out[14] = 0;
                  out[15] = 1;
                  return out;
                }
                function invert(out, a) {
                  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
                  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
                  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
                  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
                  let b00 = a00 * a11 - a01 * a10;
                  let b01 = a00 * a12 - a02 * a10;
                  let b02 = a00 * a13 - a03 * a10;
                  let b03 = a01 * a12 - a02 * a11;
                  let b04 = a01 * a13 - a03 * a11;
                  let b05 = a02 * a13 - a03 * a12;
                  let b06 = a20 * a31 - a21 * a30;
                  let b07 = a20 * a32 - a22 * a30;
                  let b08 = a20 * a33 - a23 * a30;
                  let b09 = a21 * a32 - a22 * a31;
                  let b10 = a21 * a33 - a23 * a31;
                  let b11 = a22 * a33 - a23 * a32;
                  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
                  if (!det) {
                    return null;
                  }
                  det = 1.0 / det;
                  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
                  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
                  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
                  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
                  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
                  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
                  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
                  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
                  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
                  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
                  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
                  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
                  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
                  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
                  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
                  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
                  return out;
                }
                function multiply(out, a, b) {
                  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
                  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
                  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
                  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
                  let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
                  out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
                  out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
                  out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
                  out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
                  b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];
                  out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
                  out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
                  out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
                  out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
                  b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];
                  out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
                  out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
                  out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
                  out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
                  b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];
                  out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
                  out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
                  out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
                  out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
                  return out;
                }
                function fromRotationTranslation(out, q, v) {
                  let x = q[0], y = q[1], z = q[2], w = q[3];
                  let x2 = x + x;
                  let y2 = y + y;
                  let z2 = z + z;
                  let xx = x * x2;
                  let xy = x * y2;
                  let xz = x * z2;
                  let yy = y * y2;
                  let yz = y * z2;
                  let zz = z * z2;
                  let wx = w * x2;
                  let wy = w * y2;
                  let wz = w * z2;
                  out[0] = 1 - (yy + zz);
                  out[1] = xy + wz;
                  out[2] = xz - wy;
                  out[3] = 0;
                  out[4] = xy - wz;
                  out[5] = 1 - (xx + zz);
                  out[6] = yz + wx;
                  out[7] = 0;
                  out[8] = xz + wy;
                  out[9] = yz - wx;
                  out[10] = 1 - (xx + yy);
                  out[11] = 0;
                  out[12] = v[0];
                  out[13] = v[1];
                  out[14] = v[2];
                  out[15] = 1;
                  return out;
                }
                function getTranslation(out, mat) {
                  out[0] = mat[12];
                  out[1] = mat[13];
                  out[2] = mat[14];
                  return out;
                }
                function getRotation(out, mat) {
                  let trace = mat[0] + mat[5] + mat[10];
                  let S = 0;
                  if (trace > 0) {
                    S = Math.sqrt(trace + 1.0) * 2;
                    out[3] = 0.25 * S;
                    out[0] = (mat[6] - mat[9]) / S;
                    out[1] = (mat[8] - mat[2]) / S;
                    out[2] = (mat[1] - mat[4]) / S;
                  } else if ((mat[0] > mat[5]) && (mat[0] > mat[10])) {
                    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;
                    out[3] = (mat[6] - mat[9]) / S;
                    out[0] = 0.25 * S;
                    out[1] = (mat[1] + mat[4]) / S;
                    out[2] = (mat[8] + mat[2]) / S;
                  } else if (mat[5] > mat[10]) {
                    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;
                    out[3] = (mat[8] - mat[2]) / S;
                    out[0] = (mat[1] + mat[4]) / S;
                    out[1] = 0.25 * S;
                    out[2] = (mat[6] + mat[9]) / S;
                  } else {
                    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;
                    out[3] = (mat[1] - mat[4]) / S;
                    out[0] = (mat[8] + mat[2]) / S;
                    out[1] = (mat[6] + mat[9]) / S;
                    out[2] = 0.25 * S;
                  }
                  return out;
                }
                function perspective(out, fovy, aspect, near, far) {
                  let f = 1.0 / Math.tan(fovy / 2), nf;
                  out[0] = f / aspect;
                  out[1] = 0;
                  out[2] = 0;
                  out[3] = 0;
                  out[4] = 0;
                  out[5] = f;
                  out[6] = 0;
                  out[7] = 0;
                  out[8] = 0;
                  out[9] = 0;
                  out[11] = -1;
                  out[12] = 0;
                  out[13] = 0;
                  out[15] = 0;
                  if (far != null && far !== Infinity) {
                    nf = 1 / (near - far);
                    out[10] = (far + near) * nf;
                    out[14] = (2 * far * near) * nf;
                  } else {
                    out[10] = -1;
                    out[14] = -2 * near;
                  }
                  return out;
                }

                function create$1() {
                  let out = new ARRAY_TYPE(3);
                  if(ARRAY_TYPE != Float32Array) {
                    out[0] = 0;
                    out[1] = 0;
                    out[2] = 0;
                  }
                  return out;
                }
                function clone(a) {
                  var out = new ARRAY_TYPE(3);
                  out[0] = a[0];
                  out[1] = a[1];
                  out[2] = a[2];
                  return out;
                }
                function length(a) {
                  let x = a[0];
                  let y = a[1];
                  let z = a[2];
                  return Math.sqrt(x*x + y*y + z*z);
                }
                function fromValues(x, y, z) {
                  let out = new ARRAY_TYPE(3);
                  out[0] = x;
                  out[1] = y;
                  out[2] = z;
                  return out;
                }
                function copy$1(out, a) {
                  out[0] = a[0];
                  out[1] = a[1];
                  out[2] = a[2];
                  return out;
                }
                function add(out, a, b) {
                  out[0] = a[0] + b[0];
                  out[1] = a[1] + b[1];
                  out[2] = a[2] + b[2];
                  return out;
                }
                function scale(out, a, b) {
                  out[0] = a[0] * b;
                  out[1] = a[1] * b;
                  out[2] = a[2] * b;
                  return out;
                }
                function normalize(out, a) {
                  let x = a[0];
                  let y = a[1];
                  let z = a[2];
                  let len = x*x + y*y + z*z;
                  if (len > 0) {
                    len = 1 / Math.sqrt(len);
                    out[0] = a[0] * len;
                    out[1] = a[1] * len;
                    out[2] = a[2] * len;
                  }
                  return out;
                }
                function dot(a, b) {
                  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
                }
                function cross(out, a, b) {
                  let ax = a[0], ay = a[1], az = a[2];
                  let bx = b[0], by = b[1], bz = b[2];
                  out[0] = ay * bz - az * by;
                  out[1] = az * bx - ax * bz;
                  out[2] = ax * by - ay * bx;
                  return out;
                }
                function transformQuat(out, a, q) {
                    let qx = q[0], qy = q[1], qz = q[2], qw = q[3];
                    let x = a[0], y = a[1], z = a[2];
                    let uvx = qy * z - qz * y,
                        uvy = qz * x - qx * z,
                        uvz = qx * y - qy * x;
                    let uuvx = qy * uvz - qz * uvy,
                        uuvy = qz * uvx - qx * uvz,
                        uuvz = qx * uvy - qy * uvx;
                    let w2 = qw * 2;
                    uvx *= w2;
                    uvy *= w2;
                    uvz *= w2;
                    uuvx *= 2;
                    uuvy *= 2;
                    uuvz *= 2;
                    out[0] = x + uvx + uuvx;
                    out[1] = y + uvy + uuvy;
                    out[2] = z + uvz + uuvz;
                    return out;
                }
                function angle(a, b) {
                  let tempA = fromValues(a[0], a[1], a[2]);
                  let tempB = fromValues(b[0], b[1], b[2]);
                  normalize(tempA, tempA);
                  normalize(tempB, tempB);
                  let cosine = dot(tempA, tempB);
                  if(cosine > 1.0) {
                    return 0;
                  }
                  else if(cosine < -1.0) {
                    return Math.PI;
                  } else {
                    return Math.acos(cosine);
                  }
                }
                const len = length;
                const forEach = (function() {
                  let vec = create$1();
                  return function(a, stride, offset, count, fn, arg) {
                    let i, l;
                    if(!stride) {
                      stride = 3;
                    }
                    if(!offset) {
                      offset = 0;
                    }
                    if(count) {
                      l = Math.min((count * stride) + offset, a.length);
                    } else {
                      l = a.length;
                    }
                    for(i = offset; i < l; i += stride) {
                      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];
                      fn(vec, vec, arg);
                      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];
                    }
                    return a;
                  };
                })();

                function create$2() {
                  let out = new ARRAY_TYPE(9);
                  if(ARRAY_TYPE != Float32Array) {
                    out[1] = 0;
                    out[2] = 0;
                    out[3] = 0;
                    out[5] = 0;
                    out[6] = 0;
                    out[7] = 0;
                  }
                  out[0] = 1;
                  out[4] = 1;
                  out[8] = 1;
                  return out;
                }

                function create$3() {
                  let out = new ARRAY_TYPE(4);
                  if(ARRAY_TYPE != Float32Array) {
                    out[0] = 0;
                    out[1] = 0;
                    out[2] = 0;
                    out[3] = 0;
                  }
                  return out;
                }
                function clone$1(a) {
                  let out = new ARRAY_TYPE(4);
                  out[0] = a[0];
                  out[1] = a[1];
                  out[2] = a[2];
                  out[3] = a[3];
                  return out;
                }
                function fromValues$1(x, y, z, w) {
                  let out = new ARRAY_TYPE(4);
                  out[0] = x;
                  out[1] = y;
                  out[2] = z;
                  out[3] = w;
                  return out;
                }
                function copy$2(out, a) {
                  out[0] = a[0];
                  out[1] = a[1];
                  out[2] = a[2];
                  out[3] = a[3];
                  return out;
                }
                function normalize$1(out, a) {
                  let x = a[0];
                  let y = a[1];
                  let z = a[2];
                  let w = a[3];
                  let len = x*x + y*y + z*z + w*w;
                  if (len > 0) {
                    len = 1 / Math.sqrt(len);
                    out[0] = x * len;
                    out[1] = y * len;
                    out[2] = z * len;
                    out[3] = w * len;
                  }
                  return out;
                }
                const forEach$1 = (function() {
                  let vec = create$3();
                  return function(a, stride, offset, count, fn, arg) {
                    let i, l;
                    if(!stride) {
                      stride = 4;
                    }
                    if(!offset) {
                      offset = 0;
                    }
                    if(count) {
                      l = Math.min((count * stride) + offset, a.length);
                    } else {
                      l = a.length;
                    }
                    for(i = offset; i < l; i += stride) {
                      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];
                      fn(vec, vec, arg);
                      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];
                    }
                    return a;
                  };
                })();

                function create$4() {
                  let out = new ARRAY_TYPE(4);
                  if(ARRAY_TYPE != Float32Array) {
                    out[0] = 0;
                    out[1] = 0;
                    out[2] = 0;
                  }
                  out[3] = 1;
                  return out;
                }
                function setAxisAngle(out, axis, rad) {
                  rad = rad * 0.5;
                  let s = Math.sin(rad);
                  out[0] = s * axis[0];
                  out[1] = s * axis[1];
                  out[2] = s * axis[2];
                  out[3] = Math.cos(rad);
                  return out;
                }
                function multiply$1(out, a, b) {
                  let ax = a[0], ay = a[1], az = a[2], aw = a[3];
                  let bx = b[0], by = b[1], bz = b[2], bw = b[3];
                  out[0] = ax * bw + aw * bx + ay * bz - az * by;
                  out[1] = ay * bw + aw * by + az * bx - ax * bz;
                  out[2] = az * bw + aw * bz + ax * by - ay * bx;
                  out[3] = aw * bw - ax * bx - ay * by - az * bz;
                  return out;
                }
                function slerp(out, a, b, t) {
                  let ax = a[0], ay = a[1], az = a[2], aw = a[3];
                  let bx = b[0], by = b[1], bz = b[2], bw = b[3];
                  let omega, cosom, sinom, scale0, scale1;
                  cosom = ax * bx + ay * by + az * bz + aw * bw;
                  if ( cosom < 0.0 ) {
                    cosom = -cosom;
                    bx = - bx;
                    by = - by;
                    bz = - bz;
                    bw = - bw;
                  }
                  if ( (1.0 - cosom) > EPSILON ) {
                    omega  = Math.acos(cosom);
                    sinom  = Math.sin(omega);
                    scale0 = Math.sin((1.0 - t) * omega) / sinom;
                    scale1 = Math.sin(t * omega) / sinom;
                  } else {
                    scale0 = 1.0 - t;
                    scale1 = t;
                  }
                  out[0] = scale0 * ax + scale1 * bx;
                  out[1] = scale0 * ay + scale1 * by;
                  out[2] = scale0 * az + scale1 * bz;
                  out[3] = scale0 * aw + scale1 * bw;
                  return out;
                }
                function invert$1(out, a) {
                  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
                  let dot = a0*a0 + a1*a1 + a2*a2 + a3*a3;
                  let invDot = dot ? 1.0/dot : 0;
                  out[0] = -a0*invDot;
                  out[1] = -a1*invDot;
                  out[2] = -a2*invDot;
                  out[3] = a3*invDot;
                  return out;
                }
                function fromMat3(out, m) {
                  let fTrace = m[0] + m[4] + m[8];
                  let fRoot;
                  if ( fTrace > 0.0 ) {
                    fRoot = Math.sqrt(fTrace + 1.0);
                    out[3] = 0.5 * fRoot;
                    fRoot = 0.5/fRoot;
                    out[0] = (m[5]-m[7])*fRoot;
                    out[1] = (m[6]-m[2])*fRoot;
                    out[2] = (m[1]-m[3])*fRoot;
                  } else {
                    let i = 0;
                    if ( m[4] > m[0] )
                      i = 1;
                    if ( m[8] > m[i*3+i] )
                      i = 2;
                    let j = (i+1)%3;
                    let k = (i+2)%3;
                    fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);
                    out[i] = 0.5 * fRoot;
                    fRoot = 0.5 / fRoot;
                    out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;
                    out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;
                    out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;
                  }
                  return out;
                }
                function fromEuler(out, x, y, z) {
                    let halfToRad = 0.5 * Math.PI / 180.0;
                    x *= halfToRad;
                    y *= halfToRad;
                    z *= halfToRad;
                    let sx = Math.sin(x);
                    let cx = Math.cos(x);
                    let sy = Math.sin(y);
                    let cy = Math.cos(y);
                    let sz = Math.sin(z);
                    let cz = Math.cos(z);
                    out[0] = sx * cy * cz - cx * sy * sz;
                    out[1] = cx * sy * cz + sx * cy * sz;
                    out[2] = cx * cy * sz - sx * sy * cz;
                    out[3] = cx * cy * cz + sx * sy * sz;
                    return out;
                }
                const clone$2 = clone$1;
                const fromValues$2 = fromValues$1;
                const copy$3 = copy$2;
                const normalize$2 = normalize$1;
                const rotationTo = (function() {
                  let tmpvec3 = create$1();
                  let xUnitVec3 = fromValues(1,0,0);
                  let yUnitVec3 = fromValues(0,1,0);
                  return function(out, a, b) {
                    let dot$1 = dot(a, b);
                    if (dot$1 < -0.999999) {
                      cross(tmpvec3, xUnitVec3, a);
                      if (len(tmpvec3) < 0.000001)
                        cross(tmpvec3, yUnitVec3, a);
                      normalize(tmpvec3, tmpvec3);
                      setAxisAngle(out, tmpvec3, Math.PI);
                      return out;
                    } else if (dot$1 > 0.999999) {
                      out[0] = 0;
                      out[1] = 0;
                      out[2] = 0;
                      out[3] = 1;
                      return out;
                    } else {
                      cross(tmpvec3, a, b);
                      out[0] = tmpvec3[0];
                      out[1] = tmpvec3[1];
                      out[2] = tmpvec3[2];
                      out[3] = 1 + dot$1;
                      return normalize$2(out, out);
                    }
                  };
                })();
                const sqlerp = (function () {
                  let temp1 = create$4();
                  let temp2 = create$4();
                  return function (out, a, b, c, d, t) {
                    slerp(temp1, a, d, t);
                    slerp(temp2, b, c, t);
                    slerp(out, temp1, temp2, 2 * t * (1 - t));
                    return out;
                  };
                }());
                const setAxes = (function() {
                  let matr = create$2();
                  return function(out, view, right, up) {
                    matr[0] = right[0];
                    matr[3] = right[1];
                    matr[6] = right[2];
                    matr[1] = up[0];
                    matr[4] = up[1];
                    matr[7] = up[2];
                    matr[2] = -view[0];
                    matr[5] = -view[1];
                    matr[8] = -view[2];
                    return normalize$2(out, fromMat3(out, matr));
                  };
                })();

                const PRIVATE$1 = Symbol('@@webxr-polyfill/XRRigidTransform');
                class XRRigidTransform$1 {
                  constructor() {
                    this[PRIVATE$1] = {
                      matrix: null,
                      position: null,
                      orientation: null,
                      inverse: null,
                    };
                    if (arguments.length === 0) {
                      this[PRIVATE$1].matrix = identity(new Float32Array(16));
                    } else if (arguments.length === 1) {
                      if (arguments[0] instanceof Float32Array) {
                        this[PRIVATE$1].matrix = arguments[0];
                      } else {
                        this[PRIVATE$1].position = this._getPoint(arguments[0]);
                        this[PRIVATE$1].orientation = DOMPointReadOnly.fromPoint({
                            x: 0, y: 0, z: 0, w: 1
                        });
                      }
                    } else if (arguments.length === 2) {
                      this[PRIVATE$1].position = this._getPoint(arguments[0]);
                      this[PRIVATE$1].orientation = this._getPoint(arguments[1]);
                    } else {
                      throw new Error("Too many arguments!");
                    }
                    if (this[PRIVATE$1].matrix) {
                        let position = create$1();
                        getTranslation(position, this[PRIVATE$1].matrix);
                        this[PRIVATE$1].position = DOMPointReadOnly.fromPoint({
                            x: position[0],
                            y: position[1],
                            z: position[2]
                        });
                        let orientation = create$4();
                        getRotation(orientation, this[PRIVATE$1].matrix);
                        this[PRIVATE$1].orientation = DOMPointReadOnly.fromPoint({
                          x: orientation[0],
                          y: orientation[1],
                          z: orientation[2],
                          w: orientation[3]
                        });
                    } else {
                        this[PRIVATE$1].matrix = identity(new Float32Array(16));
                        fromRotationTranslation(
                          this[PRIVATE$1].matrix,
                          fromValues$2(
                            this[PRIVATE$1].orientation.x,
                            this[PRIVATE$1].orientation.y,
                            this[PRIVATE$1].orientation.z,
                            this[PRIVATE$1].orientation.w),
                          fromValues(
                            this[PRIVATE$1].position.x,
                            this[PRIVATE$1].position.y,
                            this[PRIVATE$1].position.z)
                        );
                    }
                  }
                  _getPoint(arg) {
                    if (arg instanceof DOMPointReadOnly) {
                      return arg;
                    }
                    return DOMPointReadOnly.fromPoint(arg);
                  }
                  get matrix() { return this[PRIVATE$1].matrix; }
                  get position() { return this[PRIVATE$1].position; }
                  get orientation() { return this[PRIVATE$1].orientation; }
                  get inverse() {
                    if (this[PRIVATE$1].inverse === null) {
                      let invMatrix = identity(new Float32Array(16));
                      invert(invMatrix, this[PRIVATE$1].matrix);
                      this[PRIVATE$1].inverse = new XRRigidTransform$1(invMatrix);
                      this[PRIVATE$1].inverse[PRIVATE$1].inverse = this;
                    }
                    return this[PRIVATE$1].inverse;
                  }
                }

                const PRIVATE$2 = Symbol('@@webxr-polyfill/XRSpace');
                class XRSpace {
                  constructor(specialType = null, inputSource = null) {
                    this[PRIVATE$2] = {
                      specialType,
                      inputSource,
                      baseMatrix: null,
                      inverseBaseMatrix: null,
                      lastFrameId: -1
                    };
                  }
                  get _specialType() {
                    return this[PRIVATE$2].specialType;
                  }
                  get _inputSource() {
                    return this[PRIVATE$2].inputSource;
                  }
                  _ensurePoseUpdated(device, frameId) {
                    if (frameId == this[PRIVATE$2].lastFrameId) return;
                    this[PRIVATE$2].lastFrameId = frameId;
                    this._onPoseUpdate(device);
                  }
                  _onPoseUpdate(device) {
                    if (this[PRIVATE$2].specialType == 'viewer') {
                      this._baseMatrix = device.getBasePoseMatrix();
                    }
                  }
                  set _baseMatrix(matrix) {
                    this[PRIVATE$2].baseMatrix = matrix;
                    this[PRIVATE$2].inverseBaseMatrix = null;
                  }
                  get _baseMatrix() {
                    if (!this[PRIVATE$2].baseMatrix) {
                      if (this[PRIVATE$2].inverseBaseMatrix) {
                        this[PRIVATE$2].baseMatrix = new Float32Array(16);
                        invert(this[PRIVATE$2].baseMatrix, this[PRIVATE$2].inverseBaseMatrix);
                      }
                    }
                    return this[PRIVATE$2].baseMatrix;
                  }
                  set _inverseBaseMatrix(matrix) {
                    this[PRIVATE$2].inverseBaseMatrix = matrix;
                    this[PRIVATE$2].baseMatrix = null;
                  }
                  get _inverseBaseMatrix() {
                    if (!this[PRIVATE$2].inverseBaseMatrix) {
                      if (this[PRIVATE$2].baseMatrix) {
                        this[PRIVATE$2].inverseBaseMatrix = new Float32Array(16);
                        invert(this[PRIVATE$2].inverseBaseMatrix, this[PRIVATE$2].baseMatrix);
                      }
                    }
                    return this[PRIVATE$2].inverseBaseMatrix;
                  }
                  _getSpaceRelativeTransform(space) {
                    if (!this._inverseBaseMatrix || !space._baseMatrix) {
                      return null;
                    }
                    let out = new Float32Array(16);
                    multiply(out, this._inverseBaseMatrix, space._baseMatrix);
                    return new XRRigidTransform$1(out);
                  }
                }

                const DEFAULT_EMULATION_HEIGHT = 1.6;
                const PRIVATE$3 = Symbol('@@webxr-polyfill/XRReferenceSpace');
                const XRReferenceSpaceTypes = [
                  'viewer',
                  'local',
                  'local-floor',
                  'bounded-floor',
                  'unbounded'
                ];
                function isFloor(type) {
                  return type === 'bounded-floor' || type === 'local-floor';
                }
                class XRReferenceSpace extends XRSpace {
                  constructor(type, transform = null) {
                    if (!XRReferenceSpaceTypes.includes(type)) {
                      throw new Error(`XRReferenceSpaceType must be one of ${XRReferenceSpaceTypes}`);
                    }
                    super(type);
                    if (type === 'bounded-floor' && !transform) {
                      throw new Error(`XRReferenceSpace cannot use 'bounded-floor' type if the platform does not provide the floor level`);
                    }
                    if (isFloor(type) && !transform) {
                      transform = identity(new Float32Array(16));
                      transform[13] = DEFAULT_EMULATION_HEIGHT;
                    }
                    this._inverseBaseMatrix = transform || identity(new Float32Array(16));
                    this[PRIVATE$3] = {
                      type,
                      transform,
                      originOffset : identity(new Float32Array(16)),
                    };
                  }
                  _transformBasePoseMatrix(out, pose) {
                    multiply(out, this._inverseBaseMatrix, pose);
                  }
                  _originOffsetMatrix() {
                    return this[PRIVATE$3].originOffset;
                  }
                  _adjustForOriginOffset(transformMatrix) {
                    let inverseOriginOffsetMatrix = new Float32Array(16);
                    invert(inverseOriginOffsetMatrix, this[PRIVATE$3].originOffset);
                    multiply(transformMatrix, inverseOriginOffsetMatrix, transformMatrix);
                  }
                  _getSpaceRelativeTransform(space) {
                    let transform = super._getSpaceRelativeTransform(space);
                    this._adjustForOriginOffset(transform.matrix);
                    return new XRRigidTransform(transform.matrix);
                  }
                  getOffsetReferenceSpace(additionalOffset) {
                    let newSpace = new XRReferenceSpace(
                      this[PRIVATE$3].type,
                      this[PRIVATE$3].transform,
                      this[PRIVATE$3].bounds);
                    multiply(newSpace[PRIVATE$3].originOffset, this[PRIVATE$3].originOffset, additionalOffset.matrix);
                    return newSpace;
                  }
                }

                const PRIVATE$4 = Symbol('@@webxr-polyfill/XR');
                const XRSessionModes = ['inline', 'immersive-vr', 'immersive-ar'];
                const DEFAULT_SESSION_OPTIONS = {
                  'inline': {
                    requiredFeatures: ['viewer'],
                    optionalFeatures: [],
                  },
                  'immersive-vr': {
                    requiredFeatures: ['viewer', 'local'],
                    optionalFeatures: [],
                  },
                  'immersive-ar': {
                    requiredFeatures: ['viewer', 'local'],
                    optionalFeatures: [],
                  }
                };
                const POLYFILL_REQUEST_SESSION_ERROR =
`Polyfill Error: Must call navigator.xr.isSessionSupported() with any XRSessionMode
or navigator.xr.requestSession('inline') prior to requesting an immersive
session. This is a limitation specific to the WebXR Polyfill and does not apply
to native implementations of the API.`;
                class XRSystem extends EventTarget {
                  constructor(devicePromise) {
                    super();
                    this[PRIVATE$4] = {
                      device: null,
                      devicePromise,
                      immersiveSession: null,
                      inlineSessions: new Set(),
                    };
                    devicePromise.then((device) => { this[PRIVATE$4].device = device; });
                  }
                  async isSessionSupported(mode) {
                    if (!this[PRIVATE$4].device) {
                      await this[PRIVATE$4].devicePromise;
                    }
                    if (mode != 'inline') {
                      return Promise.resolve(this[PRIVATE$4].device.isSessionSupported(mode));
                    }
                    return Promise.resolve(true);
                  }
                  async requestSession(mode, options) {
                    if (!this[PRIVATE$4].device) {
                      if (mode != 'inline') {
                        throw new Error(POLYFILL_REQUEST_SESSION_ERROR);
                      } else {
                        await this[PRIVATE$4].devicePromise;
                      }
                    }
                    if (!XRSessionModes.includes(mode)) {
                      throw new TypeError(
                          `The provided value '${mode}' is not a valid enum value of type XRSessionMode`);
                    }
                    const defaultOptions = DEFAULT_SESSION_OPTIONS[mode];
                    const requiredFeatures = defaultOptions.requiredFeatures.concat(
                        options && options.requiredFeatures ? options.requiredFeatures : []);
                    const optionalFeatures = defaultOptions.optionalFeatures.concat(
                        options && options.optionalFeatures ? options.optionalFeatures : []);
                    const enabledFeatures = new Set();
                    let requirementsFailed = false;
                    for (let feature of requiredFeatures) {
                      if (!this[PRIVATE$4].device.isFeatureSupported(feature)) {
                        console.error(`The required feature '${feature}' is not supported`);
                        requirementsFailed = true;
                      } else {
                        enabledFeatures.add(feature);
                      }
                    }
                    if (requirementsFailed) {
                      throw new DOMException('Session does not support some required features', 'NotSupportedError');
                    }
                    for (let feature of optionalFeatures) {
                      if (!this[PRIVATE$4].device.isFeatureSupported(feature)) {
                        console.log(`The optional feature '${feature}' is not supported`);
                      } else {
                        enabledFeatures.add(feature);
                      }
                    }
                    const sessionId = await this[PRIVATE$4].device.requestSession(mode, enabledFeatures);
                    const session = new XRSession(this[PRIVATE$4].device, mode, sessionId);
                    if (mode == 'inline') {
                      this[PRIVATE$4].inlineSessions.add(session);
                    } else {
                      this[PRIVATE$4].immersiveSession = session;
                    }
                    const onSessionEnd = () => {
                      if (mode == 'inline') {
                        this[PRIVATE$4].inlineSessions.delete(session);
                      } else {
                        this[PRIVATE$4].immersiveSession = null;
                      }
                      session.removeEventListener('end', onSessionEnd);
                    };
                    session.addEventListener('end', onSessionEnd);
                    return session;
                  }
                }

                let now;
                if ('performance' in _global === false) {
                  let startTime = Date.now();
                  now = () => Date.now() - startTime;
                } else {
                  now = () => performance.now();
                }
                var now$1 = now;

                const PRIVATE$5 = Symbol('@@webxr-polyfill/XRPose');
                class XRPose$1 {
                  constructor(transform, emulatedPosition) {
                    this[PRIVATE$5] = {
                      transform,
                      emulatedPosition,
                    };
                  }
                  get transform() { return this[PRIVATE$5].transform; }
                  get emulatedPosition() { return this[PRIVATE$5].emulatedPosition; }
                }

                const PRIVATE$6 = Symbol('@@webxr-polyfill/XRViewerPose');
                class XRViewerPose extends XRPose$1 {
                  constructor(transform, views, emulatedPosition = false) {
                    super(transform, emulatedPosition);
                    this[PRIVATE$6] = {
                      views
                    };
                  }
                  get views() {
                    return this[PRIVATE$6].views;
                  }
                }

                const PRIVATE$7 = Symbol('@@webxr-polyfill/XRViewport');
                class XRViewport {
                  constructor(target) {
                    this[PRIVATE$7] = { target };
                  }
                  get x() { return this[PRIVATE$7].target.x; }
                  get y() { return this[PRIVATE$7].target.y; }
                  get width() { return this[PRIVATE$7].target.width; }
                  get height() { return this[PRIVATE$7].target.height; }
                }

                const XREyes = ['left', 'right', 'none'];
                const PRIVATE$8 = Symbol('@@webxr-polyfill/XRView');
                class XRView {
                  constructor(device, transform, eye, sessionId, viewIndex) {
                    if (!XREyes.includes(eye)) {
                      throw new Error(`XREye must be one of: ${XREyes}`);
                    }
                    const temp = Object.create(null);
                    const viewport = new XRViewport(temp);
                    this[PRIVATE$8] = {
                      device,
                      eye,
                      viewport,
                      temp,
                      sessionId,
                      transform,
                      viewIndex,
                    };
                  }
                  get eye() { return this[PRIVATE$8].eye; }
                  get projectionMatrix() {
                    return this[PRIVATE$8].device.getProjectionMatrix(this.eye, this[PRIVATE$8].viewIndex);
                  }
                  get transform() { return this[PRIVATE$8].transform; }
                  _getViewport(layer) {
                    if (this[PRIVATE$8].device.getViewport(this[PRIVATE$8].sessionId,
                                                           this.eye,
                                                           layer,
                                                           this[PRIVATE$8].temp,
                                                           this[PRIVATE$8].viewIndex)) {
                      return this[PRIVATE$8].viewport;
                    }
                    return undefined;
                  }
                }

                const PRIVATE$9 = Symbol('@@webxr-polyfill/XRFrame');
                const NON_ACTIVE_MSG = "XRFrame access outside the callback that produced it is invalid.";
                const NON_ANIMFRAME_MSG = "getViewerPose can only be called on XRFrame objects passed to XRSession.requestAnimationFrame callbacks.";
                let NEXT_FRAME_ID = 0;
                class XRFrame {
                  constructor(device, session, sessionId) {
                    this[PRIVATE$9] = {
                      id: ++NEXT_FRAME_ID,
                      active: false,
                      animationFrame: false,
                      device,
                      session,
                      sessionId
                    };
                  }
                  get session() { return this[PRIVATE$9].session; }
                  getViewerPose(referenceSpace) {
                    if (!this[PRIVATE$9].animationFrame) {
                      throw new DOMException(NON_ANIMFRAME_MSG, 'InvalidStateError');
                    }
                    if (!this[PRIVATE$9].active) {
                      throw new DOMException(NON_ACTIVE_MSG, 'InvalidStateError');
                    }
                    const device = this[PRIVATE$9].device;
                    const session = this[PRIVATE$9].session;
                    session[PRIVATE$e].viewerSpace._ensurePoseUpdated(device, this[PRIVATE$9].id);
                    referenceSpace._ensurePoseUpdated(device, this[PRIVATE$9].id);
                    let viewerTransform = referenceSpace._getSpaceRelativeTransform(session[PRIVATE$e].viewerSpace);
                    const views = [];
                    for (const viewSpace of session[PRIVATE$e].viewSpaces) {
                      viewSpace._ensurePoseUpdated(device, this[PRIVATE$9].id);
                      let viewTransform = referenceSpace._getSpaceRelativeTransform(viewSpace);
                      let view = new XRView(device, viewTransform, viewSpace.eye, this[PRIVATE$9].sessionId, viewSpace.viewIndex);
                      views.push(view);
                    }
                    let viewerPose = new XRViewerPose(viewerTransform, views, false                             );
                    return viewerPose;
                  }
                  getPose(space, baseSpace) {
                    if (!this[PRIVATE$9].active) {
                      throw new DOMException(NON_ACTIVE_MSG, 'InvalidStateError');
                    }
                    const device = this[PRIVATE$9].device;
                    if (space._specialType === "target-ray" || space._specialType === "grip") {
                      return device.getInputPose(
                        space._inputSource, baseSpace, space._specialType);
                    } else {
                      space._ensurePoseUpdated(device, this[PRIVATE$9].id);
                      baseSpace._ensurePoseUpdated(device, this[PRIVATE$9].id);
                      let transform = baseSpace._getSpaceRelativeTransform(space);
                      if (!transform) { return null; }
                      return new XRPose(transform, false                             );
                    }
                  }
                }

                const PRIVATE$a = Symbol('@@webxr-polyfill/XRRenderState');
                const XRRenderStateInit = Object.freeze({
                  depthNear: 0.1,
                  depthFar: 1000.0,
                  inlineVerticalFieldOfView: null,
                  baseLayer: null
                });
                class XRRenderState {
                  constructor(stateInit = {}) {
                    const config = Object.assign({}, XRRenderStateInit, stateInit);
                    this[PRIVATE$a] = { config };
                  }
                  get depthNear() { return this[PRIVATE$a].config.depthNear; }
                  get depthFar() { return this[PRIVATE$a].config.depthFar; }
                  get inlineVerticalFieldOfView() { return this[PRIVATE$a].config.inlineVerticalFieldOfView; }
                  get baseLayer() { return this[PRIVATE$a].config.baseLayer; }
                }

                const PRIVATE$b = Symbol('@@webxr-polyfill/XRInputSourceEvent');
                class XRInputSourceEvent extends Event {
                  constructor(type, eventInitDict) {
                    super(type, eventInitDict);
                    this[PRIVATE$b] = {
                      frame: eventInitDict.frame,
                      inputSource: eventInitDict.inputSource
                    };
                    Object.setPrototypeOf(this, XRInputSourceEvent.prototype);
                  }
                  get frame() { return this[PRIVATE$b].frame; }
                  get inputSource() { return this[PRIVATE$b].inputSource; }
                }

                const PRIVATE$c = Symbol('@@webxr-polyfill/XRSessionEvent');
                class XRSessionEvent extends Event {
                  constructor(type, eventInitDict) {
                    super(type, eventInitDict);
                    this[PRIVATE$c] = {
                      session: eventInitDict.session
                    };
                    Object.setPrototypeOf(this, XRSessionEvent.prototype);
                  }
                  get session() { return this[PRIVATE$c].session; }
                }

                const PRIVATE$d = Symbol('@@webxr-polyfill/XRInputSourcesChangeEvent');
                class XRInputSourcesChangeEvent extends Event {
                  constructor(type, eventInitDict) {
                    super(type, eventInitDict);
                    this[PRIVATE$d] = {
                      session: eventInitDict.session,
                      added: eventInitDict.added,
                      removed: eventInitDict.removed
                    };
                    Object.setPrototypeOf(this, XRInputSourcesChangeEvent.prototype);
                  }
                  get session() { return this[PRIVATE$d].session; }
                  get added() { return this[PRIVATE$d].added; }
                  get removed() { return this[PRIVATE$d].removed; }
                }

                const PRIVATE$e = Symbol('@@webxr-polyfill/XRSession');
                class XRViewSpace extends XRSpace {
                  constructor(eye) {
                    super(eye);
                  }
                  get eye() {
                    return this._specialType;
                  }
                  _onPoseUpdate(device) {
                    this._inverseBaseMatrix = device.getBaseViewMatrix(this._specialType);
                  }
                }
                class XRSession$1 extends EventTarget {
                  constructor(device, mode, id) {
                    super();
                    let immersive = mode != 'inline';
                    let initialRenderState = new XRRenderState({
                      inlineVerticalFieldOfView: immersive ? null : Math.PI * 0.5
                    });
                    const defaultViewSpaces = immersive ?
                      [new XRViewSpace('left'), new XRViewSpace('right')] :
                      [new XRViewSpace('none')];
                    Object.freeze(defaultViewSpaces);
                    this[PRIVATE$e] = {
                      device,
                      mode,
                      immersive,
                      ended: false,
                      suspended: false,
                      frameCallbacks: [],
                      currentFrameCallbacks: null,
                      frameHandle: 0,
                      deviceFrameHandle: null,
                      id,
                      activeRenderState: initialRenderState,
                      pendingRenderState: null,
                      viewerSpace: new XRReferenceSpace("viewer"),
                      get viewSpaces() { return device.getViewSpaces(mode) || defaultViewSpaces; },
                      currentInputSources: []
                    };
                    this[PRIVATE$e].onDeviceFrame = () => {
                      if (this[PRIVATE$e].ended || this[PRIVATE$e].suspended) {
                        return;
                      }
                      this[PRIVATE$e].deviceFrameHandle = null;
                      this[PRIVATE$e].startDeviceFrameLoop();
                      if (this[PRIVATE$e].pendingRenderState !== null) {
                        this[PRIVATE$e].activeRenderState = new XRRenderState(this[PRIVATE$e].pendingRenderState);
                        this[PRIVATE$e].pendingRenderState = null;
                        if (this[PRIVATE$e].activeRenderState.baseLayer) {
                          this[PRIVATE$e].device.onBaseLayerSet(
                            this[PRIVATE$e].id,
                            this[PRIVATE$e].activeRenderState.baseLayer);
                        }
                      }
                      if (this[PRIVATE$e].activeRenderState.baseLayer === null) {
                        return;
                      }
                      const frame = new XRFrame(device, this, this[PRIVATE$e].id);
                      const callbacks = this[PRIVATE$e].currentFrameCallbacks = this[PRIVATE$e].frameCallbacks;
                      this[PRIVATE$e].frameCallbacks = [];
                      frame[PRIVATE$9].active = true;
                      frame[PRIVATE$9].animationFrame = true;
                      this[PRIVATE$e].device.onFrameStart(this[PRIVATE$e].id, this[PRIVATE$e].activeRenderState);
                      this._checkInputSourcesChange();
                      const rightNow = now$1();
                      for (let i = 0; i < callbacks.length; i++) {
                        try {
                          if (!callbacks[i].cancelled && typeof callbacks[i].callback === 'function') {
                            callbacks[i].callback(rightNow, frame);
                          }
                        } catch(err) {
                          console.error(err);
                        }
                      }
                      this[PRIVATE$e].currentFrameCallbacks = null;
                      frame[PRIVATE$9].active = false;
                      this[PRIVATE$e].device.onFrameEnd(this[PRIVATE$e].id);
                    };
                    this[PRIVATE$e].startDeviceFrameLoop = () => {
                      if (this[PRIVATE$e].deviceFrameHandle === null) {
                        this[PRIVATE$e].deviceFrameHandle = this[PRIVATE$e].device.requestAnimationFrame(
                          this[PRIVATE$e].onDeviceFrame
                        );
                      }
                    };
                    this[PRIVATE$e].stopDeviceFrameLoop = () => {
                      const handle = this[PRIVATE$e].deviceFrameHandle;
                      if (handle !== null) {
                        this[PRIVATE$e].device.cancelAnimationFrame(handle);
                        this[PRIVATE$e].deviceFrameHandle = null;
                      }
                    };
                    this[PRIVATE$e].onPresentationEnd = sessionId => {
                      if (sessionId !== this[PRIVATE$e].id) {
                        this[PRIVATE$e].suspended = false;
                        this[PRIVATE$e].startDeviceFrameLoop();
                        this.dispatchEvent('focus', { session: this });
                        return;
                      }
                      this[PRIVATE$e].ended = true;
                      this[PRIVATE$e].stopDeviceFrameLoop();
                      device.removeEventListener('@@webxr-polyfill/vr-present-end', this[PRIVATE$e].onPresentationEnd);
                      device.removeEventListener('@@webxr-polyfill/vr-present-start', this[PRIVATE$e].onPresentationStart);
                      device.removeEventListener('@@webxr-polyfill/input-select-start', this[PRIVATE$e].onSelectStart);
                      device.removeEventListener('@@webxr-polyfill/input-select-end', this[PRIVATE$e].onSelectEnd);
                      this.dispatchEvent('end', new XRSessionEvent('end', { session: this }));
                    };
                    device.addEventListener('@@webxr-polyfill/vr-present-end', this[PRIVATE$e].onPresentationEnd);
                    this[PRIVATE$e].onPresentationStart = sessionId => {
                      if (sessionId === this[PRIVATE$e].id) {
                        return;
                      }
                      this[PRIVATE$e].suspended = true;
                      this[PRIVATE$e].stopDeviceFrameLoop();
                      this.dispatchEvent('blur', { session: this });
                    };
                    device.addEventListener('@@webxr-polyfill/vr-present-start', this[PRIVATE$e].onPresentationStart);
                    this[PRIVATE$e].onSelectStart = evt => {
                      if (evt.sessionId !== this[PRIVATE$e].id) {
                        return;
                      }
                      this[PRIVATE$e].dispatchInputSourceEvent('selectstart',  evt.inputSource);
                    };
                    device.addEventListener('@@webxr-polyfill/input-select-start', this[PRIVATE$e].onSelectStart);
                    this[PRIVATE$e].onSelectEnd = evt => {
                      if (evt.sessionId !== this[PRIVATE$e].id) {
                        return;
                      }
                      this[PRIVATE$e].dispatchInputSourceEvent('select',  evt.inputSource);
                      this[PRIVATE$e].dispatchInputSourceEvent('selectend',  evt.inputSource);
                    };
                    device.addEventListener('@@webxr-polyfill/input-select-end', this[PRIVATE$e].onSelectEnd);
                    this[PRIVATE$e].onSqueezeStart = evt => {
                      if (evt.sessionId !== this[PRIVATE$e].id) {
                        return;
                      }
                      this[PRIVATE$e].dispatchInputSourceEvent('squeezestart',  evt.inputSource);
                    };
                    device.addEventListener('@@webxr-polyfill/input-squeeze-start', this[PRIVATE$e].onSqueezeStart);
                    this[PRIVATE$e].onSqueezeEnd = evt => {
                      if (evt.sessionId !== this[PRIVATE$e].id) {
                        return;
                      }
                      this[PRIVATE$e].dispatchInputSourceEvent('squeezeend',  evt.inputSource);
                      this[PRIVATE$e].dispatchInputSourceEvent('squeeze',  evt.inputSource);
                    };
                    device.addEventListener('@@webxr-polyfill/input-squeeze-end', this[PRIVATE$e].onSqueezeEnd);
                    this[PRIVATE$e].dispatchInputSourceEvent = (type, inputSource) => {
                      const frame = new XRFrame(device, this, this[PRIVATE$e].id);
                      const event = new XRInputSourceEvent(type, { frame, inputSource });
                      frame[PRIVATE$9].active = true;
                      this.dispatchEvent(type, event);
                      frame[PRIVATE$9].active = false;
                    };
                    this[PRIVATE$e].startDeviceFrameLoop();
                    this.onblur = undefined;
                    this.onfocus = undefined;
                    this.onresetpose = undefined;
                    this.onend = undefined;
                    this.onselect = undefined;
                    this.onselectstart = undefined;
                    this.onselectend = undefined;
                  }
                  get renderState() { return this[PRIVATE$e].activeRenderState; }
                  get environmentBlendMode() {
                    return this[PRIVATE$e].device.environmentBlendMode || 'opaque';
                  }
                  async requestReferenceSpace(type) {
                    if (this[PRIVATE$e].ended) {
                      return;
                    }
                    if (!XRReferenceSpaceTypes.includes(type)) {
                      throw new TypeError(`XRReferenceSpaceType must be one of ${XRReferenceSpaceTypes}`);
                    }
                    if (!this[PRIVATE$e].device.doesSessionSupportReferenceSpace(this[PRIVATE$e].id, type)) {
                      throw new DOMException(`The ${type} reference space is not supported by this session.`, 'NotSupportedError');
                    }
                    if (type === 'viewer') {
                      return this[PRIVATE$e].viewerSpace;
                    }
                    let transform = await this[PRIVATE$e].device.requestFrameOfReferenceTransform(type);
                    if (type === 'bounded-floor') {
                      if (!transform) {
                        throw new DOMException(`${type} XRReferenceSpace not supported by this device.`, 'NotSupportedError');
                      }
                      let bounds = this[PRIVATE$e].device.requestStageBounds();
                      if (!bounds) {
                        throw new DOMException(`${type} XRReferenceSpace not supported by this device.`, 'NotSupportedError');
                      }
                      throw new DOMException(`The WebXR polyfill does not support the ${type} reference space yet.`, 'NotSupportedError');
                    }
                    return new XRReferenceSpace(type, transform);
                  }
                  requestAnimationFrame(callback) {
                    if (this[PRIVATE$e].ended) {
                      return;
                    }
                    const handle = ++this[PRIVATE$e].frameHandle;
                    this[PRIVATE$e].frameCallbacks.push({
                      handle,
                      callback,
                      cancelled: false
                    });
                    return handle;
                  }
                  cancelAnimationFrame(handle) {
                    let callbacks = this[PRIVATE$e].frameCallbacks;
                    let index = callbacks.findIndex(d => d && d.handle === handle);
                    if (index > -1) {
                      callbacks[index].cancelled = true;
                      callbacks.splice(index, 1);
                    }
                    callbacks = this[PRIVATE$e].currentFrameCallbacks;
                    if (callbacks) {
                      index = callbacks.findIndex(d => d && d.handle === handle);
                      if (index > -1) {
                        callbacks[index].cancelled = true;
                      }
                    }
                  }
                  get inputSources() {
                    return this[PRIVATE$e].device.getInputSources();
                  }
                  async end() {
                    if (this[PRIVATE$e].ended) {
                      return;
                    }
                    if (this[PRIVATE$e].immersive) {
                      this[PRIVATE$e].ended = true;
                      this[PRIVATE$e].device.removeEventListener('@@webxr-polyfill/vr-present-start',
                                                                 this[PRIVATE$e].onPresentationStart);
                      this[PRIVATE$e].device.removeEventListener('@@webxr-polyfill/vr-present-end',
                                                                 this[PRIVATE$e].onPresentationEnd);
                      this[PRIVATE$e].device.removeEventListener('@@webxr-polyfill/input-select-start',
                                                                 this[PRIVATE$e].onSelectStart);
                      this[PRIVATE$e].device.removeEventListener('@@webxr-polyfill/input-select-end',
                                                                 this[PRIVATE$e].onSelectEnd);
                      this.dispatchEvent('end', new XRSessionEvent('end', { session: this }));
                    }
                    this[PRIVATE$e].stopDeviceFrameLoop();
                    return this[PRIVATE$e].device.endSession(this[PRIVATE$e].id);
                  }
                  updateRenderState(newState) {
                    if (this[PRIVATE$e].ended) {
                      const message = "Can't call updateRenderState on an XRSession " +
                                      "that has already ended.";
                      throw new Error(message);
                    }
                    if (newState.baseLayer && (newState.baseLayer._session !== this)) {
                      const message = "Called updateRenderState with a base layer that was " +
                                      "created by a different session.";
                      throw new Error(message);
                    }
                    const fovSet = (newState.inlineVerticalFieldOfView !== null) &&
                                   (newState.inlineVerticalFieldOfView !== undefined);
                    if (fovSet) {
                      if (this[PRIVATE$e].immersive) {
                        const message = "inlineVerticalFieldOfView must not be set for an " +
                                        "XRRenderState passed to updateRenderState for an " +
                                        "immersive session.";
                        throw new Error(message);
                      } else {
                        newState.inlineVerticalFieldOfView = Math.min(
                          3.13, Math.max(0.01, newState.inlineVerticalFieldOfView));
                      }
                    }
                    if (this[PRIVATE$e].pendingRenderState === null) {
                      const activeRenderState = this[PRIVATE$e].activeRenderState;
                      this[PRIVATE$e].pendingRenderState = {
                        depthNear: activeRenderState.depthNear,
                        depthFar: activeRenderState.depthFar,
                        inlineVerticalFieldOfView: activeRenderState.inlineVerticalFieldOfView,
                        baseLayer: activeRenderState.baseLayer
                      };
                    }
                    Object.assign(this[PRIVATE$e].pendingRenderState, newState);
                  }
                  _checkInputSourcesChange() {
                    const added = [];
                    const removed = [];
                    const newInputSources = this.inputSources;
                    const oldInputSources = this[PRIVATE$e].currentInputSources;
                    for (const newInputSource of newInputSources) {
                      if (!oldInputSources.includes(newInputSource)) {
                        added.push(newInputSource);
                      }
                    }
                    for (const oldInputSource of oldInputSources) {
                      if (!newInputSources.includes(oldInputSource)) {
                        removed.push(oldInputSource);
                      }
                    }
                    if (added.length > 0 || removed.length > 0) {
                      this.dispatchEvent('inputsourceschange', new XRInputSourcesChangeEvent('inputsourceschange', {
                        session: this,
                        added: added,
                        removed: removed
                      }));
                    }
                    this[PRIVATE$e].currentInputSources.length = 0;
                    for (const newInputSource of newInputSources) {
                      this[PRIVATE$e].currentInputSources.push(newInputSource);
                    }
                  }
                }

                const PRIVATE$f = Symbol('@@webxr-polyfill/XRInputSource');
                class XRInputSource {
                  constructor(impl) {
                    this[PRIVATE$f] = {
                      impl,
                      gripSpace: new XRSpace("grip", this),
                      targetRaySpace: new XRSpace("target-ray", this)
                    };
                  }
                  get handedness() { return this[PRIVATE$f].impl.handedness; }
                  get targetRayMode() { return this[PRIVATE$f].impl.targetRayMode; }
                  get gripSpace() {
                    let mode = this[PRIVATE$f].impl.targetRayMode;
                    if (mode === "gaze" || mode === "screen") {
                      return null;
                    }
                    return this[PRIVATE$f].gripSpace;
                  }
                  get targetRaySpace() { return this[PRIVATE$f].targetRaySpace; }
                  get profiles() { return this[PRIVATE$f].impl.profiles; }
                  get gamepad() { return this[PRIVATE$f].impl.gamepad; }
                }

                const POLYFILLED_XR_COMPATIBLE = Symbol('@@webxr-polyfill/polyfilled-xr-compatible');
                const XR_COMPATIBLE = Symbol('@@webxr-polyfill/xr-compatible');

                const PRIVATE$g = Symbol('@@webxr-polyfill/XRWebGLLayer');
                const XRWebGLLayerInit = Object.freeze({
                  antialias: true,
                  depth: true,
                  stencil: false,
                  alpha: true,
                  multiview: false,
                  ignoreDepthValues: false,
                  framebufferScaleFactor: 1.0,
                });
                class XRWebGLLayer$1 {
                  constructor(session, context, layerInit={}) {
                    const config = Object.assign({}, XRWebGLLayerInit, layerInit);
                    if (!(session instanceof XRSession$1)) {
                      throw new Error('session must be a XRSession');
                    }
                    if (session.ended) {
                      throw new Error(`InvalidStateError`);
                    }
                    if (context[POLYFILLED_XR_COMPATIBLE]) {
                      if (context[XR_COMPATIBLE] !== true) {
                        throw new Error(`InvalidStateError`);
                      }
                    }
                    this[PRIVATE$g] = {
                      context,
                      config,
                      session,
                    };
                  }
                  get context() { return this[PRIVATE$g].context; }
                  get antialias() { return this[PRIVATE$g].config.antialias; }
                  get ignoreDepthValues() { return true; }
                  get framebuffer() {
                    return null;
                  }
                  get framebufferWidth() { return this[PRIVATE$g].context.drawingBufferWidth; }
                  get framebufferHeight() { return this[PRIVATE$g].context.drawingBufferHeight; }
                  get _session() { return this[PRIVATE$g].session; }
                  getViewport(view) {
                    return view._getViewport(this);
                  }
                  static getNativeFramebufferScaleFactor(session) {
                    if (!session) {
                      throw new TypeError('getNativeFramebufferScaleFactor must be passed a session.')
                    }
                    if (session[PRIVATE$e].ended) { return 0.0; }
                    return 1.0;
                  }
                }

                const PRIVATE$h = Symbol('@@webxr-polyfill/XRReferenceSpaceEvent');
                class XRReferenceSpaceEvent extends Event {
                  constructor(type, eventInitDict) {
                    super(type, eventInitDict);
                    this[PRIVATE$h] = {
                      referenceSpace: eventInitDict.referenceSpace,
                      transform: eventInitDict.transform || null
                    };
                    Object.setPrototypeOf(this, XRReferenceSpaceEvent.prototype);
                  }
                  get referenceSpace() { return this[PRIVATE$h].referenceSpace; }
                  get transform() { return this[PRIVATE$h].transform; }
                }

                var API = {
                  XRSystem,
                  XRSession: XRSession$1,
                  XRSessionEvent,
                  XRFrame,
                  XRView,
                  XRViewport,
                  XRViewerPose,
                  XRWebGLLayer: XRWebGLLayer$1,
                  XRSpace,
                  XRReferenceSpace,
                  XRReferenceSpaceEvent,
                  XRInputSource,
                  XRInputSourceEvent,
                  XRInputSourcesChangeEvent,
                  XRRenderState,
                  XRRigidTransform: XRRigidTransform$1,
                  XRPose: XRPose$1,
                };

                const polyfillMakeXRCompatible = Context => {
                  if (typeof Context.prototype.makeXRCompatible === 'function') {
                    return false;
                  }
                  Context.prototype.makeXRCompatible = function () {
                    this[XR_COMPATIBLE] = true;
                    return Promise.resolve();
                  };
                  return true;
                };
                const polyfillGetContext = (Canvas) => {
                  const getContext = Canvas.prototype.getContext;
                  Canvas.prototype.getContext = function (contextType, glAttribs) {
                    const ctx = getContext.call(this, contextType, glAttribs);
                    if (ctx) {
                      ctx[POLYFILLED_XR_COMPATIBLE] = true;
                      if (glAttribs && ('xrCompatible' in glAttribs)) {
                        ctx[XR_COMPATIBLE] = glAttribs.xrCompatible;
                      }
                    }
                    return ctx;
                  };
                };

                const isImageBitmapSupported = global =>
                  !!(global.ImageBitmapRenderingContext &&
                     global.createImageBitmap);
                const isMobile = global => {
                  var check = false;
                  (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4)))check = true;})(global.navigator.userAgent||global.navigator.vendor||global.opera);
                  return check;
                };
                const applyCanvasStylesForMinimalRendering = canvas => {
                  canvas.style.display = 'block';
                  canvas.style.position = 'absolute';
                  canvas.style.width = canvas.style.height = '1px';
                  canvas.style.top = canvas.style.left = '0px';
                };

                var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

                function unwrapExports (x) {
                	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
                }

                function createCommonjsModule(fn, module) {
                	return module = { exports: {} }, fn(module, module.exports), module.exports;
                }

                var cardboardVrDisplay = createCommonjsModule(function (module, exports) {
                (function (global, factory) {
                	 module.exports = factory() ;
                }(commonjsGlobal, (function () {var classCallCheck = function (instance, Constructor) {
                  if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                  }
                };
                var createClass = function () {
                  function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                      var descriptor = props[i];
                      descriptor.enumerable = descriptor.enumerable || false;
                      descriptor.configurable = true;
                      if ("value" in descriptor) descriptor.writable = true;
                      Object.defineProperty(target, descriptor.key, descriptor);
                    }
                  }
                  return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                  };
                }();
                var slicedToArray = function () {
                  function sliceIterator(arr, i) {
                    var _arr = [];
                    var _n = true;
                    var _d = false;
                    var _e = undefined;
                    try {
                      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                        _arr.push(_s.value);
                        if (i && _arr.length === i) break;
                      }
                    } catch (err) {
                      _d = true;
                      _e = err;
                    } finally {
                      try {
                        if (!_n && _i["return"]) _i["return"]();
                      } finally {
                        if (_d) throw _e;
                      }
                    }
                    return _arr;
                  }
                  return function (arr, i) {
                    if (Array.isArray(arr)) {
                      return arr;
                    } else if (Symbol.iterator in Object(arr)) {
                      return sliceIterator(arr, i);
                    } else {
                      throw new TypeError("Invalid attempt to destructure non-iterable instance");
                    }
                  };
                }();
                var MIN_TIMESTEP = 0.001;
                var MAX_TIMESTEP = 1;
                var dataUri = function dataUri(mimeType, svg) {
                  return 'data:' + mimeType + ',' + encodeURIComponent(svg);
                };
                var lerp = function lerp(a, b, t) {
                  return a + (b - a) * t;
                };
                var isIOS = function () {
                  var isIOS = /iPad|iPhone|iPod/.test(navigator.platform);
                  return function () {
                    return isIOS;
                  };
                }();
                var isWebViewAndroid = function () {
                  var isWebViewAndroid = navigator.userAgent.indexOf('Version') !== -1 && navigator.userAgent.indexOf('Android') !== -1 && navigator.userAgent.indexOf('Chrome') !== -1;
                  return function () {
                    return isWebViewAndroid;
                  };
                }();
                var isSafari = function () {
                  var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
                  return function () {
                    return isSafari;
                  };
                }();
                var isFirefoxAndroid = function () {
                  var isFirefoxAndroid = navigator.userAgent.indexOf('Firefox') !== -1 && navigator.userAgent.indexOf('Android') !== -1;
                  return function () {
                    return isFirefoxAndroid;
                  };
                }();
                var getChromeVersion = function () {
                  var match = navigator.userAgent.match(/.*Chrome\/([0-9]+)/);
                  var value = match ? parseInt(match[1], 10) : null;
                  return function () {
                    return value;
                  };
                }();
                var isSafariWithoutDeviceMotion = function () {
                  var value = false;
                  value = isIOS() && isSafari() && navigator.userAgent.indexOf('13_4') !== -1;
                  return function () {
                    return value;
                  };
                }();
                var isChromeWithoutDeviceMotion = function () {
                  var value = false;
                  if (getChromeVersion() === 65) {
                    var match = navigator.userAgent.match(/.*Chrome\/([0-9\.]*)/);
                    if (match) {
                      var _match$1$split = match[1].split('.'),
                          _match$1$split2 = slicedToArray(_match$1$split, 4),
                          major = _match$1$split2[0],
                          minor = _match$1$split2[1],
                          branch = _match$1$split2[2],
                          build = _match$1$split2[3];
                      value = parseInt(branch, 10) === 3325 && parseInt(build, 10) < 148;
                    }
                  }
                  return function () {
                    return value;
                  };
                }();
                var isR7 = function () {
                  var isR7 = navigator.userAgent.indexOf('R7 Build') !== -1;
                  return function () {
                    return isR7;
                  };
                }();
                var isLandscapeMode = function isLandscapeMode() {
                  var rtn = window.orientation == 90 || window.orientation == -90;
                  return isR7() ? !rtn : rtn;
                };
                var isTimestampDeltaValid = function isTimestampDeltaValid(timestampDeltaS) {
                  if (isNaN(timestampDeltaS)) {
                    return false;
                  }
                  if (timestampDeltaS <= MIN_TIMESTEP) {
                    return false;
                  }
                  if (timestampDeltaS > MAX_TIMESTEP) {
                    return false;
                  }
                  return true;
                };
                var getScreenWidth = function getScreenWidth() {
                  return Math.max(window.screen.width, window.screen.height) * window.devicePixelRatio;
                };
                var getScreenHeight = function getScreenHeight() {
                  return Math.min(window.screen.width, window.screen.height) * window.devicePixelRatio;
                };
                var requestFullscreen = function requestFullscreen(element) {
                  if (isWebViewAndroid()) {
                    return false;
                  }
                  if (element.requestFullscreen) {
                    element.requestFullscreen();
                  } else if (element.webkitRequestFullscreen) {
                    element.webkitRequestFullscreen();
                  } else if (element.mozRequestFullScreen) {
                    element.mozRequestFullScreen();
                  } else if (element.msRequestFullscreen) {
                    element.msRequestFullscreen();
                  } else {
                    return false;
                  }
                  return true;
                };
                var exitFullscreen = function exitFullscreen() {
                  if (document.exitFullscreen) {
                    document.exitFullscreen();
                  } else if (document.webkitExitFullscreen) {
                    document.webkitExitFullscreen();
                  } else if (document.mozCancelFullScreen) {
                    document.mozCancelFullScreen();
                  } else if (document.msExitFullscreen) {
                    document.msExitFullscreen();
                  } else {
                    return false;
                  }
                  return true;
                };
                var getFullscreenElement = function getFullscreenElement() {
                  return document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement;
                };
                var linkProgram = function linkProgram(gl, vertexSource, fragmentSource, attribLocationMap) {
                  var vertexShader = gl.createShader(gl.VERTEX_SHADER);
                  gl.shaderSource(vertexShader, vertexSource);
                  gl.compileShader(vertexShader);
                  var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
                  gl.shaderSource(fragmentShader, fragmentSource);
                  gl.compileShader(fragmentShader);
                  var program = gl.createProgram();
                  gl.attachShader(program, vertexShader);
                  gl.attachShader(program, fragmentShader);
                  for (var attribName in attribLocationMap) {
                    gl.bindAttribLocation(program, attribLocationMap[attribName], attribName);
                  }gl.linkProgram(program);
                  gl.deleteShader(vertexShader);
                  gl.deleteShader(fragmentShader);
                  return program;
                };
                var getProgramUniforms = function getProgramUniforms(gl, program) {
                  var uniforms = {};
                  var uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
                  var uniformName = '';
                  for (var i = 0; i < uniformCount; i++) {
                    var uniformInfo = gl.getActiveUniform(program, i);
                    uniformName = uniformInfo.name.replace('[0]', '');
                    uniforms[uniformName] = gl.getUniformLocation(program, uniformName);
                  }
                  return uniforms;
                };
                var orthoMatrix = function orthoMatrix(out, left, right, bottom, top, near, far) {
                  var lr = 1 / (left - right),
                      bt = 1 / (bottom - top),
                      nf = 1 / (near - far);
                  out[0] = -2 * lr;
                  out[1] = 0;
                  out[2] = 0;
                  out[3] = 0;
                  out[4] = 0;
                  out[5] = -2 * bt;
                  out[6] = 0;
                  out[7] = 0;
                  out[8] = 0;
                  out[9] = 0;
                  out[10] = 2 * nf;
                  out[11] = 0;
                  out[12] = (left + right) * lr;
                  out[13] = (top + bottom) * bt;
                  out[14] = (far + near) * nf;
                  out[15] = 1;
                  return out;
                };
                var isMobile = function isMobile() {
                  var check = false;
                  (function (a) {
                    if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true;
                  })(navigator.userAgent || navigator.vendor || window.opera);
                  return check;
                };
                var extend = function extend(dest, src) {
                  for (var key in src) {
                    if (src.hasOwnProperty(key)) {
                      dest[key] = src[key];
                    }
                  }
                  return dest;
                };
                var safariCssSizeWorkaround = function safariCssSizeWorkaround(canvas) {
                  if (isIOS()) {
                    var width = canvas.style.width;
                    var height = canvas.style.height;
                    canvas.style.width = parseInt(width) + 1 + 'px';
                    canvas.style.height = parseInt(height) + 'px';
                    setTimeout(function () {
                      canvas.style.width = width;
                      canvas.style.height = height;
                    }, 100);
                  }
                  window.canvas = canvas;
                };
                var frameDataFromPose = function () {
                  var piOver180 = Math.PI / 180.0;
                  var rad45 = Math.PI * 0.25;
                  function mat4_perspectiveFromFieldOfView(out, fov, near, far) {
                    var upTan = Math.tan(fov ? fov.upDegrees * piOver180 : rad45),
                        downTan = Math.tan(fov ? fov.downDegrees * piOver180 : rad45),
                        leftTan = Math.tan(fov ? fov.leftDegrees * piOver180 : rad45),
                        rightTan = Math.tan(fov ? fov.rightDegrees * piOver180 : rad45),
                        xScale = 2.0 / (leftTan + rightTan),
                        yScale = 2.0 / (upTan + downTan);
                    out[0] = xScale;
                    out[1] = 0.0;
                    out[2] = 0.0;
                    out[3] = 0.0;
                    out[4] = 0.0;
                    out[5] = yScale;
                    out[6] = 0.0;
                    out[7] = 0.0;
                    out[8] = -((leftTan - rightTan) * xScale * 0.5);
                    out[9] = (upTan - downTan) * yScale * 0.5;
                    out[10] = far / (near - far);
                    out[11] = -1.0;
                    out[12] = 0.0;
                    out[13] = 0.0;
                    out[14] = far * near / (near - far);
                    out[15] = 0.0;
                    return out;
                  }
                  function mat4_fromRotationTranslation(out, q, v) {
                    var x = q[0],
                        y = q[1],
                        z = q[2],
                        w = q[3],
                        x2 = x + x,
                        y2 = y + y,
                        z2 = z + z,
                        xx = x * x2,
                        xy = x * y2,
                        xz = x * z2,
                        yy = y * y2,
                        yz = y * z2,
                        zz = z * z2,
                        wx = w * x2,
                        wy = w * y2,
                        wz = w * z2;
                    out[0] = 1 - (yy + zz);
                    out[1] = xy + wz;
                    out[2] = xz - wy;
                    out[3] = 0;
                    out[4] = xy - wz;
                    out[5] = 1 - (xx + zz);
                    out[6] = yz + wx;
                    out[7] = 0;
                    out[8] = xz + wy;
                    out[9] = yz - wx;
                    out[10] = 1 - (xx + yy);
                    out[11] = 0;
                    out[12] = v[0];
                    out[13] = v[1];
                    out[14] = v[2];
                    out[15] = 1;
                    return out;
                  }
                  function mat4_translate(out, a, v) {
                    var x = v[0],
                        y = v[1],
                        z = v[2],
                        a00,
                        a01,
                        a02,
                        a03,
                        a10,
                        a11,
                        a12,
                        a13,
                        a20,
                        a21,
                        a22,
                        a23;
                    if (a === out) {
                      out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
                      out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
                      out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
                      out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
                    } else {
                      a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];
                      a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];
                      a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];
                      out[0] = a00;out[1] = a01;out[2] = a02;out[3] = a03;
                      out[4] = a10;out[5] = a11;out[6] = a12;out[7] = a13;
                      out[8] = a20;out[9] = a21;out[10] = a22;out[11] = a23;
                      out[12] = a00 * x + a10 * y + a20 * z + a[12];
                      out[13] = a01 * x + a11 * y + a21 * z + a[13];
                      out[14] = a02 * x + a12 * y + a22 * z + a[14];
                      out[15] = a03 * x + a13 * y + a23 * z + a[15];
                    }
                    return out;
                  }
                  function mat4_invert(out, a) {
                    var a00 = a[0],
                        a01 = a[1],
                        a02 = a[2],
                        a03 = a[3],
                        a10 = a[4],
                        a11 = a[5],
                        a12 = a[6],
                        a13 = a[7],
                        a20 = a[8],
                        a21 = a[9],
                        a22 = a[10],
                        a23 = a[11],
                        a30 = a[12],
                        a31 = a[13],
                        a32 = a[14],
                        a33 = a[15],
                        b00 = a00 * a11 - a01 * a10,
                        b01 = a00 * a12 - a02 * a10,
                        b02 = a00 * a13 - a03 * a10,
                        b03 = a01 * a12 - a02 * a11,
                        b04 = a01 * a13 - a03 * a11,
                        b05 = a02 * a13 - a03 * a12,
                        b06 = a20 * a31 - a21 * a30,
                        b07 = a20 * a32 - a22 * a30,
                        b08 = a20 * a33 - a23 * a30,
                        b09 = a21 * a32 - a22 * a31,
                        b10 = a21 * a33 - a23 * a31,
                        b11 = a22 * a33 - a23 * a32,
                    det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
                    if (!det) {
                      return null;
                    }
                    det = 1.0 / det;
                    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
                    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
                    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
                    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
                    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
                    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
                    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
                    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
                    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
                    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
                    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
                    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
                    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
                    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
                    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
                    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
                    return out;
                  }
                  var defaultOrientation = new Float32Array([0, 0, 0, 1]);
                  var defaultPosition = new Float32Array([0, 0, 0]);
                  function updateEyeMatrices(projection, view, pose, fov, offset, vrDisplay) {
                    mat4_perspectiveFromFieldOfView(projection, fov || null, vrDisplay.depthNear, vrDisplay.depthFar);
                    var orientation = pose.orientation || defaultOrientation;
                    var position = pose.position || defaultPosition;
                    mat4_fromRotationTranslation(view, orientation, position);
                    if (offset) mat4_translate(view, view, offset);
                    mat4_invert(view, view);
                  }
                  return function (frameData, pose, vrDisplay) {
                    if (!frameData || !pose) return false;
                    frameData.pose = pose;
                    frameData.timestamp = pose.timestamp;
                    updateEyeMatrices(frameData.leftProjectionMatrix, frameData.leftViewMatrix, pose, vrDisplay._getFieldOfView("left"), vrDisplay._getEyeOffset("left"), vrDisplay);
                    updateEyeMatrices(frameData.rightProjectionMatrix, frameData.rightViewMatrix, pose, vrDisplay._getFieldOfView("right"), vrDisplay._getEyeOffset("right"), vrDisplay);
                    return true;
                  };
                }();
                var isInsideCrossOriginIFrame = function isInsideCrossOriginIFrame() {
                  var isFramed = window.self !== window.top;
                  var refOrigin = getOriginFromUrl(document.referrer);
                  var thisOrigin = getOriginFromUrl(window.location.href);
                  return isFramed && refOrigin !== thisOrigin;
                };
                var getOriginFromUrl = function getOriginFromUrl(url) {
                  var domainIdx;
                  var protoSepIdx = url.indexOf("://");
                  if (protoSepIdx !== -1) {
                    domainIdx = protoSepIdx + 3;
                  } else {
                    domainIdx = 0;
                  }
                  var domainEndIdx = url.indexOf('/', domainIdx);
                  if (domainEndIdx === -1) {
                    domainEndIdx = url.length;
                  }
                  return url.substring(0, domainEndIdx);
                };
                var getQuaternionAngle = function getQuaternionAngle(quat) {
                  if (quat.w > 1) {
                    console.warn('getQuaternionAngle: w > 1');
                    return 0;
                  }
                  var angle = 2 * Math.acos(quat.w);
                  return angle;
                };
                var warnOnce = function () {
                  var observedWarnings = {};
                  return function (key, message) {
                    if (observedWarnings[key] === undefined) {
                      console.warn('webvr-polyfill: ' + message);
                      observedWarnings[key] = true;
                    }
                  };
                }();
                var deprecateWarning = function deprecateWarning(deprecated, suggested) {
                  var alternative = suggested ? 'Please use ' + suggested + ' instead.' : '';
                  warnOnce(deprecated, deprecated + ' has been deprecated. ' + 'This may not work on native WebVR displays. ' + alternative);
                };
                function WGLUPreserveGLState(gl, bindings, callback) {
                  if (!bindings) {
                    callback(gl);
                    return;
                  }
                  var boundValues = [];
                  var activeTexture = null;
                  for (var i = 0; i < bindings.length; ++i) {
                    var binding = bindings[i];
                    switch (binding) {
                      case gl.TEXTURE_BINDING_2D:
                      case gl.TEXTURE_BINDING_CUBE_MAP:
                        var textureUnit = bindings[++i];
                        if (textureUnit < gl.TEXTURE0 || textureUnit > gl.TEXTURE31) {
                          console.error("TEXTURE_BINDING_2D or TEXTURE_BINDING_CUBE_MAP must be followed by a valid texture unit");
                          boundValues.push(null, null);
                          break;
                        }
                        if (!activeTexture) {
                          activeTexture = gl.getParameter(gl.ACTIVE_TEXTURE);
                        }
                        gl.activeTexture(textureUnit);
                        boundValues.push(gl.getParameter(binding), null);
                        break;
                      case gl.ACTIVE_TEXTURE:
                        activeTexture = gl.getParameter(gl.ACTIVE_TEXTURE);
                        boundValues.push(null);
                        break;
                      default:
                        boundValues.push(gl.getParameter(binding));
                        break;
                    }
                  }
                  callback(gl);
                  for (var i = 0; i < bindings.length; ++i) {
                    var binding = bindings[i];
                    var boundValue = boundValues[i];
                    switch (binding) {
                      case gl.ACTIVE_TEXTURE:
                        break;
                      case gl.ARRAY_BUFFER_BINDING:
                        gl.bindBuffer(gl.ARRAY_BUFFER, boundValue);
                        break;
                      case gl.COLOR_CLEAR_VALUE:
                        gl.clearColor(boundValue[0], boundValue[1], boundValue[2], boundValue[3]);
                        break;
                      case gl.COLOR_WRITEMASK:
                        gl.colorMask(boundValue[0], boundValue[1], boundValue[2], boundValue[3]);
                        break;
                      case gl.CURRENT_PROGRAM:
                        gl.useProgram(boundValue);
                        break;
                      case gl.ELEMENT_ARRAY_BUFFER_BINDING:
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, boundValue);
                        break;
                      case gl.FRAMEBUFFER_BINDING:
                        gl.bindFramebuffer(gl.FRAMEBUFFER, boundValue);
                        break;
                      case gl.RENDERBUFFER_BINDING:
                        gl.bindRenderbuffer(gl.RENDERBUFFER, boundValue);
                        break;
                      case gl.TEXTURE_BINDING_2D:
                        var textureUnit = bindings[++i];
                        if (textureUnit < gl.TEXTURE0 || textureUnit > gl.TEXTURE31)
                          break;
                        gl.activeTexture(textureUnit);
                        gl.bindTexture(gl.TEXTURE_2D, boundValue);
                        break;
                      case gl.TEXTURE_BINDING_CUBE_MAP:
                        var textureUnit = bindings[++i];
                        if (textureUnit < gl.TEXTURE0 || textureUnit > gl.TEXTURE31)
                          break;
                        gl.activeTexture(textureUnit);
                        gl.bindTexture(gl.TEXTURE_CUBE_MAP, boundValue);
                        break;
                      case gl.VIEWPORT:
                        gl.viewport(boundValue[0], boundValue[1], boundValue[2], boundValue[3]);
                        break;
                      case gl.BLEND:
                      case gl.CULL_FACE:
                      case gl.DEPTH_TEST:
                      case gl.SCISSOR_TEST:
                      case gl.STENCIL_TEST:
                        if (boundValue) {
                          gl.enable(binding);
                        } else {
                          gl.disable(binding);
                        }
                        break;
                      default:
                        console.log("No GL restore behavior for 0x" + binding.toString(16));
                        break;
                    }
                    if (activeTexture) {
                      gl.activeTexture(activeTexture);
                    }
                  }
                }
                var glPreserveState = WGLUPreserveGLState;
                var distortionVS = ['attribute vec2 position;', 'attribute vec3 texCoord;', 'varying vec2 vTexCoord;', 'uniform vec4 viewportOffsetScale[2];', 'void main() {', '  vec4 viewport = viewportOffsetScale[int(texCoord.z)];', '  vTexCoord = (texCoord.xy * viewport.zw) + viewport.xy;', '  gl_Position = vec4( position, 1.0, 1.0 );', '}'].join('\n');
                var distortionFS = ['precision mediump float;', 'uniform sampler2D diffuse;', 'varying vec2 vTexCoord;', 'void main() {', '  gl_FragColor = texture2D(diffuse, vTexCoord);', '}'].join('\n');
                function CardboardDistorter(gl, cardboardUI, bufferScale, dirtySubmitFrameBindings) {
                  this.gl = gl;
                  this.cardboardUI = cardboardUI;
                  this.bufferScale = bufferScale;
                  this.dirtySubmitFrameBindings = dirtySubmitFrameBindings;
                  this.ctxAttribs = gl.getContextAttributes();
                  this.instanceExt = gl.getExtension('ANGLE_instanced_arrays');
                  this.meshWidth = 20;
                  this.meshHeight = 20;
                  this.bufferWidth = gl.drawingBufferWidth;
                  this.bufferHeight = gl.drawingBufferHeight;
                  this.realBindFramebuffer = gl.bindFramebuffer;
                  this.realEnable = gl.enable;
                  this.realDisable = gl.disable;
                  this.realColorMask = gl.colorMask;
                  this.realClearColor = gl.clearColor;
                  this.realViewport = gl.viewport;
                  if (!isIOS()) {
                    this.realCanvasWidth = Object.getOwnPropertyDescriptor(gl.canvas.__proto__, 'width');
                    this.realCanvasHeight = Object.getOwnPropertyDescriptor(gl.canvas.__proto__, 'height');
                  }
                  this.isPatched = false;
                  this.lastBoundFramebuffer = null;
                  this.cullFace = false;
                  this.depthTest = false;
                  this.blend = false;
                  this.scissorTest = false;
                  this.stencilTest = false;
                  this.viewport = [0, 0, 0, 0];
                  this.colorMask = [true, true, true, true];
                  this.clearColor = [0, 0, 0, 0];
                  this.attribs = {
                    position: 0,
                    texCoord: 1
                  };
                  this.program = linkProgram(gl, distortionVS, distortionFS, this.attribs);
                  this.uniforms = getProgramUniforms(gl, this.program);
                  this.viewportOffsetScale = new Float32Array(8);
                  this.setTextureBounds();
                  this.vertexBuffer = gl.createBuffer();
                  this.indexBuffer = gl.createBuffer();
                  this.indexCount = 0;
                  this.renderTarget = gl.createTexture();
                  this.framebuffer = gl.createFramebuffer();
                  this.depthStencilBuffer = null;
                  this.depthBuffer = null;
                  this.stencilBuffer = null;
                  if (this.ctxAttribs.depth && this.ctxAttribs.stencil) {
                    this.depthStencilBuffer = gl.createRenderbuffer();
                  } else if (this.ctxAttribs.depth) {
                    this.depthBuffer = gl.createRenderbuffer();
                  } else if (this.ctxAttribs.stencil) {
                    this.stencilBuffer = gl.createRenderbuffer();
                  }
                  this.patch();
                  this.onResize();
                }
                CardboardDistorter.prototype.destroy = function () {
                  var gl = this.gl;
                  this.unpatch();
                  gl.deleteProgram(this.program);
                  gl.deleteBuffer(this.vertexBuffer);
                  gl.deleteBuffer(this.indexBuffer);
                  gl.deleteTexture(this.renderTarget);
                  gl.deleteFramebuffer(this.framebuffer);
                  if (this.depthStencilBuffer) {
                    gl.deleteRenderbuffer(this.depthStencilBuffer);
                  }
                  if (this.depthBuffer) {
                    gl.deleteRenderbuffer(this.depthBuffer);
                  }
                  if (this.stencilBuffer) {
                    gl.deleteRenderbuffer(this.stencilBuffer);
                  }
                  if (this.cardboardUI) {
                    this.cardboardUI.destroy();
                  }
                };
                CardboardDistorter.prototype.onResize = function () {
                  var gl = this.gl;
                  var self = this;
                  var glState = [gl.RENDERBUFFER_BINDING, gl.TEXTURE_BINDING_2D, gl.TEXTURE0];
                  glPreserveState(gl, glState, function (gl) {
                    self.realBindFramebuffer.call(gl, gl.FRAMEBUFFER, null);
                    if (self.scissorTest) {
                      self.realDisable.call(gl, gl.SCISSOR_TEST);
                    }
                    self.realColorMask.call(gl, true, true, true, true);
                    self.realViewport.call(gl, 0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
                    self.realClearColor.call(gl, 0, 0, 0, 1);
                    gl.clear(gl.COLOR_BUFFER_BIT);
                    self.realBindFramebuffer.call(gl, gl.FRAMEBUFFER, self.framebuffer);
                    gl.bindTexture(gl.TEXTURE_2D, self.renderTarget);
                    gl.texImage2D(gl.TEXTURE_2D, 0, self.ctxAttribs.alpha ? gl.RGBA : gl.RGB, self.bufferWidth, self.bufferHeight, 0, self.ctxAttribs.alpha ? gl.RGBA : gl.RGB, gl.UNSIGNED_BYTE, null);
                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
                    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, self.renderTarget, 0);
                    if (self.ctxAttribs.depth && self.ctxAttribs.stencil) {
                      gl.bindRenderbuffer(gl.RENDERBUFFER, self.depthStencilBuffer);
                      gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, self.bufferWidth, self.bufferHeight);
                      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, self.depthStencilBuffer);
                    } else if (self.ctxAttribs.depth) {
                      gl.bindRenderbuffer(gl.RENDERBUFFER, self.depthBuffer);
                      gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, self.bufferWidth, self.bufferHeight);
                      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, self.depthBuffer);
                    } else if (self.ctxAttribs.stencil) {
                      gl.bindRenderbuffer(gl.RENDERBUFFER, self.stencilBuffer);
                      gl.renderbufferStorage(gl.RENDERBUFFER, gl.STENCIL_INDEX8, self.bufferWidth, self.bufferHeight);
                      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, self.stencilBuffer);
                    }
                    if (!gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE) {
                      console.error('Framebuffer incomplete!');
                    }
                    self.realBindFramebuffer.call(gl, gl.FRAMEBUFFER, self.lastBoundFramebuffer);
                    if (self.scissorTest) {
                      self.realEnable.call(gl, gl.SCISSOR_TEST);
                    }
                    self.realColorMask.apply(gl, self.colorMask);
                    self.realViewport.apply(gl, self.viewport);
                    self.realClearColor.apply(gl, self.clearColor);
                  });
                  if (this.cardboardUI) {
                    this.cardboardUI.onResize();
                  }
                };
                CardboardDistorter.prototype.patch = function () {
                  if (this.isPatched) {
                    return;
                  }
                  var self = this;
                  var canvas = this.gl.canvas;
                  var gl = this.gl;
                  if (!isIOS()) {
                    canvas.width = getScreenWidth() * this.bufferScale;
                    canvas.height = getScreenHeight() * this.bufferScale;
                    Object.defineProperty(canvas, 'width', {
                      configurable: true,
                      enumerable: true,
                      get: function get() {
                        return self.bufferWidth;
                      },
                      set: function set(value) {
                        self.bufferWidth = value;
                        self.realCanvasWidth.set.call(canvas, value);
                        self.onResize();
                      }
                    });
                    Object.defineProperty(canvas, 'height', {
                      configurable: true,
                      enumerable: true,
                      get: function get() {
                        return self.bufferHeight;
                      },
                      set: function set(value) {
                        self.bufferHeight = value;
                        self.realCanvasHeight.set.call(canvas, value);
                        self.onResize();
                      }
                    });
                  }
                  this.lastBoundFramebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);
                  if (this.lastBoundFramebuffer == null) {
                    this.lastBoundFramebuffer = this.framebuffer;
                    this.gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
                  }
                  this.gl.bindFramebuffer = function (target, framebuffer) {
                    self.lastBoundFramebuffer = framebuffer ? framebuffer : self.framebuffer;
                    self.realBindFramebuffer.call(gl, target, self.lastBoundFramebuffer);
                  };
                  this.cullFace = gl.getParameter(gl.CULL_FACE);
                  this.depthTest = gl.getParameter(gl.DEPTH_TEST);
                  this.blend = gl.getParameter(gl.BLEND);
                  this.scissorTest = gl.getParameter(gl.SCISSOR_TEST);
                  this.stencilTest = gl.getParameter(gl.STENCIL_TEST);
                  gl.enable = function (pname) {
                    switch (pname) {
                      case gl.CULL_FACE:
                        self.cullFace = true;break;
                      case gl.DEPTH_TEST:
                        self.depthTest = true;break;
                      case gl.BLEND:
                        self.blend = true;break;
                      case gl.SCISSOR_TEST:
                        self.scissorTest = true;break;
                      case gl.STENCIL_TEST:
                        self.stencilTest = true;break;
                    }
                    self.realEnable.call(gl, pname);
                  };
                  gl.disable = function (pname) {
                    switch (pname) {
                      case gl.CULL_FACE:
                        self.cullFace = false;break;
                      case gl.DEPTH_TEST:
                        self.depthTest = false;break;
                      case gl.BLEND:
                        self.blend = false;break;
                      case gl.SCISSOR_TEST:
                        self.scissorTest = false;break;
                      case gl.STENCIL_TEST:
                        self.stencilTest = false;break;
                    }
                    self.realDisable.call(gl, pname);
                  };
                  this.colorMask = gl.getParameter(gl.COLOR_WRITEMASK);
                  gl.colorMask = function (r, g, b, a) {
                    self.colorMask[0] = r;
                    self.colorMask[1] = g;
                    self.colorMask[2] = b;
                    self.colorMask[3] = a;
                    self.realColorMask.call(gl, r, g, b, a);
                  };
                  this.clearColor = gl.getParameter(gl.COLOR_CLEAR_VALUE);
                  gl.clearColor = function (r, g, b, a) {
                    self.clearColor[0] = r;
                    self.clearColor[1] = g;
                    self.clearColor[2] = b;
                    self.clearColor[3] = a;
                    self.realClearColor.call(gl, r, g, b, a);
                  };
                  this.viewport = gl.getParameter(gl.VIEWPORT);
                  gl.viewport = function (x, y, w, h) {
                    self.viewport[0] = x;
                    self.viewport[1] = y;
                    self.viewport[2] = w;
                    self.viewport[3] = h;
                    self.realViewport.call(gl, x, y, w, h);
                  };
                  this.isPatched = true;
                  safariCssSizeWorkaround(canvas);
                };
                CardboardDistorter.prototype.unpatch = function () {
                  if (!this.isPatched) {
                    return;
                  }
                  var gl = this.gl;
                  var canvas = this.gl.canvas;
                  if (!isIOS()) {
                    Object.defineProperty(canvas, 'width', this.realCanvasWidth);
                    Object.defineProperty(canvas, 'height', this.realCanvasHeight);
                  }
                  canvas.width = this.bufferWidth;
                  canvas.height = this.bufferHeight;
                  gl.bindFramebuffer = this.realBindFramebuffer;
                  gl.enable = this.realEnable;
                  gl.disable = this.realDisable;
                  gl.colorMask = this.realColorMask;
                  gl.clearColor = this.realClearColor;
                  gl.viewport = this.realViewport;
                  if (this.lastBoundFramebuffer == this.framebuffer) {
                    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
                  }
                  this.isPatched = false;
                  setTimeout(function () {
                    safariCssSizeWorkaround(canvas);
                  }, 1);
                };
                CardboardDistorter.prototype.setTextureBounds = function (leftBounds, rightBounds) {
                  if (!leftBounds) {
                    leftBounds = [0, 0, 0.5, 1];
                  }
                  if (!rightBounds) {
                    rightBounds = [0.5, 0, 0.5, 1];
                  }
                  this.viewportOffsetScale[0] = leftBounds[0];
                  this.viewportOffsetScale[1] = leftBounds[1];
                  this.viewportOffsetScale[2] = leftBounds[2];
                  this.viewportOffsetScale[3] = leftBounds[3];
                  this.viewportOffsetScale[4] = rightBounds[0];
                  this.viewportOffsetScale[5] = rightBounds[1];
                  this.viewportOffsetScale[6] = rightBounds[2];
                  this.viewportOffsetScale[7] = rightBounds[3];
                };
                CardboardDistorter.prototype.submitFrame = function () {
                  var gl = this.gl;
                  var self = this;
                  var glState = [];
                  if (!this.dirtySubmitFrameBindings) {
                    glState.push(gl.CURRENT_PROGRAM, gl.ARRAY_BUFFER_BINDING, gl.ELEMENT_ARRAY_BUFFER_BINDING, gl.TEXTURE_BINDING_2D, gl.TEXTURE0);
                  }
                  glPreserveState(gl, glState, function (gl) {
                    self.realBindFramebuffer.call(gl, gl.FRAMEBUFFER, null);
                    var positionDivisor = 0;
                    var texCoordDivisor = 0;
                    if (self.instanceExt) {
                      positionDivisor = gl.getVertexAttrib(self.attribs.position, self.instanceExt.VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE);
                      texCoordDivisor = gl.getVertexAttrib(self.attribs.texCoord, self.instanceExt.VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE);
                    }
                    if (self.cullFace) {
                      self.realDisable.call(gl, gl.CULL_FACE);
                    }
                    if (self.depthTest) {
                      self.realDisable.call(gl, gl.DEPTH_TEST);
                    }
                    if (self.blend) {
                      self.realDisable.call(gl, gl.BLEND);
                    }
                    if (self.scissorTest) {
                      self.realDisable.call(gl, gl.SCISSOR_TEST);
                    }
                    if (self.stencilTest) {
                      self.realDisable.call(gl, gl.STENCIL_TEST);
                    }
                    self.realColorMask.call(gl, true, true, true, true);
                    self.realViewport.call(gl, 0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
                    if (self.ctxAttribs.alpha || isIOS()) {
                      self.realClearColor.call(gl, 0, 0, 0, 1);
                      gl.clear(gl.COLOR_BUFFER_BIT);
                    }
                    gl.useProgram(self.program);
                    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, self.indexBuffer);
                    gl.bindBuffer(gl.ARRAY_BUFFER, self.vertexBuffer);
                    gl.enableVertexAttribArray(self.attribs.position);
                    gl.enableVertexAttribArray(self.attribs.texCoord);
                    gl.vertexAttribPointer(self.attribs.position, 2, gl.FLOAT, false, 20, 0);
                    gl.vertexAttribPointer(self.attribs.texCoord, 3, gl.FLOAT, false, 20, 8);
                    if (self.instanceExt) {
                      if (positionDivisor != 0) {
                        self.instanceExt.vertexAttribDivisorANGLE(self.attribs.position, 0);
                      }
                      if (texCoordDivisor != 0) {
                        self.instanceExt.vertexAttribDivisorANGLE(self.attribs.texCoord, 0);
                      }
                    }
                    gl.activeTexture(gl.TEXTURE0);
                    gl.uniform1i(self.uniforms.diffuse, 0);
                    gl.bindTexture(gl.TEXTURE_2D, self.renderTarget);
                    gl.uniform4fv(self.uniforms.viewportOffsetScale, self.viewportOffsetScale);
                    gl.drawElements(gl.TRIANGLES, self.indexCount, gl.UNSIGNED_SHORT, 0);
                    if (self.cardboardUI) {
                      self.cardboardUI.renderNoState();
                    }
                    self.realBindFramebuffer.call(self.gl, gl.FRAMEBUFFER, self.framebuffer);
                    if (!self.ctxAttribs.preserveDrawingBuffer) {
                      self.realClearColor.call(gl, 0, 0, 0, 0);
                      gl.clear(gl.COLOR_BUFFER_BIT);
                    }
                    if (!self.dirtySubmitFrameBindings) {
                      self.realBindFramebuffer.call(gl, gl.FRAMEBUFFER, self.lastBoundFramebuffer);
                    }
                    if (self.cullFace) {
                      self.realEnable.call(gl, gl.CULL_FACE);
                    }
                    if (self.depthTest) {
                      self.realEnable.call(gl, gl.DEPTH_TEST);
                    }
                    if (self.blend) {
                      self.realEnable.call(gl, gl.BLEND);
                    }
                    if (self.scissorTest) {
                      self.realEnable.call(gl, gl.SCISSOR_TEST);
                    }
                    if (self.stencilTest) {
                      self.realEnable.call(gl, gl.STENCIL_TEST);
                    }
                    self.realColorMask.apply(gl, self.colorMask);
                    self.realViewport.apply(gl, self.viewport);
                    if (self.ctxAttribs.alpha || !self.ctxAttribs.preserveDrawingBuffer) {
                      self.realClearColor.apply(gl, self.clearColor);
                    }
                    if (self.instanceExt) {
                      if (positionDivisor != 0) {
                        self.instanceExt.vertexAttribDivisorANGLE(self.attribs.position, positionDivisor);
                      }
                      if (texCoordDivisor != 0) {
                        self.instanceExt.vertexAttribDivisorANGLE(self.attribs.texCoord, texCoordDivisor);
                      }
                    }
                  });
                  if (isIOS()) {
                    var canvas = gl.canvas;
                    if (canvas.width != self.bufferWidth || canvas.height != self.bufferHeight) {
                      self.bufferWidth = canvas.width;
                      self.bufferHeight = canvas.height;
                      self.onResize();
                    }
                  }
                };
                CardboardDistorter.prototype.updateDeviceInfo = function (deviceInfo) {
                  var gl = this.gl;
                  var self = this;
                  var glState = [gl.ARRAY_BUFFER_BINDING, gl.ELEMENT_ARRAY_BUFFER_BINDING];
                  glPreserveState(gl, glState, function (gl) {
                    var vertices = self.computeMeshVertices_(self.meshWidth, self.meshHeight, deviceInfo);
                    gl.bindBuffer(gl.ARRAY_BUFFER, self.vertexBuffer);
                    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
                    if (!self.indexCount) {
                      var indices = self.computeMeshIndices_(self.meshWidth, self.meshHeight);
                      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, self.indexBuffer);
                      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
                      self.indexCount = indices.length;
                    }
                  });
                };
                CardboardDistorter.prototype.computeMeshVertices_ = function (width, height, deviceInfo) {
                  var vertices = new Float32Array(2 * width * height * 5);
                  var lensFrustum = deviceInfo.getLeftEyeVisibleTanAngles();
                  var noLensFrustum = deviceInfo.getLeftEyeNoLensTanAngles();
                  var viewport = deviceInfo.getLeftEyeVisibleScreenRect(noLensFrustum);
                  var vidx = 0;
                  for (var e = 0; e < 2; e++) {
                    for (var j = 0; j < height; j++) {
                      for (var i = 0; i < width; i++, vidx++) {
                        var u = i / (width - 1);
                        var v = j / (height - 1);
                        var s = u;
                        var t = v;
                        var x = lerp(lensFrustum[0], lensFrustum[2], u);
                        var y = lerp(lensFrustum[3], lensFrustum[1], v);
                        var d = Math.sqrt(x * x + y * y);
                        var r = deviceInfo.distortion.distortInverse(d);
                        var p = x * r / d;
                        var q = y * r / d;
                        u = (p - noLensFrustum[0]) / (noLensFrustum[2] - noLensFrustum[0]);
                        v = (q - noLensFrustum[3]) / (noLensFrustum[1] - noLensFrustum[3]);
                        u = (viewport.x + u * viewport.width - 0.5) * 2.0;
                        v = (viewport.y + v * viewport.height - 0.5) * 2.0;
                        vertices[vidx * 5 + 0] = u;
                        vertices[vidx * 5 + 1] = v;
                        vertices[vidx * 5 + 2] = s;
                        vertices[vidx * 5 + 3] = t;
                        vertices[vidx * 5 + 4] = e;
                      }
                    }
                    var w = lensFrustum[2] - lensFrustum[0];
                    lensFrustum[0] = -(w + lensFrustum[0]);
                    lensFrustum[2] = w - lensFrustum[2];
                    w = noLensFrustum[2] - noLensFrustum[0];
                    noLensFrustum[0] = -(w + noLensFrustum[0]);
                    noLensFrustum[2] = w - noLensFrustum[2];
                    viewport.x = 1 - (viewport.x + viewport.width);
                  }
                  return vertices;
                };
                CardboardDistorter.prototype.computeMeshIndices_ = function (width, height) {
                  var indices = new Uint16Array(2 * (width - 1) * (height - 1) * 6);
                  var halfwidth = width / 2;
                  var halfheight = height / 2;
                  var vidx = 0;
                  var iidx = 0;
                  for (var e = 0; e < 2; e++) {
                    for (var j = 0; j < height; j++) {
                      for (var i = 0; i < width; i++, vidx++) {
                        if (i == 0 || j == 0) continue;
                        if (i <= halfwidth == j <= halfheight) {
                          indices[iidx++] = vidx;
                          indices[iidx++] = vidx - width - 1;
                          indices[iidx++] = vidx - width;
                          indices[iidx++] = vidx - width - 1;
                          indices[iidx++] = vidx;
                          indices[iidx++] = vidx - 1;
                        } else {
                          indices[iidx++] = vidx - 1;
                          indices[iidx++] = vidx - width;
                          indices[iidx++] = vidx;
                          indices[iidx++] = vidx - width;
                          indices[iidx++] = vidx - 1;
                          indices[iidx++] = vidx - width - 1;
                        }
                      }
                    }
                  }
                  return indices;
                };
                CardboardDistorter.prototype.getOwnPropertyDescriptor_ = function (proto, attrName) {
                  var descriptor = Object.getOwnPropertyDescriptor(proto, attrName);
                  if (descriptor.get === undefined || descriptor.set === undefined) {
                    descriptor.configurable = true;
                    descriptor.enumerable = true;
                    descriptor.get = function () {
                      return this.getAttribute(attrName);
                    };
                    descriptor.set = function (val) {
                      this.setAttribute(attrName, val);
                    };
                  }
                  return descriptor;
                };
                var uiVS = ['attribute vec2 position;', 'uniform mat4 projectionMat;', 'void main() {', '  gl_Position = projectionMat * vec4( position, -1.0, 1.0 );', '}'].join('\n');
                var uiFS = ['precision mediump float;', 'uniform vec4 color;', 'void main() {', '  gl_FragColor = color;', '}'].join('\n');
                var DEG2RAD = Math.PI / 180.0;
                var kAnglePerGearSection = 60;
                var kOuterRimEndAngle = 12;
                var kInnerRimBeginAngle = 20;
                var kOuterRadius = 1;
                var kMiddleRadius = 0.75;
                var kInnerRadius = 0.3125;
                var kCenterLineThicknessDp = 4;
                var kButtonWidthDp = 28;
                var kTouchSlopFactor = 1.5;
                function CardboardUI(gl) {
                  this.gl = gl;
                  this.attribs = {
                    position: 0
                  };
                  this.program = linkProgram(gl, uiVS, uiFS, this.attribs);
                  this.uniforms = getProgramUniforms(gl, this.program);
                  this.vertexBuffer = gl.createBuffer();
                  this.gearOffset = 0;
                  this.gearVertexCount = 0;
                  this.arrowOffset = 0;
                  this.arrowVertexCount = 0;
                  this.projMat = new Float32Array(16);
                  this.listener = null;
                  this.onResize();
                }
                CardboardUI.prototype.destroy = function () {
                  var gl = this.gl;
                  if (this.listener) {
                    gl.canvas.removeEventListener('click', this.listener, false);
                  }
                  gl.deleteProgram(this.program);
                  gl.deleteBuffer(this.vertexBuffer);
                };
                CardboardUI.prototype.listen = function (optionsCallback, backCallback) {
                  var canvas = this.gl.canvas;
                  this.listener = function (event) {
                    var midline = canvas.clientWidth / 2;
                    var buttonSize = kButtonWidthDp * kTouchSlopFactor;
                    if (event.clientX > midline - buttonSize && event.clientX < midline + buttonSize && event.clientY > canvas.clientHeight - buttonSize) {
                      optionsCallback(event);
                    }
                    else if (event.clientX < buttonSize && event.clientY < buttonSize) {
                        backCallback(event);
                      }
                  };
                  canvas.addEventListener('click', this.listener, false);
                };
                CardboardUI.prototype.onResize = function () {
                  var gl = this.gl;
                  var self = this;
                  var glState = [gl.ARRAY_BUFFER_BINDING];
                  glPreserveState(gl, glState, function (gl) {
                    var vertices = [];
                    var midline = gl.drawingBufferWidth / 2;
                    var physicalPixels = Math.max(screen.width, screen.height) * window.devicePixelRatio;
                    var scalingRatio = gl.drawingBufferWidth / physicalPixels;
                    var dps = scalingRatio * window.devicePixelRatio;
                    var lineWidth = kCenterLineThicknessDp * dps / 2;
                    var buttonSize = kButtonWidthDp * kTouchSlopFactor * dps;
                    var buttonScale = kButtonWidthDp * dps / 2;
                    var buttonBorder = (kButtonWidthDp * kTouchSlopFactor - kButtonWidthDp) * dps;
                    vertices.push(midline - lineWidth, buttonSize);
                    vertices.push(midline - lineWidth, gl.drawingBufferHeight);
                    vertices.push(midline + lineWidth, buttonSize);
                    vertices.push(midline + lineWidth, gl.drawingBufferHeight);
                    self.gearOffset = vertices.length / 2;
                    function addGearSegment(theta, r) {
                      var angle = (90 - theta) * DEG2RAD;
                      var x = Math.cos(angle);
                      var y = Math.sin(angle);
                      vertices.push(kInnerRadius * x * buttonScale + midline, kInnerRadius * y * buttonScale + buttonScale);
                      vertices.push(r * x * buttonScale + midline, r * y * buttonScale + buttonScale);
                    }
                    for (var i = 0; i <= 6; i++) {
                      var segmentTheta = i * kAnglePerGearSection;
                      addGearSegment(segmentTheta, kOuterRadius);
                      addGearSegment(segmentTheta + kOuterRimEndAngle, kOuterRadius);
                      addGearSegment(segmentTheta + kInnerRimBeginAngle, kMiddleRadius);
                      addGearSegment(segmentTheta + (kAnglePerGearSection - kInnerRimBeginAngle), kMiddleRadius);
                      addGearSegment(segmentTheta + (kAnglePerGearSection - kOuterRimEndAngle), kOuterRadius);
                    }
                    self.gearVertexCount = vertices.length / 2 - self.gearOffset;
                    self.arrowOffset = vertices.length / 2;
                    function addArrowVertex(x, y) {
                      vertices.push(buttonBorder + x, gl.drawingBufferHeight - buttonBorder - y);
                    }
                    var angledLineWidth = lineWidth / Math.sin(45 * DEG2RAD);
                    addArrowVertex(0, buttonScale);
                    addArrowVertex(buttonScale, 0);
                    addArrowVertex(buttonScale + angledLineWidth, angledLineWidth);
                    addArrowVertex(angledLineWidth, buttonScale + angledLineWidth);
                    addArrowVertex(angledLineWidth, buttonScale - angledLineWidth);
                    addArrowVertex(0, buttonScale);
                    addArrowVertex(buttonScale, buttonScale * 2);
                    addArrowVertex(buttonScale + angledLineWidth, buttonScale * 2 - angledLineWidth);
                    addArrowVertex(angledLineWidth, buttonScale - angledLineWidth);
                    addArrowVertex(0, buttonScale);
                    addArrowVertex(angledLineWidth, buttonScale - lineWidth);
                    addArrowVertex(kButtonWidthDp * dps, buttonScale - lineWidth);
                    addArrowVertex(angledLineWidth, buttonScale + lineWidth);
                    addArrowVertex(kButtonWidthDp * dps, buttonScale + lineWidth);
                    self.arrowVertexCount = vertices.length / 2 - self.arrowOffset;
                    gl.bindBuffer(gl.ARRAY_BUFFER, self.vertexBuffer);
                    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
                  });
                };
                CardboardUI.prototype.render = function () {
                  var gl = this.gl;
                  var self = this;
                  var glState = [gl.CULL_FACE, gl.DEPTH_TEST, gl.BLEND, gl.SCISSOR_TEST, gl.STENCIL_TEST, gl.COLOR_WRITEMASK, gl.VIEWPORT, gl.CURRENT_PROGRAM, gl.ARRAY_BUFFER_BINDING];
                  glPreserveState(gl, glState, function (gl) {
                    gl.disable(gl.CULL_FACE);
                    gl.disable(gl.DEPTH_TEST);
                    gl.disable(gl.BLEND);
                    gl.disable(gl.SCISSOR_TEST);
                    gl.disable(gl.STENCIL_TEST);
                    gl.colorMask(true, true, true, true);
                    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
                    self.renderNoState();
                  });
                };
                CardboardUI.prototype.renderNoState = function () {
                  var gl = this.gl;
                  gl.useProgram(this.program);
                  gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
                  gl.enableVertexAttribArray(this.attribs.position);
                  gl.vertexAttribPointer(this.attribs.position, 2, gl.FLOAT, false, 8, 0);
                  gl.uniform4f(this.uniforms.color, 1.0, 1.0, 1.0, 1.0);
                  orthoMatrix(this.projMat, 0, gl.drawingBufferWidth, 0, gl.drawingBufferHeight, 0.1, 1024.0);
                  gl.uniformMatrix4fv(this.uniforms.projectionMat, false, this.projMat);
                  gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
                  gl.drawArrays(gl.TRIANGLE_STRIP, this.gearOffset, this.gearVertexCount);
                  gl.drawArrays(gl.TRIANGLE_STRIP, this.arrowOffset, this.arrowVertexCount);
                };
                function Distortion(coefficients) {
                  this.coefficients = coefficients;
                }
                Distortion.prototype.distortInverse = function (radius) {
                  var r0 = 0;
                  var r1 = 1;
                  var dr0 = radius - this.distort(r0);
                  while (Math.abs(r1 - r0) > 0.0001             ) {
                    var dr1 = radius - this.distort(r1);
                    var r2 = r1 - dr1 * ((r1 - r0) / (dr1 - dr0));
                    r0 = r1;
                    r1 = r2;
                    dr0 = dr1;
                  }
                  return r1;
                };
                Distortion.prototype.distort = function (radius) {
                  var r2 = radius * radius;
                  var ret = 0;
                  for (var i = 0; i < this.coefficients.length; i++) {
                    ret = r2 * (ret + this.coefficients[i]);
                  }
                  return (ret + 1) * radius;
                };
                var degToRad = Math.PI / 180;
                var radToDeg = 180 / Math.PI;
                var Vector3 = function Vector3(x, y, z) {
                  this.x = x || 0;
                  this.y = y || 0;
                  this.z = z || 0;
                };
                Vector3.prototype = {
                  constructor: Vector3,
                  set: function set(x, y, z) {
                    this.x = x;
                    this.y = y;
                    this.z = z;
                    return this;
                  },
                  copy: function copy(v) {
                    this.x = v.x;
                    this.y = v.y;
                    this.z = v.z;
                    return this;
                  },
                  length: function length() {
                    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
                  },
                  normalize: function normalize() {
                    var scalar = this.length();
                    if (scalar !== 0) {
                      var invScalar = 1 / scalar;
                      this.multiplyScalar(invScalar);
                    } else {
                      this.x = 0;
                      this.y = 0;
                      this.z = 0;
                    }
                    return this;
                  },
                  multiplyScalar: function multiplyScalar(scalar) {
                    this.x *= scalar;
                    this.y *= scalar;
                    this.z *= scalar;
                  },
                  applyQuaternion: function applyQuaternion(q) {
                    var x = this.x;
                    var y = this.y;
                    var z = this.z;
                    var qx = q.x;
                    var qy = q.y;
                    var qz = q.z;
                    var qw = q.w;
                    var ix = qw * x + qy * z - qz * y;
                    var iy = qw * y + qz * x - qx * z;
                    var iz = qw * z + qx * y - qy * x;
                    var iw = -qx * x - qy * y - qz * z;
                    this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
                    this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
                    this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
                    return this;
                  },
                  dot: function dot(v) {
                    return this.x * v.x + this.y * v.y + this.z * v.z;
                  },
                  crossVectors: function crossVectors(a, b) {
                    var ax = a.x,
                        ay = a.y,
                        az = a.z;
                    var bx = b.x,
                        by = b.y,
                        bz = b.z;
                    this.x = ay * bz - az * by;
                    this.y = az * bx - ax * bz;
                    this.z = ax * by - ay * bx;
                    return this;
                  }
                };
                var Quaternion = function Quaternion(x, y, z, w) {
                  this.x = x || 0;
                  this.y = y || 0;
                  this.z = z || 0;
                  this.w = w !== undefined ? w : 1;
                };
                Quaternion.prototype = {
                  constructor: Quaternion,
                  set: function set(x, y, z, w) {
                    this.x = x;
                    this.y = y;
                    this.z = z;
                    this.w = w;
                    return this;
                  },
                  copy: function copy(quaternion) {
                    this.x = quaternion.x;
                    this.y = quaternion.y;
                    this.z = quaternion.z;
                    this.w = quaternion.w;
                    return this;
                  },
                  setFromEulerXYZ: function setFromEulerXYZ(x, y, z) {
                    var c1 = Math.cos(x / 2);
                    var c2 = Math.cos(y / 2);
                    var c3 = Math.cos(z / 2);
                    var s1 = Math.sin(x / 2);
                    var s2 = Math.sin(y / 2);
                    var s3 = Math.sin(z / 2);
                    this.x = s1 * c2 * c3 + c1 * s2 * s3;
                    this.y = c1 * s2 * c3 - s1 * c2 * s3;
                    this.z = c1 * c2 * s3 + s1 * s2 * c3;
                    this.w = c1 * c2 * c3 - s1 * s2 * s3;
                    return this;
                  },
                  setFromEulerYXZ: function setFromEulerYXZ(x, y, z) {
                    var c1 = Math.cos(x / 2);
                    var c2 = Math.cos(y / 2);
                    var c3 = Math.cos(z / 2);
                    var s1 = Math.sin(x / 2);
                    var s2 = Math.sin(y / 2);
                    var s3 = Math.sin(z / 2);
                    this.x = s1 * c2 * c3 + c1 * s2 * s3;
                    this.y = c1 * s2 * c3 - s1 * c2 * s3;
                    this.z = c1 * c2 * s3 - s1 * s2 * c3;
                    this.w = c1 * c2 * c3 + s1 * s2 * s3;
                    return this;
                  },
                  setFromAxisAngle: function setFromAxisAngle(axis, angle) {
                    var halfAngle = angle / 2,
                        s = Math.sin(halfAngle);
                    this.x = axis.x * s;
                    this.y = axis.y * s;
                    this.z = axis.z * s;
                    this.w = Math.cos(halfAngle);
                    return this;
                  },
                  multiply: function multiply(q) {
                    return this.multiplyQuaternions(this, q);
                  },
                  multiplyQuaternions: function multiplyQuaternions(a, b) {
                    var qax = a.x,
                        qay = a.y,
                        qaz = a.z,
                        qaw = a.w;
                    var qbx = b.x,
                        qby = b.y,
                        qbz = b.z,
                        qbw = b.w;
                    this.x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
                    this.y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
                    this.z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
                    this.w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
                    return this;
                  },
                  inverse: function inverse() {
                    this.x *= -1;
                    this.y *= -1;
                    this.z *= -1;
                    this.normalize();
                    return this;
                  },
                  normalize: function normalize() {
                    var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
                    if (l === 0) {
                      this.x = 0;
                      this.y = 0;
                      this.z = 0;
                      this.w = 1;
                    } else {
                      l = 1 / l;
                      this.x = this.x * l;
                      this.y = this.y * l;
                      this.z = this.z * l;
                      this.w = this.w * l;
                    }
                    return this;
                  },
                  slerp: function slerp(qb, t) {
                    if (t === 0) return this;
                    if (t === 1) return this.copy(qb);
                    var x = this.x,
                        y = this.y,
                        z = this.z,
                        w = this.w;
                    var cosHalfTheta = w * qb.w + x * qb.x + y * qb.y + z * qb.z;
                    if (cosHalfTheta < 0) {
                      this.w = -qb.w;
                      this.x = -qb.x;
                      this.y = -qb.y;
                      this.z = -qb.z;
                      cosHalfTheta = -cosHalfTheta;
                    } else {
                      this.copy(qb);
                    }
                    if (cosHalfTheta >= 1.0) {
                      this.w = w;
                      this.x = x;
                      this.y = y;
                      this.z = z;
                      return this;
                    }
                    var halfTheta = Math.acos(cosHalfTheta);
                    var sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);
                    if (Math.abs(sinHalfTheta) < 0.001) {
                      this.w = 0.5 * (w + this.w);
                      this.x = 0.5 * (x + this.x);
                      this.y = 0.5 * (y + this.y);
                      this.z = 0.5 * (z + this.z);
                      return this;
                    }
                    var ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,
                        ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
                    this.w = w * ratioA + this.w * ratioB;
                    this.x = x * ratioA + this.x * ratioB;
                    this.y = y * ratioA + this.y * ratioB;
                    this.z = z * ratioA + this.z * ratioB;
                    return this;
                  },
                  setFromUnitVectors: function () {
                    var v1, r;
                    var EPS = 0.000001;
                    return function (vFrom, vTo) {
                      if (v1 === undefined) v1 = new Vector3();
                      r = vFrom.dot(vTo) + 1;
                      if (r < EPS) {
                        r = 0;
                        if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
                          v1.set(-vFrom.y, vFrom.x, 0);
                        } else {
                          v1.set(0, -vFrom.z, vFrom.y);
                        }
                      } else {
                        v1.crossVectors(vFrom, vTo);
                      }
                      this.x = v1.x;
                      this.y = v1.y;
                      this.z = v1.z;
                      this.w = r;
                      this.normalize();
                      return this;
                    };
                  }()
                };
                function Device(params) {
                  this.width = params.width || getScreenWidth();
                  this.height = params.height || getScreenHeight();
                  this.widthMeters = params.widthMeters;
                  this.heightMeters = params.heightMeters;
                  this.bevelMeters = params.bevelMeters;
                }
                var DEFAULT_ANDROID = new Device({
                  widthMeters: 0.110,
                  heightMeters: 0.062,
                  bevelMeters: 0.004
                });
                var DEFAULT_IOS = new Device({
                  widthMeters: 0.1038,
                  heightMeters: 0.0584,
                  bevelMeters: 0.004
                });
                var Viewers = {
                  CardboardV1: new CardboardViewer({
                    id: 'CardboardV1',
                    label: 'Cardboard I/O 2014',
                    fov: 40,
                    interLensDistance: 0.060,
                    baselineLensDistance: 0.035,
                    screenLensDistance: 0.042,
                    distortionCoefficients: [0.441, 0.156],
                    inverseCoefficients: [-0.4410035, 0.42756155, -0.4804439, 0.5460139, -0.58821183, 0.5733938, -0.48303202, 0.33299083, -0.17573841, 0.0651772, -0.01488963, 0.001559834]
                  }),
                  CardboardV2: new CardboardViewer({
                    id: 'CardboardV2',
                    label: 'Cardboard I/O 2015',
                    fov: 60,
                    interLensDistance: 0.064,
                    baselineLensDistance: 0.035,
                    screenLensDistance: 0.039,
                    distortionCoefficients: [0.34, 0.55],
                    inverseCoefficients: [-0.33836704, -0.18162185, 0.862655, -1.2462051, 1.0560602, -0.58208317, 0.21609078, -0.05444823, 0.009177956, -9.904169E-4, 6.183535E-5, -1.6981803E-6]
                  })
                };
                function DeviceInfo(deviceParams, additionalViewers) {
                  this.viewer = Viewers.CardboardV2;
                  this.updateDeviceParams(deviceParams);
                  this.distortion = new Distortion(this.viewer.distortionCoefficients);
                  for (var i = 0; i < additionalViewers.length; i++) {
                    var viewer = additionalViewers[i];
                    Viewers[viewer.id] = new CardboardViewer(viewer);
                  }
                }
                DeviceInfo.prototype.updateDeviceParams = function (deviceParams) {
                  this.device = this.determineDevice_(deviceParams) || this.device;
                };
                DeviceInfo.prototype.getDevice = function () {
                  return this.device;
                };
                DeviceInfo.prototype.setViewer = function (viewer) {
                  this.viewer = viewer;
                  this.distortion = new Distortion(this.viewer.distortionCoefficients);
                };
                DeviceInfo.prototype.determineDevice_ = function (deviceParams) {
                  if (!deviceParams) {
                    if (isIOS()) {
                      console.warn('Using fallback iOS device measurements.');
                      return DEFAULT_IOS;
                    } else {
                      console.warn('Using fallback Android device measurements.');
                      return DEFAULT_ANDROID;
                    }
                  }
                  var METERS_PER_INCH = 0.0254;
                  var metersPerPixelX = METERS_PER_INCH / deviceParams.xdpi;
                  var metersPerPixelY = METERS_PER_INCH / deviceParams.ydpi;
                  var width = getScreenWidth();
                  var height = getScreenHeight();
                  return new Device({
                    widthMeters: metersPerPixelX * width,
                    heightMeters: metersPerPixelY * height,
                    bevelMeters: deviceParams.bevelMm * 0.001
                  });
                };
                DeviceInfo.prototype.getDistortedFieldOfViewLeftEye = function () {
                  var viewer = this.viewer;
                  var device = this.device;
                  var distortion = this.distortion;
                  var eyeToScreenDistance = viewer.screenLensDistance;
                  var outerDist = (device.widthMeters - viewer.interLensDistance) / 2;
                  var innerDist = viewer.interLensDistance / 2;
                  var bottomDist = viewer.baselineLensDistance - device.bevelMeters;
                  var topDist = device.heightMeters - bottomDist;
                  var outerAngle = radToDeg * Math.atan(distortion.distort(outerDist / eyeToScreenDistance));
                  var innerAngle = radToDeg * Math.atan(distortion.distort(innerDist / eyeToScreenDistance));
                  var bottomAngle = radToDeg * Math.atan(distortion.distort(bottomDist / eyeToScreenDistance));
                  var topAngle = radToDeg * Math.atan(distortion.distort(topDist / eyeToScreenDistance));
                  return {
                    leftDegrees: Math.min(outerAngle, viewer.fov),
                    rightDegrees: Math.min(innerAngle, viewer.fov),
                    downDegrees: Math.min(bottomAngle, viewer.fov),
                    upDegrees: Math.min(topAngle, viewer.fov)
                  };
                };
                DeviceInfo.prototype.getLeftEyeVisibleTanAngles = function () {
                  var viewer = this.viewer;
                  var device = this.device;
                  var distortion = this.distortion;
                  var fovLeft = Math.tan(-degToRad * viewer.fov);
                  var fovTop = Math.tan(degToRad * viewer.fov);
                  var fovRight = Math.tan(degToRad * viewer.fov);
                  var fovBottom = Math.tan(-degToRad * viewer.fov);
                  var halfWidth = device.widthMeters / 4;
                  var halfHeight = device.heightMeters / 2;
                  var verticalLensOffset = viewer.baselineLensDistance - device.bevelMeters - halfHeight;
                  var centerX = viewer.interLensDistance / 2 - halfWidth;
                  var centerY = -verticalLensOffset;
                  var centerZ = viewer.screenLensDistance;
                  var screenLeft = distortion.distort((centerX - halfWidth) / centerZ);
                  var screenTop = distortion.distort((centerY + halfHeight) / centerZ);
                  var screenRight = distortion.distort((centerX + halfWidth) / centerZ);
                  var screenBottom = distortion.distort((centerY - halfHeight) / centerZ);
                  var result = new Float32Array(4);
                  result[0] = Math.max(fovLeft, screenLeft);
                  result[1] = Math.min(fovTop, screenTop);
                  result[2] = Math.min(fovRight, screenRight);
                  result[3] = Math.max(fovBottom, screenBottom);
                  return result;
                };
                DeviceInfo.prototype.getLeftEyeNoLensTanAngles = function () {
                  var viewer = this.viewer;
                  var device = this.device;
                  var distortion = this.distortion;
                  var result = new Float32Array(4);
                  var fovLeft = distortion.distortInverse(Math.tan(-degToRad * viewer.fov));
                  var fovTop = distortion.distortInverse(Math.tan(degToRad * viewer.fov));
                  var fovRight = distortion.distortInverse(Math.tan(degToRad * viewer.fov));
                  var fovBottom = distortion.distortInverse(Math.tan(-degToRad * viewer.fov));
                  var halfWidth = device.widthMeters / 4;
                  var halfHeight = device.heightMeters / 2;
                  var verticalLensOffset = viewer.baselineLensDistance - device.bevelMeters - halfHeight;
                  var centerX = viewer.interLensDistance / 2 - halfWidth;
                  var centerY = -verticalLensOffset;
                  var centerZ = viewer.screenLensDistance;
                  var screenLeft = (centerX - halfWidth) / centerZ;
                  var screenTop = (centerY + halfHeight) / centerZ;
                  var screenRight = (centerX + halfWidth) / centerZ;
                  var screenBottom = (centerY - halfHeight) / centerZ;
                  result[0] = Math.max(fovLeft, screenLeft);
                  result[1] = Math.min(fovTop, screenTop);
                  result[2] = Math.min(fovRight, screenRight);
                  result[3] = Math.max(fovBottom, screenBottom);
                  return result;
                };
                DeviceInfo.prototype.getLeftEyeVisibleScreenRect = function (undistortedFrustum) {
                  var viewer = this.viewer;
                  var device = this.device;
                  var dist = viewer.screenLensDistance;
                  var eyeX = (device.widthMeters - viewer.interLensDistance) / 2;
                  var eyeY = viewer.baselineLensDistance - device.bevelMeters;
                  var left = (undistortedFrustum[0] * dist + eyeX) / device.widthMeters;
                  var top = (undistortedFrustum[1] * dist + eyeY) / device.heightMeters;
                  var right = (undistortedFrustum[2] * dist + eyeX) / device.widthMeters;
                  var bottom = (undistortedFrustum[3] * dist + eyeY) / device.heightMeters;
                  return {
                    x: left,
                    y: bottom,
                    width: right - left,
                    height: top - bottom
                  };
                };
                DeviceInfo.prototype.getFieldOfViewLeftEye = function (opt_isUndistorted) {
                  return opt_isUndistorted ? this.getUndistortedFieldOfViewLeftEye() : this.getDistortedFieldOfViewLeftEye();
                };
                DeviceInfo.prototype.getFieldOfViewRightEye = function (opt_isUndistorted) {
                  var fov = this.getFieldOfViewLeftEye(opt_isUndistorted);
                  return {
                    leftDegrees: fov.rightDegrees,
                    rightDegrees: fov.leftDegrees,
                    upDegrees: fov.upDegrees,
                    downDegrees: fov.downDegrees
                  };
                };
                DeviceInfo.prototype.getUndistortedFieldOfViewLeftEye = function () {
                  var p = this.getUndistortedParams_();
                  return {
                    leftDegrees: radToDeg * Math.atan(p.outerDist),
                    rightDegrees: radToDeg * Math.atan(p.innerDist),
                    downDegrees: radToDeg * Math.atan(p.bottomDist),
                    upDegrees: radToDeg * Math.atan(p.topDist)
                  };
                };
                DeviceInfo.prototype.getUndistortedViewportLeftEye = function () {
                  var p = this.getUndistortedParams_();
                  var viewer = this.viewer;
                  var device = this.device;
                  var eyeToScreenDistance = viewer.screenLensDistance;
                  var screenWidth = device.widthMeters / eyeToScreenDistance;
                  var screenHeight = device.heightMeters / eyeToScreenDistance;
                  var xPxPerTanAngle = device.width / screenWidth;
                  var yPxPerTanAngle = device.height / screenHeight;
                  var x = Math.round((p.eyePosX - p.outerDist) * xPxPerTanAngle);
                  var y = Math.round((p.eyePosY - p.bottomDist) * yPxPerTanAngle);
                  return {
                    x: x,
                    y: y,
                    width: Math.round((p.eyePosX + p.innerDist) * xPxPerTanAngle) - x,
                    height: Math.round((p.eyePosY + p.topDist) * yPxPerTanAngle) - y
                  };
                };
                DeviceInfo.prototype.getUndistortedParams_ = function () {
                  var viewer = this.viewer;
                  var device = this.device;
                  var distortion = this.distortion;
                  var eyeToScreenDistance = viewer.screenLensDistance;
                  var halfLensDistance = viewer.interLensDistance / 2 / eyeToScreenDistance;
                  var screenWidth = device.widthMeters / eyeToScreenDistance;
                  var screenHeight = device.heightMeters / eyeToScreenDistance;
                  var eyePosX = screenWidth / 2 - halfLensDistance;
                  var eyePosY = (viewer.baselineLensDistance - device.bevelMeters) / eyeToScreenDistance;
                  var maxFov = viewer.fov;
                  var viewerMax = distortion.distortInverse(Math.tan(degToRad * maxFov));
                  var outerDist = Math.min(eyePosX, viewerMax);
                  var innerDist = Math.min(halfLensDistance, viewerMax);
                  var bottomDist = Math.min(eyePosY, viewerMax);
                  var topDist = Math.min(screenHeight - eyePosY, viewerMax);
                  return {
                    outerDist: outerDist,
                    innerDist: innerDist,
                    topDist: topDist,
                    bottomDist: bottomDist,
                    eyePosX: eyePosX,
                    eyePosY: eyePosY
                  };
                };
                function CardboardViewer(params) {
                  this.id = params.id;
                  this.label = params.label;
                  this.fov = params.fov;
                  this.interLensDistance = params.interLensDistance;
                  this.baselineLensDistance = params.baselineLensDistance;
                  this.screenLensDistance = params.screenLensDistance;
                  this.distortionCoefficients = params.distortionCoefficients;
                  this.inverseCoefficients = params.inverseCoefficients;
                }
                DeviceInfo.Viewers = Viewers;
                var format = 1;
                var last_updated = "2019-11-09T17:36:14Z";
                var devices = [{"type":"android","rules":[{"mdmh":"asus/*/Nexus 7/*"},{"ua":"Nexus 7"}],"dpi":[320.8,323],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"asus/*/ASUS_X00PD/*"},{"ua":"ASUS_X00PD"}],"dpi":245,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"asus/*/ASUS_X008D/*"},{"ua":"ASUS_X008D"}],"dpi":282,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"asus/*/ASUS_Z00AD/*"},{"ua":"ASUS_Z00AD"}],"dpi":[403,404.6],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"Google/*/Pixel 2 XL/*"},{"ua":"Pixel 2 XL"}],"dpi":537.9,"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"Google/*/Pixel 3 XL/*"},{"ua":"Pixel 3 XL"}],"dpi":[558.5,553.8],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"Google/*/Pixel XL/*"},{"ua":"Pixel XL"}],"dpi":[537.9,533],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"Google/*/Pixel 3/*"},{"ua":"Pixel 3"}],"dpi":442.4,"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"Google/*/Pixel 2/*"},{"ua":"Pixel 2"}],"dpi":441,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"Google/*/Pixel/*"},{"ua":"Pixel"}],"dpi":[432.6,436.7],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"HTC/*/HTC6435LVW/*"},{"ua":"HTC6435LVW"}],"dpi":[449.7,443.3],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"HTC/*/HTC One XL/*"},{"ua":"HTC One XL"}],"dpi":[315.3,314.6],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"htc/*/Nexus 9/*"},{"ua":"Nexus 9"}],"dpi":289,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"HTC/*/HTC One M9/*"},{"ua":"HTC One M9"}],"dpi":[442.5,443.3],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"HTC/*/HTC One_M8/*"},{"ua":"HTC One_M8"}],"dpi":[449.7,447.4],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"HTC/*/HTC One/*"},{"ua":"HTC One"}],"dpi":472.8,"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"Huawei/*/Nexus 6P/*"},{"ua":"Nexus 6P"}],"dpi":[515.1,518],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"Huawei/*/BLN-L24/*"},{"ua":"HONORBLN-L24"}],"dpi":480,"bw":4,"ac":500},{"type":"android","rules":[{"mdmh":"Huawei/*/BKL-L09/*"},{"ua":"BKL-L09"}],"dpi":403,"bw":3.47,"ac":500},{"type":"android","rules":[{"mdmh":"LENOVO/*/Lenovo PB2-690Y/*"},{"ua":"Lenovo PB2-690Y"}],"dpi":[457.2,454.713],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"LGE/*/Nexus 5X/*"},{"ua":"Nexus 5X"}],"dpi":[422,419.9],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"LGE/*/LGMS345/*"},{"ua":"LGMS345"}],"dpi":[221.7,219.1],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"LGE/*/LG-D800/*"},{"ua":"LG-D800"}],"dpi":[422,424.1],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"LGE/*/LG-D850/*"},{"ua":"LG-D850"}],"dpi":[537.9,541.9],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"LGE/*/VS985 4G/*"},{"ua":"VS985 4G"}],"dpi":[537.9,535.6],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"LGE/*/Nexus 5/*"},{"ua":"Nexus 5 B"}],"dpi":[442.4,444.8],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"LGE/*/Nexus 4/*"},{"ua":"Nexus 4"}],"dpi":[319.8,318.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"LGE/*/LG-P769/*"},{"ua":"LG-P769"}],"dpi":[240.6,247.5],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"LGE/*/LGMS323/*"},{"ua":"LGMS323"}],"dpi":[206.6,204.6],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"LGE/*/LGLS996/*"},{"ua":"LGLS996"}],"dpi":[403.4,401.5],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"Micromax/*/4560MMX/*"},{"ua":"4560MMX"}],"dpi":[240,219.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"Micromax/*/A250/*"},{"ua":"Micromax A250"}],"dpi":[480,446.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"Micromax/*/Micromax AQ4501/*"},{"ua":"Micromax AQ4501"}],"dpi":240,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"motorola/*/G5/*"},{"ua":"Moto G (5) Plus"}],"dpi":[403.4,403],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"motorola/*/DROID RAZR/*"},{"ua":"DROID RAZR"}],"dpi":[368.1,256.7],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"motorola/*/XT830C/*"},{"ua":"XT830C"}],"dpi":[254,255.9],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"motorola/*/XT1021/*"},{"ua":"XT1021"}],"dpi":[254,256.7],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"motorola/*/XT1023/*"},{"ua":"XT1023"}],"dpi":[254,256.7],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"motorola/*/XT1028/*"},{"ua":"XT1028"}],"dpi":[326.6,327.6],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"motorola/*/XT1034/*"},{"ua":"XT1034"}],"dpi":[326.6,328.4],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"motorola/*/XT1053/*"},{"ua":"XT1053"}],"dpi":[315.3,316.1],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"motorola/*/XT1562/*"},{"ua":"XT1562"}],"dpi":[403.4,402.7],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"motorola/*/Nexus 6/*"},{"ua":"Nexus 6 B"}],"dpi":[494.3,489.7],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"motorola/*/XT1063/*"},{"ua":"XT1063"}],"dpi":[295,296.6],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"motorola/*/XT1064/*"},{"ua":"XT1064"}],"dpi":[295,295.6],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"motorola/*/XT1092/*"},{"ua":"XT1092"}],"dpi":[422,424.1],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"motorola/*/XT1095/*"},{"ua":"XT1095"}],"dpi":[422,423.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"motorola/*/G4/*"},{"ua":"Moto G (4)"}],"dpi":401,"bw":4,"ac":1000},{"type":"android","rules":[{"mdmh":"OnePlus/*/A0001/*"},{"ua":"A0001"}],"dpi":[403.4,401],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONE E1001/*"},{"ua":"ONE E1001"}],"dpi":[442.4,441.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONE E1003/*"},{"ua":"ONE E1003"}],"dpi":[442.4,441.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONE E1005/*"},{"ua":"ONE E1005"}],"dpi":[442.4,441.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONE A2001/*"},{"ua":"ONE A2001"}],"dpi":[391.9,405.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONE A2003/*"},{"ua":"ONE A2003"}],"dpi":[391.9,405.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONE A2005/*"},{"ua":"ONE A2005"}],"dpi":[391.9,405.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONEPLUS A3000/*"},{"ua":"ONEPLUS A3000"}],"dpi":401,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONEPLUS A3003/*"},{"ua":"ONEPLUS A3003"}],"dpi":401,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONEPLUS A3010/*"},{"ua":"ONEPLUS A3010"}],"dpi":401,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONEPLUS A5000/*"},{"ua":"ONEPLUS A5000 "}],"dpi":[403.411,399.737],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONE A5010/*"},{"ua":"ONEPLUS A5010"}],"dpi":[403,400],"bw":2,"ac":1000},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONEPLUS A6000/*"},{"ua":"ONEPLUS A6000"}],"dpi":401,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONEPLUS A6003/*"},{"ua":"ONEPLUS A6003"}],"dpi":401,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONEPLUS A6010/*"},{"ua":"ONEPLUS A6010"}],"dpi":401,"bw":2,"ac":500},{"type":"android","rules":[{"mdmh":"OnePlus/*/ONEPLUS A6013/*"},{"ua":"ONEPLUS A6013"}],"dpi":401,"bw":2,"ac":500},{"type":"android","rules":[{"mdmh":"OPPO/*/X909/*"},{"ua":"X909"}],"dpi":[442.4,444.1],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/GT-I9082/*"},{"ua":"GT-I9082"}],"dpi":[184.7,185.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G360P/*"},{"ua":"SM-G360P"}],"dpi":[196.7,205.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/Nexus S/*"},{"ua":"Nexus S"}],"dpi":[234.5,229.8],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/GT-I9300/*"},{"ua":"GT-I9300"}],"dpi":[304.8,303.9],"bw":5,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SM-T230NU/*"},{"ua":"SM-T230NU"}],"dpi":216,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SGH-T399/*"},{"ua":"SGH-T399"}],"dpi":[217.7,231.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SGH-M919/*"},{"ua":"SGH-M919"}],"dpi":[440.8,437.7],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-N9005/*"},{"ua":"SM-N9005"}],"dpi":[386.4,387],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SAMSUNG-SM-N900A/*"},{"ua":"SAMSUNG-SM-N900A"}],"dpi":[386.4,387.7],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/GT-I9500/*"},{"ua":"GT-I9500"}],"dpi":[442.5,443.3],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/GT-I9505/*"},{"ua":"GT-I9505"}],"dpi":439.4,"bw":4,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G900F/*"},{"ua":"SM-G900F"}],"dpi":[415.6,431.6],"bw":5,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G900M/*"},{"ua":"SM-G900M"}],"dpi":[415.6,431.6],"bw":5,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G800F/*"},{"ua":"SM-G800F"}],"dpi":326.8,"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G906S/*"},{"ua":"SM-G906S"}],"dpi":[562.7,572.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/GT-I9300/*"},{"ua":"GT-I9300"}],"dpi":[306.7,304.8],"bw":5,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-T535/*"},{"ua":"SM-T535"}],"dpi":[142.6,136.4],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SM-N920C/*"},{"ua":"SM-N920C"}],"dpi":[515.1,518.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-N920P/*"},{"ua":"SM-N920P"}],"dpi":[386.3655,390.144],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-N920W8/*"},{"ua":"SM-N920W8"}],"dpi":[515.1,518.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/GT-I9300I/*"},{"ua":"GT-I9300I"}],"dpi":[304.8,305.8],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/GT-I9195/*"},{"ua":"GT-I9195"}],"dpi":[249.4,256.7],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SPH-L520/*"},{"ua":"SPH-L520"}],"dpi":[249.4,255.9],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SAMSUNG-SGH-I717/*"},{"ua":"SAMSUNG-SGH-I717"}],"dpi":285.8,"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SPH-D710/*"},{"ua":"SPH-D710"}],"dpi":[217.7,204.2],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/GT-N7100/*"},{"ua":"GT-N7100"}],"dpi":265.1,"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SCH-I605/*"},{"ua":"SCH-I605"}],"dpi":265.1,"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/Galaxy Nexus/*"},{"ua":"Galaxy Nexus"}],"dpi":[315.3,314.2],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-N910H/*"},{"ua":"SM-N910H"}],"dpi":[515.1,518],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-N910C/*"},{"ua":"SM-N910C"}],"dpi":[515.2,520.2],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G130M/*"},{"ua":"SM-G130M"}],"dpi":[165.9,164.8],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G928I/*"},{"ua":"SM-G928I"}],"dpi":[515.1,518.4],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G920F/*"},{"ua":"SM-G920F"}],"dpi":580.6,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G920P/*"},{"ua":"SM-G920P"}],"dpi":[522.5,577],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G925F/*"},{"ua":"SM-G925F"}],"dpi":580.6,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G925V/*"},{"ua":"SM-G925V"}],"dpi":[522.5,576.6],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G930F/*"},{"ua":"SM-G930F"}],"dpi":576.6,"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G935F/*"},{"ua":"SM-G935F"}],"dpi":533,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G950F/*"},{"ua":"SM-G950F"}],"dpi":[562.707,565.293],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G955U/*"},{"ua":"SM-G955U"}],"dpi":[522.514,525.762],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G955F/*"},{"ua":"SM-G955F"}],"dpi":[522.514,525.762],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G960F/*"},{"ua":"SM-G960F"}],"dpi":[569.575,571.5],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G9600/*"},{"ua":"SM-G9600"}],"dpi":[569.575,571.5],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G960T/*"},{"ua":"SM-G960T"}],"dpi":[569.575,571.5],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G960N/*"},{"ua":"SM-G960N"}],"dpi":[569.575,571.5],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G960U/*"},{"ua":"SM-G960U"}],"dpi":[569.575,571.5],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G9608/*"},{"ua":"SM-G9608"}],"dpi":[569.575,571.5],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G960FD/*"},{"ua":"SM-G960FD"}],"dpi":[569.575,571.5],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G960W/*"},{"ua":"SM-G960W"}],"dpi":[569.575,571.5],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G965F/*"},{"ua":"SM-G965F"}],"dpi":529,"bw":2,"ac":1000},{"type":"android","rules":[{"mdmh":"Sony/*/C6903/*"},{"ua":"C6903"}],"dpi":[442.5,443.3],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"Sony/*/D6653/*"},{"ua":"D6653"}],"dpi":[428.6,427.6],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"Sony/*/E6653/*"},{"ua":"E6653"}],"dpi":[428.6,425.7],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"Sony/*/E6853/*"},{"ua":"E6853"}],"dpi":[403.4,401.9],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"Sony/*/SGP321/*"},{"ua":"SGP321"}],"dpi":[224.7,224.1],"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"TCT/*/ALCATEL ONE TOUCH Fierce/*"},{"ua":"ALCATEL ONE TOUCH Fierce"}],"dpi":[240,247.5],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"THL/*/thl 5000/*"},{"ua":"thl 5000"}],"dpi":[480,443.3],"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"Fly/*/IQ4412/*"},{"ua":"IQ4412"}],"dpi":307.9,"bw":3,"ac":1000},{"type":"android","rules":[{"mdmh":"ZTE/*/ZTE Blade L2/*"},{"ua":"ZTE Blade L2"}],"dpi":240,"bw":3,"ac":500},{"type":"android","rules":[{"mdmh":"BENEVE/*/VR518/*"},{"ua":"VR518"}],"dpi":480,"bw":3,"ac":500},{"type":"ios","rules":[{"res":[640,960]}],"dpi":[325.1,328.4],"bw":4,"ac":1000},{"type":"ios","rules":[{"res":[640,1136]}],"dpi":[317.1,320.2],"bw":3,"ac":1000},{"type":"ios","rules":[{"res":[750,1334]}],"dpi":326.4,"bw":4,"ac":1000},{"type":"ios","rules":[{"res":[1242,2208]}],"dpi":[453.6,458.4],"bw":4,"ac":1000},{"type":"ios","rules":[{"res":[1125,2001]}],"dpi":[410.9,415.4],"bw":4,"ac":1000},{"type":"ios","rules":[{"res":[1125,2436]}],"dpi":458,"bw":4,"ac":1000},{"type":"android","rules":[{"mdmh":"Huawei/*/EML-L29/*"},{"ua":"EML-L29"}],"dpi":428,"bw":3.45,"ac":500},{"type":"android","rules":[{"mdmh":"Nokia/*/Nokia 7.1/*"},{"ua":"Nokia 7.1"}],"dpi":[432,431.9],"bw":3,"ac":500},{"type":"ios","rules":[{"res":[1242,2688]}],"dpi":458,"bw":4,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G570M/*"},{"ua":"SM-G570M"}],"dpi":320,"bw":3.684,"ac":1000},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G970F/*"},{"ua":"SM-G970F"}],"dpi":438,"bw":2.281,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G973F/*"},{"ua":"SM-G973F"}],"dpi":550,"bw":2.002,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G975F/*"},{"ua":"SM-G975F"}],"dpi":522,"bw":2.054,"ac":500},{"type":"android","rules":[{"mdmh":"samsung/*/SM-G977F/*"},{"ua":"SM-G977F"}],"dpi":505,"bw":2.334,"ac":500},{"type":"ios","rules":[{"res":[828,1792]}],"dpi":326,"bw":5,"ac":500}];
                var DPDB_CACHE = {
                	format: format,
                	last_updated: last_updated,
                	devices: devices
                };
                function Dpdb(url, onDeviceParamsUpdated) {
                  this.dpdb = DPDB_CACHE;
                  this.recalculateDeviceParams_();
                  if (url) {
                    this.onDeviceParamsUpdated = onDeviceParamsUpdated;
                    var xhr = new XMLHttpRequest();
                    var obj = this;
                    xhr.open('GET', url, true);
                    xhr.addEventListener('load', function () {
                      obj.loading = false;
                      if (xhr.status >= 200 && xhr.status <= 299) {
                        obj.dpdb = JSON.parse(xhr.response);
                        obj.recalculateDeviceParams_();
                      } else {
                        console.error('Error loading online DPDB!');
                      }
                    });
                    xhr.send();
                  }
                }
                Dpdb.prototype.getDeviceParams = function () {
                  return this.deviceParams;
                };
                Dpdb.prototype.recalculateDeviceParams_ = function () {
                  var newDeviceParams = this.calcDeviceParams_();
                  if (newDeviceParams) {
                    this.deviceParams = newDeviceParams;
                    if (this.onDeviceParamsUpdated) {
                      this.onDeviceParamsUpdated(this.deviceParams);
                    }
                  } else {
                    console.error('Failed to recalculate device parameters.');
                  }
                };
                Dpdb.prototype.calcDeviceParams_ = function () {
                  var db = this.dpdb;
                  if (!db) {
                    console.error('DPDB not available.');
                    return null;
                  }
                  if (db.format != 1) {
                    console.error('DPDB has unexpected format version.');
                    return null;
                  }
                  if (!db.devices || !db.devices.length) {
                    console.error('DPDB does not have a devices section.');
                    return null;
                  }
                  var userAgent = navigator.userAgent || navigator.vendor || window.opera;
                  var width = getScreenWidth();
                  var height = getScreenHeight();
                  if (!db.devices) {
                    console.error('DPDB has no devices section.');
                    return null;
                  }
                  for (var i = 0; i < db.devices.length; i++) {
                    var device = db.devices[i];
                    if (!device.rules) {
                      console.warn('Device[' + i + '] has no rules section.');
                      continue;
                    }
                    if (device.type != 'ios' && device.type != 'android') {
                      console.warn('Device[' + i + '] has invalid type.');
                      continue;
                    }
                    if (isIOS() != (device.type == 'ios')) continue;
                    var matched = false;
                    for (var j = 0; j < device.rules.length; j++) {
                      var rule = device.rules[j];
                      if (this.ruleMatches_(rule, userAgent, width, height)) {
                        matched = true;
                        break;
                      }
                    }
                    if (!matched) continue;
                    var xdpi = device.dpi[0] || device.dpi;
                    var ydpi = device.dpi[1] || device.dpi;
                    return new DeviceParams({ xdpi: xdpi, ydpi: ydpi, bevelMm: device.bw });
                  }
                  console.warn('No DPDB device match.');
                  return null;
                };
                Dpdb.prototype.ruleMatches_ = function (rule, ua, screenWidth, screenHeight) {
                  if (!rule.ua && !rule.res) return false;
                  if (rule.ua && rule.ua.substring(0, 2) === 'SM') rule.ua = rule.ua.substring(0, 7);
                  if (rule.ua && ua.indexOf(rule.ua) < 0) return false;
                  if (rule.res) {
                    if (!rule.res[0] || !rule.res[1]) return false;
                    var resX = rule.res[0];
                    var resY = rule.res[1];
                    if (Math.min(screenWidth, screenHeight) != Math.min(resX, resY) || Math.max(screenWidth, screenHeight) != Math.max(resX, resY)) {
                      return false;
                    }
                  }
                  return true;
                };
                function DeviceParams(params) {
                  this.xdpi = params.xdpi;
                  this.ydpi = params.ydpi;
                  this.bevelMm = params.bevelMm;
                }
                function SensorSample(sample, timestampS) {
                  this.set(sample, timestampS);
                }
                SensorSample.prototype.set = function (sample, timestampS) {
                  this.sample = sample;
                  this.timestampS = timestampS;
                };
                SensorSample.prototype.copy = function (sensorSample) {
                  this.set(sensorSample.sample, sensorSample.timestampS);
                };
                function ComplementaryFilter(kFilter, isDebug) {
                  this.kFilter = kFilter;
                  this.isDebug = isDebug;
                  this.currentAccelMeasurement = new SensorSample();
                  this.currentGyroMeasurement = new SensorSample();
                  this.previousGyroMeasurement = new SensorSample();
                  if (isIOS()) {
                    this.filterQ = new Quaternion(-1, 0, 0, 1);
                  } else {
                    this.filterQ = new Quaternion(1, 0, 0, 1);
                  }
                  this.previousFilterQ = new Quaternion();
                  this.previousFilterQ.copy(this.filterQ);
                  this.accelQ = new Quaternion();
                  this.isOrientationInitialized = false;
                  this.estimatedGravity = new Vector3();
                  this.measuredGravity = new Vector3();
                  this.gyroIntegralQ = new Quaternion();
                }
                ComplementaryFilter.prototype.addAccelMeasurement = function (vector, timestampS) {
                  this.currentAccelMeasurement.set(vector, timestampS);
                };
                ComplementaryFilter.prototype.addGyroMeasurement = function (vector, timestampS) {
                  this.currentGyroMeasurement.set(vector, timestampS);
                  var deltaT = timestampS - this.previousGyroMeasurement.timestampS;
                  if (isTimestampDeltaValid(deltaT)) {
                    this.run_();
                  }
                  this.previousGyroMeasurement.copy(this.currentGyroMeasurement);
                };
                ComplementaryFilter.prototype.run_ = function () {
                  if (!this.isOrientationInitialized) {
                    this.accelQ = this.accelToQuaternion_(this.currentAccelMeasurement.sample);
                    this.previousFilterQ.copy(this.accelQ);
                    this.isOrientationInitialized = true;
                    return;
                  }
                  var deltaT = this.currentGyroMeasurement.timestampS - this.previousGyroMeasurement.timestampS;
                  var gyroDeltaQ = this.gyroToQuaternionDelta_(this.currentGyroMeasurement.sample, deltaT);
                  this.gyroIntegralQ.multiply(gyroDeltaQ);
                  this.filterQ.copy(this.previousFilterQ);
                  this.filterQ.multiply(gyroDeltaQ);
                  var invFilterQ = new Quaternion();
                  invFilterQ.copy(this.filterQ);
                  invFilterQ.inverse();
                  this.estimatedGravity.set(0, 0, -1);
                  this.estimatedGravity.applyQuaternion(invFilterQ);
                  this.estimatedGravity.normalize();
                  this.measuredGravity.copy(this.currentAccelMeasurement.sample);
                  this.measuredGravity.normalize();
                  var deltaQ = new Quaternion();
                  deltaQ.setFromUnitVectors(this.estimatedGravity, this.measuredGravity);
                  deltaQ.inverse();
                  if (this.isDebug) {
                    console.log('Delta: %d deg, G_est: (%s, %s, %s), G_meas: (%s, %s, %s)', radToDeg * getQuaternionAngle(deltaQ), this.estimatedGravity.x.toFixed(1), this.estimatedGravity.y.toFixed(1), this.estimatedGravity.z.toFixed(1), this.measuredGravity.x.toFixed(1), this.measuredGravity.y.toFixed(1), this.measuredGravity.z.toFixed(1));
                  }
                  var targetQ = new Quaternion();
                  targetQ.copy(this.filterQ);
                  targetQ.multiply(deltaQ);
                  this.filterQ.slerp(targetQ, 1 - this.kFilter);
                  this.previousFilterQ.copy(this.filterQ);
                };
                ComplementaryFilter.prototype.getOrientation = function () {
                  return this.filterQ;
                };
                ComplementaryFilter.prototype.accelToQuaternion_ = function (accel) {
                  var normAccel = new Vector3();
                  normAccel.copy(accel);
                  normAccel.normalize();
                  var quat = new Quaternion();
                  quat.setFromUnitVectors(new Vector3(0, 0, -1), normAccel);
                  quat.inverse();
                  return quat;
                };
                ComplementaryFilter.prototype.gyroToQuaternionDelta_ = function (gyro, dt) {
                  var quat = new Quaternion();
                  var axis = new Vector3();
                  axis.copy(gyro);
                  axis.normalize();
                  quat.setFromAxisAngle(axis, gyro.length() * dt);
                  return quat;
                };
                function PosePredictor(predictionTimeS, isDebug) {
                  this.predictionTimeS = predictionTimeS;
                  this.isDebug = isDebug;
                  this.previousQ = new Quaternion();
                  this.previousTimestampS = null;
                  this.deltaQ = new Quaternion();
                  this.outQ = new Quaternion();
                }
                PosePredictor.prototype.getPrediction = function (currentQ, gyro, timestampS) {
                  if (!this.previousTimestampS) {
                    this.previousQ.copy(currentQ);
                    this.previousTimestampS = timestampS;
                    return currentQ;
                  }
                  var axis = new Vector3();
                  axis.copy(gyro);
                  axis.normalize();
                  var angularSpeed = gyro.length();
                  if (angularSpeed < degToRad * 20) {
                    if (this.isDebug) {
                      console.log('Moving slowly, at %s deg/s: no prediction', (radToDeg * angularSpeed).toFixed(1));
                    }
                    this.outQ.copy(currentQ);
                    this.previousQ.copy(currentQ);
                    return this.outQ;
                  }
                  var predictAngle = angularSpeed * this.predictionTimeS;
                  this.deltaQ.setFromAxisAngle(axis, predictAngle);
                  this.outQ.copy(this.previousQ);
                  this.outQ.multiply(this.deltaQ);
                  this.previousQ.copy(currentQ);
                  this.previousTimestampS = timestampS;
                  return this.outQ;
                };
                function FusionPoseSensor(kFilter, predictionTime, yawOnly, isDebug) {
                  this.yawOnly = yawOnly;
                  this.accelerometer = new Vector3();
                  this.gyroscope = new Vector3();
                  this.filter = new ComplementaryFilter(kFilter, isDebug);
                  this.posePredictor = new PosePredictor(predictionTime, isDebug);
                  this.isFirefoxAndroid = isFirefoxAndroid();
                  this.isIOS = isIOS();
                  var chromeVersion = getChromeVersion();
                  this.isDeviceMotionInRadians = !this.isIOS && chromeVersion && chromeVersion < 66;
                  this.isWithoutDeviceMotion = isChromeWithoutDeviceMotion() || isSafariWithoutDeviceMotion();
                  this.filterToWorldQ = new Quaternion();
                  if (isIOS()) {
                    this.filterToWorldQ.setFromAxisAngle(new Vector3(1, 0, 0), Math.PI / 2);
                  } else {
                    this.filterToWorldQ.setFromAxisAngle(new Vector3(1, 0, 0), -Math.PI / 2);
                  }
                  this.inverseWorldToScreenQ = new Quaternion();
                  this.worldToScreenQ = new Quaternion();
                  this.originalPoseAdjustQ = new Quaternion();
                  this.originalPoseAdjustQ.setFromAxisAngle(new Vector3(0, 0, 1), -window.orientation * Math.PI / 180);
                  this.setScreenTransform_();
                  if (isLandscapeMode()) {
                    this.filterToWorldQ.multiply(this.inverseWorldToScreenQ);
                  }
                  this.resetQ = new Quaternion();
                  this.orientationOut_ = new Float32Array(4);
                  this.start();
                }
                FusionPoseSensor.prototype.getPosition = function () {
                  return null;
                };
                FusionPoseSensor.prototype.getOrientation = function () {
                  var orientation = void 0;
                  if (this.isWithoutDeviceMotion && this._deviceOrientationQ) {
                    this.deviceOrientationFixQ = this.deviceOrientationFixQ || function () {
                      var z = new Quaternion().setFromAxisAngle(new Vector3(0, 0, -1), 0);
                      var y = new Quaternion();
                      if (window.orientation === -90) {
                        y.setFromAxisAngle(new Vector3(0, 1, 0), Math.PI / -2);
                      } else {
                        y.setFromAxisAngle(new Vector3(0, 1, 0), Math.PI / 2);
                      }
                      return z.multiply(y);
                    }();
                    this.deviceOrientationFilterToWorldQ = this.deviceOrientationFilterToWorldQ || function () {
                      var q = new Quaternion();
                      q.setFromAxisAngle(new Vector3(1, 0, 0), -Math.PI / 2);
                      return q;
                    }();
                    orientation = this._deviceOrientationQ;
                    var out = new Quaternion();
                    out.copy(orientation);
                    out.multiply(this.deviceOrientationFilterToWorldQ);
                    out.multiply(this.resetQ);
                    out.multiply(this.worldToScreenQ);
                    out.multiplyQuaternions(this.deviceOrientationFixQ, out);
                    if (this.yawOnly) {
                      out.x = 0;
                      out.z = 0;
                      out.normalize();
                    }
                    this.orientationOut_[0] = out.x;
                    this.orientationOut_[1] = out.y;
                    this.orientationOut_[2] = out.z;
                    this.orientationOut_[3] = out.w;
                    return this.orientationOut_;
                  } else {
                    var filterOrientation = this.filter.getOrientation();
                    orientation = this.posePredictor.getPrediction(filterOrientation, this.gyroscope, this.previousTimestampS);
                  }
                  var out = new Quaternion();
                  out.copy(this.filterToWorldQ);
                  out.multiply(this.resetQ);
                  out.multiply(orientation);
                  out.multiply(this.worldToScreenQ);
                  if (this.yawOnly) {
                    out.x = 0;
                    out.z = 0;
                    out.normalize();
                  }
                  this.orientationOut_[0] = out.x;
                  this.orientationOut_[1] = out.y;
                  this.orientationOut_[2] = out.z;
                  this.orientationOut_[3] = out.w;
                  return this.orientationOut_;
                };
                FusionPoseSensor.prototype.resetPose = function () {
                  this.resetQ.copy(this.filter.getOrientation());
                  this.resetQ.x = 0;
                  this.resetQ.y = 0;
                  this.resetQ.z *= -1;
                  this.resetQ.normalize();
                  if (isLandscapeMode()) {
                    this.resetQ.multiply(this.inverseWorldToScreenQ);
                  }
                  this.resetQ.multiply(this.originalPoseAdjustQ);
                };
                FusionPoseSensor.prototype.onDeviceOrientation_ = function (e) {
                  this._deviceOrientationQ = this._deviceOrientationQ || new Quaternion();
                  var alpha = e.alpha,
                      beta = e.beta,
                      gamma = e.gamma;
                  alpha = (alpha || 0) * Math.PI / 180;
                  beta = (beta || 0) * Math.PI / 180;
                  gamma = (gamma || 0) * Math.PI / 180;
                  this._deviceOrientationQ.setFromEulerYXZ(beta, alpha, -gamma);
                };
                FusionPoseSensor.prototype.onDeviceMotion_ = function (deviceMotion) {
                  this.updateDeviceMotion_(deviceMotion);
                };
                FusionPoseSensor.prototype.updateDeviceMotion_ = function (deviceMotion) {
                  var accGravity = deviceMotion.accelerationIncludingGravity;
                  var rotRate = deviceMotion.rotationRate;
                  var timestampS = deviceMotion.timeStamp / 1000;
                  var deltaS = timestampS - this.previousTimestampS;
                  if (deltaS < 0) {
                    warnOnce('fusion-pose-sensor:invalid:non-monotonic', 'Invalid timestamps detected: non-monotonic timestamp from devicemotion');
                    this.previousTimestampS = timestampS;
                    return;
                  } else if (deltaS <= MIN_TIMESTEP || deltaS > MAX_TIMESTEP) {
                    warnOnce('fusion-pose-sensor:invalid:outside-threshold', 'Invalid timestamps detected: Timestamp from devicemotion outside expected range.');
                    this.previousTimestampS = timestampS;
                    return;
                  }
                  this.accelerometer.set(-accGravity.x, -accGravity.y, -accGravity.z);
                  if (rotRate) {
                    if (isR7()) {
                      this.gyroscope.set(-rotRate.beta, rotRate.alpha, rotRate.gamma);
                    } else {
                      this.gyroscope.set(rotRate.alpha, rotRate.beta, rotRate.gamma);
                    }
                    if (!this.isDeviceMotionInRadians) {
                      this.gyroscope.multiplyScalar(Math.PI / 180);
                    }
                    this.filter.addGyroMeasurement(this.gyroscope, timestampS);
                  }
                  this.filter.addAccelMeasurement(this.accelerometer, timestampS);
                  this.previousTimestampS = timestampS;
                };
                FusionPoseSensor.prototype.onOrientationChange_ = function (screenOrientation) {
                  this.setScreenTransform_();
                };
                FusionPoseSensor.prototype.onMessage_ = function (event) {
                  var message = event.data;
                  if (!message || !message.type) {
                    return;
                  }
                  var type = message.type.toLowerCase();
                  if (type !== 'devicemotion') {
                    return;
                  }
                  this.updateDeviceMotion_(message.deviceMotionEvent);
                };
                FusionPoseSensor.prototype.setScreenTransform_ = function () {
                  this.worldToScreenQ.set(0, 0, 0, 1);
                  switch (window.orientation) {
                    case 0:
                      break;
                    case 90:
                      this.worldToScreenQ.setFromAxisAngle(new Vector3(0, 0, 1), -Math.PI / 2);
                      break;
                    case -90:
                      this.worldToScreenQ.setFromAxisAngle(new Vector3(0, 0, 1), Math.PI / 2);
                      break;
                  }
                  this.inverseWorldToScreenQ.copy(this.worldToScreenQ);
                  this.inverseWorldToScreenQ.inverse();
                };
                FusionPoseSensor.prototype.start = function () {
                  this.onDeviceMotionCallback_ = this.onDeviceMotion_.bind(this);
                  this.onOrientationChangeCallback_ = this.onOrientationChange_.bind(this);
                  this.onMessageCallback_ = this.onMessage_.bind(this);
                  this.onDeviceOrientationCallback_ = this.onDeviceOrientation_.bind(this);
                  if (isIOS() && isInsideCrossOriginIFrame()) {
                    window.addEventListener('message', this.onMessageCallback_);
                  }
                  window.addEventListener('orientationchange', this.onOrientationChangeCallback_);
                  if (this.isWithoutDeviceMotion) {
                    window.addEventListener('deviceorientation', this.onDeviceOrientationCallback_);
                  } else {
                    window.addEventListener('devicemotion', this.onDeviceMotionCallback_);
                  }
                };
                FusionPoseSensor.prototype.stop = function () {
                  window.removeEventListener('devicemotion', this.onDeviceMotionCallback_);
                  window.removeEventListener('deviceorientation', this.onDeviceOrientationCallback_);
                  window.removeEventListener('orientationchange', this.onOrientationChangeCallback_);
                  window.removeEventListener('message', this.onMessageCallback_);
                };
                var SENSOR_FREQUENCY = 60;
                var X_AXIS = new Vector3(1, 0, 0);
                var Z_AXIS = new Vector3(0, 0, 1);
                var SENSOR_TO_VR = new Quaternion();
                SENSOR_TO_VR.setFromAxisAngle(X_AXIS, -Math.PI / 2);
                SENSOR_TO_VR.multiply(new Quaternion().setFromAxisAngle(Z_AXIS, Math.PI / 2));
                var PoseSensor = function () {
                  function PoseSensor(config) {
                    classCallCheck(this, PoseSensor);
                    this.config = config;
                    this.sensor = null;
                    this.fusionSensor = null;
                    this._out = new Float32Array(4);
                    this.api = null;
                    this.errors = [];
                    this._sensorQ = new Quaternion();
                    this._outQ = new Quaternion();
                    this._onSensorRead = this._onSensorRead.bind(this);
                    this._onSensorError = this._onSensorError.bind(this);
                    this.init();
                  }
                  createClass(PoseSensor, [{
                    key: 'init',
                    value: function init() {
                      var sensor = null;
                      try {
                        sensor = new RelativeOrientationSensor({
                          frequency: SENSOR_FREQUENCY,
                          referenceFrame: 'screen'
                        });
                        sensor.addEventListener('error', this._onSensorError);
                      } catch (error) {
                        this.errors.push(error);
                        if (error.name === 'SecurityError') {
                          console.error('Cannot construct sensors due to the Feature Policy');
                          console.warn('Attempting to fall back using "devicemotion"; however this will ' + 'fail in the future without correct permissions.');
                          this.useDeviceMotion();
                        } else if (error.name === 'ReferenceError') {
                          this.useDeviceMotion();
                        } else {
                          console.error(error);
                        }
                      }
                      if (sensor) {
                        this.api = 'sensor';
                        this.sensor = sensor;
                        this.sensor.addEventListener('reading', this._onSensorRead);
                        this.sensor.start();
                      }
                    }
                  }, {
                    key: 'useDeviceMotion',
                    value: function useDeviceMotion() {
                      this.api = 'devicemotion';
                      this.fusionSensor = new FusionPoseSensor(this.config.K_FILTER, this.config.PREDICTION_TIME_S, this.config.YAW_ONLY, this.config.DEBUG);
                      if (this.sensor) {
                        this.sensor.removeEventListener('reading', this._onSensorRead);
                        this.sensor.removeEventListener('error', this._onSensorError);
                        this.sensor = null;
                      }
                    }
                  }, {
                    key: 'getOrientation',
                    value: function getOrientation() {
                      if (this.fusionSensor) {
                        return this.fusionSensor.getOrientation();
                      }
                      if (!this.sensor || !this.sensor.quaternion) {
                        this._out[0] = this._out[1] = this._out[2] = 0;
                        this._out[3] = 1;
                        return this._out;
                      }
                      var q = this.sensor.quaternion;
                      this._sensorQ.set(q[0], q[1], q[2], q[3]);
                      var out = this._outQ;
                      out.copy(SENSOR_TO_VR);
                      out.multiply(this._sensorQ);
                      if (this.config.YAW_ONLY) {
                        out.x = out.z = 0;
                        out.normalize();
                      }
                      this._out[0] = out.x;
                      this._out[1] = out.y;
                      this._out[2] = out.z;
                      this._out[3] = out.w;
                      return this._out;
                    }
                  }, {
                    key: '_onSensorError',
                    value: function _onSensorError(event) {
                      this.errors.push(event.error);
                      if (event.error.name === 'NotAllowedError') {
                        console.error('Permission to access sensor was denied');
                      } else if (event.error.name === 'NotReadableError') {
                        console.error('Sensor could not be read');
                      } else {
                        console.error(event.error);
                      }
                      this.useDeviceMotion();
                    }
                  }, {
                    key: '_onSensorRead',
                    value: function _onSensorRead() {}
                  }]);
                  return PoseSensor;
                }();
                var rotateInstructionsAsset = "<svg width='198' height='240' viewBox='0 0 198 240' xmlns='http://www.w3.org/2000/svg'><g fill='none' fill-rule='evenodd'><path d='M149.625 109.527l6.737 3.891v.886c0 .177.013.36.038.549.01.081.02.162.027.242.14 1.415.974 2.998 2.105 3.999l5.72 5.062.081-.09s4.382-2.53 5.235-3.024l25.97 14.993v54.001c0 .771-.386 1.217-.948 1.217-.233 0-.495-.076-.772-.236l-23.967-13.838-.014.024-27.322 15.775-.85-1.323c-4.731-1.529-9.748-2.74-14.951-3.61a.27.27 0 0 0-.007.024l-5.067 16.961-7.891 4.556-.037-.063v27.59c0 .772-.386 1.217-.948 1.217-.232 0-.495-.076-.772-.236l-42.473-24.522c-.95-.549-1.72-1.877-1.72-2.967v-1.035l-.021.047a5.111 5.111 0 0 0-1.816-.399 5.682 5.682 0 0 0-.546.001 13.724 13.724 0 0 1-1.918-.041c-1.655-.153-3.2-.6-4.404-1.296l-46.576-26.89.005.012-10.278-18.75c-1.001-1.827-.241-4.216 1.698-5.336l56.011-32.345a4.194 4.194 0 0 1 2.099-.572c1.326 0 2.572.659 3.227 1.853l.005-.003.227.413-.006.004a9.63 9.63 0 0 0 1.477 2.018l.277.27c1.914 1.85 4.468 2.801 7.113 2.801 1.949 0 3.948-.517 5.775-1.572.013 0 7.319-4.219 7.319-4.219a4.194 4.194 0 0 1 2.099-.572c1.326 0 2.572.658 3.226 1.853l3.25 5.928.022-.018 6.785 3.917-.105-.182 46.881-26.965m0-1.635c-.282 0-.563.073-.815.218l-46.169 26.556-5.41-3.124-3.005-5.481c-.913-1.667-2.699-2.702-4.66-2.703-1.011 0-2.02.274-2.917.792a3825 3825 0 0 1-7.275 4.195l-.044.024a9.937 9.937 0 0 1-4.957 1.353c-2.292 0-4.414-.832-5.976-2.342l-.252-.245a7.992 7.992 0 0 1-1.139-1.534 1.379 1.379 0 0 0-.06-.122l-.227-.414a1.718 1.718 0 0 0-.095-.154c-.938-1.574-2.673-2.545-4.571-2.545-1.011 0-2.02.274-2.917.792L3.125 155.502c-2.699 1.559-3.738 4.94-2.314 7.538l10.278 18.75c.177.323.448.563.761.704l46.426 26.804c1.403.81 3.157 1.332 5.072 1.508a15.661 15.661 0 0 0 2.146.046 4.766 4.766 0 0 1 .396 0c.096.004.19.011.283.022.109 1.593 1.159 3.323 2.529 4.114l42.472 24.522c.524.302 1.058.455 1.59.455 1.497 0 2.583-1.2 2.583-2.852v-26.562l7.111-4.105a1.64 1.64 0 0 0 .749-.948l4.658-15.593c4.414.797 8.692 1.848 12.742 3.128l.533.829a1.634 1.634 0 0 0 2.193.531l26.532-15.317L193 192.433c.523.302 1.058.455 1.59.455 1.497 0 2.583-1.199 2.583-2.852v-54.001c0-.584-.312-1.124-.818-1.416l-25.97-14.993a1.633 1.633 0 0 0-1.636.001c-.606.351-2.993 1.73-4.325 2.498l-4.809-4.255c-.819-.725-1.461-1.933-1.561-2.936a7.776 7.776 0 0 0-.033-.294 2.487 2.487 0 0 1-.023-.336v-.886c0-.584-.312-1.123-.817-1.416l-6.739-3.891a1.633 1.633 0 0 0-.817-.219' fill='#455A64'/><path d='M96.027 132.636l46.576 26.891c1.204.695 1.979 1.587 2.242 2.541l-.01.007-81.374 46.982h-.001c-1.654-.152-3.199-.6-4.403-1.295l-46.576-26.891 83.546-48.235' fill='#FAFAFA'/><path d='M63.461 209.174c-.008 0-.015 0-.022-.002-1.693-.156-3.228-.609-4.441-1.309l-46.576-26.89a.118.118 0 0 1 0-.203l83.546-48.235a.117.117 0 0 1 .117 0l46.576 26.891c1.227.708 2.021 1.612 2.296 2.611a.116.116 0 0 1-.042.124l-.021.016-81.375 46.981a.11.11 0 0 1-.058.016zm-50.747-28.303l46.401 26.79c1.178.68 2.671 1.121 4.32 1.276l81.272-46.922c-.279-.907-1.025-1.73-2.163-2.387l-46.517-26.857-83.313 48.1z' fill='#607D8B'/><path d='M148.327 165.471a5.85 5.85 0 0 1-.546.001c-1.894-.083-3.302-1.038-3.145-2.132a2.693 2.693 0 0 0-.072-1.105l-81.103 46.822c.628.058 1.272.073 1.918.042.182-.009.364-.009.546-.001 1.894.083 3.302 1.038 3.145 2.132l79.257-45.759' fill='#FFF'/><path d='M69.07 211.347a.118.118 0 0 1-.115-.134c.045-.317-.057-.637-.297-.925-.505-.61-1.555-1.022-2.738-1.074a5.966 5.966 0 0 0-.535.001 14.03 14.03 0 0 1-1.935-.041.117.117 0 0 1-.103-.092.116.116 0 0 1 .055-.126l81.104-46.822a.117.117 0 0 1 .171.07c.104.381.129.768.074 1.153-.045.316.057.637.296.925.506.61 1.555 1.021 2.739 1.073.178.008.357.008.535-.001a.117.117 0 0 1 .064.218l-79.256 45.759a.114.114 0 0 1-.059.016zm-3.405-2.372c.089 0 .177.002.265.006 1.266.056 2.353.488 2.908 1.158.227.274.35.575.36.882l78.685-45.429c-.036 0-.072-.001-.107-.003-1.267-.056-2.354-.489-2.909-1.158-.282-.34-.402-.724-.347-1.107a2.604 2.604 0 0 0-.032-.91L63.846 208.97a13.91 13.91 0 0 0 1.528.012c.097-.005.194-.007.291-.007z' fill='#607D8B'/><path d='M2.208 162.134c-1.001-1.827-.241-4.217 1.698-5.337l56.011-32.344c1.939-1.12 4.324-.546 5.326 1.281l.232.41a9.344 9.344 0 0 0 1.47 2.021l.278.27c3.325 3.214 8.583 3.716 12.888 1.23l7.319-4.22c1.94-1.119 4.324-.546 5.325 1.282l3.25 5.928-83.519 48.229-10.278-18.75z' fill='#FAFAFA'/><path d='M12.486 181.001a.112.112 0 0 1-.031-.005.114.114 0 0 1-.071-.056L2.106 162.19c-1.031-1.88-.249-4.345 1.742-5.494l56.01-32.344a4.328 4.328 0 0 1 2.158-.588c1.415 0 2.65.702 3.311 1.882.01.008.018.017.024.028l.227.414a.122.122 0 0 1 .013.038 9.508 9.508 0 0 0 1.439 1.959l.275.266c1.846 1.786 4.344 2.769 7.031 2.769 1.977 0 3.954-.538 5.717-1.557a.148.148 0 0 1 .035-.013l7.284-4.206a4.321 4.321 0 0 1 2.157-.588c1.427 0 2.672.716 3.329 1.914l3.249 5.929a.116.116 0 0 1-.044.157l-83.518 48.229a.116.116 0 0 1-.059.016zm49.53-57.004c-.704 0-1.41.193-2.041.557l-56.01 32.345c-1.882 1.086-2.624 3.409-1.655 5.179l10.221 18.645 83.317-48.112-3.195-5.829c-.615-1.122-1.783-1.792-3.124-1.792a4.08 4.08 0 0 0-2.04.557l-7.317 4.225a.148.148 0 0 1-.035.013 11.7 11.7 0 0 1-5.801 1.569c-2.748 0-5.303-1.007-7.194-2.835l-.278-.27a9.716 9.716 0 0 1-1.497-2.046.096.096 0 0 1-.013-.037l-.191-.347a.11.11 0 0 1-.023-.029c-.615-1.123-1.783-1.793-3.124-1.793z' fill='#607D8B'/><path d='M42.434 155.808c-2.51-.001-4.697-1.258-5.852-3.365-1.811-3.304-.438-7.634 3.059-9.654l12.291-7.098a7.599 7.599 0 0 1 3.789-1.033c2.51 0 4.697 1.258 5.852 3.365 1.811 3.304.439 7.634-3.059 9.654l-12.291 7.098a7.606 7.606 0 0 1-3.789 1.033zm13.287-20.683a7.128 7.128 0 0 0-3.555.971l-12.291 7.098c-3.279 1.893-4.573 5.942-2.883 9.024 1.071 1.955 3.106 3.122 5.442 3.122a7.13 7.13 0 0 0 3.556-.97l12.291-7.098c3.279-1.893 4.572-5.942 2.883-9.024-1.072-1.955-3.106-3.123-5.443-3.123z' fill='#607D8B'/><path d='M149.588 109.407l6.737 3.89v.887c0 .176.013.36.037.549.011.081.02.161.028.242.14 1.415.973 2.998 2.105 3.999l7.396 6.545c.177.156.358.295.541.415 1.579 1.04 2.95.466 3.062-1.282.049-.784.057-1.595.023-2.429l-.003-.16v-1.151l25.987 15.003v54c0 1.09-.77 1.53-1.72.982l-42.473-24.523c-.95-.548-1.72-1.877-1.72-2.966v-34.033' fill='#FAFAFA'/><path d='M194.553 191.25c-.257 0-.54-.085-.831-.253l-42.472-24.521c-.981-.567-1.779-1.943-1.779-3.068v-34.033h.234v34.033c0 1.051.745 2.336 1.661 2.866l42.473 24.521c.424.245.816.288 1.103.122.285-.164.442-.52.442-1.002v-53.933l-25.753-14.868.003 1.106c.034.832.026 1.654-.024 2.439-.054.844-.396 1.464-.963 1.746-.619.309-1.45.173-2.28-.373a5.023 5.023 0 0 1-.553-.426l-7.397-6.544c-1.158-1.026-1.999-2.625-2.143-4.076a9.624 9.624 0 0 0-.027-.238 4.241 4.241 0 0 1-.038-.564v-.82l-6.68-3.856.117-.202 6.738 3.89.058.034v.954c0 .171.012.351.036.533.011.083.021.165.029.246.138 1.395.948 2.935 2.065 3.923l7.397 6.545c.173.153.35.289.527.406.758.499 1.504.63 2.047.359.49-.243.786-.795.834-1.551.05-.778.057-1.591.024-2.417l-.004-.163v-1.355l.175.1 25.987 15.004.059.033v54.068c0 .569-.198.996-.559 1.204a1.002 1.002 0 0 1-.506.131' fill='#607D8B'/><path d='M145.685 163.161l24.115 13.922-25.978 14.998-1.462-.307c-6.534-2.17-13.628-3.728-21.019-4.616-4.365-.524-8.663 1.096-9.598 3.62a2.746 2.746 0 0 0-.011 1.928c1.538 4.267 4.236 8.363 7.995 12.135l.532.845-25.977 14.997-24.115-13.922 75.518-43.6' fill='#FFF'/><path d='M94.282 220.818l-.059-.033-24.29-14.024.175-.101 75.577-43.634.058.033 24.29 14.024-26.191 15.122-.045-.01-1.461-.307c-6.549-2.174-13.613-3.725-21.009-4.614a13.744 13.744 0 0 0-1.638-.097c-3.758 0-7.054 1.531-7.837 3.642a2.62 2.62 0 0 0-.01 1.848c1.535 4.258 4.216 8.326 7.968 12.091l.016.021.526.835.006.01.064.102-.105.061-25.977 14.998-.058.033zm-23.881-14.057l23.881 13.788 24.802-14.32c.546-.315.846-.489 1.017-.575l-.466-.74c-3.771-3.787-6.467-7.881-8.013-12.168a2.851 2.851 0 0 1 .011-2.008c.815-2.199 4.203-3.795 8.056-3.795.557 0 1.117.033 1.666.099 7.412.891 14.491 2.445 21.041 4.621.836.175 1.215.254 1.39.304l25.78-14.884-23.881-13.788-75.284 43.466z' fill='#607D8B'/><path d='M167.23 125.979v50.871l-27.321 15.773-6.461-14.167c-.91-1.996-3.428-1.738-5.624.574a10.238 10.238 0 0 0-2.33 4.018l-6.46 21.628-27.322 15.774v-50.871l75.518-43.6' fill='#FFF'/><path d='M91.712 220.567a.127.127 0 0 1-.059-.016.118.118 0 0 1-.058-.101v-50.871c0-.042.023-.08.058-.101l75.519-43.6a.117.117 0 0 1 .175.101v50.871c0 .041-.023.08-.059.1l-27.321 15.775a.118.118 0 0 1-.094.01.12.12 0 0 1-.071-.063l-6.46-14.168c-.375-.822-1.062-1.275-1.934-1.275-1.089 0-2.364.686-3.5 1.881a10.206 10.206 0 0 0-2.302 3.972l-6.46 21.627a.118.118 0 0 1-.054.068L91.77 220.551a.12.12 0 0 1-.058.016zm.117-50.92v50.601l27.106-15.65 6.447-21.583a10.286 10.286 0 0 1 2.357-4.065c1.18-1.242 2.517-1.954 3.669-1.954.969 0 1.731.501 2.146 1.411l6.407 14.051 27.152-15.676v-50.601l-75.284 43.466z' fill='#607D8B'/><path d='M168.543 126.213v50.87l-27.322 15.774-6.46-14.168c-.91-1.995-3.428-1.738-5.624.574a10.248 10.248 0 0 0-2.33 4.019l-6.461 21.627-27.321 15.774v-50.87l75.518-43.6' fill='#FFF'/><path d='M93.025 220.8a.123.123 0 0 1-.059-.015.12.12 0 0 1-.058-.101v-50.871c0-.042.023-.08.058-.101l75.518-43.6a.112.112 0 0 1 .117 0c.036.02.059.059.059.1v50.871a.116.116 0 0 1-.059.101l-27.321 15.774a.111.111 0 0 1-.094.01.115.115 0 0 1-.071-.062l-6.46-14.168c-.375-.823-1.062-1.275-1.935-1.275-1.088 0-2.363.685-3.499 1.881a10.19 10.19 0 0 0-2.302 3.971l-6.461 21.628a.108.108 0 0 1-.053.067l-27.322 15.775a.12.12 0 0 1-.058.015zm.117-50.919v50.6l27.106-15.649 6.447-21.584a10.293 10.293 0 0 1 2.357-4.065c1.179-1.241 2.516-1.954 3.668-1.954.969 0 1.732.502 2.147 1.412l6.407 14.051 27.152-15.676v-50.601l-75.284 43.466z' fill='#607D8B'/><path d='M169.8 177.083l-27.322 15.774-6.46-14.168c-.91-1.995-3.428-1.738-5.625.574a10.246 10.246 0 0 0-2.329 4.019l-6.461 21.627-27.321 15.774v-50.87l75.518-43.6v50.87z' fill='#FAFAFA'/><path d='M94.282 220.917a.234.234 0 0 1-.234-.233v-50.871c0-.083.045-.161.117-.202l75.518-43.601a.234.234 0 1 1 .35.202v50.871a.233.233 0 0 1-.116.202l-27.322 15.775a.232.232 0 0 1-.329-.106l-6.461-14.168c-.36-.789-.992-1.206-1.828-1.206-1.056 0-2.301.672-3.415 1.844a10.099 10.099 0 0 0-2.275 3.924l-6.46 21.628a.235.235 0 0 1-.107.136l-27.322 15.774a.23.23 0 0 1-.116.031zm.233-50.969v50.331l26.891-15.525 6.434-21.539a10.41 10.41 0 0 1 2.384-4.112c1.201-1.265 2.569-1.991 3.753-1.991 1.018 0 1.818.526 2.253 1.48l6.354 13.934 26.982-15.578v-50.331l-75.051 43.331z' fill='#607D8B'/><path d='M109.894 199.943c-1.774 0-3.241-.725-4.244-2.12a.224.224 0 0 1 .023-.294.233.233 0 0 1 .301-.023c.78.547 1.705.827 2.75.827 1.323 0 2.754-.439 4.256-1.306 5.311-3.067 9.631-10.518 9.631-16.611 0-1.927-.442-3.56-1.278-4.724a.232.232 0 0 1 .323-.327c1.671 1.172 2.591 3.381 2.591 6.219 0 6.242-4.426 13.863-9.865 17.003-1.574.908-3.084 1.356-4.488 1.356zm-2.969-1.542c.813.651 1.82.877 2.968.877h.001c1.321 0 2.753-.327 4.254-1.194 5.311-3.067 9.632-10.463 9.632-16.556 0-1.979-.463-3.599-1.326-4.761.411 1.035.625 2.275.625 3.635 0 6.243-4.426 13.883-9.865 17.023-1.574.909-3.084 1.317-4.49 1.317-.641 0-1.243-.149-1.799-.341z' fill='#607D8B'/><path d='M113.097 197.23c5.384-3.108 9.748-10.636 9.748-16.814 0-2.051-.483-3.692-1.323-4.86-1.784-1.252-4.374-1.194-7.257.47-5.384 3.108-9.748 10.636-9.748 16.814 0 2.051.483 3.692 1.323 4.86 1.784 1.252 4.374 1.194 7.257-.47' fill='#FAFAFA'/><path d='M108.724 198.614c-1.142 0-2.158-.213-3.019-.817-.021-.014-.04.014-.055-.007-.894-1.244-1.367-2.948-1.367-4.973 0-6.242 4.426-13.864 9.865-17.005 1.574-.908 3.084-1.363 4.49-1.363 1.142 0 2.158.309 3.018.913a.23.23 0 0 1 .056.056c.894 1.244 1.367 2.972 1.367 4.997 0 6.243-4.426 13.783-9.865 16.923-1.574.909-3.084 1.276-4.49 1.276zm-2.718-1.109c.774.532 1.688.776 2.718.776 1.323 0 2.754-.413 4.256-1.28 5.311-3.066 9.631-10.505 9.631-16.598 0-1.909-.434-3.523-1.255-4.685-.774-.533-1.688-.799-2.718-.799-1.323 0-2.755.441-4.256 1.308-5.311 3.066-9.631 10.506-9.631 16.599 0 1.909.434 3.517 1.255 4.679z' fill='#607D8B'/><path d='M149.318 114.262l-9.984 8.878 15.893 11.031 5.589-6.112-11.498-13.797' fill='#FAFAFA'/><path d='M169.676 120.84l-9.748 5.627c-3.642 2.103-9.528 2.113-13.147.024-3.62-2.089-3.601-5.488.041-7.591l9.495-5.608-6.729-3.885-81.836 47.071 45.923 26.514 3.081-1.779c.631-.365.869-.898.618-1.39-2.357-4.632-2.593-9.546-.683-14.262 5.638-13.92 24.509-24.815 48.618-28.07 8.169-1.103 16.68-.967 24.704.394.852.145 1.776.008 2.407-.357l3.081-1.778-25.825-14.91' fill='#FAFAFA'/><path d='M113.675 183.459a.47.47 0 0 1-.233-.062l-45.924-26.515a.468.468 0 0 1 .001-.809l81.836-47.071a.467.467 0 0 1 .466 0l6.729 3.885a.467.467 0 0 1-.467.809l-6.496-3.75-80.9 46.533 44.988 25.973 2.848-1.644c.192-.111.62-.409.435-.773-2.416-4.748-2.658-9.814-.7-14.65 2.806-6.927 8.885-13.242 17.582-18.263 8.657-4.998 19.518-8.489 31.407-10.094 8.198-1.107 16.79-.97 24.844.397.739.125 1.561.007 2.095-.301l2.381-1.374-25.125-14.506a.467.467 0 0 1 .467-.809l25.825 14.91a.467.467 0 0 1 0 .809l-3.081 1.779c-.721.417-1.763.575-2.718.413-7.963-1.351-16.457-1.486-24.563-.392-11.77 1.589-22.512 5.039-31.065 9.977-8.514 4.916-14.456 11.073-17.183 17.805-1.854 4.578-1.623 9.376.666 13.875.37.725.055 1.513-.8 2.006l-3.081 1.78a.476.476 0 0 1-.234.062' fill='#455A64'/><path d='M153.316 128.279c-2.413 0-4.821-.528-6.652-1.586-1.818-1.049-2.82-2.461-2.82-3.975 0-1.527 1.016-2.955 2.861-4.02l9.493-5.607a.233.233 0 1 1 .238.402l-9.496 5.609c-1.696.979-2.628 2.263-2.628 3.616 0 1.34.918 2.608 2.585 3.571 3.549 2.049 9.343 2.038 12.914-.024l9.748-5.628a.234.234 0 0 1 .234.405l-9.748 5.628c-1.858 1.072-4.296 1.609-6.729 1.609' fill='#607D8B'/><path d='M113.675 182.992l-45.913-26.508M113.675 183.342a.346.346 0 0 1-.175-.047l-45.913-26.508a.35.35 0 1 1 .35-.607l45.913 26.508a.35.35 0 0 1-.175.654' fill='#455A64'/><path d='M67.762 156.484v54.001c0 1.09.77 2.418 1.72 2.967l42.473 24.521c.95.549 1.72.11 1.72-.98v-54.001' fill='#FAFAFA'/><path d='M112.727 238.561c-.297 0-.62-.095-.947-.285l-42.473-24.521c-1.063-.613-1.895-2.05-1.895-3.27v-54.001a.35.35 0 1 1 .701 0v54.001c0 .96.707 2.18 1.544 2.663l42.473 24.522c.344.198.661.243.87.122.206-.119.325-.411.325-.799v-54.001a.35.35 0 1 1 .7 0v54.001c0 .655-.239 1.154-.675 1.406a1.235 1.235 0 0 1-.623.162' fill='#455A64'/><path d='M112.86 147.512h-.001c-2.318 0-4.499-.522-6.142-1.471-1.705-.984-2.643-2.315-2.643-3.749 0-1.445.952-2.791 2.68-3.788l12.041-6.953c1.668-.962 3.874-1.493 6.212-1.493 2.318 0 4.499.523 6.143 1.472 1.704.984 2.643 2.315 2.643 3.748 0 1.446-.952 2.791-2.68 3.789l-12.042 6.952c-1.668.963-3.874 1.493-6.211 1.493zm12.147-16.753c-2.217 0-4.298.497-5.861 1.399l-12.042 6.952c-1.502.868-2.33 1.998-2.33 3.182 0 1.173.815 2.289 2.293 3.142 1.538.889 3.596 1.378 5.792 1.378h.001c2.216 0 4.298-.497 5.861-1.399l12.041-6.953c1.502-.867 2.33-1.997 2.33-3.182 0-1.172-.814-2.288-2.292-3.142-1.539-.888-3.596-1.377-5.793-1.377z' fill='#607D8B'/><path d='M165.63 123.219l-5.734 3.311c-3.167 1.828-8.286 1.837-11.433.02-3.147-1.817-3.131-4.772.036-6.601l5.734-3.31 11.397 6.58' fill='#FAFAFA'/><path d='M154.233 117.448l9.995 5.771-4.682 2.704c-1.434.827-3.352 1.283-5.399 1.283-2.029 0-3.923-.449-5.333-1.263-1.29-.744-2-1.694-2-2.674 0-.991.723-1.955 2.036-2.713l5.383-3.108m0-.809l-5.734 3.31c-3.167 1.829-3.183 4.784-.036 6.601 1.568.905 3.623 1.357 5.684 1.357 2.077 0 4.159-.46 5.749-1.377l5.734-3.311-11.397-6.58M145.445 179.667c-1.773 0-3.241-.85-4.243-2.245-.067-.092-.057-.275.023-.356.08-.081.207-.12.3-.055.781.548 1.706.812 2.751.811 1.322 0 2.754-.446 4.256-1.313 5.31-3.066 9.631-10.522 9.631-16.615 0-1.927-.442-3.562-1.279-4.726a.235.235 0 0 1 .024-.301.232.232 0 0 1 .3-.027c1.67 1.172 2.59 3.38 2.59 6.219 0 6.242-4.425 13.987-9.865 17.127-1.573.908-3.083 1.481-4.488 1.481zM142.476 178c.814.651 1.82 1.002 2.969 1.002 1.322 0 2.753-.452 4.255-1.32 5.31-3.065 9.631-10.523 9.631-16.617 0-1.98-.463-3.63-1.325-4.793.411 1.035.624 2.26.624 3.62 0 6.242-4.425 13.875-9.865 17.015-1.573.909-3.084 1.376-4.489 1.376a5.49 5.49 0 0 1-1.8-.283z' fill='#607D8B'/><path d='M148.648 176.704c5.384-3.108 9.748-10.636 9.748-16.813 0-2.052-.483-3.693-1.322-4.861-1.785-1.252-4.375-1.194-7.258.471-5.383 3.108-9.748 10.636-9.748 16.813 0 2.051.484 3.692 1.323 4.86 1.785 1.253 4.374 1.195 7.257-.47' fill='#FAFAFA'/><path d='M144.276 178.276c-1.143 0-2.158-.307-3.019-.911a.217.217 0 0 1-.055-.054c-.895-1.244-1.367-2.972-1.367-4.997 0-6.241 4.425-13.875 9.865-17.016 1.573-.908 3.084-1.369 4.489-1.369 1.143 0 2.158.307 3.019.91a.24.24 0 0 1 .055.055c.894 1.244 1.367 2.971 1.367 4.997 0 6.241-4.425 13.875-9.865 17.016-1.573.908-3.084 1.369-4.489 1.369zm-2.718-1.172c.773.533 1.687.901 2.718.901 1.322 0 2.754-.538 4.256-1.405 5.31-3.066 9.631-10.567 9.631-16.661 0-1.908-.434-3.554-1.256-4.716-.774-.532-1.688-.814-2.718-.814-1.322 0-2.754.433-4.256 1.3-5.31 3.066-9.631 10.564-9.631 16.657 0 1.91.434 3.576 1.256 4.738z' fill='#607D8B'/><path d='M150.72 172.361l-.363-.295a24.105 24.105 0 0 0 2.148-3.128 24.05 24.05 0 0 0 1.977-4.375l.443.149a24.54 24.54 0 0 1-2.015 4.46 24.61 24.61 0 0 1-2.19 3.189M115.917 191.514l-.363-.294a24.174 24.174 0 0 0 2.148-3.128 24.038 24.038 0 0 0 1.976-4.375l.443.148a24.48 24.48 0 0 1-2.015 4.461 24.662 24.662 0 0 1-2.189 3.188M114 237.476V182.584 237.476' fill='#607D8B'/><g><path d='M81.822 37.474c.017-.135-.075-.28-.267-.392-.327-.188-.826-.21-1.109-.045l-6.012 3.471c-.131.076-.194.178-.191.285.002.132.002.461.002.578v.043l-.007.128-6.591 3.779c-.001 0-2.077 1.046-2.787 5.192 0 0-.912 6.961-.898 19.745.015 12.57.606 17.07 1.167 21.351.22 1.684 3.001 2.125 3.001 2.125.331.04.698-.027 1.08-.248l75.273-43.551c1.808-1.069 2.667-3.719 3.056-6.284 1.213-7.99 1.675-32.978-.275-39.878-.196-.693-.51-1.083-.868-1.282l-2.086-.79c-.727.028-1.416.467-1.534.535L82.032 37.072l-.21.402' fill='#FFF'/><path d='M144.311 1.701l2.085.79c.358.199.672.589.868 1.282 1.949 6.9 1.487 31.887.275 39.878-.39 2.565-1.249 5.215-3.056 6.284L69.21 93.486a1.78 1.78 0 0 1-.896.258l-.183-.011c0 .001-2.782-.44-3.003-2.124-.56-4.282-1.151-8.781-1.165-21.351-.015-12.784.897-19.745.897-19.745.71-4.146 2.787-5.192 2.787-5.192l6.591-3.779.007-.128v-.043c0-.117 0-.446-.002-.578-.003-.107.059-.21.191-.285l6.012-3.472a.98.98 0 0 1 .481-.11c.218 0 .449.053.627.156.193.112.285.258.268.392l.211-.402 60.744-34.836c.117-.068.806-.507 1.534-.535m0-.997l-.039.001c-.618.023-1.283.244-1.974.656l-.021.012-60.519 34.706a2.358 2.358 0 0 0-.831-.15c-.365 0-.704.084-.98.244l-6.012 3.471c-.442.255-.699.69-.689 1.166l.001.15-6.08 3.487c-.373.199-2.542 1.531-3.29 5.898l-.006.039c-.009.07-.92 7.173-.906 19.875.014 12.62.603 17.116 1.172 21.465l.002.015c.308 2.355 3.475 2.923 3.836 2.98l.034.004c.101.013.204.019.305.019a2.77 2.77 0 0 0 1.396-.392l75.273-43.552c1.811-1.071 2.999-3.423 3.542-6.997 1.186-7.814 1.734-33.096-.301-40.299-.253-.893-.704-1.527-1.343-1.882l-.132-.062-2.085-.789a.973.973 0 0 0-.353-.065' fill='#455A64'/><path d='M128.267 11.565l1.495.434-56.339 32.326' fill='#FFF'/><path d='M74.202 90.545a.5.5 0 0 1-.25-.931l18.437-10.645a.499.499 0 1 1 .499.864L74.451 90.478l-.249.067M75.764 42.654l-.108-.062.046-.171 5.135-2.964.17.045-.045.171-5.135 2.964-.063.017M70.52 90.375V46.421l.063-.036L137.84 7.554v43.954l-.062.036L70.52 90.375zm.25-43.811v43.38l66.821-38.579V7.985L70.77 46.564z' fill='#607D8B'/><path d='M86.986 83.182c-.23.149-.612.384-.849.523l-11.505 6.701c-.237.139-.206.252.068.252h.565c.275 0 .693-.113.93-.252L87.7 83.705c.237-.139.428-.253.425-.256a11.29 11.29 0 0 1-.006-.503c0-.274-.188-.377-.418-.227l-.715.463' fill='#607D8B'/><path d='M75.266 90.782H74.7c-.2 0-.316-.056-.346-.166-.03-.11.043-.217.215-.317l11.505-6.702c.236-.138.615-.371.844-.519l.715-.464a.488.488 0 0 1 .266-.089c.172 0 .345.13.345.421 0 .214.001.363.003.437l.006.004-.004.069c-.003.075-.003.075-.486.356l-11.505 6.702a2.282 2.282 0 0 1-.992.268zm-.6-.25l.034.001h.566c.252 0 .649-.108.866-.234l11.505-6.702c.168-.098.294-.173.361-.214-.004-.084-.004-.218-.004-.437l-.095-.171-.131.049-.714.463c-.232.15-.616.386-.854.525l-11.505 6.702-.029.018z' fill='#607D8B'/><path d='M75.266 89.871H74.7c-.2 0-.316-.056-.346-.166-.03-.11.043-.217.215-.317l11.505-6.702c.258-.151.694-.268.993-.268h.565c.2 0 .316.056.346.166.03.11-.043.217-.215.317l-11.505 6.702a2.282 2.282 0 0 1-.992.268zm-.6-.25l.034.001h.566c.252 0 .649-.107.866-.234l11.505-6.702.03-.018-.035-.001h-.565c-.252 0-.649.108-.867.234l-11.505 6.702-.029.018zM74.37 90.801v-1.247 1.247' fill='#607D8B'/><path d='M68.13 93.901c-.751-.093-1.314-.737-1.439-1.376-.831-4.238-1.151-8.782-1.165-21.352-.015-12.784.897-19.745.897-19.745.711-4.146 2.787-5.192 2.787-5.192l74.859-43.219c.223-.129 2.487-1.584 3.195.923 1.95 6.9 1.488 31.887.275 39.878-.389 2.565-1.248 5.215-3.056 6.283L69.21 93.653c-.382.221-.749.288-1.08.248 0 0-2.781-.441-3.001-2.125-.561-4.281-1.152-8.781-1.167-21.351-.014-12.784.898-19.745.898-19.745.71-4.146 2.787-5.191 2.787-5.191l6.598-3.81.871-.119 6.599-3.83.046-.461L68.13 93.901' fill='#FAFAFA'/><path d='M68.317 94.161l-.215-.013h-.001l-.244-.047c-.719-.156-2.772-.736-2.976-2.292-.568-4.34-1.154-8.813-1.168-21.384-.014-12.654.891-19.707.9-19.777.725-4.231 2.832-5.338 2.922-5.382l6.628-3.827.87-.119 6.446-3.742.034-.334a.248.248 0 0 1 .273-.223.248.248 0 0 1 .223.272l-.059.589-6.752 3.919-.87.118-6.556 3.785c-.031.016-1.99 1.068-2.666 5.018-.007.06-.908 7.086-.894 19.702.014 12.539.597 16.996 1.161 21.305.091.691.689 1.154 1.309 1.452a1.95 1.95 0 0 1-.236-.609c-.781-3.984-1.155-8.202-1.17-21.399-.014-12.653.891-19.707.9-19.777.725-4.231 2.832-5.337 2.922-5.382-.004.001 74.444-42.98 74.846-43.212l.028-.017c.904-.538 1.72-.688 2.36-.433.555.221.949.733 1.172 1.52 2.014 7.128 1.46 32.219.281 39.983-.507 3.341-1.575 5.515-3.175 6.462L69.335 93.869a2.023 2.023 0 0 1-1.018.292zm-.147-.507c.293.036.604-.037.915-.217l75.273-43.551c1.823-1.078 2.602-3.915 2.934-6.106 1.174-7.731 1.731-32.695-.268-39.772-.178-.631-.473-1.032-.876-1.192-.484-.193-1.166-.052-1.921.397l-.034.021-74.858 43.218c-.031.017-1.989 1.069-2.666 5.019-.007.059-.908 7.085-.894 19.702.015 13.155.386 17.351 1.161 21.303.09.461.476.983 1.037 1.139.114.025.185.037.196.039h.001z' fill='#455A64'/><path d='M69.317 68.982c.489-.281.885-.056.885.505 0 .56-.396 1.243-.885 1.525-.488.282-.884.057-.884-.504 0-.56.396-1.243.884-1.526' fill='#FFF'/><path d='M68.92 71.133c-.289 0-.487-.228-.487-.625 0-.56.396-1.243.884-1.526a.812.812 0 0 1 .397-.121c.289 0 .488.229.488.626 0 .56-.396 1.243-.885 1.525a.812.812 0 0 1-.397.121m.794-2.459a.976.976 0 0 0-.49.147c-.548.317-.978 1.058-.978 1.687 0 .486.271.812.674.812a.985.985 0 0 0 .491-.146c.548-.317.978-1.057.978-1.687 0-.486-.272-.813-.675-.813' fill='#8097A2'/><path d='M68.92 70.947c-.271 0-.299-.307-.299-.439 0-.491.361-1.116.79-1.363a.632.632 0 0 1 .303-.096c.272 0 .301.306.301.438 0 .491-.363 1.116-.791 1.364a.629.629 0 0 1-.304.096m.794-2.086a.812.812 0 0 0-.397.121c-.488.283-.884.966-.884 1.526 0 .397.198.625.487.625a.812.812 0 0 0 .397-.121c.489-.282.885-.965.885-1.525 0-.397-.199-.626-.488-.626' fill='#8097A2'/><path d='M69.444 85.35c.264-.152.477-.031.477.272 0 .303-.213.67-.477.822-.263.153-.477.031-.477-.271 0-.302.214-.671.477-.823' fill='#FFF'/><path d='M69.23 86.51c-.156 0-.263-.123-.263-.337 0-.302.214-.671.477-.823a.431.431 0 0 1 .214-.066c.156 0 .263.124.263.338 0 .303-.213.67-.477.822a.431.431 0 0 1-.214.066m.428-1.412c-.1 0-.203.029-.307.09-.32.185-.57.618-.57.985 0 .309.185.524.449.524a.63.63 0 0 0 .308-.09c.32-.185.57-.618.57-.985 0-.309-.185-.524-.45-.524' fill='#8097A2'/><path d='M69.23 86.322l-.076-.149c0-.235.179-.544.384-.661l.12-.041.076.151c0 .234-.179.542-.383.66l-.121.04m.428-1.038a.431.431 0 0 0-.214.066c-.263.152-.477.521-.477.823 0 .214.107.337.263.337a.431.431 0 0 0 .214-.066c.264-.152.477-.519.477-.822 0-.214-.107-.338-.263-.338' fill='#8097A2'/><path d='M139.278 7.769v43.667L72.208 90.16V46.493l67.07-38.724' fill='#455A64'/><path d='M72.083 90.375V46.421l.063-.036 67.257-38.831v43.954l-.062.036-67.258 38.831zm.25-43.811v43.38l66.821-38.579V7.985L72.333 46.564z' fill='#607D8B'/></g><path d='M125.737 88.647l-7.639 3.334V84l-11.459 4.713v8.269L99 100.315l13.369 3.646 13.368-15.314' fill='#455A64'/></g></svg>";
                function RotateInstructions() {
                  this.loadIcon_();
                  var overlay = document.createElement('div');
                  var s = overlay.style;
                  s.position = 'fixed';
                  s.top = 0;
                  s.right = 0;
                  s.bottom = 0;
                  s.left = 0;
                  s.backgroundColor = 'gray';
                  s.fontFamily = 'sans-serif';
                  s.zIndex = 1000000;
                  var img = document.createElement('img');
                  img.src = this.icon;
                  var s = img.style;
                  s.marginLeft = '25%';
                  s.marginTop = '25%';
                  s.width = '50%';
                  overlay.appendChild(img);
                  var text = document.createElement('div');
                  var s = text.style;
                  s.textAlign = 'center';
                  s.fontSize = '16px';
                  s.lineHeight = '24px';
                  s.margin = '24px 25%';
                  s.width = '50%';
                  text.innerHTML = 'Place your phone into your Cardboard viewer.';
                  overlay.appendChild(text);
                  var snackbar = document.createElement('div');
                  var s = snackbar.style;
                  s.backgroundColor = '#CFD8DC';
                  s.position = 'fixed';
                  s.bottom = 0;
                  s.width = '100%';
                  s.height = '48px';
                  s.padding = '14px 24px';
                  s.boxSizing = 'border-box';
                  s.color = '#656A6B';
                  overlay.appendChild(snackbar);
                  var snackbarText = document.createElement('div');
                  snackbarText.style.float = 'left';
                  snackbarText.innerHTML = 'No Cardboard viewer?';
                  var snackbarButton = document.createElement('a');
                  snackbarButton.href = 'https://www.google.com/get/cardboard/get-cardboard/';
                  snackbarButton.innerHTML = 'get one';
                  snackbarButton.target = '_blank';
                  var s = snackbarButton.style;
                  s.float = 'right';
                  s.fontWeight = 600;
                  s.textTransform = 'uppercase';
                  s.borderLeft = '1px solid gray';
                  s.paddingLeft = '24px';
                  s.textDecoration = 'none';
                  s.color = '#656A6B';
                  snackbar.appendChild(snackbarText);
                  snackbar.appendChild(snackbarButton);
                  this.overlay = overlay;
                  this.text = text;
                  this.hide();
                }
                RotateInstructions.prototype.show = function (parent) {
                  if (!parent && !this.overlay.parentElement) {
                    document.body.appendChild(this.overlay);
                  } else if (parent) {
                    if (this.overlay.parentElement && this.overlay.parentElement != parent) this.overlay.parentElement.removeChild(this.overlay);
                    parent.appendChild(this.overlay);
                  }
                  this.overlay.style.display = 'block';
                  var img = this.overlay.querySelector('img');
                  var s = img.style;
                  if (isLandscapeMode()) {
                    s.width = '20%';
                    s.marginLeft = '40%';
                    s.marginTop = '3%';
                  } else {
                    s.width = '50%';
                    s.marginLeft = '25%';
                    s.marginTop = '25%';
                  }
                };
                RotateInstructions.prototype.hide = function () {
                  this.overlay.style.display = 'none';
                };
                RotateInstructions.prototype.showTemporarily = function (ms, parent) {
                  this.show(parent);
                  this.timer = setTimeout(this.hide.bind(this), ms);
                };
                RotateInstructions.prototype.disableShowTemporarily = function () {
                  clearTimeout(this.timer);
                };
                RotateInstructions.prototype.update = function () {
                  this.disableShowTemporarily();
                  if (!isLandscapeMode() && isMobile()) {
                    this.show();
                  } else {
                    this.hide();
                  }
                };
                RotateInstructions.prototype.loadIcon_ = function () {
                  this.icon = dataUri('image/svg+xml', rotateInstructionsAsset);
                };
                var DEFAULT_VIEWER = 'CardboardV1';
                var VIEWER_KEY = 'WEBVR_CARDBOARD_VIEWER';
                var CLASS_NAME = 'webvr-polyfill-viewer-selector';
                function ViewerSelector(defaultViewer) {
                  try {
                    this.selectedKey = localStorage.getItem(VIEWER_KEY);
                  } catch (error) {
                    console.error('Failed to load viewer profile: %s', error);
                  }
                  if (!this.selectedKey) {
                    this.selectedKey = defaultViewer || DEFAULT_VIEWER;
                  }
                  this.dialog = this.createDialog_(DeviceInfo.Viewers);
                  this.root = null;
                  this.onChangeCallbacks_ = [];
                }
                ViewerSelector.prototype.show = function (root) {
                  this.root = root;
                  root.appendChild(this.dialog);
                  var selected = this.dialog.querySelector('#' + this.selectedKey);
                  selected.checked = true;
                  this.dialog.style.display = 'block';
                };
                ViewerSelector.prototype.hide = function () {
                  if (this.root && this.root.contains(this.dialog)) {
                    this.root.removeChild(this.dialog);
                  }
                  this.dialog.style.display = 'none';
                };
                ViewerSelector.prototype.getCurrentViewer = function () {
                  return DeviceInfo.Viewers[this.selectedKey];
                };
                ViewerSelector.prototype.getSelectedKey_ = function () {
                  var input = this.dialog.querySelector('input[name=field]:checked');
                  if (input) {
                    return input.id;
                  }
                  return null;
                };
                ViewerSelector.prototype.onChange = function (cb) {
                  this.onChangeCallbacks_.push(cb);
                };
                ViewerSelector.prototype.fireOnChange_ = function (viewer) {
                  for (var i = 0; i < this.onChangeCallbacks_.length; i++) {
                    this.onChangeCallbacks_[i](viewer);
                  }
                };
                ViewerSelector.prototype.onSave_ = function () {
                  this.selectedKey = this.getSelectedKey_();
                  if (!this.selectedKey || !DeviceInfo.Viewers[this.selectedKey]) {
                    console.error('ViewerSelector.onSave_: this should never happen!');
                    return;
                  }
                  this.fireOnChange_(DeviceInfo.Viewers[this.selectedKey]);
                  try {
                    localStorage.setItem(VIEWER_KEY, this.selectedKey);
                  } catch (error) {
                    console.error('Failed to save viewer profile: %s', error);
                  }
                  this.hide();
                };
                ViewerSelector.prototype.createDialog_ = function (options) {
                  var container = document.createElement('div');
                  container.classList.add(CLASS_NAME);
                  container.style.display = 'none';
                  var overlay = document.createElement('div');
                  var s = overlay.style;
                  s.position = 'fixed';
                  s.left = 0;
                  s.top = 0;
                  s.width = '100%';
                  s.height = '100%';
                  s.background = 'rgba(0, 0, 0, 0.3)';
                  overlay.addEventListener('click', this.hide.bind(this));
                  var width = 280;
                  var dialog = document.createElement('div');
                  var s = dialog.style;
                  s.boxSizing = 'border-box';
                  s.position = 'fixed';
                  s.top = '24px';
                  s.left = '50%';
                  s.marginLeft = -width / 2 + 'px';
                  s.width = width + 'px';
                  s.padding = '24px';
                  s.overflow = 'hidden';
                  s.background = '#fafafa';
                  s.fontFamily = "'Roboto', sans-serif";
                  s.boxShadow = '0px 5px 20px #666';
                  dialog.appendChild(this.createH1_('Select your viewer'));
                  for (var id in options) {
                    dialog.appendChild(this.createChoice_(id, options[id].label));
                  }
                  dialog.appendChild(this.createButton_('Save', this.onSave_.bind(this)));
                  container.appendChild(overlay);
                  container.appendChild(dialog);
                  return container;
                };
                ViewerSelector.prototype.createH1_ = function (name) {
                  var h1 = document.createElement('h1');
                  var s = h1.style;
                  s.color = 'black';
                  s.fontSize = '20px';
                  s.fontWeight = 'bold';
                  s.marginTop = 0;
                  s.marginBottom = '24px';
                  h1.innerHTML = name;
                  return h1;
                };
                ViewerSelector.prototype.createChoice_ = function (id, name) {
                  var div = document.createElement('div');
                  div.style.marginTop = '8px';
                  div.style.color = 'black';
                  var input = document.createElement('input');
                  input.style.fontSize = '30px';
                  input.setAttribute('id', id);
                  input.setAttribute('type', 'radio');
                  input.setAttribute('value', id);
                  input.setAttribute('name', 'field');
                  var label = document.createElement('label');
                  label.style.marginLeft = '4px';
                  label.setAttribute('for', id);
                  label.innerHTML = name;
                  div.appendChild(input);
                  div.appendChild(label);
                  return div;
                };
                ViewerSelector.prototype.createButton_ = function (label, onclick) {
                  var button = document.createElement('button');
                  button.innerHTML = label;
                  var s = button.style;
                  s.float = 'right';
                  s.textTransform = 'uppercase';
                  s.color = '#1094f7';
                  s.fontSize = '14px';
                  s.letterSpacing = 0;
                  s.border = 0;
                  s.background = 'none';
                  s.marginTop = '16px';
                  button.addEventListener('click', onclick);
                  return button;
                };
                var commonjsGlobal$1 = typeof window !== 'undefined' ? window : typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof self !== 'undefined' ? self : {};
                function unwrapExports (x) {
                	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
                }
                function createCommonjsModule(fn, module) {
                	return module = { exports: {} }, fn(module, module.exports), module.exports;
                }
                var NoSleep = createCommonjsModule(function (module, exports) {
                (function webpackUniversalModuleDefinition(root, factory) {
                	module.exports = factory();
                })(commonjsGlobal$1, function() {
                return          (function(modules) {
                         	var installedModules = {};
                         	function __webpack_require__(moduleId) {
                         		if(installedModules[moduleId]) {
                         			return installedModules[moduleId].exports;
                         		}
                         		var module = installedModules[moduleId] = {
                         			i: moduleId,
                         			l: false,
                         			exports: {}
                         		};
                         		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
                         		module.l = true;
                         		return module.exports;
                         	}
                         	__webpack_require__.m = modules;
                         	__webpack_require__.c = installedModules;
                         	__webpack_require__.d = function(exports, name, getter) {
                         		if(!__webpack_require__.o(exports, name)) {
                         			Object.defineProperty(exports, name, {
                         				configurable: false,
                         				enumerable: true,
                         				get: getter
                         			});
                         		}
                         	};
                         	__webpack_require__.n = function(module) {
                         		var getter = module && module.__esModule ?
                         			function getDefault() { return module['default']; } :
                         			function getModuleExports() { return module; };
                         		__webpack_require__.d(getter, 'a', getter);
                         		return getter;
                         	};
                         	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
                         	__webpack_require__.p = "";
                         	return __webpack_require__(__webpack_require__.s = 0);
                         })
                         ([
                      (function(module, exports, __webpack_require__) {
                var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
                function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
                var mediaFile = __webpack_require__(1);
                var oldIOS = typeof navigator !== 'undefined' && parseFloat(('' + (/CPU.*OS ([0-9_]{3,4})[0-9_]{0,1}|(CPU like).*AppleWebKit.*Mobile/i.exec(navigator.userAgent) || [0, ''])[1]).replace('undefined', '3_2').replace('_', '.').replace('_', '')) < 10 && !window.MSStream;
                var NoSleep = function () {
                  function NoSleep() {
                    _classCallCheck(this, NoSleep);
                    if (oldIOS) {
                      this.noSleepTimer = null;
                    } else {
                      this.noSleepVideo = document.createElement('video');
                      this.noSleepVideo.setAttribute('playsinline', '');
                      this.noSleepVideo.setAttribute('src', mediaFile);
                      this.noSleepVideo.addEventListener('timeupdate', function (e) {
                        if (this.noSleepVideo.currentTime > 0.5) {
                          this.noSleepVideo.currentTime = Math.random();
                        }
                      }.bind(this));
                    }
                  }
                  _createClass(NoSleep, [{
                    key: 'enable',
                    value: function enable() {
                      if (oldIOS) {
                        this.disable();
                        this.noSleepTimer = window.setInterval(function () {
                          window.location.href = '/';
                          window.setTimeout(window.stop, 0);
                        }, 15000);
                      } else {
                        this.noSleepVideo.play();
                      }
                    }
                  }, {
                    key: 'disable',
                    value: function disable() {
                      if (oldIOS) {
                        if (this.noSleepTimer) {
                          window.clearInterval(this.noSleepTimer);
                          this.noSleepTimer = null;
                        }
                      } else {
                        this.noSleepVideo.pause();
                      }
                    }
                  }]);
                  return NoSleep;
                }();
                module.exports = NoSleep;
                      }),
                      (function(module, exports, __webpack_require__) {
                module.exports = 'data:video/mp4;base64,AAAAIGZ0eXBtcDQyAAACAGlzb21pc28yYXZjMW1wNDEAAAAIZnJlZQAACKBtZGF0AAAC8wYF///v3EXpvebZSLeWLNgg2SPu73gyNjQgLSBjb3JlIDE0MiByMjQ3OSBkZDc5YTYxIC0gSC4yNjQvTVBFRy00IEFWQyBjb2RlYyAtIENvcHlsZWZ0IDIwMDMtMjAxNCAtIGh0dHA6Ly93d3cudmlkZW9sYW4ub3JnL3gyNjQuaHRtbCAtIG9wdGlvbnM6IGNhYmFjPTEgcmVmPTEgZGVibG9jaz0xOjA6MCBhbmFseXNlPTB4MToweDExMSBtZT1oZXggc3VibWU9MiBwc3k9MSBwc3lfcmQ9MS4wMDowLjAwIG1peGVkX3JlZj0wIG1lX3JhbmdlPTE2IGNocm9tYV9tZT0xIHRyZWxsaXM9MCA4eDhkY3Q9MCBjcW09MCBkZWFkem9uZT0yMSwxMSBmYXN0X3Bza2lwPTEgY2hyb21hX3FwX29mZnNldD0wIHRocmVhZHM9NiBsb29rYWhlYWRfdGhyZWFkcz0xIHNsaWNlZF90aHJlYWRzPTAgbnI9MCBkZWNpbWF0ZT0xIGludGVybGFjZWQ9MCBibHVyYXlfY29tcGF0PTAgY29uc3RyYWluZWRfaW50cmE9MCBiZnJhbWVzPTMgYl9weXJhbWlkPTIgYl9hZGFwdD0xIGJfYmlhcz0wIGRpcmVjdD0xIHdlaWdodGI9MSBvcGVuX2dvcD0wIHdlaWdodHA9MSBrZXlpbnQ9MzAwIGtleWludF9taW49MzAgc2NlbmVjdXQ9NDAgaW50cmFfcmVmcmVzaD0wIHJjX2xvb2thaGVhZD0xMCByYz1jcmYgbWJ0cmVlPTEgY3JmPTIwLjAgcWNvbXA9MC42MCBxcG1pbj0wIHFwbWF4PTY5IHFwc3RlcD00IHZidl9tYXhyYXRlPTIwMDAwIHZidl9idWZzaXplPTI1MDAwIGNyZl9tYXg9MC4wIG5hbF9ocmQ9bm9uZSBmaWxsZXI9MCBpcF9yYXRpbz0xLjQwIGFxPTE6MS4wMACAAAAAOWWIhAA3//p+C7v8tDDSTjf97w55i3SbRPO4ZY+hkjD5hbkAkL3zpJ6h/LR1CAABzgB1kqqzUorlhQAAAAxBmiQYhn/+qZYADLgAAAAJQZ5CQhX/AAj5IQADQGgcIQADQGgcAAAACQGeYUQn/wALKCEAA0BoHAAAAAkBnmNEJ/8ACykhAANAaBwhAANAaBwAAAANQZpoNExDP/6plgAMuSEAA0BoHAAAAAtBnoZFESwr/wAI+SEAA0BoHCEAA0BoHAAAAAkBnqVEJ/8ACykhAANAaBwAAAAJAZ6nRCf/AAsoIQADQGgcIQADQGgcAAAADUGarDRMQz/+qZYADLghAANAaBwAAAALQZ7KRRUsK/8ACPkhAANAaBwAAAAJAZ7pRCf/AAsoIQADQGgcIQADQGgcAAAACQGe60Qn/wALKCEAA0BoHAAAAA1BmvA0TEM//qmWAAy5IQADQGgcIQADQGgcAAAAC0GfDkUVLCv/AAj5IQADQGgcAAAACQGfLUQn/wALKSEAA0BoHCEAA0BoHAAAAAkBny9EJ/8ACyghAANAaBwAAAANQZs0NExDP/6plgAMuCEAA0BoHAAAAAtBn1JFFSwr/wAI+SEAA0BoHCEAA0BoHAAAAAkBn3FEJ/8ACyghAANAaBwAAAAJAZ9zRCf/AAsoIQADQGgcIQADQGgcAAAADUGbeDRMQz/+qZYADLkhAANAaBwAAAALQZ+WRRUsK/8ACPghAANAaBwhAANAaBwAAAAJAZ+1RCf/AAspIQADQGgcAAAACQGft0Qn/wALKSEAA0BoHCEAA0BoHAAAAA1Bm7w0TEM//qmWAAy4IQADQGgcAAAAC0Gf2kUVLCv/AAj5IQADQGgcAAAACQGf+UQn/wALKCEAA0BoHCEAA0BoHAAAAAkBn/tEJ/8ACykhAANAaBwAAAANQZvgNExDP/6plgAMuSEAA0BoHCEAA0BoHAAAAAtBnh5FFSwr/wAI+CEAA0BoHAAAAAkBnj1EJ/8ACyghAANAaBwhAANAaBwAAAAJAZ4/RCf/AAspIQADQGgcAAAADUGaJDRMQz/+qZYADLghAANAaBwAAAALQZ5CRRUsK/8ACPkhAANAaBwhAANAaBwAAAAJAZ5hRCf/AAsoIQADQGgcAAAACQGeY0Qn/wALKSEAA0BoHCEAA0BoHAAAAA1Bmmg0TEM//qmWAAy5IQADQGgcAAAAC0GehkUVLCv/AAj5IQADQGgcIQADQGgcAAAACQGepUQn/wALKSEAA0BoHAAAAAkBnqdEJ/8ACyghAANAaBwAAAANQZqsNExDP/6plgAMuCEAA0BoHCEAA0BoHAAAAAtBnspFFSwr/wAI+SEAA0BoHAAAAAkBnulEJ/8ACyghAANAaBwhAANAaBwAAAAJAZ7rRCf/AAsoIQADQGgcAAAADUGa8DRMQz/+qZYADLkhAANAaBwhAANAaBwAAAALQZ8ORRUsK/8ACPkhAANAaBwAAAAJAZ8tRCf/AAspIQADQGgcIQADQGgcAAAACQGfL0Qn/wALKCEAA0BoHAAAAA1BmzQ0TEM//qmWAAy4IQADQGgcAAAAC0GfUkUVLCv/AAj5IQADQGgcIQADQGgcAAAACQGfcUQn/wALKCEAA0BoHAAAAAkBn3NEJ/8ACyghAANAaBwhAANAaBwAAAANQZt4NExC//6plgAMuSEAA0BoHAAAAAtBn5ZFFSwr/wAI+CEAA0BoHCEAA0BoHAAAAAkBn7VEJ/8ACykhAANAaBwAAAAJAZ+3RCf/AAspIQADQGgcAAAADUGbuzRMQn/+nhAAYsAhAANAaBwhAANAaBwAAAAJQZ/aQhP/AAspIQADQGgcAAAACQGf+UQn/wALKCEAA0BoHCEAA0BoHCEAA0BoHCEAA0BoHCEAA0BoHCEAA0BoHAAACiFtb292AAAAbG12aGQAAAAA1YCCX9WAgl8AAAPoAAAH/AABAAABAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAGGlvZHMAAAAAEICAgAcAT////v7/AAAF+XRyYWsAAABcdGtoZAAAAAPVgIJf1YCCXwAAAAEAAAAAAAAH0AAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAEAAAAAAygAAAMoAAAAAACRlZHRzAAAAHGVsc3QAAAAAAAAAAQAAB9AAABdwAAEAAAAABXFtZGlhAAAAIG1kaGQAAAAA1YCCX9WAgl8AAV+QAAK/IFXEAAAAAAAtaGRscgAAAAAAAAAAdmlkZQAAAAAAAAAAAAAAAFZpZGVvSGFuZGxlcgAAAAUcbWluZgAAABR2bWhkAAAAAQAAAAAAAAAAAAAAJGRpbmYAAAAcZHJlZgAAAAAAAAABAAAADHVybCAAAAABAAAE3HN0YmwAAACYc3RzZAAAAAAAAAABAAAAiGF2YzEAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAygDKAEgAAABIAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY//8AAAAyYXZjQwFNQCj/4QAbZ01AKOyho3ySTUBAQFAAAAMAEAAr8gDxgxlgAQAEaO+G8gAAABhzdHRzAAAAAAAAAAEAAAA8AAALuAAAABRzdHNzAAAAAAAAAAEAAAABAAAB8GN0dHMAAAAAAAAAPAAAAAEAABdwAAAAAQAAOpgAAAABAAAXcAAAAAEAAAAAAAAAAQAAC7gAAAABAAA6mAAAAAEAABdwAAAAAQAAAAAAAAABAAALuAAAAAEAADqYAAAAAQAAF3AAAAABAAAAAAAAAAEAAAu4AAAAAQAAOpgAAAABAAAXcAAAAAEAAAAAAAAAAQAAC7gAAAABAAA6mAAAAAEAABdwAAAAAQAAAAAAAAABAAALuAAAAAEAADqYAAAAAQAAF3AAAAABAAAAAAAAAAEAAAu4AAAAAQAAOpgAAAABAAAXcAAAAAEAAAAAAAAAAQAAC7gAAAABAAA6mAAAAAEAABdwAAAAAQAAAAAAAAABAAALuAAAAAEAADqYAAAAAQAAF3AAAAABAAAAAAAAAAEAAAu4AAAAAQAAOpgAAAABAAAXcAAAAAEAAAAAAAAAAQAAC7gAAAABAAA6mAAAAAEAABdwAAAAAQAAAAAAAAABAAALuAAAAAEAADqYAAAAAQAAF3AAAAABAAAAAAAAAAEAAAu4AAAAAQAAOpgAAAABAAAXcAAAAAEAAAAAAAAAAQAAC7gAAAABAAA6mAAAAAEAABdwAAAAAQAAAAAAAAABAAALuAAAAAEAAC7gAAAAAQAAF3AAAAABAAAAAAAAABxzdHNjAAAAAAAAAAEAAAABAAAAAQAAAAEAAAEEc3RzegAAAAAAAAAAAAAAPAAAAzQAAAAQAAAADQAAAA0AAAANAAAAEQAAAA8AAAANAAAADQAAABEAAAAPAAAADQAAAA0AAAARAAAADwAAAA0AAAANAAAAEQAAAA8AAAANAAAADQAAABEAAAAPAAAADQAAAA0AAAARAAAADwAAAA0AAAANAAAAEQAAAA8AAAANAAAADQAAABEAAAAPAAAADQAAAA0AAAARAAAADwAAAA0AAAANAAAAEQAAAA8AAAANAAAADQAAABEAAAAPAAAADQAAAA0AAAARAAAADwAAAA0AAAANAAAAEQAAAA8AAAANAAAADQAAABEAAAANAAAADQAAAQBzdGNvAAAAAAAAADwAAAAwAAADZAAAA3QAAAONAAADoAAAA7kAAAPQAAAD6wAAA/4AAAQXAAAELgAABEMAAARcAAAEbwAABIwAAAShAAAEugAABM0AAATkAAAE/wAABRIAAAUrAAAFQgAABV0AAAVwAAAFiQAABaAAAAW1AAAFzgAABeEAAAX+AAAGEwAABiwAAAY/AAAGVgAABnEAAAaEAAAGnQAABrQAAAbPAAAG4gAABvUAAAcSAAAHJwAAB0AAAAdTAAAHcAAAB4UAAAeeAAAHsQAAB8gAAAfjAAAH9gAACA8AAAgmAAAIQQAACFQAAAhnAAAIhAAACJcAAAMsdHJhawAAAFx0a2hkAAAAA9WAgl/VgIJfAAAAAgAAAAAAAAf8AAAAAAAAAAAAAAABAQAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAACsm1kaWEAAAAgbWRoZAAAAADVgIJf1YCCXwAArEQAAWAAVcQAAAAAACdoZGxyAAAAAAAAAABzb3VuAAAAAAAAAAAAAAAAU3RlcmVvAAAAAmNtaW5mAAAAEHNtaGQAAAAAAAAAAAAAACRkaW5mAAAAHGRyZWYAAAAAAAAAAQAAAAx1cmwgAAAAAQAAAidzdGJsAAAAZ3N0c2QAAAAAAAAAAQAAAFdtcDRhAAAAAAAAAAEAAAAAAAAAAAACABAAAAAArEQAAAAAADNlc2RzAAAAAAOAgIAiAAIABICAgBRAFQAAAAADDUAAAAAABYCAgAISEAaAgIABAgAAABhzdHRzAAAAAAAAAAEAAABYAAAEAAAAABxzdHNjAAAAAAAAAAEAAAABAAAAAQAAAAEAAAAUc3RzegAAAAAAAAAGAAAAWAAAAXBzdGNvAAAAAAAAAFgAAAOBAAADhwAAA5oAAAOtAAADswAAA8oAAAPfAAAD5QAAA/gAAAQLAAAEEQAABCgAAAQ9AAAEUAAABFYAAARpAAAEgAAABIYAAASbAAAErgAABLQAAATHAAAE3gAABPMAAAT5AAAFDAAABR8AAAUlAAAFPAAABVEAAAVXAAAFagAABX0AAAWDAAAFmgAABa8AAAXCAAAFyAAABdsAAAXyAAAF+AAABg0AAAYgAAAGJgAABjkAAAZQAAAGZQAABmsAAAZ+AAAGkQAABpcAAAauAAAGwwAABskAAAbcAAAG7wAABwYAAAcMAAAHIQAABzQAAAc6AAAHTQAAB2QAAAdqAAAHfwAAB5IAAAeYAAAHqwAAB8IAAAfXAAAH3QAAB/AAAAgDAAAICQAACCAAAAg1AAAIOwAACE4AAAhhAAAIeAAACH4AAAiRAAAIpAAACKoAAAiwAAAItgAACLwAAAjCAAAAFnVkdGEAAAAObmFtZVN0ZXJlbwAAAHB1ZHRhAAAAaG1ldGEAAAAAAAAAIWhkbHIAAAAAAAAAAG1kaXJhcHBsAAAAAAAAAAAAAAAAO2lsc3QAAAAzqXRvbwAAACtkYXRhAAAAAQAAAABIYW5kQnJha2UgMC4xMC4yIDIwMTUwNjExMDA=';
                      })
                         ]);
                });
                });
                var NoSleep$1 = unwrapExports(NoSleep);
                var nextDisplayId = 1000;
                var defaultLeftBounds = [0, 0, 0.5, 1];
                var defaultRightBounds = [0.5, 0, 0.5, 1];
                var raf = window.requestAnimationFrame;
                var caf = window.cancelAnimationFrame;
                function VRFrameData() {
                  this.leftProjectionMatrix = new Float32Array(16);
                  this.leftViewMatrix = new Float32Array(16);
                  this.rightProjectionMatrix = new Float32Array(16);
                  this.rightViewMatrix = new Float32Array(16);
                  this.pose = null;
                }
                function VRDisplayCapabilities(config) {
                  Object.defineProperties(this, {
                    hasPosition: {
                      writable: false, enumerable: true, value: config.hasPosition
                    },
                    hasExternalDisplay: {
                      writable: false, enumerable: true, value: config.hasExternalDisplay
                    },
                    canPresent: {
                      writable: false, enumerable: true, value: config.canPresent
                    },
                    maxLayers: {
                      writable: false, enumerable: true, value: config.maxLayers
                    },
                    hasOrientation: {
                      enumerable: true, get: function get() {
                        deprecateWarning('VRDisplayCapabilities.prototype.hasOrientation', 'VRDisplay.prototype.getFrameData');
                        return config.hasOrientation;
                      }
                    }
                  });
                }
                function VRDisplay(config) {
                  config = config || {};
                  var USE_WAKELOCK = 'wakelock' in config ? config.wakelock : true;
                  this.isPolyfilled = true;
                  this.displayId = nextDisplayId++;
                  this.displayName = '';
                  this.depthNear = 0.01;
                  this.depthFar = 10000.0;
                  this.isPresenting = false;
                  Object.defineProperty(this, 'isConnected', {
                    get: function get() {
                      deprecateWarning('VRDisplay.prototype.isConnected', 'VRDisplayCapabilities.prototype.hasExternalDisplay');
                      return false;
                    }
                  });
                  this.capabilities = new VRDisplayCapabilities({
                    hasPosition: false,
                    hasOrientation: false,
                    hasExternalDisplay: false,
                    canPresent: false,
                    maxLayers: 1
                  });
                  this.stageParameters = null;
                  this.waitingForPresent_ = false;
                  this.layer_ = null;
                  this.originalParent_ = null;
                  this.fullscreenElement_ = null;
                  this.fullscreenWrapper_ = null;
                  this.fullscreenElementCachedStyle_ = null;
                  this.fullscreenEventTarget_ = null;
                  this.fullscreenChangeHandler_ = null;
                  this.fullscreenErrorHandler_ = null;
                  if (USE_WAKELOCK && isMobile()) {
                    this.wakelock_ = new NoSleep$1();
                  }
                }
                VRDisplay.prototype.getFrameData = function (frameData) {
                  return frameDataFromPose(frameData, this._getPose(), this);
                };
                VRDisplay.prototype.getPose = function () {
                  deprecateWarning('VRDisplay.prototype.getPose', 'VRDisplay.prototype.getFrameData');
                  return this._getPose();
                };
                VRDisplay.prototype.resetPose = function () {
                  deprecateWarning('VRDisplay.prototype.resetPose');
                  return this._resetPose();
                };
                VRDisplay.prototype.getImmediatePose = function () {
                  deprecateWarning('VRDisplay.prototype.getImmediatePose', 'VRDisplay.prototype.getFrameData');
                  return this._getPose();
                };
                VRDisplay.prototype.requestAnimationFrame = function (callback) {
                  return raf(callback);
                };
                VRDisplay.prototype.cancelAnimationFrame = function (id) {
                  return caf(id);
                };
                VRDisplay.prototype.wrapForFullscreen = function (element) {
                  if (isIOS()) {
                    return element;
                  }
                  if (!this.fullscreenWrapper_) {
                    this.fullscreenWrapper_ = document.createElement('div');
                    var cssProperties = ['height: ' + Math.min(screen.height, screen.width) + 'px !important', 'top: 0 !important', 'left: 0 !important', 'right: 0 !important', 'border: 0', 'margin: 0', 'padding: 0', 'z-index: 999999 !important', 'position: fixed'];
                    this.fullscreenWrapper_.setAttribute('style', cssProperties.join('; ') + ';');
                    this.fullscreenWrapper_.classList.add('webvr-polyfill-fullscreen-wrapper');
                  }
                  if (this.fullscreenElement_ == element) {
                    return this.fullscreenWrapper_;
                  }
                  if (this.fullscreenElement_) {
                    if (this.originalParent_) {
                      this.originalParent_.appendChild(this.fullscreenElement_);
                    } else {
                      this.fullscreenElement_.parentElement.removeChild(this.fullscreenElement_);
                    }
                  }
                  this.fullscreenElement_ = element;
                  this.originalParent_ = element.parentElement;
                  if (!this.originalParent_) {
                    document.body.appendChild(element);
                  }
                  if (!this.fullscreenWrapper_.parentElement) {
                    var parent = this.fullscreenElement_.parentElement;
                    parent.insertBefore(this.fullscreenWrapper_, this.fullscreenElement_);
                    parent.removeChild(this.fullscreenElement_);
                  }
                  this.fullscreenWrapper_.insertBefore(this.fullscreenElement_, this.fullscreenWrapper_.firstChild);
                  this.fullscreenElementCachedStyle_ = this.fullscreenElement_.getAttribute('style');
                  var self = this;
                  function applyFullscreenElementStyle() {
                    if (!self.fullscreenElement_) {
                      return;
                    }
                    var cssProperties = ['position: absolute', 'top: 0', 'left: 0', 'width: ' + Math.max(screen.width, screen.height) + 'px', 'height: ' + Math.min(screen.height, screen.width) + 'px', 'border: 0', 'margin: 0', 'padding: 0'];
                    self.fullscreenElement_.setAttribute('style', cssProperties.join('; ') + ';');
                  }
                  applyFullscreenElementStyle();
                  return this.fullscreenWrapper_;
                };
                VRDisplay.prototype.removeFullscreenWrapper = function () {
                  if (!this.fullscreenElement_) {
                    return;
                  }
                  var element = this.fullscreenElement_;
                  if (this.fullscreenElementCachedStyle_) {
                    element.setAttribute('style', this.fullscreenElementCachedStyle_);
                  } else {
                    element.removeAttribute('style');
                  }
                  this.fullscreenElement_ = null;
                  this.fullscreenElementCachedStyle_ = null;
                  var parent = this.fullscreenWrapper_.parentElement;
                  this.fullscreenWrapper_.removeChild(element);
                  if (this.originalParent_ === parent) {
                    parent.insertBefore(element, this.fullscreenWrapper_);
                  }
                  else if (this.originalParent_) {
                      this.originalParent_.appendChild(element);
                    }
                  parent.removeChild(this.fullscreenWrapper_);
                  return element;
                };
                VRDisplay.prototype.requestPresent = function (layers) {
                  var wasPresenting = this.isPresenting;
                  var self = this;
                  if (!(layers instanceof Array)) {
                    deprecateWarning('VRDisplay.prototype.requestPresent with non-array argument', 'an array of VRLayers as the first argument');
                    layers = [layers];
                  }
                  return new Promise(function (resolve, reject) {
                    if (!self.capabilities.canPresent) {
                      reject(new Error('VRDisplay is not capable of presenting.'));
                      return;
                    }
                    if (layers.length == 0 || layers.length > self.capabilities.maxLayers) {
                      reject(new Error('Invalid number of layers.'));
                      return;
                    }
                    var incomingLayer = layers[0];
                    if (!incomingLayer.source) {
                      resolve();
                      return;
                    }
                    var leftBounds = incomingLayer.leftBounds || defaultLeftBounds;
                    var rightBounds = incomingLayer.rightBounds || defaultRightBounds;
                    if (wasPresenting) {
                      var layer = self.layer_;
                      if (layer.source !== incomingLayer.source) {
                        layer.source = incomingLayer.source;
                      }
                      for (var i = 0; i < 4; i++) {
                        layer.leftBounds[i] = leftBounds[i];
                        layer.rightBounds[i] = rightBounds[i];
                      }
                      self.wrapForFullscreen(self.layer_.source);
                      self.updatePresent_();
                      resolve();
                      return;
                    }
                    self.layer_ = {
                      predistorted: incomingLayer.predistorted,
                      source: incomingLayer.source,
                      leftBounds: leftBounds.slice(0),
                      rightBounds: rightBounds.slice(0)
                    };
                    self.waitingForPresent_ = false;
                    if (self.layer_ && self.layer_.source) {
                      var fullscreenElement = self.wrapForFullscreen(self.layer_.source);
                      var onFullscreenChange = function onFullscreenChange() {
                        var actualFullscreenElement = getFullscreenElement();
                        self.isPresenting = fullscreenElement === actualFullscreenElement;
                        if (self.isPresenting) {
                          if (screen.orientation && screen.orientation.lock) {
                            screen.orientation.lock('landscape-primary').catch(function (error) {
                              console.error('screen.orientation.lock() failed due to', error.message);
                            });
                          }
                          self.waitingForPresent_ = false;
                          self.beginPresent_();
                          resolve();
                        } else {
                          if (screen.orientation && screen.orientation.unlock) {
                            screen.orientation.unlock();
                          }
                          self.removeFullscreenWrapper();
                          self.disableWakeLock();
                          self.endPresent_();
                          self.removeFullscreenListeners_();
                        }
                        self.fireVRDisplayPresentChange_();
                      };
                      var onFullscreenError = function onFullscreenError() {
                        if (!self.waitingForPresent_) {
                          return;
                        }
                        self.removeFullscreenWrapper();
                        self.removeFullscreenListeners_();
                        self.disableWakeLock();
                        self.waitingForPresent_ = false;
                        self.isPresenting = false;
                        reject(new Error('Unable to present.'));
                      };
                      self.addFullscreenListeners_(fullscreenElement, onFullscreenChange, onFullscreenError);
                      if (requestFullscreen(fullscreenElement)) {
                        self.enableWakeLock();
                        self.waitingForPresent_ = true;
                      } else if (isIOS() || isWebViewAndroid()) {
                        self.enableWakeLock();
                        self.isPresenting = true;
                        self.beginPresent_();
                        self.fireVRDisplayPresentChange_();
                        resolve();
                      }
                    }
                    if (!self.waitingForPresent_ && !isIOS()) {
                      exitFullscreen();
                      reject(new Error('Unable to present.'));
                    }
                  });
                };
                VRDisplay.prototype.exitPresent = function () {
                  var wasPresenting = this.isPresenting;
                  var self = this;
                  this.isPresenting = false;
                  this.layer_ = null;
                  this.disableWakeLock();
                  return new Promise(function (resolve, reject) {
                    if (wasPresenting) {
                      if (!exitFullscreen() && isIOS()) {
                        self.endPresent_();
                        self.fireVRDisplayPresentChange_();
                      }
                      if (isWebViewAndroid()) {
                        self.removeFullscreenWrapper();
                        self.removeFullscreenListeners_();
                        self.endPresent_();
                        self.fireVRDisplayPresentChange_();
                      }
                      resolve();
                    } else {
                      reject(new Error('Was not presenting to VRDisplay.'));
                    }
                  });
                };
                VRDisplay.prototype.getLayers = function () {
                  if (this.layer_) {
                    return [this.layer_];
                  }
                  return [];
                };
                VRDisplay.prototype.fireVRDisplayPresentChange_ = function () {
                  var event = new CustomEvent('vrdisplaypresentchange', { detail: { display: this } });
                  window.dispatchEvent(event);
                };
                VRDisplay.prototype.fireVRDisplayConnect_ = function () {
                  var event = new CustomEvent('vrdisplayconnect', { detail: { display: this } });
                  window.dispatchEvent(event);
                };
                VRDisplay.prototype.addFullscreenListeners_ = function (element, changeHandler, errorHandler) {
                  this.removeFullscreenListeners_();
                  this.fullscreenEventTarget_ = element;
                  this.fullscreenChangeHandler_ = changeHandler;
                  this.fullscreenErrorHandler_ = errorHandler;
                  if (changeHandler) {
                    if (document.fullscreenEnabled) {
                      element.addEventListener('fullscreenchange', changeHandler, false);
                    } else if (document.webkitFullscreenEnabled) {
                      element.addEventListener('webkitfullscreenchange', changeHandler, false);
                    } else if (document.mozFullScreenEnabled) {
                      document.addEventListener('mozfullscreenchange', changeHandler, false);
                    } else if (document.msFullscreenEnabled) {
                      element.addEventListener('msfullscreenchange', changeHandler, false);
                    }
                  }
                  if (errorHandler) {
                    if (document.fullscreenEnabled) {
                      element.addEventListener('fullscreenerror', errorHandler, false);
                    } else if (document.webkitFullscreenEnabled) {
                      element.addEventListener('webkitfullscreenerror', errorHandler, false);
                    } else if (document.mozFullScreenEnabled) {
                      document.addEventListener('mozfullscreenerror', errorHandler, false);
                    } else if (document.msFullscreenEnabled) {
                      element.addEventListener('msfullscreenerror', errorHandler, false);
                    }
                  }
                };
                VRDisplay.prototype.removeFullscreenListeners_ = function () {
                  if (!this.fullscreenEventTarget_) return;
                  var element = this.fullscreenEventTarget_;
                  if (this.fullscreenChangeHandler_) {
                    var changeHandler = this.fullscreenChangeHandler_;
                    element.removeEventListener('fullscreenchange', changeHandler, false);
                    element.removeEventListener('webkitfullscreenchange', changeHandler, false);
                    document.removeEventListener('mozfullscreenchange', changeHandler, false);
                    element.removeEventListener('msfullscreenchange', changeHandler, false);
                  }
                  if (this.fullscreenErrorHandler_) {
                    var errorHandler = this.fullscreenErrorHandler_;
                    element.removeEventListener('fullscreenerror', errorHandler, false);
                    element.removeEventListener('webkitfullscreenerror', errorHandler, false);
                    document.removeEventListener('mozfullscreenerror', errorHandler, false);
                    element.removeEventListener('msfullscreenerror', errorHandler, false);
                  }
                  this.fullscreenEventTarget_ = null;
                  this.fullscreenChangeHandler_ = null;
                  this.fullscreenErrorHandler_ = null;
                };
                VRDisplay.prototype.enableWakeLock = function () {
                  if (this.wakelock_) {
                    this.wakelock_.enable();
                  }
                };
                VRDisplay.prototype.disableWakeLock = function () {
                  if (this.wakelock_) {
                    this.wakelock_.disable();
                  }
                };
                VRDisplay.prototype.beginPresent_ = function () {
                };
                VRDisplay.prototype.endPresent_ = function () {
                };
                VRDisplay.prototype.submitFrame = function (pose) {
                };
                VRDisplay.prototype.getEyeParameters = function (whichEye) {
                  return null;
                };
                var config = {
                  ADDITIONAL_VIEWERS: [],
                  DEFAULT_VIEWER: '',
                  MOBILE_WAKE_LOCK: true,
                  DEBUG: false,
                  DPDB_URL: 'https://dpdb.webvr.rocks/dpdb.json',
                  K_FILTER: 0.98,
                  PREDICTION_TIME_S: 0.040,
                  CARDBOARD_UI_DISABLED: false,
                  ROTATE_INSTRUCTIONS_DISABLED: false,
                  YAW_ONLY: false,
                  BUFFER_SCALE: 0.5,
                  DIRTY_SUBMIT_FRAME_BINDINGS: false
                };
                var Eye = {
                  LEFT: 'left',
                  RIGHT: 'right'
                };
                function CardboardVRDisplay(config$$1) {
                  var defaults = extend({}, config);
                  config$$1 = extend(defaults, config$$1 || {});
                  VRDisplay.call(this, {
                    wakelock: config$$1.MOBILE_WAKE_LOCK
                  });
                  this.config = config$$1;
                  this.displayName = 'Cardboard VRDisplay';
                  this.capabilities = new VRDisplayCapabilities({
                    hasPosition: false,
                    hasOrientation: true,
                    hasExternalDisplay: false,
                    canPresent: true,
                    maxLayers: 1
                  });
                  this.stageParameters = null;
                  this.bufferScale_ = this.config.BUFFER_SCALE;
                  this.poseSensor_ = new PoseSensor(this.config);
                  this.distorter_ = null;
                  this.cardboardUI_ = null;
                  this.dpdb_ = new Dpdb(this.config.DPDB_URL, this.onDeviceParamsUpdated_.bind(this));
                  this.deviceInfo_ = new DeviceInfo(this.dpdb_.getDeviceParams(), config$$1.ADDITIONAL_VIEWERS);
                  this.viewerSelector_ = new ViewerSelector(config$$1.DEFAULT_VIEWER);
                  this.viewerSelector_.onChange(this.onViewerChanged_.bind(this));
                  this.deviceInfo_.setViewer(this.viewerSelector_.getCurrentViewer());
                  if (!this.config.ROTATE_INSTRUCTIONS_DISABLED) {
                    this.rotateInstructions_ = new RotateInstructions();
                  }
                  if (isIOS()) {
                    window.addEventListener('resize', this.onResize_.bind(this));
                  }
                }
                CardboardVRDisplay.prototype = Object.create(VRDisplay.prototype);
                CardboardVRDisplay.prototype._getPose = function () {
                  return {
                    position: null,
                    orientation: this.poseSensor_.getOrientation(),
                    linearVelocity: null,
                    linearAcceleration: null,
                    angularVelocity: null,
                    angularAcceleration: null
                  };
                };
                CardboardVRDisplay.prototype._resetPose = function () {
                  if (this.poseSensor_.resetPose) {
                    this.poseSensor_.resetPose();
                  }
                };
                CardboardVRDisplay.prototype._getFieldOfView = function (whichEye) {
                  var fieldOfView;
                  if (whichEye == Eye.LEFT) {
                    fieldOfView = this.deviceInfo_.getFieldOfViewLeftEye();
                  } else if (whichEye == Eye.RIGHT) {
                    fieldOfView = this.deviceInfo_.getFieldOfViewRightEye();
                  } else {
                    console.error('Invalid eye provided: %s', whichEye);
                    return null;
                  }
                  return fieldOfView;
                };
                CardboardVRDisplay.prototype._getEyeOffset = function (whichEye) {
                  var offset;
                  if (whichEye == Eye.LEFT) {
                    offset = [-this.deviceInfo_.viewer.interLensDistance * 0.5, 0.0, 0.0];
                  } else if (whichEye == Eye.RIGHT) {
                    offset = [this.deviceInfo_.viewer.interLensDistance * 0.5, 0.0, 0.0];
                  } else {
                    console.error('Invalid eye provided: %s', whichEye);
                    return null;
                  }
                  return offset;
                };
                CardboardVRDisplay.prototype.getEyeParameters = function (whichEye) {
                  var offset = this._getEyeOffset(whichEye);
                  var fieldOfView = this._getFieldOfView(whichEye);
                  var eyeParams = {
                    offset: offset,
                    renderWidth: this.deviceInfo_.device.width * 0.5 * this.bufferScale_,
                    renderHeight: this.deviceInfo_.device.height * this.bufferScale_
                  };
                  Object.defineProperty(eyeParams, 'fieldOfView', {
                    enumerable: true,
                    get: function get() {
                      deprecateWarning('VRFieldOfView', 'VRFrameData\'s projection matrices');
                      return fieldOfView;
                    }
                  });
                  return eyeParams;
                };
                CardboardVRDisplay.prototype.onDeviceParamsUpdated_ = function (newParams) {
                  if (this.config.DEBUG) {
                    console.log('DPDB reported that device params were updated.');
                  }
                  this.deviceInfo_.updateDeviceParams(newParams);
                  if (this.distorter_) {
                    this.distorter_.updateDeviceInfo(this.deviceInfo_);
                  }
                };
                CardboardVRDisplay.prototype.updateBounds_ = function () {
                  if (this.layer_ && this.distorter_ && (this.layer_.leftBounds || this.layer_.rightBounds)) {
                    this.distorter_.setTextureBounds(this.layer_.leftBounds, this.layer_.rightBounds);
                  }
                };
                CardboardVRDisplay.prototype.beginPresent_ = function () {
                  var gl = this.layer_.source.getContext('webgl');
                  if (!gl) gl = this.layer_.source.getContext('experimental-webgl');
                  if (!gl) gl = this.layer_.source.getContext('webgl2');
                  if (!gl) return;
                  if (this.layer_.predistorted) {
                    if (!this.config.CARDBOARD_UI_DISABLED) {
                      gl.canvas.width = getScreenWidth() * this.bufferScale_;
                      gl.canvas.height = getScreenHeight() * this.bufferScale_;
                      this.cardboardUI_ = new CardboardUI(gl);
                    }
                  } else {
                    if (!this.config.CARDBOARD_UI_DISABLED) {
                      this.cardboardUI_ = new CardboardUI(gl);
                    }
                    this.distorter_ = new CardboardDistorter(gl, this.cardboardUI_, this.config.BUFFER_SCALE, this.config.DIRTY_SUBMIT_FRAME_BINDINGS);
                    this.distorter_.updateDeviceInfo(this.deviceInfo_);
                  }
                  if (this.cardboardUI_) {
                    this.cardboardUI_.listen(function (e) {
                      this.viewerSelector_.show(this.layer_.source.parentElement);
                      e.stopPropagation();
                      e.preventDefault();
                    }.bind(this), function (e) {
                      this.exitPresent();
                      e.stopPropagation();
                      e.preventDefault();
                    }.bind(this));
                  }
                  if (this.rotateInstructions_) {
                    if (isLandscapeMode() && isMobile()) {
                      this.rotateInstructions_.showTemporarily(3000, this.layer_.source.parentElement);
                    } else {
                      this.rotateInstructions_.update();
                    }
                  }
                  this.orientationHandler = this.onOrientationChange_.bind(this);
                  window.addEventListener('orientationchange', this.orientationHandler);
                  this.vrdisplaypresentchangeHandler = this.updateBounds_.bind(this);
                  window.addEventListener('vrdisplaypresentchange', this.vrdisplaypresentchangeHandler);
                  this.fireVRDisplayDeviceParamsChange_();
                };
                CardboardVRDisplay.prototype.endPresent_ = function () {
                  if (this.distorter_) {
                    this.distorter_.destroy();
                    this.distorter_ = null;
                  }
                  if (this.cardboardUI_) {
                    this.cardboardUI_.destroy();
                    this.cardboardUI_ = null;
                  }
                  if (this.rotateInstructions_) {
                    this.rotateInstructions_.hide();
                  }
                  this.viewerSelector_.hide();
                  window.removeEventListener('orientationchange', this.orientationHandler);
                  window.removeEventListener('vrdisplaypresentchange', this.vrdisplaypresentchangeHandler);
                };
                CardboardVRDisplay.prototype.updatePresent_ = function () {
                  this.endPresent_();
                  this.beginPresent_();
                };
                CardboardVRDisplay.prototype.submitFrame = function (pose) {
                  if (this.distorter_) {
                    this.updateBounds_();
                    this.distorter_.submitFrame();
                  } else if (this.cardboardUI_ && this.layer_) {
                    var gl = this.layer_.source.getContext('webgl');
                    if (!gl) gl = this.layer_.source.getContext('experimental-webgl');
                    if (!gl) gl = this.layer_.source.getContext('webgl2');
                    var canvas = gl.canvas;
                    if (canvas.width != this.lastWidth || canvas.height != this.lastHeight) {
                      this.cardboardUI_.onResize();
                    }
                    this.lastWidth = canvas.width;
                    this.lastHeight = canvas.height;
                    this.cardboardUI_.render();
                  }
                };
                CardboardVRDisplay.prototype.onOrientationChange_ = function (e) {
                  this.viewerSelector_.hide();
                  if (this.rotateInstructions_) {
                    this.rotateInstructions_.update();
                  }
                  this.onResize_();
                };
                CardboardVRDisplay.prototype.onResize_ = function (e) {
                  if (this.layer_) {
                    var gl = this.layer_.source.getContext('webgl');
                    if (!gl) gl = this.layer_.source.getContext('experimental-webgl');
                    if (!gl) gl = this.layer_.source.getContext('webgl2');
                    var cssProperties = ['position: absolute', 'top: 0', 'left: 0',
                    'width: 100vw', 'height: 100vh', 'border: 0', 'margin: 0',
                    'padding: 0px', 'box-sizing: content-box'];
                    gl.canvas.setAttribute('style', cssProperties.join('; ') + ';');
                    safariCssSizeWorkaround(gl.canvas);
                  }
                };
                CardboardVRDisplay.prototype.onViewerChanged_ = function (viewer) {
                  this.deviceInfo_.setViewer(viewer);
                  if (this.distorter_) {
                    this.distorter_.updateDeviceInfo(this.deviceInfo_);
                  }
                  this.fireVRDisplayDeviceParamsChange_();
                };
                CardboardVRDisplay.prototype.fireVRDisplayDeviceParamsChange_ = function () {
                  var event = new CustomEvent('vrdisplaydeviceparamschange', {
                    detail: {
                      vrdisplay: this,
                      deviceInfo: this.deviceInfo_
                    }
                  });
                  window.dispatchEvent(event);
                };
                CardboardVRDisplay.VRFrameData = VRFrameData;
                CardboardVRDisplay.VRDisplay = VRDisplay;
                return CardboardVRDisplay;
                })));
                });
                var CardboardVRDisplay = unwrapExports(cardboardVrDisplay);

                class XRDevice extends EventTarget {
                  constructor(global) {
                    super();
                    this.global = global;
                    this.onWindowResize = this.onWindowResize.bind(this);
                    this.global.window.addEventListener('resize', this.onWindowResize);
                    this.environmentBlendMode = 'opaque';
                  }
                  onBaseLayerSet(sessionId, layer) { throw new Error('Not implemented'); }
                  isSessionSupported(mode) { throw new Error('Not implemented'); }
                  isFeatureSupported(featureDescriptor) { throw new Error('Not implemented'); }
                  async requestSession(mode, enabledFeatures) { throw new Error('Not implemented'); }
                  requestAnimationFrame(callback) { throw new Error('Not implemented'); }
                  onFrameStart(sessionId) { throw new Error('Not implemented'); }
                  onFrameEnd(sessionId) { throw new Error('Not implemented'); }
                  doesSessionSupportReferenceSpace(sessionId, type) { throw new Error('Not implemented'); }
                  requestStageBounds() { throw new Error('Not implemented'); }
                  async requestFrameOfReferenceTransform(type, options) {
                    return undefined;
                  }
                  cancelAnimationFrame(handle) { throw new Error('Not implemented'); }
                  endSession(sessionId) { throw new Error('Not implemented'); }
                  getViewSpaces(mode) { return undefined; }
                  getViewport(sessionId, eye, layer, target, viewIndex) { throw new Error('Not implemented'); }
                  getProjectionMatrix(eye, viewIndex) { throw new Error('Not implemented'); }
                  getBasePoseMatrix() { throw new Error('Not implemented'); }
                  getBaseViewMatrix(eye) { throw new Error('Not implemented'); }
                  getInputSources() { throw new Error('Not implemented'); }
                  getInputPose(inputSource, coordinateSystem, poseType) { throw new Error('Not implemented'); }
                  onWindowResize() {
                    this.onWindowResize();
                  }
                }

                let daydream = {
                  mapping: '',
                  profiles: ['google-daydream', 'generic-trigger-touchpad'],
                  buttons: {
                    length: 3,
                    0: null,
                    1: null,
                    2: 0
                  },
                };
                let viveFocus = {
                  mapping: 'xr-standard',
                  profiles: ['htc-vive-focus', 'generic-trigger-touchpad'],
                  buttons: {
                    length: 3,
                    0: 1,
                    1: null,
                    2: 0
                  },
                };
                let oculusGo = {
                  mapping: 'xr-standard',
                  profiles: ['oculus-go', 'generic-trigger-touchpad'],
                  buttons: {
                    length: 3,
                    0: 1,
                    1: null,
                    2: 0
                  },
                  gripTransform: {
                    orientation: [Math.PI * 0.11, 0, 0, 1]
                  }
                };
                let oculusTouch = {
                  mapping: 'xr-standard',
                  displayProfiles: {
                    'Oculus Quest': ['oculus-touch-v2', 'oculus-touch', 'generic-trigger-squeeze-thumbstick']
                  },
                  profiles: ['oculus-touch', 'generic-trigger-squeeze-thumbstick'],
                  axes: {
                    length: 4,
                    0: 2,
                    1: 3,
                    2: 0,
                    3: 1
                  },
                  buttons: {
                    length: 7,
                    0: 1,
                    1: 2,
                    2: null,
                    3: 0,
                    4: 3,
                    5: 4,
                    6: null
                  },
                  gripTransform: {
                    position: [0, -0.02, 0.04, 1],
                    orientation: [Math.PI * 0.11, 0, 0, 1]
                  }
                };
                let oculusTouchV2 = {
                  mapping: 'xr-standard',
                  displayProfiles: {
                    'Oculus Quest': ['oculus-touch-v2', 'oculus-touch', 'generic-trigger-squeeze-thumbstick']
                  },
                  profiles: ['oculus-touch-v2', 'oculus-touch', 'generic-trigger-squeeze-thumbstick'],
                  axes: {
                    length: 4,
                    0: 2,
                    1: 3,
                    2: 0,
                    3: 1
                  },
                  buttons: {
                    length: 7,
                    0: 1,
                    1: 2,
                    2: null,
                    3: 0,
                    4: 3,
                    5: 4,
                    6: null
                  },
                  gripTransform: {
                    position: [0, -0.02, 0.04, 1],
                    orientation: [Math.PI * 0.11, 0, 0, 1]
                  }
                };
                let oculusTouchV3 = {
                  mapping: 'xr-standard',
                  displayProfiles: {
                    'Oculus Quest': ['oculus-touch-v2', 'oculus-touch', 'generic-trigger-squeeze-thumbstick']
                  },
                  profiles: ['oculus-touch-v3', 'oculus-touch-v2', 'oculus-touch', 'generic-trigger-squeeze-thumbstick'],
                  axes: {
                    length: 4,
                    0: 2,
                    1: 3,
                    2: 0,
                    3: 1
                  },
                  buttons: {
                    length: 7,
                    0: 1,
                    1: 2,
                    2: null,
                    3: 0,
                    4: 3,
                    5: 4,
                    6: null
                  },
                  gripTransform: {
                    position: [0, -0.02, 0.04, 1],
                    orientation: [Math.PI * 0.11, 0, 0, 1]
                  }
                };
                let openVr = {
                  mapping: 'xr-standard',
                  profiles: ['htc-vive', 'generic-trigger-squeeze-touchpad'],
                  displayProfiles: {
                    'HTC Vive': ['htc-vive', 'generic-trigger-squeeze-touchpad'],
                    'HTC Vive DVT': ['htc-vive', 'generic-trigger-squeeze-touchpad'],
                    'Valve Index': ['valve-index', 'generic-trigger-squeeze-touchpad-thumbstick']
                  },
                  buttons: {
                    length: 3,
                    0: 1,
                    1: 2,
                    2: 0
                  },
                  gripTransform: {
                    position: [0, 0, 0.05, 1],
                  },
                  targetRayTransform: {
                    orientation: [Math.PI * -0.08, 0, 0, 1]
                  },
                  userAgentOverrides: {
                    "Firefox": {
                      axes: {
                        invert: [1, 3]
                      }
                    }
                  }
                };
                let samsungGearVR = {
                  mapping: 'xr-standard',
                  profiles: ['samsung-gearvr', 'generic-trigger-touchpad'],
                  buttons: {
                    length: 3,
                    0: 1,
                    1: null,
                    2: 0
                  },
                  gripTransform: {
                    orientation: [Math.PI * 0.11, 0, 0, 1]
                  }
                };
                let samsungOdyssey = {
                  mapping: 'xr-standard',
                  profiles: ['samsung-odyssey', 'microsoft-mixed-reality', 'generic-trigger-squeeze-touchpad-thumbstick'],
                  buttons: {
                    length: 4,
                    0: 1,
                    1: 0,
                    2: 2,
                    3: 4,
                  },
                  gripTransform: {
                    position: [0, -0.02, 0.04, 1],
                    orientation: [Math.PI * 0.11, 0, 0, 1]
                  }
                };
                let windowsMixedReality = {
                  mapping: 'xr-standard',
                  profiles: ['microsoft-mixed-reality', 'generic-trigger-squeeze-touchpad-thumbstick'],
                  buttons: {
                    length: 4,
                    0: 1,
                    1: 0,
                    2: 2,
                    3: 4,
                  },
                  gripTransform: {
                    position: [0, -0.02, 0.04, 1],
                    orientation: [Math.PI * 0.11, 0, 0, 1]
                  }
                };
                let GamepadMappings = {
                  'Daydream Controller': daydream,
                  'Gear VR Controller': samsungGearVR,
                  'HTC Vive Focus Controller': viveFocus,
                  'Oculus Go Controller': oculusGo,
                  'Oculus Touch (Right)': oculusTouch,
                  'Oculus Touch (Left)': oculusTouch,
                  'Oculus Touch V2 (Right)': oculusTouchV2,
                  'Oculus Touch V2 (Left)': oculusTouchV2,
                  'Oculus Touch V3 (Right)': oculusTouchV3,
                  'Oculus Touch V3 (Left)': oculusTouchV3,
                  'OpenVR Gamepad': openVr,
                  'Spatial Controller (Spatial Interaction Source) 045E-065A': windowsMixedReality,
                  'Spatial Controller (Spatial Interaction Source) 045E-065D': samsungOdyssey,
                  'Windows Mixed Reality (Right)': windowsMixedReality,
                  'Windows Mixed Reality (Left)': windowsMixedReality,
                };

                const HEAD_ELBOW_OFFSET_RIGHTHANDED = fromValues(0.155, -0.465, -0.15);
                const HEAD_ELBOW_OFFSET_LEFTHANDED = fromValues(-0.155, -0.465, -0.15);
                const ELBOW_WRIST_OFFSET = fromValues(0, 0, -0.25);
                const WRIST_CONTROLLER_OFFSET = fromValues(0, 0, 0.05);
                const ARM_EXTENSION_OFFSET = fromValues(-0.08, 0.14, 0.08);
                const ELBOW_BEND_RATIO = 0.4;
                const EXTENSION_RATIO_WEIGHT = 0.4;
                const MIN_ANGULAR_SPEED = 0.61;
                const MIN_ANGLE_DELTA = 0.175;
                const MIN_EXTENSION_COS = 0.12;
                const MAX_EXTENSION_COS = 0.87;
                const RAD_TO_DEG = 180 / Math.PI;
                function eulerFromQuaternion(out, q, order) {
                  function clamp(value, min, max) {
                    return (value < min ? min : (value > max ? max : value));
                  }
                  var sqx = q[0] * q[0];
                  var sqy = q[1] * q[1];
                  var sqz = q[2] * q[2];
                  var sqw = q[3] * q[3];
                  if ( order === 'XYZ' ) {
                    out[0] = Math.atan2( 2 * ( q[0] * q[3] - q[1] * q[2] ), ( sqw - sqx - sqy + sqz ) );
                    out[1] = Math.asin(  clamp( 2 * ( q[0] * q[2] + q[1] * q[3] ), -1, 1 ) );
                    out[2] = Math.atan2( 2 * ( q[2] * q[3] - q[0] * q[1] ), ( sqw + sqx - sqy - sqz ) );
                  } else if ( order ===  'YXZ' ) {
                    out[0] = Math.asin(  clamp( 2 * ( q[0] * q[3] - q[1] * q[2] ), -1, 1 ) );
                    out[1] = Math.atan2( 2 * ( q[0] * q[2] + q[1] * q[3] ), ( sqw - sqx - sqy + sqz ) );
                    out[2] = Math.atan2( 2 * ( q[0] * q[1] + q[2] * q[3] ), ( sqw - sqx + sqy - sqz ) );
                  } else if ( order === 'ZXY' ) {
                    out[0] = Math.asin(  clamp( 2 * ( q[0] * q[3] + q[1] * q[2] ), -1, 1 ) );
                    out[1] = Math.atan2( 2 * ( q[1] * q[3] - q[2] * q[0] ), ( sqw - sqx - sqy + sqz ) );
                    out[2] = Math.atan2( 2 * ( q[2] * q[3] - q[0] * q[1] ), ( sqw - sqx + sqy - sqz ) );
                  } else if ( order === 'ZYX' ) {
                    out[0] = Math.atan2( 2 * ( q[0] * q[3] + q[2] * q[1] ), ( sqw - sqx - sqy + sqz ) );
                    out[1] = Math.asin(  clamp( 2 * ( q[1] * q[3] - q[0] * q[2] ), -1, 1 ) );
                    out[2] = Math.atan2( 2 * ( q[0] * q[1] + q[2] * q[3] ), ( sqw + sqx - sqy - sqz ) );
                  } else if ( order === 'YZX' ) {
                    out[0] = Math.atan2( 2 * ( q[0] * q[3] - q[2] * q[1] ), ( sqw - sqx + sqy - sqz ) );
                    out[1] = Math.atan2( 2 * ( q[1] * q[3] - q[0] * q[2] ), ( sqw + sqx - sqy - sqz ) );
                    out[2] = Math.asin(  clamp( 2 * ( q[0] * q[1] + q[2] * q[3] ), -1, 1 ) );
                  } else if ( order === 'XZY' ) {
                    out[0] = Math.atan2( 2 * ( q[0] * q[3] + q[1] * q[2] ), ( sqw - sqx + sqy - sqz ) );
                    out[1] = Math.atan2( 2 * ( q[0] * q[2] + q[1] * q[3] ), ( sqw + sqx - sqy - sqz ) );
                    out[2] = Math.asin(  clamp( 2 * ( q[2] * q[3] - q[0] * q[1] ), -1, 1 ) );
                  } else {
                    console.log('No order given for quaternion to euler conversion.');
                    return;
                  }
                }
                class OrientationArmModel {
                  constructor() {
                    this.hand = 'right';
                    this.headElbowOffset = HEAD_ELBOW_OFFSET_RIGHTHANDED;
                    this.controllerQ = create$4();
                    this.lastControllerQ = create$4();
                    this.headQ = create$4();
                    this.headPos = create$1();
                    this.elbowPos = create$1();
                    this.wristPos = create$1();
                    this.time = null;
                    this.lastTime = null;
                    this.rootQ = create$4();
                    this.position = create$1();
                  }
                  setHandedness(hand) {
                    if (this.hand != hand) {
                      this.hand = hand;
                      if (this.hand == 'left') {
                        this.headElbowOffset = HEAD_ELBOW_OFFSET_LEFTHANDED;
                      } else {
                        this.headElbowOffset = HEAD_ELBOW_OFFSET_RIGHTHANDED;
                      }
                    }
                  }
                  update(controllerOrientation, headPoseMatrix) {
                    this.time = now$1();
                    if (controllerOrientation) {
                      copy$3(this.lastControllerQ, this.controllerQ);
                      copy$3(this.controllerQ, controllerOrientation);
                    }
                    if (headPoseMatrix) {
                      getTranslation(this.headPos, headPoseMatrix);
                      getRotation(this.headQ, headPoseMatrix);
                    }
                    let headYawQ = this.getHeadYawOrientation_();
                    let angleDelta = this.quatAngle_(this.lastControllerQ, this.controllerQ);
                    let timeDelta = (this.time - this.lastTime) / 1000;
                    let controllerAngularSpeed = angleDelta / timeDelta;
                    if (controllerAngularSpeed > MIN_ANGULAR_SPEED) {
                      slerp(this.rootQ, this.rootQ, headYawQ,
                                 Math.min(angleDelta / MIN_ANGLE_DELTA, 1.0));
                    } else {
                      copy$3(this.rootQ, headYawQ);
                    }
                    let controllerForward = fromValues(0, 0, -1.0);
                    transformQuat(controllerForward, controllerForward, this.controllerQ);
                    let controllerDotY = dot(controllerForward, [0, 1, 0]);
                    let extensionRatio = this.clamp_(
                        (controllerDotY - MIN_EXTENSION_COS) / MAX_EXTENSION_COS, 0.0, 1.0);
                    let controllerCameraQ = clone$2(this.rootQ);
                    invert$1(controllerCameraQ, controllerCameraQ);
                    multiply$1(controllerCameraQ, controllerCameraQ, this.controllerQ);
                    let elbowPos = this.elbowPos;
                    copy$1(elbowPos, this.headPos);
                    add(elbowPos, elbowPos, this.headElbowOffset);
                    let elbowOffset = clone(ARM_EXTENSION_OFFSET);
                    scale(elbowOffset, elbowOffset, extensionRatio);
                    add(elbowPos, elbowPos, elbowOffset);
                    let totalAngle = this.quatAngle_(controllerCameraQ, create$4());
                    let totalAngleDeg = totalAngle * RAD_TO_DEG;
                    let lerpSuppression = 1 - Math.pow(totalAngleDeg / 180, 4);sssss;
                    let elbowRatio = ELBOW_BEND_RATIO;
                    let wristRatio = 1 - ELBOW_BEND_RATIO;
                    let lerpValue = lerpSuppression *
                        (elbowRatio + wristRatio * extensionRatio * EXTENSION_RATIO_WEIGHT);
                    let wristQ = create$4();
                    slerp(wristQ, wristQ, controllerCameraQ, lerpValue);
                    let invWristQ = invert$1(create$4(), wristQ);
                    let elbowQ = clone$2(controllerCameraQ);
                    multiply$1(elbowQ, elbowQ, invWristQ);
                    let wristPos = this.wristPos;
                    copy$1(wristPos, WRIST_CONTROLLER_OFFSET);
                    transformQuat(wristPos, wristPos, wristQ);
                    add(wristPos, wristPos, ELBOW_WRIST_OFFSET);
                    transformQuat(wristPos, wristPos, elbowQ);
                    add(wristPos, wristPos, elbowPos);
                    let offset = clone(ARM_EXTENSION_OFFSET);
                    scale(offset, offset, extensionRatio);
                    add(this.position, this.wristPos, offset);
                    transformQuat(this.position, this.position, this.rootQ);
                    this.lastTime = this.time;
                  }
                  getPosition() {
                    return this.position;
                  }
                  getHeadYawOrientation_() {
                    let headEuler = create$1();
                    eulerFromQuaternion(headEuler, this.headQ, 'YXZ');
                    let destinationQ = fromEuler(create$4(), 0, headEuler[1] * RAD_TO_DEG, 0);
                    return destinationQ;
                  }
                  clamp_(value, min, max) {
                    return Math.min(Math.max(value, min), max);
                  }
                  quatAngle_(q1, q2) {
                    let vec1 = [0, 0, -1];
                    let vec2 = [0, 0, -1];
                    transformQuat(vec1, vec1, q1);
                    transformQuat(vec2, vec2, q2);
                    return angle(vec1, vec2);
                  }
                }

                const PRIVATE$i = Symbol('@@webxr-polyfill/XRRemappedGamepad');
                const PLACEHOLDER_BUTTON = { pressed: false, touched: false, value: 0.0 };
                Object.freeze(PLACEHOLDER_BUTTON);
                class XRRemappedGamepad {
                  constructor(gamepad, display, map) {
                    if (!map) {
                      map = {};
                    }
                    if (map.userAgentOverrides) {
                      for (let agent in map.userAgentOverrides) {
                        if (navigator.userAgent.includes(agent)) {
                          let override = map.userAgentOverrides[agent];
                          for (let key in override) {
                            if (key in map) {
                              Object.assign(map[key], override[key]);
                            } else {
                              map[key] = override[key];
                            }
                          }
                          break;
                        }
                      }
                    }
                    let axes = new Array(map.axes && map.axes.length ? map.axes.length : gamepad.axes.length);
                    let buttons = new Array(map.buttons && map.buttons.length ? map.buttons.length : gamepad.buttons.length);
                    let gripTransform = null;
                    if (map.gripTransform) {
                      let orientation = map.gripTransform.orientation || [0, 0, 0, 1];
                      gripTransform = create();
                      fromRotationTranslation(
                        gripTransform,
                        normalize$2(orientation, orientation),
                        map.gripTransform.position || [0, 0, 0]
                      );
                    }
                    let targetRayTransform = null;
                    if (map.targetRayTransform) {
                      let orientation =  map.targetRayTransform.orientation || [0, 0, 0, 1];
                      targetRayTransform = create();
                      fromRotationTranslation(
                        targetRayTransform,
                        normalize$2(orientation, orientation),
                        map.targetRayTransform.position || [0, 0, 0]
                      );
                    }
                    let profiles = map.profiles;
                    if (map.displayProfiles) {
                      if (display.displayName in map.displayProfiles) {
                        profiles = map.displayProfiles[display.displayName];
                      }
                    }
                    this[PRIVATE$i] = {
                      gamepad,
                      map,
                      profiles: profiles || [gamepad.id],
                      mapping: map.mapping || gamepad.mapping,
                      axes,
                      buttons,
                      gripTransform,
                      targetRayTransform,
                    };
                    this._update();
                  }
                  _update() {
                    let gamepad = this[PRIVATE$i].gamepad;
                    let map = this[PRIVATE$i].map;
                    let axes = this[PRIVATE$i].axes;
                    for (let i = 0; i < axes.length; ++i) {
                      if (map.axes && i in map.axes) {
                        if (map.axes[i] === null) {
                          axes[i] = 0;
                        } else {
                          axes[i] = gamepad.axes[map.axes[i]];
                        }
                      } else {
                        axes[i] = gamepad.axes[i];
                      }
                    }
                    if (map.axes && map.axes.invert) {
                      for (let axis of map.axes.invert) {
                        if (axis < axes.length) {
                          axes[axis] *= -1;
                        }
                      }
                    }
                    let buttons = this[PRIVATE$i].buttons;
                    for (let i = 0; i < buttons.length; ++i) {
                      if (map.buttons && i in map.buttons) {
                        if (map.buttons[i] === null) {
                          buttons[i] = PLACEHOLDER_BUTTON;
                        } else {
                          buttons[i] = gamepad.buttons[map.buttons[i]];
                        }
                      } else {
                        buttons[i] = gamepad.buttons[i];
                      }
                    }
                  }
                  get id() {
                    return '';
                  }
                  get _profiles() {
                    return this[PRIVATE$i].profiles;
                  }
                  get index() {
                    return -1;
                  }
                  get connected() {
                    return this[PRIVATE$i].gamepad.connected;
                  }
                  get timestamp() {
                    return this[PRIVATE$i].gamepad.timestamp;
                  }
                  get mapping() {
                    return this[PRIVATE$i].mapping;
                  }
                  get axes() {
                    return this[PRIVATE$i].axes;
                  }
                  get buttons() {
                    return this[PRIVATE$i].buttons;
                  }
                  get hapticActuators() {
                    return this[PRIVATE$i].gamepad.hapticActuators;
                  }
                }
                class GamepadXRInputSource {
                  constructor(polyfill, display, primaryButtonIndex = 0, primarySqueezeButtonIndex = -1) {
                    this.polyfill = polyfill;
                    this.display = display;
                    this.nativeGamepad = null;
                    this.gamepad = null;
                    this.inputSource = new XRInputSource(this);
                    this.lastPosition = create$1();
                    this.emulatedPosition = false;
                    this.basePoseMatrix = create();
                    this.outputMatrix = create();
                    this.primaryButtonIndex = primaryButtonIndex;
                    this.primaryActionPressed = false;
                    this.primarySqueezeButtonIndex = primarySqueezeButtonIndex;
                    this.primarySqueezeActionPressed = false;
                    this.handedness = '';
                    this.targetRayMode = 'gaze';
                    this.armModel = null;
                  }
                  get profiles() {
                    return this.gamepad ? this.gamepad._profiles : [];
                  }
                  updateFromGamepad(gamepad) {
                    if (this.nativeGamepad !== gamepad) {
                      this.nativeGamepad = gamepad;
                      if (gamepad) {
                        this.gamepad = new XRRemappedGamepad(gamepad, this.display, GamepadMappings[gamepad.id]);
                      } else {
                        this.gamepad = null;
                      }
                    }
                    this.handedness = gamepad.hand === '' ? 'none' : gamepad.hand;
                    if (this.gamepad) {
                      this.gamepad._update();
                    }
                    if (gamepad.pose) {
                      this.targetRayMode = 'tracked-pointer';
                      this.emulatedPosition = !gamepad.pose.hasPosition;
                    } else if (gamepad.hand === '') {
                      this.targetRayMode = 'gaze';
                      this.emulatedPosition = false;
                    }
                  }
                  updateBasePoseMatrix() {
                    if (this.nativeGamepad && this.nativeGamepad.pose) {
                      let pose = this.nativeGamepad.pose;
                      let position = pose.position;
                      let orientation = pose.orientation;
                      if (!position && !orientation) {
                        return;
                      }
                      if (!position) {
                        if (!pose.hasPosition) {
                          if (!this.armModel) {
                            this.armModel = new OrientationArmModel();
                          }
                          this.armModel.setHandedness(this.nativeGamepad.hand);
                          this.armModel.update(orientation, this.polyfill.getBasePoseMatrix());
                          position = this.armModel.getPosition();
                        } else {
                          position = this.lastPosition;
                        }
                      } else {
                        this.lastPosition[0] = position[0];
                        this.lastPosition[1] = position[1];
                        this.lastPosition[2] = position[2];
                      }
                      fromRotationTranslation(this.basePoseMatrix, orientation, position);
                    } else {
                      copy(this.basePoseMatrix, this.polyfill.getBasePoseMatrix());
                    }
                    return this.basePoseMatrix;
                  }
                  getXRPose(coordinateSystem, poseType) {
                    this.updateBasePoseMatrix();
                    switch(poseType) {
                      case "target-ray":
                        coordinateSystem._transformBasePoseMatrix(this.outputMatrix, this.basePoseMatrix);
                        if (this.gamepad && this.gamepad[PRIVATE$i].targetRayTransform) {
                          multiply(this.outputMatrix, this.outputMatrix, this.gamepad[PRIVATE$i].targetRayTransform);
                        }
                        break;
                      case "grip":
                        if (!this.nativeGamepad || !this.nativeGamepad.pose) {
                          return null;
                        }
                        coordinateSystem._transformBasePoseMatrix(this.outputMatrix, this.basePoseMatrix);
                        if (this.gamepad && this.gamepad[PRIVATE$i].gripTransform) {
                          multiply(this.outputMatrix, this.outputMatrix, this.gamepad[PRIVATE$i].gripTransform);
                        }
                        break;
                      default:
                        return null;
                    }
                    coordinateSystem._adjustForOriginOffset(this.outputMatrix);
                    return new XRPose(new XRRigidTransform(this.outputMatrix), this.emulatedPosition);
                  }
                }

                const TEST_ENV = "production" === 'test';
                const EXTRA_PRESENTATION_ATTRIBUTES = {
                  highRefreshRate: true,
                };
                const PRIMARY_BUTTON_MAP = {
                  oculus: 1,
                  openvr: 1,
                  'spatial controller (spatial interaction source)': 1
                };
                let SESSION_ID = 0;
                class Session {
                  constructor(mode, enabledFeatures, polyfillOptions={}) {
                    this.mode = mode;
                    this.enabledFeatures = enabledFeatures;
                    this.outputContext = null;
                    this.immersive = mode == 'immersive-vr' || mode == 'immersive-ar';
                    this.ended = null;
                    this.baseLayer = null;
                    this.id = ++SESSION_ID;
                    this.modifiedCanvasLayer = false;
                    if (this.outputContext && !TEST_ENV) {
                      const renderContextType = polyfillOptions.renderContextType || '2d';
                      this.renderContext = this.outputContext.canvas.getContext(renderContextType);
                    }
                  }
                }class WebVRDevice extends XRDevice {
                  constructor(global, display) {
                    const { canPresent } = display.capabilities;
                    super(global);
                    this.display = display;
                    this.frame = new global.VRFrameData();
                    this.sessions = new Map();
                    this.immersiveSession = null;
                    this.canPresent = canPresent;
                    this.baseModelMatrix = create();
                    this.gamepadInputSources = {};
                    this.tempVec3 = new Float32Array(3);
                    this.onVRDisplayPresentChange = this.onVRDisplayPresentChange.bind(this);
                    global.window.addEventListener('vrdisplaypresentchange', this.onVRDisplayPresentChange);
                    this.CAN_USE_GAMEPAD = global.navigator && ('getGamepads' in global.navigator);
                    this.HAS_BITMAP_SUPPORT = isImageBitmapSupported(global);
                  }
                  get depthNear() { return this.display.depthNear; }
                  set depthNear(val) { this.display.depthNear = val; }
                  get depthFar() { return this.display.depthFar; }
                  set depthFar(val) { this.display.depthFar = val; }
                  onBaseLayerSet(sessionId, layer) {
                    const session = this.sessions.get(sessionId);
                    const canvas = layer.context.canvas;
                    if (session.immersive) {
                      const left = this.display.getEyeParameters('left');
                      const right = this.display.getEyeParameters('right');
                      canvas.width = Math.max(left.renderWidth, right.renderWidth) * 2;
                      canvas.height = Math.max(left.renderHeight, right.renderHeight);
                      this.display.requestPresent([{
                          source: canvas, attributes: EXTRA_PRESENTATION_ATTRIBUTES
                        }]).then(() => {
                        if ( !this.global.document.body.contains(canvas)) {
                          session.modifiedCanvasLayer = true;
                          this.global.document.body.appendChild(canvas);
                          applyCanvasStylesForMinimalRendering(canvas);
                        }
                        session.baseLayer = layer;
                      });
                    }
                    else {
                      session.baseLayer = layer;
                    }
                  }
                  isSessionSupported(mode) {
                    if (mode == 'immersive-ar') {
                      return false;
                    }
                    if (mode == 'immersive-vr' && this.canPresent === false) {
                      return false;
                    }
                    return true;
                  }
                  isFeatureSupported(featureDescriptor) {
                    switch(featureDescriptor) {
                      case 'viewer': return true;
                      case 'local': return true;
                      case 'local-floor': return true;
                      case 'bounded': return false;
                      case 'unbounded': return false;
                      default: return false;
                    }
                  }
                  async requestSession(mode, enabledFeatures) {
                    if (!this.isSessionSupported(mode)) {
                      return Promise.reject();
                    }
                    let immersive = mode == 'immersive-vr';
                    if (immersive) {
                      const canvas = this.global.document.createElement('canvas');
                      {
                        const ctx = canvas.getContext('webgl');
                      }
                      await this.display.requestPresent([{
                          source: canvas, attributes: EXTRA_PRESENTATION_ATTRIBUTES }]);
                    }
                    const session = new Session(mode, enabledFeatures, {
                      renderContextType: this.HAS_BITMAP_SUPPORT ? 'bitmaprenderer' : '2d'
                    });
                    this.sessions.set(session.id, session);
                    if (immersive) {
                      this.immersiveSession = session;
                      this.dispatchEvent('@@webxr-polyfill/vr-present-start', session.id);
                    }
                    return Promise.resolve(session.id);
                  }
                  requestAnimationFrame(callback) {
                    return this.display.requestAnimationFrame(callback);
                  }
                  getPrimaryButtonIndex(gamepad) {
                    let primaryButton = 0;
                    let name = gamepad.id.toLowerCase();
                    for (let key in PRIMARY_BUTTON_MAP) {
                      if (name.includes(key)) {
                        primaryButton = PRIMARY_BUTTON_MAP[key];
                        break;
                      }
                    }
                    return Math.min(primaryButton, gamepad.buttons.length - 1);
                  }
                  onFrameStart(sessionId, renderState) {
                    this.display.depthNear = renderState.depthNear;
                    this.display.depthFar = renderState.depthFar;
                    this.display.getFrameData(this.frame);
                    const session = this.sessions.get(sessionId);
                    if (session.immersive && this.CAN_USE_GAMEPAD) {
                      let prevInputSources = this.gamepadInputSources;
                      this.gamepadInputSources = {};
                      let gamepads = this.global.navigator.getGamepads();
                      for (let i = 0; i < gamepads.length; ++i) {
                        let gamepad = gamepads[i];
                        if (gamepad && gamepad.displayId > 0) {
                          let inputSourceImpl = prevInputSources[i];
                          if (!inputSourceImpl) {
                            inputSourceImpl = new GamepadXRInputSource(this, this.display, this.getPrimaryButtonIndex(gamepad));
                          }
                          inputSourceImpl.updateFromGamepad(gamepad);
                          this.gamepadInputSources[i] = inputSourceImpl;
                          if (inputSourceImpl.primaryButtonIndex != -1) {
                            let primaryActionPressed = gamepad.buttons[inputSourceImpl.primaryButtonIndex].pressed;
                            if (primaryActionPressed && !inputSourceImpl.primaryActionPressed) {
                              this.dispatchEvent('@@webxr-polyfill/input-select-start', { sessionId: session.id, inputSource: inputSourceImpl.inputSource });
                            } else if (!primaryActionPressed && inputSourceImpl.primaryActionPressed) {
                              this.dispatchEvent('@@webxr-polyfill/input-select-end', { sessionId: session.id, inputSource: inputSourceImpl.inputSource });
                            }
                            inputSourceImpl.primaryActionPressed = primaryActionPressed;
                          }
                          if (inputSourceImpl.primarySqueezeButtonIndex != -1) {
                            let primarySqueezeActionPressed = gamepad.buttons[inputSourceImpl.primarySqueezeButtonIndex].pressed;
                            if (primarySqueezeActionPressed && !inputSourceImpl.primarySqueezeActionPressed) {
                              this.dispatchEvent('@@webxr-polyfill/input-squeeze-start', { sessionId: session.id, inputSource: inputSourceImpl.inputSource });
                            } else if (!primarySqueezeActionPressed && inputSourceImpl.primarySqueezeActionPressed) {
                              this.dispatchEvent('@@webxr-polyfill/input-squeeze-end', { sessionId: session.id, inputSource: inputSourceImpl.inputSource });
                            }
                            inputSourceImpl.primarySqueezeActionPressed = primarySqueezeActionPressed;
                          }
                        }
                      }
                    }
                    if (!session.immersive && session.baseLayer) {
                      const canvas = session.baseLayer.context.canvas;
                      perspective(this.frame.leftProjectionMatrix, renderState.inlineVerticalFieldOfView,
                          canvas.width/canvas.height, renderState.depthNear, renderState.depthFar);
                    }
                  }
                  onFrameEnd(sessionId) {
                    const session = this.sessions.get(sessionId);
                    if (session.ended || !session.baseLayer) {
                      return;
                    }
                    if (session.outputContext &&
                        !(session.immersive && !this.display.capabilities.hasExternalDisplay)) {
                      const mirroring =
                        session.immersive && this.display.capabilities.hasExternalDisplay;
                      const iCanvas = session.baseLayer.context.canvas;
                      const iWidth = mirroring ? iCanvas.width / 2 : iCanvas.width;
                      const iHeight = iCanvas.height;
                      {
                        const oCanvas = session.outputContext.canvas;
                        const oWidth = oCanvas.width;
                        const oHeight = oCanvas.height;
                        const renderContext = session.renderContext;
                        if (this.HAS_BITMAP_SUPPORT) {
                          if (iCanvas.transferToImageBitmap) {
                            renderContext.transferFromImageBitmap(iCanvas.transferToImageBitmap());
                          }
                          else {
                            this.global.createImageBitmap(iCanvas, 0, 0, iWidth, iHeight, {
                              resizeWidth: oWidth,
                              resizeHeight: oHeight,
                            }).then(bitmap => renderContext.transferFromImageBitmap(bitmap));
                          }
                        } else {
                          renderContext.drawImage(iCanvas, 0, 0, iWidth, iHeight,
                                                           0, 0, oWidth, oHeight);
                        }
                      }
                    }
                    if (session.immersive && session.baseLayer) {
                      this.display.submitFrame();
                    }
                  }
                  cancelAnimationFrame(handle) {
                    this.display.cancelAnimationFrame(handle);
                  }
                  async endSession(sessionId) {
                    const session = this.sessions.get(sessionId);
                    if (session.ended) {
                      return;
                    }
                    if (session.immersive) {
                      return this.display.exitPresent();
                    } else {
                      session.ended = true;
                    }
                  }
                  doesSessionSupportReferenceSpace(sessionId, type) {
                    const session = this.sessions.get(sessionId);
                    if (session.ended) {
                      return false;
                    }
                    return session.enabledFeatures.has(type);
                  }
                  requestStageBounds() {
                    if (this.display.stageParameters) {
                      const width = this.display.stageParameters.sizeX;
                      const depth = this.display.stageParameters.sizeZ;
                      const data = [];
                      data.push(-width / 2);
                      data.push(-depth / 2);
                      data.push(width / 2);
                      data.push(-depth / 2);
                      data.push(width / 2);
                      data.push(depth / 2);
                      data.push(-width / 2);
                      data.push(depth / 2);
                      return data;
                    }
                    return null;
                  }
                  async requestFrameOfReferenceTransform(type, options) {
                    if ((type === 'local-floor' || type === 'bounded-floor') &&
                        this.display.stageParameters &&
                        this.display.stageParameters.sittingToStandingTransform) {
                      return this.display.stageParameters.sittingToStandingTransform;
                    }
                    return null;
                  }
                  getProjectionMatrix(eye) {
                    if (eye === 'left') {
                      return this.frame.leftProjectionMatrix;
                    } else if (eye === 'right') {
                      return this.frame.rightProjectionMatrix;
                    } else if (eye === 'none') {
                      return this.frame.leftProjectionMatrix;
                    } else {
                      throw new Error(`eye must be of type 'left' or 'right'`);
                    }
                  }
                  getViewport(sessionId, eye, layer, target) {
                    const session = this.sessions.get(sessionId);
                    const { width, height } = layer.context.canvas;
                    if (!session.immersive) {
                      target.x = target.y = 0;
                      target.width = width;
                      target.height = height;
                      return true;
                    }
                    if (eye === 'left' || eye === 'none') {
                      target.x = 0;
                    } else if (eye === 'right') {
                      target.x = width / 2;
                    } else {
                      return false;
                    }
                    target.y = 0;
                    target.width = width / 2;
                    target.height = height;
                    return true;
                  }
                  getBasePoseMatrix() {
                    let { position, orientation } = this.frame.pose;
                    if (!position && !orientation) {
                      return this.baseModelMatrix;
                    }
                    if (!position) {
                      position = this.tempVec3;
                      position[0] = position[1] = position[2] = 0;
                    }
                    fromRotationTranslation(this.baseModelMatrix, orientation, position);
                    return this.baseModelMatrix;
                  }
                  getBaseViewMatrix(eye) {
                    if (eye === 'left' || eye === 'none') {
                      return this.frame.leftViewMatrix;
                    } else if (eye === 'right') {
                      return this.frame.rightViewMatrix;
                    } else {
                      throw new Error(`eye must be of type 'left' or 'right'`);
                    }
                  }
                  getInputSources() {
                    let inputSources = [];
                    for (let i in this.gamepadInputSources) {
                      inputSources.push(this.gamepadInputSources[i].inputSource);
                    }
                    return inputSources;
                  }
                  getInputPose(inputSource, coordinateSystem, poseType) {
                    if (!coordinateSystem) {
                      return null;
                    }
                    for (let i in this.gamepadInputSources) {
                      let inputSourceImpl = this.gamepadInputSources[i];
                      if (inputSourceImpl.inputSource === inputSource) {
                        return inputSourceImpl.getXRPose(coordinateSystem, poseType);
                      }
                    }
                    return null;
                  }
                  onWindowResize() {
                  }
                  onVRDisplayPresentChange(e) {
                    if (!this.display.isPresenting) {
                      this.sessions.forEach(session => {
                        if (session.immersive && !session.ended) {
                          if (session.modifiedCanvasLayer) {
                            const canvas = session.baseLayer.context.canvas;
                            document.body.removeChild(canvas);
                            canvas.setAttribute('style', '');
                          }
                          if (this.immersiveSession === session) {
                            this.immersiveSession = null;
                          }
                          this.dispatchEvent('@@webxr-polyfill/vr-present-end', session.id);
                        }
                      });
                    }
                  }
                }

                class CardboardXRDevice extends WebVRDevice {
                  constructor(global, cardboardConfig) {
                    const display = new CardboardVRDisplay(cardboardConfig || {});
                    super(global, display);
                    this.display = display;
                    this.frame = {
                      rightViewMatrix: new Float32Array(16),
                      leftViewMatrix: new Float32Array(16),
                      rightProjectionMatrix: new Float32Array(16),
                      leftProjectionMatrix: new Float32Array(16),
                      pose: null,
                      timestamp: null,
                    };
                  }
                }

                let SESSION_ID$1 = 0;
                class Session$1 {
                  constructor(mode, enabledFeatures) {
                    this.mode = mode;
                    this.enabledFeatures = enabledFeatures;
                    this.ended = null;
                    this.baseLayer = null;
                    this.id = ++SESSION_ID$1;
                  }
                }class InlineDevice extends XRDevice {
                  constructor(global) {
                    super(global);
                    this.sessions = new Map();
                    this.projectionMatrix = create();
                    this.identityMatrix = create();
                  }
                  onBaseLayerSet(sessionId, layer) {
                    const session = this.sessions.get(sessionId);
                    session.baseLayer = layer;
                  }
                  isSessionSupported(mode) {
                    return mode == 'inline';
                  }
                  isFeatureSupported(featureDescriptor) {
                    switch(featureDescriptor) {
                      case 'viewer': return true;
                      default: return false;
                    }
                  }
                  async requestSession(mode, enabledFeatures) {
                    if (!this.isSessionSupported(mode)) {
                      return Promise.reject();
                    }
                    const session = new Session$1(mode, enabledFeatures);
                    this.sessions.set(session.id, session);
                    return Promise.resolve(session.id);
                  }
                  requestAnimationFrame(callback) {
                    return window.requestAnimationFrame(callback);
                  }
                  cancelAnimationFrame(handle) {
                    window.cancelAnimationFrame(handle);
                  }
                  onFrameStart(sessionId, renderState) {
                    const session = this.sessions.get(sessionId);
                    if (session.baseLayer) {
                      const canvas = session.baseLayer.context.canvas;
                      perspective(this.projectionMatrix, renderState.inlineVerticalFieldOfView,
                          canvas.width/canvas.height, renderState.depthNear, renderState.depthFar);
                    }
                  }
                  onFrameEnd(sessionId) {
                  }
                  async endSession(sessionId) {
                    const session = this.sessions.get(sessionId);
                    session.ended = true;
                  }
                  doesSessionSupportReferenceSpace(sessionId, type) {
                    const session = this.sessions.get(sessionId);
                    if (session.ended) {
                      return false;
                    }
                    return session.enabledFeatures.has(type);
                  }
                  requestStageBounds() {
                    return null;
                  }
                  async requestFrameOfReferenceTransform(type, options) {
                    return null;
                  }
                  getProjectionMatrix(eye) {
                    return this.projectionMatrix;
                  }
                  getViewport(sessionId, eye, layer, target) {
                    const session = this.sessions.get(sessionId);
                    const { width, height } = layer.context.canvas;
                    target.x = target.y = 0;
                    target.width = width;
                    target.height = height;
                    return true;
                  }
                  getBasePoseMatrix() {
                    return this.identityMatrix;
                  }
                  getBaseViewMatrix(eye) {
                    return this.identityMatrix;
                  }
                  getInputSources() {
                    return [];
                  }
                  getInputPose(inputSource, coordinateSystem, poseType) {
                    return null;
                  }
                  onWindowResize() {
                  }
                }

                const getWebVRDevice = async function (global) {
                  let device = null;
                  if ('getVRDisplays' in global.navigator) {
                    try {
                      const displays = await global.navigator.getVRDisplays();
                      if (displays && displays.length) {
                        device = new WebVRDevice(global, displays[0]);
                      }
                    } catch (e) {}
                  }
                  return device;
                };
                const requestXRDevice = async function (global, config) {
                  if (config.webvr) {
                    let xr = await getWebVRDevice(global);
                    if (xr) {
                      return xr;
                    }
                  }
                  let mobile = isMobile(global);
                  if ((mobile && config.cardboard) ||
                      (!mobile && config.allowCardboardOnDesktop)) {
                    if (!global.VRFrameData) {
                      global.VRFrameData = function () {
                        this.rightViewMatrix = new Float32Array(16);
                        this.leftViewMatrix = new Float32Array(16);
                        this.rightProjectionMatrix = new Float32Array(16);
                        this.leftProjectionMatrix = new Float32Array(16);
                        this.pose = null;
                      };
                    }
                    return new CardboardXRDevice(global, config.cardboardConfig);
                  }
                  return new InlineDevice(global);
                };

                const CONFIG_DEFAULTS = {
                  global: _global,
                  webvr: true,
                  cardboard: true,
                  cardboardConfig: null,
                  allowCardboardOnDesktop: false,
                };
                const partials = ['navigator', 'HTMLCanvasElement', 'WebGLRenderingContext'];
                class WebXRPolyfill {
                  constructor(config={}) {
                    this.config = Object.freeze(Object.assign({}, CONFIG_DEFAULTS, config));
                    this.global = this.config.global;
                    this.nativeWebXR = 'xr' in this.global.navigator;
                    this.injected = false;
                    if (!this.nativeWebXR) {
                      this._injectPolyfill(this.global);
                    } else {
                      this._injectCompatibilityShims(this.global);
                    }
                  }
                  _injectPolyfill(global) {
                    if (!partials.every(iface => !!global[iface])) {
                      throw new Error(`Global must have the following attributes : ${partials}`);
                    }
                    for (const className of Object.keys(API)) {
                      if (global[className] !== undefined) {
                        console.warn(`${className} already defined on global.`);
                      } else {
                        global[className] = API[className];
                      }
                    }
                    {
                      const polyfilledCtx = polyfillMakeXRCompatible(global.WebGLRenderingContext);
                      if (polyfilledCtx) {
                        polyfillGetContext(global.HTMLCanvasElement);
                        if (global.OffscreenCanvas) {
                          polyfillGetContext(global.OffscreenCanvas);
                        }
                        if (global.WebGL2RenderingContext){
                          polyfillMakeXRCompatible(global.WebGL2RenderingContext);
                        }
                        if (!window.isSecureContext) {
                          console.warn(`WebXR Polyfill Warning:
This page is not running in a secure context (https:// or localhost)!
This means that although the page may be able to use the WebXR Polyfill it will
not be able to use native WebXR implementations, and as such will not be able to
access dedicated VR or AR hardware, and will not be able to take advantage of
any performance improvements a native WebXR implementation may offer. Please
host this content on a secure origin for the best user experience.
`);
                        }
                      }
                    }
                    this.injected = true;
                    this._patchNavigatorXR();
                  }
                  _patchNavigatorXR() {
                    let devicePromise = requestXRDevice(this.global, this.config);
                    this.xr = new API.XRSystem(devicePromise);
                    Object.defineProperty(this.global.navigator, 'xr', {
                      value: this.xr,
                      configurable: true,
                    });
                  }
                  _injectCompatibilityShims(global) {
                    if (!partials.every(iface => !!global[iface])) {
                      throw new Error(`Global must have the following attributes : ${partials}`);
                    }
                    if (global.navigator.xr &&
                        'supportsSession' in global.navigator.xr &&
                        !('isSessionSupported' in global.navigator.xr)) {
                      let originalSupportsSession = global.navigator.xr.supportsSession;
                      global.navigator.xr.isSessionSupported = function(mode) {
                        return originalSupportsSession.call(this, mode).then(() => {
                          return true;
                        }).catch(() => {
                          return false;
                        });
                      };
                      global.navigator.xr.supportsSession = function(mode) {
                        console.warn("navigator.xr.supportsSession() is deprecated. Please " +
                        "call navigator.xr.isSessionSupported() instead and check the boolean " +
                        "value returned when the promise resolves.");
                        return originalSupportsSession.call(this, mode);
                      };
                    }
                  }
                }

                var EPSILON$1 = 0.000001;
                var ARRAY_TYPE$1 = typeof Float32Array !== 'undefined' ? Float32Array : Array;
                if (!Math.hypot) Math.hypot = function () {
                  var y = 0,
                      i = arguments.length;
                  while (i--) {
                    y += arguments[i] * arguments[i];
                  }
                  return Math.sqrt(y);
                };

                function create$5() {
                  var out = new ARRAY_TYPE$1(9);
                  if (ARRAY_TYPE$1 != Float32Array) {
                    out[1] = 0;
                    out[2] = 0;
                    out[3] = 0;
                    out[5] = 0;
                    out[6] = 0;
                    out[7] = 0;
                  }
                  out[0] = 1;
                  out[4] = 1;
                  out[8] = 1;
                  return out;
                }

                function create$6() {
                  var out = new ARRAY_TYPE$1(16);
                  if (ARRAY_TYPE$1 != Float32Array) {
                    out[1] = 0;
                    out[2] = 0;
                    out[3] = 0;
                    out[4] = 0;
                    out[6] = 0;
                    out[7] = 0;
                    out[8] = 0;
                    out[9] = 0;
                    out[11] = 0;
                    out[12] = 0;
                    out[13] = 0;
                    out[14] = 0;
                  }
                  out[0] = 1;
                  out[5] = 1;
                  out[10] = 1;
                  out[15] = 1;
                  return out;
                }
                function copy$4(out, a) {
                  out[0] = a[0];
                  out[1] = a[1];
                  out[2] = a[2];
                  out[3] = a[3];
                  out[4] = a[4];
                  out[5] = a[5];
                  out[6] = a[6];
                  out[7] = a[7];
                  out[8] = a[8];
                  out[9] = a[9];
                  out[10] = a[10];
                  out[11] = a[11];
                  out[12] = a[12];
                  out[13] = a[13];
                  out[14] = a[14];
                  out[15] = a[15];
                  return out;
                }
                function identity$1(out) {
                  out[0] = 1;
                  out[1] = 0;
                  out[2] = 0;
                  out[3] = 0;
                  out[4] = 0;
                  out[5] = 1;
                  out[6] = 0;
                  out[7] = 0;
                  out[8] = 0;
                  out[9] = 0;
                  out[10] = 1;
                  out[11] = 0;
                  out[12] = 0;
                  out[13] = 0;
                  out[14] = 0;
                  out[15] = 1;
                  return out;
                }
                function invert$2(out, a) {
                  var a00 = a[0],
                      a01 = a[1],
                      a02 = a[2],
                      a03 = a[3];
                  var a10 = a[4],
                      a11 = a[5],
                      a12 = a[6],
                      a13 = a[7];
                  var a20 = a[8],
                      a21 = a[9],
                      a22 = a[10],
                      a23 = a[11];
                  var a30 = a[12],
                      a31 = a[13],
                      a32 = a[14],
                      a33 = a[15];
                  var b00 = a00 * a11 - a01 * a10;
                  var b01 = a00 * a12 - a02 * a10;
                  var b02 = a00 * a13 - a03 * a10;
                  var b03 = a01 * a12 - a02 * a11;
                  var b04 = a01 * a13 - a03 * a11;
                  var b05 = a02 * a13 - a03 * a12;
                  var b06 = a20 * a31 - a21 * a30;
                  var b07 = a20 * a32 - a22 * a30;
                  var b08 = a20 * a33 - a23 * a30;
                  var b09 = a21 * a32 - a22 * a31;
                  var b10 = a21 * a33 - a23 * a31;
                  var b11 = a22 * a33 - a23 * a32;
                  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
                  if (!det) {
                    return null;
                  }
                  det = 1.0 / det;
                  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
                  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
                  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
                  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
                  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
                  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
                  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
                  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
                  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
                  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
                  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
                  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
                  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
                  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
                  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
                  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
                  return out;
                }
                function multiply$2(out, a, b) {
                  var a00 = a[0],
                      a01 = a[1],
                      a02 = a[2],
                      a03 = a[3];
                  var a10 = a[4],
                      a11 = a[5],
                      a12 = a[6],
                      a13 = a[7];
                  var a20 = a[8],
                      a21 = a[9],
                      a22 = a[10],
                      a23 = a[11];
                  var a30 = a[12],
                      a31 = a[13],
                      a32 = a[14],
                      a33 = a[15];
                  var b0 = b[0],
                      b1 = b[1],
                      b2 = b[2],
                      b3 = b[3];
                  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                  b0 = b[4];
                  b1 = b[5];
                  b2 = b[6];
                  b3 = b[7];
                  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                  b0 = b[8];
                  b1 = b[9];
                  b2 = b[10];
                  b3 = b[11];
                  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                  b0 = b[12];
                  b1 = b[13];
                  b2 = b[14];
                  b3 = b[15];
                  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                  return out;
                }
                function translate(out, a, v) {
                  var x = v[0],
                      y = v[1],
                      z = v[2];
                  var a00, a01, a02, a03;
                  var a10, a11, a12, a13;
                  var a20, a21, a22, a23;
                  if (a === out) {
                    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
                    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
                    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
                    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
                  } else {
                    a00 = a[0];
                    a01 = a[1];
                    a02 = a[2];
                    a03 = a[3];
                    a10 = a[4];
                    a11 = a[5];
                    a12 = a[6];
                    a13 = a[7];
                    a20 = a[8];
                    a21 = a[9];
                    a22 = a[10];
                    a23 = a[11];
                    out[0] = a00;
                    out[1] = a01;
                    out[2] = a02;
                    out[3] = a03;
                    out[4] = a10;
                    out[5] = a11;
                    out[6] = a12;
                    out[7] = a13;
                    out[8] = a20;
                    out[9] = a21;
                    out[10] = a22;
                    out[11] = a23;
                    out[12] = a00 * x + a10 * y + a20 * z + a[12];
                    out[13] = a01 * x + a11 * y + a21 * z + a[13];
                    out[14] = a02 * x + a12 * y + a22 * z + a[14];
                    out[15] = a03 * x + a13 * y + a23 * z + a[15];
                  }
                  return out;
                }
                function rotateX(out, a, rad) {
                  var s = Math.sin(rad);
                  var c = Math.cos(rad);
                  var a10 = a[4];
                  var a11 = a[5];
                  var a12 = a[6];
                  var a13 = a[7];
                  var a20 = a[8];
                  var a21 = a[9];
                  var a22 = a[10];
                  var a23 = a[11];
                  if (a !== out) {
                    out[0] = a[0];
                    out[1] = a[1];
                    out[2] = a[2];
                    out[3] = a[3];
                    out[12] = a[12];
                    out[13] = a[13];
                    out[14] = a[14];
                    out[15] = a[15];
                  }
                  out[4] = a10 * c + a20 * s;
                  out[5] = a11 * c + a21 * s;
                  out[6] = a12 * c + a22 * s;
                  out[7] = a13 * c + a23 * s;
                  out[8] = a20 * c - a10 * s;
                  out[9] = a21 * c - a11 * s;
                  out[10] = a22 * c - a12 * s;
                  out[11] = a23 * c - a13 * s;
                  return out;
                }
                function rotateY(out, a, rad) {
                  var s = Math.sin(rad);
                  var c = Math.cos(rad);
                  var a00 = a[0];
                  var a01 = a[1];
                  var a02 = a[2];
                  var a03 = a[3];
                  var a20 = a[8];
                  var a21 = a[9];
                  var a22 = a[10];
                  var a23 = a[11];
                  if (a !== out) {
                    out[4] = a[4];
                    out[5] = a[5];
                    out[6] = a[6];
                    out[7] = a[7];
                    out[12] = a[12];
                    out[13] = a[13];
                    out[14] = a[14];
                    out[15] = a[15];
                  }
                  out[0] = a00 * c - a20 * s;
                  out[1] = a01 * c - a21 * s;
                  out[2] = a02 * c - a22 * s;
                  out[3] = a03 * c - a23 * s;
                  out[8] = a00 * s + a20 * c;
                  out[9] = a01 * s + a21 * c;
                  out[10] = a02 * s + a22 * c;
                  out[11] = a03 * s + a23 * c;
                  return out;
                }
                function fromTranslation(out, v) {
                  out[0] = 1;
                  out[1] = 0;
                  out[2] = 0;
                  out[3] = 0;
                  out[4] = 0;
                  out[5] = 1;
                  out[6] = 0;
                  out[7] = 0;
                  out[8] = 0;
                  out[9] = 0;
                  out[10] = 1;
                  out[11] = 0;
                  out[12] = v[0];
                  out[13] = v[1];
                  out[14] = v[2];
                  out[15] = 1;
                  return out;
                }
                function fromRotation(out, rad, axis) {
                  var x = axis[0],
                      y = axis[1],
                      z = axis[2];
                  var len = Math.hypot(x, y, z);
                  var s, c, t;
                  if (len < EPSILON$1) {
                    return null;
                  }
                  len = 1 / len;
                  x *= len;
                  y *= len;
                  z *= len;
                  s = Math.sin(rad);
                  c = Math.cos(rad);
                  t = 1 - c;
                  out[0] = x * x * t + c;
                  out[1] = y * x * t + z * s;
                  out[2] = z * x * t - y * s;
                  out[3] = 0;
                  out[4] = x * y * t - z * s;
                  out[5] = y * y * t + c;
                  out[6] = z * y * t + x * s;
                  out[7] = 0;
                  out[8] = x * z * t + y * s;
                  out[9] = y * z * t - x * s;
                  out[10] = z * z * t + c;
                  out[11] = 0;
                  out[12] = 0;
                  out[13] = 0;
                  out[14] = 0;
                  out[15] = 1;
                  return out;
                }
                function fromRotationTranslation$1(out, q, v) {
                  var x = q[0],
                      y = q[1],
                      z = q[2],
                      w = q[3];
                  var x2 = x + x;
                  var y2 = y + y;
                  var z2 = z + z;
                  var xx = x * x2;
                  var xy = x * y2;
                  var xz = x * z2;
                  var yy = y * y2;
                  var yz = y * z2;
                  var zz = z * z2;
                  var wx = w * x2;
                  var wy = w * y2;
                  var wz = w * z2;
                  out[0] = 1 - (yy + zz);
                  out[1] = xy + wz;
                  out[2] = xz - wy;
                  out[3] = 0;
                  out[4] = xy - wz;
                  out[5] = 1 - (xx + zz);
                  out[6] = yz + wx;
                  out[7] = 0;
                  out[8] = xz + wy;
                  out[9] = yz - wx;
                  out[10] = 1 - (xx + yy);
                  out[11] = 0;
                  out[12] = v[0];
                  out[13] = v[1];
                  out[14] = v[2];
                  out[15] = 1;
                  return out;
                }
                function getScaling(out, mat) {
                  var m11 = mat[0];
                  var m12 = mat[1];
                  var m13 = mat[2];
                  var m21 = mat[4];
                  var m22 = mat[5];
                  var m23 = mat[6];
                  var m31 = mat[8];
                  var m32 = mat[9];
                  var m33 = mat[10];
                  out[0] = Math.hypot(m11, m12, m13);
                  out[1] = Math.hypot(m21, m22, m23);
                  out[2] = Math.hypot(m31, m32, m33);
                  return out;
                }
                function getRotation$1(out, mat) {
                  var scaling = new ARRAY_TYPE$1(3);
                  getScaling(scaling, mat);
                  var is1 = 1 / scaling[0];
                  var is2 = 1 / scaling[1];
                  var is3 = 1 / scaling[2];
                  var sm11 = mat[0] * is1;
                  var sm12 = mat[1] * is2;
                  var sm13 = mat[2] * is3;
                  var sm21 = mat[4] * is1;
                  var sm22 = mat[5] * is2;
                  var sm23 = mat[6] * is3;
                  var sm31 = mat[8] * is1;
                  var sm32 = mat[9] * is2;
                  var sm33 = mat[10] * is3;
                  var trace = sm11 + sm22 + sm33;
                  var S = 0;
                  if (trace > 0) {
                    S = Math.sqrt(trace + 1.0) * 2;
                    out[3] = 0.25 * S;
                    out[0] = (sm23 - sm32) / S;
                    out[1] = (sm31 - sm13) / S;
                    out[2] = (sm12 - sm21) / S;
                  } else if (sm11 > sm22 && sm11 > sm33) {
                    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;
                    out[3] = (sm23 - sm32) / S;
                    out[0] = 0.25 * S;
                    out[1] = (sm12 + sm21) / S;
                    out[2] = (sm31 + sm13) / S;
                  } else if (sm22 > sm33) {
                    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;
                    out[3] = (sm31 - sm13) / S;
                    out[0] = (sm12 + sm21) / S;
                    out[1] = 0.25 * S;
                    out[2] = (sm23 + sm32) / S;
                  } else {
                    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;
                    out[3] = (sm12 - sm21) / S;
                    out[0] = (sm31 + sm13) / S;
                    out[1] = (sm23 + sm32) / S;
                    out[2] = 0.25 * S;
                  }
                  return out;
                }
                function fromRotationTranslationScale(out, q, v, s) {
                  var x = q[0],
                      y = q[1],
                      z = q[2],
                      w = q[3];
                  var x2 = x + x;
                  var y2 = y + y;
                  var z2 = z + z;
                  var xx = x * x2;
                  var xy = x * y2;
                  var xz = x * z2;
                  var yy = y * y2;
                  var yz = y * z2;
                  var zz = z * z2;
                  var wx = w * x2;
                  var wy = w * y2;
                  var wz = w * z2;
                  var sx = s[0];
                  var sy = s[1];
                  var sz = s[2];
                  out[0] = (1 - (yy + zz)) * sx;
                  out[1] = (xy + wz) * sx;
                  out[2] = (xz - wy) * sx;
                  out[3] = 0;
                  out[4] = (xy - wz) * sy;
                  out[5] = (1 - (xx + zz)) * sy;
                  out[6] = (yz + wx) * sy;
                  out[7] = 0;
                  out[8] = (xz + wy) * sz;
                  out[9] = (yz - wx) * sz;
                  out[10] = (1 - (xx + yy)) * sz;
                  out[11] = 0;
                  out[12] = v[0];
                  out[13] = v[1];
                  out[14] = v[2];
                  out[15] = 1;
                  return out;
                }
                function perspectiveNO(out, fovy, aspect, near, far) {
                  var f = 1.0 / Math.tan(fovy / 2),
                      nf;
                  out[0] = f / aspect;
                  out[1] = 0;
                  out[2] = 0;
                  out[3] = 0;
                  out[4] = 0;
                  out[5] = f;
                  out[6] = 0;
                  out[7] = 0;
                  out[8] = 0;
                  out[9] = 0;
                  out[11] = -1;
                  out[12] = 0;
                  out[13] = 0;
                  out[15] = 0;
                  if (far != null && far !== Infinity) {
                    nf = 1 / (near - far);
                    out[10] = (far + near) * nf;
                    out[14] = 2 * far * near * nf;
                  } else {
                    out[10] = -1;
                    out[14] = -2 * near;
                  }
                  return out;
                }
                var perspective$1 = perspectiveNO;

                function create$7() {
                  var out = new ARRAY_TYPE$1(3);
                  if (ARRAY_TYPE$1 != Float32Array) {
                    out[0] = 0;
                    out[1] = 0;
                    out[2] = 0;
                  }
                  return out;
                }
                function length$1(a) {
                  var x = a[0];
                  var y = a[1];
                  var z = a[2];
                  return Math.hypot(x, y, z);
                }
                function fromValues$3(x, y, z) {
                  var out = new ARRAY_TYPE$1(3);
                  out[0] = x;
                  out[1] = y;
                  out[2] = z;
                  return out;
                }
                function copy$5(out, a) {
                  out[0] = a[0];
                  out[1] = a[1];
                  out[2] = a[2];
                  return out;
                }
                function set(out, x, y, z) {
                  out[0] = x;
                  out[1] = y;
                  out[2] = z;
                  return out;
                }
                function normalize$3(out, a) {
                  var x = a[0];
                  var y = a[1];
                  var z = a[2];
                  var len = x * x + y * y + z * z;
                  if (len > 0) {
                    len = 1 / Math.sqrt(len);
                  }
                  out[0] = a[0] * len;
                  out[1] = a[1] * len;
                  out[2] = a[2] * len;
                  return out;
                }
                function dot$1(a, b) {
                  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
                }
                function cross$1(out, a, b) {
                  var ax = a[0],
                      ay = a[1],
                      az = a[2];
                  var bx = b[0],
                      by = b[1],
                      bz = b[2];
                  out[0] = ay * bz - az * by;
                  out[1] = az * bx - ax * bz;
                  out[2] = ax * by - ay * bx;
                  return out;
                }
                function transformMat4(out, a, m) {
                  var x = a[0],
                      y = a[1],
                      z = a[2];
                  var w = m[3] * x + m[7] * y + m[11] * z + m[15];
                  w = w || 1.0;
                  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
                  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
                  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
                  return out;
                }
                function transformQuat$1(out, a, q) {
                  var qx = q[0],
                      qy = q[1],
                      qz = q[2],
                      qw = q[3];
                  var x = a[0],
                      y = a[1],
                      z = a[2];
                  var uvx = qy * z - qz * y,
                      uvy = qz * x - qx * z,
                      uvz = qx * y - qy * x;
                  var uuvx = qy * uvz - qz * uvy,
                      uuvy = qz * uvx - qx * uvz,
                      uuvz = qx * uvy - qy * uvx;
                  var w2 = qw * 2;
                  uvx *= w2;
                  uvy *= w2;
                  uvz *= w2;
                  uuvx *= 2;
                  uuvy *= 2;
                  uuvz *= 2;
                  out[0] = x + uvx + uuvx;
                  out[1] = y + uvy + uuvy;
                  out[2] = z + uvz + uuvz;
                  return out;
                }
                var len$1 = length$1;
                var forEach$2 = function () {
                  var vec = create$7();
                  return function (a, stride, offset, count, fn, arg) {
                    var i, l;
                    if (!stride) {
                      stride = 3;
                    }
                    if (!offset) {
                      offset = 0;
                    }
                    if (count) {
                      l = Math.min(count * stride + offset, a.length);
                    } else {
                      l = a.length;
                    }
                    for (i = offset; i < l; i += stride) {
                      vec[0] = a[i];
                      vec[1] = a[i + 1];
                      vec[2] = a[i + 2];
                      fn(vec, vec, arg);
                      a[i] = vec[0];
                      a[i + 1] = vec[1];
                      a[i + 2] = vec[2];
                    }
                    return a;
                  };
                }();

                function create$8() {
                  var out = new ARRAY_TYPE$1(4);
                  if (ARRAY_TYPE$1 != Float32Array) {
                    out[0] = 0;
                    out[1] = 0;
                    out[2] = 0;
                    out[3] = 0;
                  }
                  return out;
                }
                function set$1(out, x, y, z, w) {
                  out[0] = x;
                  out[1] = y;
                  out[2] = z;
                  out[3] = w;
                  return out;
                }
                function normalize$4(out, a) {
                  var x = a[0];
                  var y = a[1];
                  var z = a[2];
                  var w = a[3];
                  var len = x * x + y * y + z * z + w * w;
                  if (len > 0) {
                    len = 1 / Math.sqrt(len);
                  }
                  out[0] = x * len;
                  out[1] = y * len;
                  out[2] = z * len;
                  out[3] = w * len;
                  return out;
                }
                function transformMat4$1(out, a, m) {
                  var x = a[0],
                      y = a[1],
                      z = a[2],
                      w = a[3];
                  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
                  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
                  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
                  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
                  return out;
                }
                var forEach$3 = function () {
                  var vec = create$8();
                  return function (a, stride, offset, count, fn, arg) {
                    var i, l;
                    if (!stride) {
                      stride = 4;
                    }
                    if (!offset) {
                      offset = 0;
                    }
                    if (count) {
                      l = Math.min(count * stride + offset, a.length);
                    } else {
                      l = a.length;
                    }
                    for (i = offset; i < l; i += stride) {
                      vec[0] = a[i];
                      vec[1] = a[i + 1];
                      vec[2] = a[i + 2];
                      vec[3] = a[i + 3];
                      fn(vec, vec, arg);
                      a[i] = vec[0];
                      a[i + 1] = vec[1];
                      a[i + 2] = vec[2];
                      a[i + 3] = vec[3];
                    }
                    return a;
                  };
                }();

                function create$9() {
                  var out = new ARRAY_TYPE$1(4);
                  if (ARRAY_TYPE$1 != Float32Array) {
                    out[0] = 0;
                    out[1] = 0;
                    out[2] = 0;
                  }
                  out[3] = 1;
                  return out;
                }
                function setAxisAngle$1(out, axis, rad) {
                  rad = rad * 0.5;
                  var s = Math.sin(rad);
                  out[0] = s * axis[0];
                  out[1] = s * axis[1];
                  out[2] = s * axis[2];
                  out[3] = Math.cos(rad);
                  return out;
                }
                function slerp$1(out, a, b, t) {
                  var ax = a[0],
                      ay = a[1],
                      az = a[2],
                      aw = a[3];
                  var bx = b[0],
                      by = b[1],
                      bz = b[2],
                      bw = b[3];
                  var omega, cosom, sinom, scale0, scale1;
                  cosom = ax * bx + ay * by + az * bz + aw * bw;
                  if (cosom < 0.0) {
                    cosom = -cosom;
                    bx = -bx;
                    by = -by;
                    bz = -bz;
                    bw = -bw;
                  }
                  if (1.0 - cosom > EPSILON$1) {
                    omega = Math.acos(cosom);
                    sinom = Math.sin(omega);
                    scale0 = Math.sin((1.0 - t) * omega) / sinom;
                    scale1 = Math.sin(t * omega) / sinom;
                  } else {
                    scale0 = 1.0 - t;
                    scale1 = t;
                  }
                  out[0] = scale0 * ax + scale1 * bx;
                  out[1] = scale0 * ay + scale1 * by;
                  out[2] = scale0 * az + scale1 * bz;
                  out[3] = scale0 * aw + scale1 * bw;
                  return out;
                }
                function fromMat3$1(out, m) {
                  var fTrace = m[0] + m[4] + m[8];
                  var fRoot;
                  if (fTrace > 0.0) {
                    fRoot = Math.sqrt(fTrace + 1.0);
                    out[3] = 0.5 * fRoot;
                    fRoot = 0.5 / fRoot;
                    out[0] = (m[5] - m[7]) * fRoot;
                    out[1] = (m[6] - m[2]) * fRoot;
                    out[2] = (m[1] - m[3]) * fRoot;
                  } else {
                    var i = 0;
                    if (m[4] > m[0]) i = 1;
                    if (m[8] > m[i * 3 + i]) i = 2;
                    var j = (i + 1) % 3;
                    var k = (i + 2) % 3;
                    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
                    out[i] = 0.5 * fRoot;
                    fRoot = 0.5 / fRoot;
                    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
                    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
                    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
                  }
                  return out;
                }
                var normalize$5 = normalize$4;
                var rotationTo$1 = function () {
                  var tmpvec3 = create$7();
                  var xUnitVec3 = fromValues$3(1, 0, 0);
                  var yUnitVec3 = fromValues$3(0, 1, 0);
                  return function (out, a, b) {
                    var dot = dot$1(a, b);
                    if (dot < -0.999999) {
                      cross$1(tmpvec3, xUnitVec3, a);
                      if (len$1(tmpvec3) < 0.000001) cross$1(tmpvec3, yUnitVec3, a);
                      normalize$3(tmpvec3, tmpvec3);
                      setAxisAngle$1(out, tmpvec3, Math.PI);
                      return out;
                    } else if (dot > 0.999999) {
                      out[0] = 0;
                      out[1] = 0;
                      out[2] = 0;
                      out[3] = 1;
                      return out;
                    } else {
                      cross$1(tmpvec3, a, b);
                      out[0] = tmpvec3[0];
                      out[1] = tmpvec3[1];
                      out[2] = tmpvec3[2];
                      out[3] = 1 + dot;
                      return normalize$5(out, out);
                    }
                  };
                }();
                var sqlerp$1 = function () {
                  var temp1 = create$9();
                  var temp2 = create$9();
                  return function (out, a, b, c, d, t) {
                    slerp$1(temp1, a, d, t);
                    slerp$1(temp2, b, c, t);
                    slerp$1(out, temp1, temp2, 2 * t * (1 - t));
                    return out;
                  };
                }();
                var setAxes$1 = function () {
                  var matr = create$5();
                  return function (out, view, right, up) {
                    matr[0] = right[0];
                    matr[3] = right[1];
                    matr[6] = right[2];
                    matr[1] = up[0];
                    matr[4] = up[1];
                    matr[7] = up[2];
                    matr[2] = -view[0];
                    matr[5] = -view[1];
                    matr[8] = -view[2];
                    return normalize$5(out, fromMat3$1(out, matr));
                  };
                }();

                function create$a() {
                  var out = new ARRAY_TYPE$1(2);
                  if (ARRAY_TYPE$1 != Float32Array) {
                    out[0] = 0;
                    out[1] = 0;
                  }
                  return out;
                }
                var forEach$4 = function () {
                  var vec = create$a();
                  return function (a, stride, offset, count, fn, arg) {
                    var i, l;
                    if (!stride) {
                      stride = 2;
                    }
                    if (!offset) {
                      offset = 0;
                    }
                    if (count) {
                      l = Math.min(count * stride + offset, a.length);
                    } else {
                      l = a.length;
                    }
                    for (i = offset; i < l; i += stride) {
                      vec[0] = a[i];
                      vec[1] = a[i + 1];
                      fn(vec, vec, arg);
                      a[i] = vec[0];
                      a[i + 1] = vec[1];
                    }
                    return a;
                  };
                }();

                const PRIVATE$j = Symbol('@@webxr-polyfill/XRRay');
                class XRRay$1 {
                  constructor(origin, direction) {
                    const _origin = {x: 0, y: 0, z: 0, w: 1};
                    const _direction = {x: 0, y: 0, z: -1, w: 0};
                    if (origin && origin instanceof XRRigidTransform$1) {
                      const transform = origin;
                      const matrix = transform.matrix;
                      const originVec4 = set$1(create$8(), _origin.x, _origin.y, _origin.z, _origin.w) ;
                      const directionVec4 = set$1(create$8(), _direction.x, _direction.y, _direction.z, _direction.w);
                      transformMat4$1(originVec4, originVec4, matrix);
                      transformMat4$1(directionVec4, directionVec4, matrix);
                      _origin.x = originVec4[0];
                      _origin.y = originVec4[1];
                      _origin.z = originVec4[2];
                      _origin.w = originVec4[3];
                      _directionVec4.x = directionVec4[0];
                      _directionVec4.y = directionVec4[1];
                      _directionVec4.z = directionVec4[2];
                      _directionVec4.w = directionVec4[3];
                    } else {
                      if (origin) {
                        _origin.x = origin.x;
                        _origin.y = origin.y;
                        _origin.z = origin.z;
                        _origin.w = origin.w;
                      }
                      if (direction) {
                        _direction.x = direction.x;
                        _direction.y = direction.y;
                        _direction.z = direction.z;
                        _direction.w = direction.w;
                      }
                    }
                    const length = Math.sqrt(_direction.x * _direction.x +
                      _direction.y * _direction.y + _direction.z * _direction.z) || 1;
                    _direction.x = _direction.x / length;
                    _direction.y = _direction.y / length;
                    _direction.z = _direction.z / length;
                    this[PRIVATE$j] = {
                      origin: new DOMPointReadOnly(_origin.x, _origin.y, _origin.z, _origin.w),
                      direction: new DOMPointReadOnly(_direction.x, _direction.y, _direction.z, _direction.w),
                      matrix: null
                    };
                  }
                  get origin() {
                    return this[PRIVATE$j].origin;
                  }
                  get direction() {
                    return this[PRIVATE$j].direction;
                  }
                  get matrix() {
                    if (this[PRIVATE$j].matrix) {
                      return this[PRIVATE$j].matrix;
                    }
                    const z = set(create$7(), 0, 0, -1);
                    const origin = set(create$7(),
                      this[PRIVATE$j].origin.x,
                      this[PRIVATE$j].origin.y,
                      this[PRIVATE$j].origin.z
                    );
                    const direction = set(create$7(),
                      this[PRIVATE$j].direction.x,
                      this[PRIVATE$j].direction.y,
                      this[PRIVATE$j].direction.z
                    );
                    const axis = cross$1(create$7(), direction, z);
                    const cosAngle = dot$1(direction, z);
                    const rotation = create$6();
                    if (cosAngle > -1 && cosAngle < 1) {
                      fromRotation(rotation, Math.acos(cosAngle), axis);
                    } else if (cosAngle === -1) {
                      fromRotation(rotation, Math.acos(cosAngle), set(create$7(), 1, 0, 0));
                    }
                    const translation = fromTranslation(create$6(), origin);
                    const matrix = multiply$2(create$6(), translation, rotation);
                    this[PRIVATE$j].matrix = matrix;
                    return matrix;
                  }
                }

                const PRIVATE$k = Symbol('@@webxr-polyfill/XRHitTestSource');
                class XRHitTestSource {
                  constructor(session, options) {
                    if (options.entityTypes && options.entityTypes.length > 0) {
                      throw new Error('XRHitTestSource does not support entityTypes option yet.');
                    }
                    this[PRIVATE$k] = {
                      session,
                      space: options.space,
                      offsetRay: options.offsetRay || new XRRay$1(),
                      active: true
                    };
                  }
                  cancel() {
                    this[PRIVATE$k].active = false;
                  }
                  get _space() {
                    return this[PRIVATE$k].space;
                  }
                  get _session() {
                    return this[PRIVATE$k].session;
                  }
                  get _offsetRay() {
                    return this[PRIVATE$k].offsetRay;
                  }
                  get _active() {
                    return this[PRIVATE$k].active;
                  }
                }

                const PRIVATE$l = Symbol('@@webxr-polyfill/XRHitTestResult');
                class XRHitTestResult {
                  constructor(frame, transform) {
                    this[PRIVATE$l] = {
                      frame,
                      transform
                    };
                  }
                  getPose(baseSpace) {
                    const space = new XRSpace();
                    space._baseMatrix = copy$4(create$6(), this[PRIVATE$l].transform.matrix);
                    return this[PRIVATE$l].frame.getPose(space, baseSpace);
                  }
                }

                const PRIVATE$m = Symbol('@@webxr-polyfill/XRTransientInputHitTestSource');
                class XRTransientInputHitTestSource {
                  constructor(session, options) {
                    if (options.entityTypes && options.entityTypes.length > 0) {
                      throw new Error('XRHitTestSource does not support entityTypes option yet.');
                    }
                    this[PRIVATE$m] = {
                      session,
                      profile: options.profile,
                      offsetRay: options.offsetRay || new XRRay(),
                      active: true
                    };
                  }
                  cancel() {
                    this[PRIVATE$m].active = false;
                  }
                  get _profile() {
                    return this[PRIVATE$m].profile;
                  }
                  get _session() {
                    return this[PRIVATE$m].session;
                  }
                  get _offsetRay() {
                    return this[PRIVATE$m].offsetRay;
                  }
                  get _active() {
                    return this[PRIVATE$m].active;
                  }
                }

                const PRIVATE$n = Symbol('@@webxr-polyfill/XRTransientInputHitTestResult');
                class XRTransientInputHitTestResult {
                  constructor(frame, results, inputSource) {
                    this[PRIVATE$n] = {
                      frame,
                      inputSource,
                      results
                    };
                  }
                  get inputSource() {
                    return this[PRIVATE$n].inputSource;
                  }
                  get results() {
                    return this[PRIVATE$n].results;
                  }
                }

                var EX_API = {
                  XRHitTestResult,
                  XRHitTestSource,
                  XRTransientInputHitTestResult,
                  XRTransientInputHitTestSource,
                  XRRay: XRRay$1
                };

                if ( Number.EPSILON === undefined ) {
                	Number.EPSILON = Math.pow( 2, - 52 );
                }
                if ( Number.isInteger === undefined ) {
                	Number.isInteger = function ( value ) {
                		return typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;
                	};
                }
                if ( Math.sign === undefined ) {
                	Math.sign = function ( x ) {
                		return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;
                	};
                }
                if ( 'name' in Function.prototype === false ) {
                	Object.defineProperty( Function.prototype, 'name', {
                		get: function () {
                			return this.toString().match( /^\s*function\s*([^\(\s]*)/ )[ 1 ];
                		}
                	} );
                }
                if ( Object.assign === undefined ) {
                	Object.assign = function ( target ) {
                		if ( target === undefined || target === null ) {
                			throw new TypeError( 'Cannot convert undefined or null to object' );
                		}
                		var output = Object( target );
                		for ( var index = 1; index < arguments.length; index ++ ) {
                			var source = arguments[ index ];
                			if ( source !== undefined && source !== null ) {
                				for ( var nextKey in source ) {
                					if ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {
                						output[ nextKey ] = source[ nextKey ];
                					}
                				}
                			}
                		}
                		return output;
                	};
                }
                var REVISION = '111';
                var CullFaceNone = 0;
                var CullFaceBack = 1;
                var CullFaceFront = 2;
                var PCFShadowMap = 1;
                var PCFSoftShadowMap = 2;
                var VSMShadowMap = 3;
                var FrontSide = 0;
                var BackSide = 1;
                var DoubleSide = 2;
                var FlatShading = 1;
                var NoColors = 0;
                var FaceColors = 1;
                var VertexColors = 2;
                var NoBlending = 0;
                var NormalBlending = 1;
                var AdditiveBlending = 2;
                var SubtractiveBlending = 3;
                var MultiplyBlending = 4;
                var CustomBlending = 5;
                var AddEquation = 100;
                var SubtractEquation = 101;
                var ReverseSubtractEquation = 102;
                var MinEquation = 103;
                var MaxEquation = 104;
                var ZeroFactor = 200;
                var OneFactor = 201;
                var SrcColorFactor = 202;
                var OneMinusSrcColorFactor = 203;
                var SrcAlphaFactor = 204;
                var OneMinusSrcAlphaFactor = 205;
                var DstAlphaFactor = 206;
                var OneMinusDstAlphaFactor = 207;
                var DstColorFactor = 208;
                var OneMinusDstColorFactor = 209;
                var SrcAlphaSaturateFactor = 210;
                var NeverDepth = 0;
                var AlwaysDepth = 1;
                var LessDepth = 2;
                var LessEqualDepth = 3;
                var EqualDepth = 4;
                var GreaterEqualDepth = 5;
                var GreaterDepth = 6;
                var NotEqualDepth = 7;
                var MultiplyOperation = 0;
                var MixOperation = 1;
                var AddOperation = 2;
                var NoToneMapping = 0;
                var LinearToneMapping = 1;
                var ReinhardToneMapping = 2;
                var Uncharted2ToneMapping = 3;
                var CineonToneMapping = 4;
                var ACESFilmicToneMapping = 5;
                var UVMapping = 300;
                var CubeReflectionMapping = 301;
                var CubeRefractionMapping = 302;
                var EquirectangularReflectionMapping = 303;
                var EquirectangularRefractionMapping = 304;
                var SphericalReflectionMapping = 305;
                var CubeUVReflectionMapping = 306;
                var CubeUVRefractionMapping = 307;
                var RepeatWrapping = 1000;
                var ClampToEdgeWrapping = 1001;
                var MirroredRepeatWrapping = 1002;
                var NearestFilter = 1003;
                var NearestMipmapNearestFilter = 1004;
                var NearestMipmapLinearFilter = 1005;
                var LinearFilter = 1006;
                var LinearMipmapNearestFilter = 1007;
                var LinearMipmapLinearFilter = 1008;
                var UnsignedByteType = 1009;
                var ByteType = 1010;
                var ShortType = 1011;
                var UnsignedShortType = 1012;
                var IntType = 1013;
                var UnsignedIntType = 1014;
                var FloatType = 1015;
                var HalfFloatType = 1016;
                var UnsignedShort4444Type = 1017;
                var UnsignedShort5551Type = 1018;
                var UnsignedShort565Type = 1019;
                var UnsignedInt248Type = 1020;
                var AlphaFormat = 1021;
                var RGBFormat = 1022;
                var RGBAFormat = 1023;
                var LuminanceFormat = 1024;
                var LuminanceAlphaFormat = 1025;
                var DepthFormat = 1026;
                var DepthStencilFormat = 1027;
                var RedFormat = 1028;
                var RGB_S3TC_DXT1_Format = 33776;
                var RGBA_S3TC_DXT1_Format = 33777;
                var RGBA_S3TC_DXT3_Format = 33778;
                var RGBA_S3TC_DXT5_Format = 33779;
                var RGB_PVRTC_4BPPV1_Format = 35840;
                var RGB_PVRTC_2BPPV1_Format = 35841;
                var RGBA_PVRTC_4BPPV1_Format = 35842;
                var RGBA_PVRTC_2BPPV1_Format = 35843;
                var RGB_ETC1_Format = 36196;
                var RGBA_ASTC_4x4_Format = 37808;
                var RGBA_ASTC_5x4_Format = 37809;
                var RGBA_ASTC_5x5_Format = 37810;
                var RGBA_ASTC_6x5_Format = 37811;
                var RGBA_ASTC_6x6_Format = 37812;
                var RGBA_ASTC_8x5_Format = 37813;
                var RGBA_ASTC_8x6_Format = 37814;
                var RGBA_ASTC_8x8_Format = 37815;
                var RGBA_ASTC_10x5_Format = 37816;
                var RGBA_ASTC_10x6_Format = 37817;
                var RGBA_ASTC_10x8_Format = 37818;
                var RGBA_ASTC_10x10_Format = 37819;
                var RGBA_ASTC_12x10_Format = 37820;
                var RGBA_ASTC_12x12_Format = 37821;
                var LoopOnce = 2200;
                var LoopRepeat = 2201;
                var LoopPingPong = 2202;
                var InterpolateDiscrete = 2300;
                var InterpolateLinear = 2301;
                var InterpolateSmooth = 2302;
                var ZeroCurvatureEnding = 2400;
                var ZeroSlopeEnding = 2401;
                var WrapAroundEnding = 2402;
                var TrianglesDrawMode = 0;
                var TriangleStripDrawMode = 1;
                var TriangleFanDrawMode = 2;
                var LinearEncoding = 3000;
                var sRGBEncoding = 3001;
                var GammaEncoding = 3007;
                var RGBEEncoding = 3002;
                var LogLuvEncoding = 3003;
                var RGBM7Encoding = 3004;
                var RGBM16Encoding = 3005;
                var RGBDEncoding = 3006;
                var BasicDepthPacking = 3200;
                var RGBADepthPacking = 3201;
                var TangentSpaceNormalMap = 0;
                var ObjectSpaceNormalMap = 1;
                var KeepStencilOp = 7680;
                var AlwaysStencilFunc = 519;
                var StaticDrawUsage = 35044;
                var DynamicDrawUsage = 35048;
                function EventDispatcher() {}
                Object.assign( EventDispatcher.prototype, {
                	addEventListener: function ( type, listener ) {
                		if ( this._listeners === undefined ) this._listeners = {};
                		var listeners = this._listeners;
                		if ( listeners[ type ] === undefined ) {
                			listeners[ type ] = [];
                		}
                		if ( listeners[ type ].indexOf( listener ) === - 1 ) {
                			listeners[ type ].push( listener );
                		}
                	},
                	hasEventListener: function ( type, listener ) {
                		if ( this._listeners === undefined ) return false;
                		var listeners = this._listeners;
                		return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;
                	},
                	removeEventListener: function ( type, listener ) {
                		if ( this._listeners === undefined ) return;
                		var listeners = this._listeners;
                		var listenerArray = listeners[ type ];
                		if ( listenerArray !== undefined ) {
                			var index = listenerArray.indexOf( listener );
                			if ( index !== - 1 ) {
                				listenerArray.splice( index, 1 );
                			}
                		}
                	},
                	dispatchEvent: function ( event ) {
                		if ( this._listeners === undefined ) return;
                		var listeners = this._listeners;
                		var listenerArray = listeners[ event.type ];
                		if ( listenerArray !== undefined ) {
                			event.target = this;
                			var array = listenerArray.slice( 0 );
                			for ( var i = 0, l = array.length; i < l; i ++ ) {
                				array[ i ].call( this, event );
                			}
                		}
                	}
                } );
                var _lut = [];
                for ( var i = 0; i < 256; i ++ ) {
                	_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );
                }
                var _Math = {
                	DEG2RAD: Math.PI / 180,
                	RAD2DEG: 180 / Math.PI,
                	generateUUID: function () {
                		var d0 = Math.random() * 0xffffffff | 0;
                		var d1 = Math.random() * 0xffffffff | 0;
                		var d2 = Math.random() * 0xffffffff | 0;
                		var d3 = Math.random() * 0xffffffff | 0;
                		var uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +
                			_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +
                			_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +
                			_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];
                		return uuid.toUpperCase();
                	},
                	clamp: function ( value, min, max ) {
                		return Math.max( min, Math.min( max, value ) );
                	},
                	euclideanModulo: function ( n, m ) {
                		return ( ( n % m ) + m ) % m;
                	},
                	mapLinear: function ( x, a1, a2, b1, b2 ) {
                		return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );
                	},
                	lerp: function ( x, y, t ) {
                		return ( 1 - t ) * x + t * y;
                	},
                	smoothstep: function ( x, min, max ) {
                		if ( x <= min ) return 0;
                		if ( x >= max ) return 1;
                		x = ( x - min ) / ( max - min );
                		return x * x * ( 3 - 2 * x );
                	},
                	smootherstep: function ( x, min, max ) {
                		if ( x <= min ) return 0;
                		if ( x >= max ) return 1;
                		x = ( x - min ) / ( max - min );
                		return x * x * x * ( x * ( x * 6 - 15 ) + 10 );
                	},
                	randInt: function ( low, high ) {
                		return low + Math.floor( Math.random() * ( high - low + 1 ) );
                	},
                	randFloat: function ( low, high ) {
                		return low + Math.random() * ( high - low );
                	},
                	randFloatSpread: function ( range ) {
                		return range * ( 0.5 - Math.random() );
                	},
                	degToRad: function ( degrees ) {
                		return degrees * _Math.DEG2RAD;
                	},
                	radToDeg: function ( radians ) {
                		return radians * _Math.RAD2DEG;
                	},
                	isPowerOfTwo: function ( value ) {
                		return ( value & ( value - 1 ) ) === 0 && value !== 0;
                	},
                	ceilPowerOfTwo: function ( value ) {
                		return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );
                	},
                	floorPowerOfTwo: function ( value ) {
                		return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );
                	}
                };
                function Vector2( x, y ) {
                	this.x = x || 0;
                	this.y = y || 0;
                }
                Object.defineProperties( Vector2.prototype, {
                	"width": {
                		get: function () {
                			return this.x;
                		},
                		set: function ( value ) {
                			this.x = value;
                		}
                	},
                	"height": {
                		get: function () {
                			return this.y;
                		},
                		set: function ( value ) {
                			this.y = value;
                		}
                	}
                } );
                Object.assign( Vector2.prototype, {
                	isVector2: true,
                	set: function ( x, y ) {
                		this.x = x;
                		this.y = y;
                		return this;
                	},
                	setScalar: function ( scalar ) {
                		this.x = scalar;
                		this.y = scalar;
                		return this;
                	},
                	setX: function ( x ) {
                		this.x = x;
                		return this;
                	},
                	setY: function ( y ) {
                		this.y = y;
                		return this;
                	},
                	setComponent: function ( index, value ) {
                		switch ( index ) {
                			case 0: this.x = value; break;
                			case 1: this.y = value; break;
                			default: throw new Error( 'index is out of range: ' + index );
                		}
                		return this;
                	},
                	getComponent: function ( index ) {
                		switch ( index ) {
                			case 0: return this.x;
                			case 1: return this.y;
                			default: throw new Error( 'index is out of range: ' + index );
                		}
                	},
                	clone: function () {
                		return new this.constructor( this.x, this.y );
                	},
                	copy: function ( v ) {
                		this.x = v.x;
                		this.y = v.y;
                		return this;
                	},
                	add: function ( v, w ) {
                		if ( w !== undefined ) {
                			console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
                			return this.addVectors( v, w );
                		}
                		this.x += v.x;
                		this.y += v.y;
                		return this;
                	},
                	addScalar: function ( s ) {
                		this.x += s;
                		this.y += s;
                		return this;
                	},
                	addVectors: function ( a, b ) {
                		this.x = a.x + b.x;
                		this.y = a.y + b.y;
                		return this;
                	},
                	addScaledVector: function ( v, s ) {
                		this.x += v.x * s;
                		this.y += v.y * s;
                		return this;
                	},
                	sub: function ( v, w ) {
                		if ( w !== undefined ) {
                			console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
                			return this.subVectors( v, w );
                		}
                		this.x -= v.x;
                		this.y -= v.y;
                		return this;
                	},
                	subScalar: function ( s ) {
                		this.x -= s;
                		this.y -= s;
                		return this;
                	},
                	subVectors: function ( a, b ) {
                		this.x = a.x - b.x;
                		this.y = a.y - b.y;
                		return this;
                	},
                	multiply: function ( v ) {
                		this.x *= v.x;
                		this.y *= v.y;
                		return this;
                	},
                	multiplyScalar: function ( scalar ) {
                		this.x *= scalar;
                		this.y *= scalar;
                		return this;
                	},
                	divide: function ( v ) {
                		this.x /= v.x;
                		this.y /= v.y;
                		return this;
                	},
                	divideScalar: function ( scalar ) {
                		return this.multiplyScalar( 1 / scalar );
                	},
                	applyMatrix3: function ( m ) {
                		var x = this.x, y = this.y;
                		var e = m.elements;
                		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
                		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];
                		return this;
                	},
                	min: function ( v ) {
                		this.x = Math.min( this.x, v.x );
                		this.y = Math.min( this.y, v.y );
                		return this;
                	},
                	max: function ( v ) {
                		this.x = Math.max( this.x, v.x );
                		this.y = Math.max( this.y, v.y );
                		return this;
                	},
                	clamp: function ( min, max ) {
                		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
                		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
                		return this;
                	},
                	clampScalar: function ( minVal, maxVal ) {
                		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
                		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
                		return this;
                	},
                	clampLength: function ( min, max ) {
                		var length = this.length();
                		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );
                	},
                	floor: function () {
                		this.x = Math.floor( this.x );
                		this.y = Math.floor( this.y );
                		return this;
                	},
                	ceil: function () {
                		this.x = Math.ceil( this.x );
                		this.y = Math.ceil( this.y );
                		return this;
                	},
                	round: function () {
                		this.x = Math.round( this.x );
                		this.y = Math.round( this.y );
                		return this;
                	},
                	roundToZero: function () {
                		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
                		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
                		return this;
                	},
                	negate: function () {
                		this.x = - this.x;
                		this.y = - this.y;
                		return this;
                	},
                	dot: function ( v ) {
                		return this.x * v.x + this.y * v.y;
                	},
                	cross: function ( v ) {
                		return this.x * v.y - this.y * v.x;
                	},
                	lengthSq: function () {
                		return this.x * this.x + this.y * this.y;
                	},
                	length: function () {
                		return Math.sqrt( this.x * this.x + this.y * this.y );
                	},
                	manhattanLength: function () {
                		return Math.abs( this.x ) + Math.abs( this.y );
                	},
                	normalize: function () {
                		return this.divideScalar( this.length() || 1 );
                	},
                	angle: function () {
                		var angle = Math.atan2( this.y, this.x );
                		if ( angle < 0 ) angle += 2 * Math.PI;
                		return angle;
                	},
                	distanceTo: function ( v ) {
                		return Math.sqrt( this.distanceToSquared( v ) );
                	},
                	distanceToSquared: function ( v ) {
                		var dx = this.x - v.x, dy = this.y - v.y;
                		return dx * dx + dy * dy;
                	},
                	manhattanDistanceTo: function ( v ) {
                		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );
                	},
                	setLength: function ( length ) {
                		return this.normalize().multiplyScalar( length );
                	},
                	lerp: function ( v, alpha ) {
                		this.x += ( v.x - this.x ) * alpha;
                		this.y += ( v.y - this.y ) * alpha;
                		return this;
                	},
                	lerpVectors: function ( v1, v2, alpha ) {
                		return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );
                	},
                	equals: function ( v ) {
                		return ( ( v.x === this.x ) && ( v.y === this.y ) );
                	},
                	fromArray: function ( array, offset ) {
                		if ( offset === undefined ) offset = 0;
                		this.x = array[ offset ];
                		this.y = array[ offset + 1 ];
                		return this;
                	},
                	toArray: function ( array, offset ) {
                		if ( array === undefined ) array = [];
                		if ( offset === undefined ) offset = 0;
                		array[ offset ] = this.x;
                		array[ offset + 1 ] = this.y;
                		return array;
                	},
                	fromBufferAttribute: function ( attribute, index, offset ) {
                		if ( offset !== undefined ) {
                			console.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );
                		}
                		this.x = attribute.getX( index );
                		this.y = attribute.getY( index );
                		return this;
                	},
                	rotateAround: function ( center, angle ) {
                		var c = Math.cos( angle ), s = Math.sin( angle );
                		var x = this.x - center.x;
                		var y = this.y - center.y;
                		this.x = x * c - y * s + center.x;
                		this.y = x * s + y * c + center.y;
                		return this;
                	}
                } );
                function Quaternion( x, y, z, w ) {
                	this._x = x || 0;
                	this._y = y || 0;
                	this._z = z || 0;
                	this._w = ( w !== undefined ) ? w : 1;
                }
                Object.assign( Quaternion, {
                	slerp: function ( qa, qb, qm, t ) {
                		return qm.copy( qa ).slerp( qb, t );
                	},
                	slerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {
                		var x0 = src0[ srcOffset0 + 0 ],
                			y0 = src0[ srcOffset0 + 1 ],
                			z0 = src0[ srcOffset0 + 2 ],
                			w0 = src0[ srcOffset0 + 3 ],
                			x1 = src1[ srcOffset1 + 0 ],
                			y1 = src1[ srcOffset1 + 1 ],
                			z1 = src1[ srcOffset1 + 2 ],
                			w1 = src1[ srcOffset1 + 3 ];
                		if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {
                			var s = 1 - t,
                				cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,
                				dir = ( cos >= 0 ? 1 : - 1 ),
                				sqrSin = 1 - cos * cos;
                			if ( sqrSin > Number.EPSILON ) {
                				var sin = Math.sqrt( sqrSin ),
                					len = Math.atan2( sin, cos * dir );
                				s = Math.sin( s * len ) / sin;
                				t = Math.sin( t * len ) / sin;
                			}
                			var tDir = t * dir;
                			x0 = x0 * s + x1 * tDir;
                			y0 = y0 * s + y1 * tDir;
                			z0 = z0 * s + z1 * tDir;
                			w0 = w0 * s + w1 * tDir;
                			if ( s === 1 - t ) {
                				var f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );
                				x0 *= f;
                				y0 *= f;
                				z0 *= f;
                				w0 *= f;
                			}
                		}
                		dst[ dstOffset ] = x0;
                		dst[ dstOffset + 1 ] = y0;
                		dst[ dstOffset + 2 ] = z0;
                		dst[ dstOffset + 3 ] = w0;
                	}
                } );
                Object.defineProperties( Quaternion.prototype, {
                	x: {
                		get: function () {
                			return this._x;
                		},
                		set: function ( value ) {
                			this._x = value;
                			this._onChangeCallback();
                		}
                	},
                	y: {
                		get: function () {
                			return this._y;
                		},
                		set: function ( value ) {
                			this._y = value;
                			this._onChangeCallback();
                		}
                	},
                	z: {
                		get: function () {
                			return this._z;
                		},
                		set: function ( value ) {
                			this._z = value;
                			this._onChangeCallback();
                		}
                	},
                	w: {
                		get: function () {
                			return this._w;
                		},
                		set: function ( value ) {
                			this._w = value;
                			this._onChangeCallback();
                		}
                	}
                } );
                Object.assign( Quaternion.prototype, {
                	isQuaternion: true,
                	set: function ( x, y, z, w ) {
                		this._x = x;
                		this._y = y;
                		this._z = z;
                		this._w = w;
                		this._onChangeCallback();
                		return this;
                	},
                	clone: function () {
                		return new this.constructor( this._x, this._y, this._z, this._w );
                	},
                	copy: function ( quaternion ) {
                		this._x = quaternion.x;
                		this._y = quaternion.y;
                		this._z = quaternion.z;
                		this._w = quaternion.w;
                		this._onChangeCallback();
                		return this;
                	},
                	setFromEuler: function ( euler, update ) {
                		if ( ! ( euler && euler.isEuler ) ) {
                			throw new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );
                		}
                		var x = euler._x, y = euler._y, z = euler._z, order = euler.order;
                		var cos = Math.cos;
                		var sin = Math.sin;
                		var c1 = cos( x / 2 );
                		var c2 = cos( y / 2 );
                		var c3 = cos( z / 2 );
                		var s1 = sin( x / 2 );
                		var s2 = sin( y / 2 );
                		var s3 = sin( z / 2 );
                		if ( order === 'XYZ' ) {
                			this._x = s1 * c2 * c3 + c1 * s2 * s3;
                			this._y = c1 * s2 * c3 - s1 * c2 * s3;
                			this._z = c1 * c2 * s3 + s1 * s2 * c3;
                			this._w = c1 * c2 * c3 - s1 * s2 * s3;
                		} else if ( order === 'YXZ' ) {
                			this._x = s1 * c2 * c3 + c1 * s2 * s3;
                			this._y = c1 * s2 * c3 - s1 * c2 * s3;
                			this._z = c1 * c2 * s3 - s1 * s2 * c3;
                			this._w = c1 * c2 * c3 + s1 * s2 * s3;
                		} else if ( order === 'ZXY' ) {
                			this._x = s1 * c2 * c3 - c1 * s2 * s3;
                			this._y = c1 * s2 * c3 + s1 * c2 * s3;
                			this._z = c1 * c2 * s3 + s1 * s2 * c3;
                			this._w = c1 * c2 * c3 - s1 * s2 * s3;
                		} else if ( order === 'ZYX' ) {
                			this._x = s1 * c2 * c3 - c1 * s2 * s3;
                			this._y = c1 * s2 * c3 + s1 * c2 * s3;
                			this._z = c1 * c2 * s3 - s1 * s2 * c3;
                			this._w = c1 * c2 * c3 + s1 * s2 * s3;
                		} else if ( order === 'YZX' ) {
                			this._x = s1 * c2 * c3 + c1 * s2 * s3;
                			this._y = c1 * s2 * c3 + s1 * c2 * s3;
                			this._z = c1 * c2 * s3 - s1 * s2 * c3;
                			this._w = c1 * c2 * c3 - s1 * s2 * s3;
                		} else if ( order === 'XZY' ) {
                			this._x = s1 * c2 * c3 - c1 * s2 * s3;
                			this._y = c1 * s2 * c3 - s1 * c2 * s3;
                			this._z = c1 * c2 * s3 + s1 * s2 * c3;
                			this._w = c1 * c2 * c3 + s1 * s2 * s3;
                		}
                		if ( update !== false ) this._onChangeCallback();
                		return this;
                	},
                	setFromAxisAngle: function ( axis, angle ) {
                		var halfAngle = angle / 2, s = Math.sin( halfAngle );
                		this._x = axis.x * s;
                		this._y = axis.y * s;
                		this._z = axis.z * s;
                		this._w = Math.cos( halfAngle );
                		this._onChangeCallback();
                		return this;
                	},
                	setFromRotationMatrix: function ( m ) {
                		var te = m.elements,
                			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
                			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
                			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],
                			trace = m11 + m22 + m33,
                			s;
                		if ( trace > 0 ) {
                			s = 0.5 / Math.sqrt( trace + 1.0 );
                			this._w = 0.25 / s;
                			this._x = ( m32 - m23 ) * s;
                			this._y = ( m13 - m31 ) * s;
                			this._z = ( m21 - m12 ) * s;
                		} else if ( m11 > m22 && m11 > m33 ) {
                			s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );
                			this._w = ( m32 - m23 ) / s;
                			this._x = 0.25 * s;
                			this._y = ( m12 + m21 ) / s;
                			this._z = ( m13 + m31 ) / s;
                		} else if ( m22 > m33 ) {
                			s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );
                			this._w = ( m13 - m31 ) / s;
                			this._x = ( m12 + m21 ) / s;
                			this._y = 0.25 * s;
                			this._z = ( m23 + m32 ) / s;
                		} else {
                			s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );
                			this._w = ( m21 - m12 ) / s;
                			this._x = ( m13 + m31 ) / s;
                			this._y = ( m23 + m32 ) / s;
                			this._z = 0.25 * s;
                		}
                		this._onChangeCallback();
                		return this;
                	},
                	setFromUnitVectors: function ( vFrom, vTo ) {
                		var EPS = 0.000001;
                		var r = vFrom.dot( vTo ) + 1;
                		if ( r < EPS ) {
                			r = 0;
                			if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {
                				this._x = - vFrom.y;
                				this._y = vFrom.x;
                				this._z = 0;
                				this._w = r;
                			} else {
                				this._x = 0;
                				this._y = - vFrom.z;
                				this._z = vFrom.y;
                				this._w = r;
                			}
                		} else {
                			this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
                			this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
                			this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
                			this._w = r;
                		}
                		return this.normalize();
                	},
                	angleTo: function ( q ) {
                		return 2 * Math.acos( Math.abs( _Math.clamp( this.dot( q ), - 1, 1 ) ) );
                	},
                	rotateTowards: function ( q, step ) {
                		var angle = this.angleTo( q );
                		if ( angle === 0 ) return this;
                		var t = Math.min( 1, step / angle );
                		this.slerp( q, t );
                		return this;
                	},
                	inverse: function () {
                		return this.conjugate();
                	},
                	conjugate: function () {
                		this._x *= - 1;
                		this._y *= - 1;
                		this._z *= - 1;
                		this._onChangeCallback();
                		return this;
                	},
                	dot: function ( v ) {
                		return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
                	},
                	lengthSq: function () {
                		return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
                	},
                	length: function () {
                		return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );
                	},
                	normalize: function () {
                		var l = this.length();
                		if ( l === 0 ) {
                			this._x = 0;
                			this._y = 0;
                			this._z = 0;
                			this._w = 1;
                		} else {
                			l = 1 / l;
                			this._x = this._x * l;
                			this._y = this._y * l;
                			this._z = this._z * l;
                			this._w = this._w * l;
                		}
                		this._onChangeCallback();
                		return this;
                	},
                	multiply: function ( q, p ) {
                		if ( p !== undefined ) {
                			console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
                			return this.multiplyQuaternions( q, p );
                		}
                		return this.multiplyQuaternions( this, q );
                	},
                	premultiply: function ( q ) {
                		return this.multiplyQuaternions( q, this );
                	},
                	multiplyQuaternions: function ( a, b ) {
                		var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
                		var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
                		this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
                		this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
                		this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
                		this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
                		this._onChangeCallback();
                		return this;
                	},
                	slerp: function ( qb, t ) {
                		if ( t === 0 ) return this;
                		if ( t === 1 ) return this.copy( qb );
                		var x = this._x, y = this._y, z = this._z, w = this._w;
                		var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
                		if ( cosHalfTheta < 0 ) {
                			this._w = - qb._w;
                			this._x = - qb._x;
                			this._y = - qb._y;
                			this._z = - qb._z;
                			cosHalfTheta = - cosHalfTheta;
                		} else {
                			this.copy( qb );
                		}
                		if ( cosHalfTheta >= 1.0 ) {
                			this._w = w;
                			this._x = x;
                			this._y = y;
                			this._z = z;
                			return this;
                		}
                		var sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;
                		if ( sqrSinHalfTheta <= Number.EPSILON ) {
                			var s = 1 - t;
                			this._w = s * w + t * this._w;
                			this._x = s * x + t * this._x;
                			this._y = s * y + t * this._y;
                			this._z = s * z + t * this._z;
                			this.normalize();
                			this._onChangeCallback();
                			return this;
                		}
                		var sinHalfTheta = Math.sqrt( sqrSinHalfTheta );
                		var halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
                		var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
                			ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;
                		this._w = ( w * ratioA + this._w * ratioB );
                		this._x = ( x * ratioA + this._x * ratioB );
                		this._y = ( y * ratioA + this._y * ratioB );
                		this._z = ( z * ratioA + this._z * ratioB );
                		this._onChangeCallback();
                		return this;
                	},
                	equals: function ( quaternion ) {
                		return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );
                	},
                	fromArray: function ( array, offset ) {
                		if ( offset === undefined ) offset = 0;
                		this._x = array[ offset ];
                		this._y = array[ offset + 1 ];
                		this._z = array[ offset + 2 ];
                		this._w = array[ offset + 3 ];
                		this._onChangeCallback();
                		return this;
                	},
                	toArray: function ( array, offset ) {
                		if ( array === undefined ) array = [];
                		if ( offset === undefined ) offset = 0;
                		array[ offset ] = this._x;
                		array[ offset + 1 ] = this._y;
                		array[ offset + 2 ] = this._z;
                		array[ offset + 3 ] = this._w;
                		return array;
                	},
                	_onChange: function ( callback ) {
                		this._onChangeCallback = callback;
                		return this;
                	},
                	_onChangeCallback: function () {}
                } );
                var _vector = new Vector3();
                var _quaternion = new Quaternion();
                function Vector3( x, y, z ) {
                	this.x = x || 0;
                	this.y = y || 0;
                	this.z = z || 0;
                }
                Object.assign( Vector3.prototype, {
                	isVector3: true,
                	set: function ( x, y, z ) {
                		this.x = x;
                		this.y = y;
                		this.z = z;
                		return this;
                	},
                	setScalar: function ( scalar ) {
                		this.x = scalar;
                		this.y = scalar;
                		this.z = scalar;
                		return this;
                	},
                	setX: function ( x ) {
                		this.x = x;
                		return this;
                	},
                	setY: function ( y ) {
                		this.y = y;
                		return this;
                	},
                	setZ: function ( z ) {
                		this.z = z;
                		return this;
                	},
                	setComponent: function ( index, value ) {
                		switch ( index ) {
                			case 0: this.x = value; break;
                			case 1: this.y = value; break;
                			case 2: this.z = value; break;
                			default: throw new Error( 'index is out of range: ' + index );
                		}
                		return this;
                	},
                	getComponent: function ( index ) {
                		switch ( index ) {
                			case 0: return this.x;
                			case 1: return this.y;
                			case 2: return this.z;
                			default: throw new Error( 'index is out of range: ' + index );
                		}
                	},
                	clone: function () {
                		return new this.constructor( this.x, this.y, this.z );
                	},
                	copy: function ( v ) {
                		this.x = v.x;
                		this.y = v.y;
                		this.z = v.z;
                		return this;
                	},
                	add: function ( v, w ) {
                		if ( w !== undefined ) {
                			console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
                			return this.addVectors( v, w );
                		}
                		this.x += v.x;
                		this.y += v.y;
                		this.z += v.z;
                		return this;
                	},
                	addScalar: function ( s ) {
                		this.x += s;
                		this.y += s;
                		this.z += s;
                		return this;
                	},
                	addVectors: function ( a, b ) {
                		this.x = a.x + b.x;
                		this.y = a.y + b.y;
                		this.z = a.z + b.z;
                		return this;
                	},
                	addScaledVector: function ( v, s ) {
                		this.x += v.x * s;
                		this.y += v.y * s;
                		this.z += v.z * s;
                		return this;
                	},
                	sub: function ( v, w ) {
                		if ( w !== undefined ) {
                			console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
                			return this.subVectors( v, w );
                		}
                		this.x -= v.x;
                		this.y -= v.y;
                		this.z -= v.z;
                		return this;
                	},
                	subScalar: function ( s ) {
                		this.x -= s;
                		this.y -= s;
                		this.z -= s;
                		return this;
                	},
                	subVectors: function ( a, b ) {
                		this.x = a.x - b.x;
                		this.y = a.y - b.y;
                		this.z = a.z - b.z;
                		return this;
                	},
                	multiply: function ( v, w ) {
                		if ( w !== undefined ) {
                			console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
                			return this.multiplyVectors( v, w );
                		}
                		this.x *= v.x;
                		this.y *= v.y;
                		this.z *= v.z;
                		return this;
                	},
                	multiplyScalar: function ( scalar ) {
                		this.x *= scalar;
                		this.y *= scalar;
                		this.z *= scalar;
                		return this;
                	},
                	multiplyVectors: function ( a, b ) {
                		this.x = a.x * b.x;
                		this.y = a.y * b.y;
                		this.z = a.z * b.z;
                		return this;
                	},
                	applyEuler: function ( euler ) {
                		if ( ! ( euler && euler.isEuler ) ) {
                			console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );
                		}
                		return this.applyQuaternion( _quaternion.setFromEuler( euler ) );
                	},
                	applyAxisAngle: function ( axis, angle ) {
                		return this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );
                	},
                	applyMatrix3: function ( m ) {
                		var x = this.x, y = this.y, z = this.z;
                		var e = m.elements;
                		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
                		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
                		this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;
                		return this;
                	},
                	applyNormalMatrix: function ( m ) {
                		return this.applyMatrix3( m ).normalize();
                	},
                	applyMatrix4: function ( m ) {
                		var x = this.x, y = this.y, z = this.z;
                		var e = m.elements;
                		var w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );
                		this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
                		this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
                		this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;
                		return this;
                	},
                	applyQuaternion: function ( q ) {
                		var x = this.x, y = this.y, z = this.z;
                		var qx = q.x, qy = q.y, qz = q.z, qw = q.w;
                		var ix = qw * x + qy * z - qz * y;
                		var iy = qw * y + qz * x - qx * z;
                		var iz = qw * z + qx * y - qy * x;
                		var iw = - qx * x - qy * y - qz * z;
                		this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
                		this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
                		this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;
                		return this;
                	},
                	project: function ( camera ) {
                		return this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );
                	},
                	unproject: function ( camera ) {
                		return this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );
                	},
                	transformDirection: function ( m ) {
                		var x = this.x, y = this.y, z = this.z;
                		var e = m.elements;
                		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
                		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
                		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;
                		return this.normalize();
                	},
                	divide: function ( v ) {
                		this.x /= v.x;
                		this.y /= v.y;
                		this.z /= v.z;
                		return this;
                	},
                	divideScalar: function ( scalar ) {
                		return this.multiplyScalar( 1 / scalar );
                	},
                	min: function ( v ) {
                		this.x = Math.min( this.x, v.x );
                		this.y = Math.min( this.y, v.y );
                		this.z = Math.min( this.z, v.z );
                		return this;
                	},
                	max: function ( v ) {
                		this.x = Math.max( this.x, v.x );
                		this.y = Math.max( this.y, v.y );
                		this.z = Math.max( this.z, v.z );
                		return this;
                	},
                	clamp: function ( min, max ) {
                		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
                		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
                		this.z = Math.max( min.z, Math.min( max.z, this.z ) );
                		return this;
                	},
                	clampScalar: function ( minVal, maxVal ) {
                		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
                		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
                		this.z = Math.max( minVal, Math.min( maxVal, this.z ) );
                		return this;
                	},
                	clampLength: function ( min, max ) {
                		var length = this.length();
                		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );
                	},
                	floor: function () {
                		this.x = Math.floor( this.x );
                		this.y = Math.floor( this.y );
                		this.z = Math.floor( this.z );
                		return this;
                	},
                	ceil: function () {
                		this.x = Math.ceil( this.x );
                		this.y = Math.ceil( this.y );
                		this.z = Math.ceil( this.z );
                		return this;
                	},
                	round: function () {
                		this.x = Math.round( this.x );
                		this.y = Math.round( this.y );
                		this.z = Math.round( this.z );
                		return this;
                	},
                	roundToZero: function () {
                		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
                		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
                		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
                		return this;
                	},
                	negate: function () {
                		this.x = - this.x;
                		this.y = - this.y;
                		this.z = - this.z;
                		return this;
                	},
                	dot: function ( v ) {
                		return this.x * v.x + this.y * v.y + this.z * v.z;
                	},
                	lengthSq: function () {
                		return this.x * this.x + this.y * this.y + this.z * this.z;
                	},
                	length: function () {
                		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );
                	},
                	manhattanLength: function () {
                		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );
                	},
                	normalize: function () {
                		return this.divideScalar( this.length() || 1 );
                	},
                	setLength: function ( length ) {
                		return this.normalize().multiplyScalar( length );
                	},
                	lerp: function ( v, alpha ) {
                		this.x += ( v.x - this.x ) * alpha;
                		this.y += ( v.y - this.y ) * alpha;
                		this.z += ( v.z - this.z ) * alpha;
                		return this;
                	},
                	lerpVectors: function ( v1, v2, alpha ) {
                		return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );
                	},
                	cross: function ( v, w ) {
                		if ( w !== undefined ) {
                			console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
                			return this.crossVectors( v, w );
                		}
                		return this.crossVectors( this, v );
                	},
                	crossVectors: function ( a, b ) {
                		var ax = a.x, ay = a.y, az = a.z;
                		var bx = b.x, by = b.y, bz = b.z;
                		this.x = ay * bz - az * by;
                		this.y = az * bx - ax * bz;
                		this.z = ax * by - ay * bx;
                		return this;
                	},
                	projectOnVector: function ( v ) {
                		var scalar = v.dot( this ) / v.lengthSq();
                		return this.copy( v ).multiplyScalar( scalar );
                	},
                	projectOnPlane: function ( planeNormal ) {
                		_vector.copy( this ).projectOnVector( planeNormal );
                		return this.sub( _vector );
                	},
                	reflect: function ( normal ) {
                		return this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );
                	},
                	angleTo: function ( v ) {
                		var denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );
                		if ( denominator === 0 ) console.error( 'THREE.Vector3: angleTo() can\'t handle zero length vectors.' );
                		var theta = this.dot( v ) / denominator;
                		return Math.acos( _Math.clamp( theta, - 1, 1 ) );
                	},
                	distanceTo: function ( v ) {
                		return Math.sqrt( this.distanceToSquared( v ) );
                	},
                	distanceToSquared: function ( v ) {
                		var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
                		return dx * dx + dy * dy + dz * dz;
                	},
                	manhattanDistanceTo: function ( v ) {
                		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );
                	},
                	setFromSpherical: function ( s ) {
                		return this.setFromSphericalCoords( s.radius, s.phi, s.theta );
                	},
                	setFromSphericalCoords: function ( radius, phi, theta ) {
                		var sinPhiRadius = Math.sin( phi ) * radius;
                		this.x = sinPhiRadius * Math.sin( theta );
                		this.y = Math.cos( phi ) * radius;
                		this.z = sinPhiRadius * Math.cos( theta );
                		return this;
                	},
                	setFromCylindrical: function ( c ) {
                		return this.setFromCylindricalCoords( c.radius, c.theta, c.y );
                	},
                	setFromCylindricalCoords: function ( radius, theta, y ) {
                		this.x = radius * Math.sin( theta );
                		this.y = y;
                		this.z = radius * Math.cos( theta );
                		return this;
                	},
                	setFromMatrixPosition: function ( m ) {
                		var e = m.elements;
                		this.x = e[ 12 ];
                		this.y = e[ 13 ];
                		this.z = e[ 14 ];
                		return this;
                	},
                	setFromMatrixScale: function ( m ) {
                		var sx = this.setFromMatrixColumn( m, 0 ).length();
                		var sy = this.setFromMatrixColumn( m, 1 ).length();
                		var sz = this.setFromMatrixColumn( m, 2 ).length();
                		this.x = sx;
                		this.y = sy;
                		this.z = sz;
                		return this;
                	},
                	setFromMatrixColumn: function ( m, index ) {
                		return this.fromArray( m.elements, index * 4 );
                	},
                	equals: function ( v ) {
                		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );
                	},
                	fromArray: function ( array, offset ) {
                		if ( offset === undefined ) offset = 0;
                		this.x = array[ offset ];
                		this.y = array[ offset + 1 ];
                		this.z = array[ offset + 2 ];
                		return this;
                	},
                	toArray: function ( array, offset ) {
                		if ( array === undefined ) array = [];
                		if ( offset === undefined ) offset = 0;
                		array[ offset ] = this.x;
                		array[ offset + 1 ] = this.y;
                		array[ offset + 2 ] = this.z;
                		return array;
                	},
                	fromBufferAttribute: function ( attribute, index, offset ) {
                		if ( offset !== undefined ) {
                			console.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );
                		}
                		this.x = attribute.getX( index );
                		this.y = attribute.getY( index );
                		this.z = attribute.getZ( index );
                		return this;
                	}
                } );
                var _vector$1 = new Vector3();
                function Matrix3() {
                	this.elements = [
                		1, 0, 0,
                		0, 1, 0,
                		0, 0, 1
                	];
                	if ( arguments.length > 0 ) {
                		console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );
                	}
                }
                Object.assign( Matrix3.prototype, {
                	isMatrix3: true,
                	set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {
                		var te = this.elements;
                		te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
                		te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
                		te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;
                		return this;
                	},
                	identity: function () {
                		this.set(
                			1, 0, 0,
                			0, 1, 0,
                			0, 0, 1
                		);
                		return this;
                	},
                	clone: function () {
                		return new this.constructor().fromArray( this.elements );
                	},
                	copy: function ( m ) {
                		var te = this.elements;
                		var me = m.elements;
                		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
                		te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
                		te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];
                		return this;
                	},
                	setFromMatrix4: function ( m ) {
                		var me = m.elements;
                		this.set(
                			me[ 0 ], me[ 4 ], me[ 8 ],
                			me[ 1 ], me[ 5 ], me[ 9 ],
                			me[ 2 ], me[ 6 ], me[ 10 ]
                		);
                		return this;
                	},
                	applyToBufferAttribute: function ( attribute ) {
                		for ( var i = 0, l = attribute.count; i < l; i ++ ) {
                			_vector$1.x = attribute.getX( i );
                			_vector$1.y = attribute.getY( i );
                			_vector$1.z = attribute.getZ( i );
                			_vector$1.applyMatrix3( this );
                			attribute.setXYZ( i, _vector$1.x, _vector$1.y, _vector$1.z );
                		}
                		return attribute;
                	},
                	multiply: function ( m ) {
                		return this.multiplyMatrices( this, m );
                	},
                	premultiply: function ( m ) {
                		return this.multiplyMatrices( m, this );
                	},
                	multiplyMatrices: function ( a, b ) {
                		var ae = a.elements;
                		var be = b.elements;
                		var te = this.elements;
                		var a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
                		var a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
                		var a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];
                		var b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
                		var b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
                		var b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];
                		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
                		te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
                		te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;
                		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
                		te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
                		te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;
                		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
                		te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
                		te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;
                		return this;
                	},
                	multiplyScalar: function ( s ) {
                		var te = this.elements;
                		te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
                		te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
                		te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;
                		return this;
                	},
                	determinant: function () {
                		var te = this.elements;
                		var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
                			d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
                			g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];
                		return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
                	},
                	getInverse: function ( matrix, throwOnDegenerate ) {
                		if ( matrix && matrix.isMatrix4 ) {
                			console.error( "THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument." );
                		}
                		var me = matrix.elements,
                			te = this.elements,
                			n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],
                			n12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],
                			n13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],
                			t11 = n33 * n22 - n32 * n23,
                			t12 = n32 * n13 - n33 * n12,
                			t13 = n23 * n12 - n22 * n13,
                			det = n11 * t11 + n21 * t12 + n31 * t13;
                		if ( det === 0 ) {
                			var msg = "THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";
                			if ( throwOnDegenerate === true ) {
                				throw new Error( msg );
                			} else {
                				console.warn( msg );
                			}
                			return this.identity();
                		}
                		var detInv = 1 / det;
                		te[ 0 ] = t11 * detInv;
                		te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
                		te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;
                		te[ 3 ] = t12 * detInv;
                		te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
                		te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;
                		te[ 6 ] = t13 * detInv;
                		te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
                		te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;
                		return this;
                	},
                	transpose: function () {
                		var tmp, m = this.elements;
                		tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
                		tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
                		tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;
                		return this;
                	},
                	getNormalMatrix: function ( matrix4 ) {
                		return this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();
                	},
                	transposeIntoArray: function ( r ) {
                		var m = this.elements;
                		r[ 0 ] = m[ 0 ];
                		r[ 1 ] = m[ 3 ];
                		r[ 2 ] = m[ 6 ];
                		r[ 3 ] = m[ 1 ];
                		r[ 4 ] = m[ 4 ];
                		r[ 5 ] = m[ 7 ];
                		r[ 6 ] = m[ 2 ];
                		r[ 7 ] = m[ 5 ];
                		r[ 8 ] = m[ 8 ];
                		return this;
                	},
                	setUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {
                		var c = Math.cos( rotation );
                		var s = Math.sin( rotation );
                		this.set(
                			sx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,
                			- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,
                			0, 0, 1
                		);
                	},
                	scale: function ( sx, sy ) {
                		var te = this.elements;
                		te[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;
                		te[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;
                		return this;
                	},
                	rotate: function ( theta ) {
                		var c = Math.cos( theta );
                		var s = Math.sin( theta );
                		var te = this.elements;
                		var a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];
                		var a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];
                		te[ 0 ] = c * a11 + s * a21;
                		te[ 3 ] = c * a12 + s * a22;
                		te[ 6 ] = c * a13 + s * a23;
                		te[ 1 ] = - s * a11 + c * a21;
                		te[ 4 ] = - s * a12 + c * a22;
                		te[ 7 ] = - s * a13 + c * a23;
                		return this;
                	},
                	translate: function ( tx, ty ) {
                		var te = this.elements;
                		te[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];
                		te[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];
                		return this;
                	},
                	equals: function ( matrix ) {
                		var te = this.elements;
                		var me = matrix.elements;
                		for ( var i = 0; i < 9; i ++ ) {
                			if ( te[ i ] !== me[ i ] ) return false;
                		}
                		return true;
                	},
                	fromArray: function ( array, offset ) {
                		if ( offset === undefined ) offset = 0;
                		for ( var i = 0; i < 9; i ++ ) {
                			this.elements[ i ] = array[ i + offset ];
                		}
                		return this;
                	},
                	toArray: function ( array, offset ) {
                		if ( array === undefined ) array = [];
                		if ( offset === undefined ) offset = 0;
                		var te = this.elements;
                		array[ offset ] = te[ 0 ];
                		array[ offset + 1 ] = te[ 1 ];
                		array[ offset + 2 ] = te[ 2 ];
                		array[ offset + 3 ] = te[ 3 ];
                		array[ offset + 4 ] = te[ 4 ];
                		array[ offset + 5 ] = te[ 5 ];
                		array[ offset + 6 ] = te[ 6 ];
                		array[ offset + 7 ] = te[ 7 ];
                		array[ offset + 8 ] = te[ 8 ];
                		return array;
                	}
                } );
                var _canvas;
                var ImageUtils = {
                	getDataURL: function ( image ) {
                		var canvas;
                		if ( typeof HTMLCanvasElement == 'undefined' ) {
                			return image.src;
                		} else if ( image instanceof HTMLCanvasElement ) {
                			canvas = image;
                		} else {
                			if ( _canvas === undefined ) _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
                			_canvas.width = image.width;
                			_canvas.height = image.height;
                			var context = _canvas.getContext( '2d' );
                			if ( image instanceof ImageData ) {
                				context.putImageData( image, 0, 0 );
                			} else {
                				context.drawImage( image, 0, 0, image.width, image.height );
                			}
                			canvas = _canvas;
                		}
                		if ( canvas.width > 2048 || canvas.height > 2048 ) {
                			return canvas.toDataURL( 'image/jpeg', 0.6 );
                		} else {
                			return canvas.toDataURL( 'image/png' );
                		}
                	}
                };
                var textureId = 0;
                function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {
                	Object.defineProperty( this, 'id', { value: textureId ++ } );
                	this.uuid = _Math.generateUUID();
                	this.name = '';
                	this.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;
                	this.mipmaps = [];
                	this.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;
                	this.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;
                	this.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;
                	this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
                	this.minFilter = minFilter !== undefined ? minFilter : LinearMipmapLinearFilter;
                	this.anisotropy = anisotropy !== undefined ? anisotropy : 1;
                	this.format = format !== undefined ? format : RGBAFormat;
                	this.type = type !== undefined ? type : UnsignedByteType;
                	this.offset = new Vector2( 0, 0 );
                	this.repeat = new Vector2( 1, 1 );
                	this.center = new Vector2( 0, 0 );
                	this.rotation = 0;
                	this.matrixAutoUpdate = true;
                	this.matrix = new Matrix3();
                	this.generateMipmaps = true;
                	this.premultiplyAlpha = false;
                	this.flipY = true;
                	this.unpackAlignment = 4;
                	this.encoding = encoding !== undefined ? encoding : LinearEncoding;
                	this.version = 0;
                	this.onUpdate = null;
                }
                Texture.DEFAULT_IMAGE = undefined;
                Texture.DEFAULT_MAPPING = UVMapping;
                Texture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {
                	constructor: Texture,
                	isTexture: true,
                	updateMatrix: function () {
                		this.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );
                	},
                	clone: function () {
                		return new this.constructor().copy( this );
                	},
                	copy: function ( source ) {
                		this.name = source.name;
                		this.image = source.image;
                		this.mipmaps = source.mipmaps.slice( 0 );
                		this.mapping = source.mapping;
                		this.wrapS = source.wrapS;
                		this.wrapT = source.wrapT;
                		this.magFilter = source.magFilter;
                		this.minFilter = source.minFilter;
                		this.anisotropy = source.anisotropy;
                		this.format = source.format;
                		this.type = source.type;
                		this.offset.copy( source.offset );
                		this.repeat.copy( source.repeat );
                		this.center.copy( source.center );
                		this.rotation = source.rotation;
                		this.matrixAutoUpdate = source.matrixAutoUpdate;
                		this.matrix.copy( source.matrix );
                		this.generateMipmaps = source.generateMipmaps;
                		this.premultiplyAlpha = source.premultiplyAlpha;
                		this.flipY = source.flipY;
                		this.unpackAlignment = source.unpackAlignment;
                		this.encoding = source.encoding;
                		return this;
                	},
                	toJSON: function ( meta ) {
                		var isRootObject = ( meta === undefined || typeof meta === 'string' );
                		if ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {
                			return meta.textures[ this.uuid ];
                		}
                		var output = {
                			metadata: {
                				version: 4.5,
                				type: 'Texture',
                				generator: 'Texture.toJSON'
                			},
                			uuid: this.uuid,
                			name: this.name,
                			mapping: this.mapping,
                			repeat: [ this.repeat.x, this.repeat.y ],
                			offset: [ this.offset.x, this.offset.y ],
                			center: [ this.center.x, this.center.y ],
                			rotation: this.rotation,
                			wrap: [ this.wrapS, this.wrapT ],
                			format: this.format,
                			type: this.type,
                			encoding: this.encoding,
                			minFilter: this.minFilter,
                			magFilter: this.magFilter,
                			anisotropy: this.anisotropy,
                			flipY: this.flipY,
                			premultiplyAlpha: this.premultiplyAlpha,
                			unpackAlignment: this.unpackAlignment
                		};
                		if ( this.image !== undefined ) {
                			var image = this.image;
                			if ( image.uuid === undefined ) {
                				image.uuid = _Math.generateUUID();
                			}
                			if ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {
                				var url;
                				if ( Array.isArray( image ) ) {
                					url = [];
                					for ( var i = 0, l = image.length; i < l; i ++ ) {
                						url.push( ImageUtils.getDataURL( image[ i ] ) );
                					}
                				} else {
                					url = ImageUtils.getDataURL( image );
                				}
                				meta.images[ image.uuid ] = {
                					uuid: image.uuid,
                					url: url
                				};
                			}
                			output.image = image.uuid;
                		}
                		if ( ! isRootObject ) {
                			meta.textures[ this.uuid ] = output;
                		}
                		return output;
                	},
                	dispose: function () {
                		this.dispatchEvent( { type: 'dispose' } );
                	},
                	transformUv: function ( uv ) {
                		if ( this.mapping !== UVMapping ) return uv;
                		uv.applyMatrix3( this.matrix );
                		if ( uv.x < 0 || uv.x > 1 ) {
                			switch ( this.wrapS ) {
                				case RepeatWrapping:
                					uv.x = uv.x - Math.floor( uv.x );
                					break;
                				case ClampToEdgeWrapping:
                					uv.x = uv.x < 0 ? 0 : 1;
                					break;
                				case MirroredRepeatWrapping:
                					if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {
                						uv.x = Math.ceil( uv.x ) - uv.x;
                					} else {
                						uv.x = uv.x - Math.floor( uv.x );
                					}
                					break;
                			}
                		}
                		if ( uv.y < 0 || uv.y > 1 ) {
                			switch ( this.wrapT ) {
                				case RepeatWrapping:
                					uv.y = uv.y - Math.floor( uv.y );
                					break;
                				case ClampToEdgeWrapping:
                					uv.y = uv.y < 0 ? 0 : 1;
                					break;
                				case MirroredRepeatWrapping:
                					if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {
                						uv.y = Math.ceil( uv.y ) - uv.y;
                					} else {
                						uv.y = uv.y - Math.floor( uv.y );
                					}
                					break;
                			}
                		}
                		if ( this.flipY ) {
                			uv.y = 1 - uv.y;
                		}
                		return uv;
                	}
                } );
                Object.defineProperty( Texture.prototype, "needsUpdate", {
                	set: function ( value ) {
                		if ( value === true ) this.version ++;
                	}
                } );
                function Vector4( x, y, z, w ) {
                	this.x = x || 0;
                	this.y = y || 0;
                	this.z = z || 0;
                	this.w = ( w !== undefined ) ? w : 1;
                }
                Object.defineProperties( Vector4.prototype, {
                	"width": {
                		get: function () {
                			return this.z;
                		},
                		set: function ( value ) {
                			this.z = value;
                		}
                	},
                	"height": {
                		get: function () {
                			return this.w;
                		},
                		set: function ( value ) {
                			this.w = value;
                		}
                	}
                } );
                Object.assign( Vector4.prototype, {
                	isVector4: true,
                	set: function ( x, y, z, w ) {
                		this.x = x;
                		this.y = y;
                		this.z = z;
                		this.w = w;
                		return this;
                	},
                	setScalar: function ( scalar ) {
                		this.x = scalar;
                		this.y = scalar;
                		this.z = scalar;
                		this.w = scalar;
                		return this;
                	},
                	setX: function ( x ) {
                		this.x = x;
                		return this;
                	},
                	setY: function ( y ) {
                		this.y = y;
                		return this;
                	},
                	setZ: function ( z ) {
                		this.z = z;
                		return this;
                	},
                	setW: function ( w ) {
                		this.w = w;
                		return this;
                	},
                	setComponent: function ( index, value ) {
                		switch ( index ) {
                			case 0: this.x = value; break;
                			case 1: this.y = value; break;
                			case 2: this.z = value; break;
                			case 3: this.w = value; break;
                			default: throw new Error( 'index is out of range: ' + index );
                		}
                		return this;
                	},
                	getComponent: function ( index ) {
                		switch ( index ) {
                			case 0: return this.x;
                			case 1: return this.y;
                			case 2: return this.z;
                			case 3: return this.w;
                			default: throw new Error( 'index is out of range: ' + index );
                		}
                	},
                	clone: function () {
                		return new this.constructor( this.x, this.y, this.z, this.w );
                	},
                	copy: function ( v ) {
                		this.x = v.x;
                		this.y = v.y;
                		this.z = v.z;
                		this.w = ( v.w !== undefined ) ? v.w : 1;
                		return this;
                	},
                	add: function ( v, w ) {
                		if ( w !== undefined ) {
                			console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
                			return this.addVectors( v, w );
                		}
                		this.x += v.x;
                		this.y += v.y;
                		this.z += v.z;
                		this.w += v.w;
                		return this;
                	},
                	addScalar: function ( s ) {
                		this.x += s;
                		this.y += s;
                		this.z += s;
                		this.w += s;
                		return this;
                	},
                	addVectors: function ( a, b ) {
                		this.x = a.x + b.x;
                		this.y = a.y + b.y;
                		this.z = a.z + b.z;
                		this.w = a.w + b.w;
                		return this;
                	},
                	addScaledVector: function ( v, s ) {
                		this.x += v.x * s;
                		this.y += v.y * s;
                		this.z += v.z * s;
                		this.w += v.w * s;
                		return this;
                	},
                	sub: function ( v, w ) {
                		if ( w !== undefined ) {
                			console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
                			return this.subVectors( v, w );
                		}
                		this.x -= v.x;
                		this.y -= v.y;
                		this.z -= v.z;
                		this.w -= v.w;
                		return this;
                	},
                	subScalar: function ( s ) {
                		this.x -= s;
                		this.y -= s;
                		this.z -= s;
                		this.w -= s;
                		return this;
                	},
                	subVectors: function ( a, b ) {
                		this.x = a.x - b.x;
                		this.y = a.y - b.y;
                		this.z = a.z - b.z;
                		this.w = a.w - b.w;
                		return this;
                	},
                	multiplyScalar: function ( scalar ) {
                		this.x *= scalar;
                		this.y *= scalar;
                		this.z *= scalar;
                		this.w *= scalar;
                		return this;
                	},
                	applyMatrix4: function ( m ) {
                		var x = this.x, y = this.y, z = this.z, w = this.w;
                		var e = m.elements;
                		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
                		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
                		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
                		this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;
                		return this;
                	},
                	divideScalar: function ( scalar ) {
                		return this.multiplyScalar( 1 / scalar );
                	},
                	setAxisAngleFromQuaternion: function ( q ) {
                		this.w = 2 * Math.acos( q.w );
                		var s = Math.sqrt( 1 - q.w * q.w );
                		if ( s < 0.0001 ) {
                			this.x = 1;
                			this.y = 0;
                			this.z = 0;
                		} else {
                			this.x = q.x / s;
                			this.y = q.y / s;
                			this.z = q.z / s;
                		}
                		return this;
                	},
                	setAxisAngleFromRotationMatrix: function ( m ) {
                		var angle, x, y, z,
                			epsilon = 0.01,
                			epsilon2 = 0.1,
                			te = m.elements,
                			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
                			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
                			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];
                		if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
                		     ( Math.abs( m13 - m31 ) < epsilon ) &&
                		     ( Math.abs( m23 - m32 ) < epsilon ) ) {
                			if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
                			     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
                			     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
                			     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {
                				this.set( 1, 0, 0, 0 );
                				return this;
                			}
                			angle = Math.PI;
                			var xx = ( m11 + 1 ) / 2;
                			var yy = ( m22 + 1 ) / 2;
                			var zz = ( m33 + 1 ) / 2;
                			var xy = ( m12 + m21 ) / 4;
                			var xz = ( m13 + m31 ) / 4;
                			var yz = ( m23 + m32 ) / 4;
                			if ( ( xx > yy ) && ( xx > zz ) ) {
                				if ( xx < epsilon ) {
                					x = 0;
                					y = 0.707106781;
                					z = 0.707106781;
                				} else {
                					x = Math.sqrt( xx );
                					y = xy / x;
                					z = xz / x;
                				}
                			} else if ( yy > zz ) {
                				if ( yy < epsilon ) {
                					x = 0.707106781;
                					y = 0;
                					z = 0.707106781;
                				} else {
                					y = Math.sqrt( yy );
                					x = xy / y;
                					z = yz / y;
                				}
                			} else {
                				if ( zz < epsilon ) {
                					x = 0.707106781;
                					y = 0.707106781;
                					z = 0;
                				} else {
                					z = Math.sqrt( zz );
                					x = xz / z;
                					y = yz / z;
                				}
                			}
                			this.set( x, y, z, angle );
                			return this;
                		}
                		var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
                		                   ( m13 - m31 ) * ( m13 - m31 ) +
                		                   ( m21 - m12 ) * ( m21 - m12 ) );
                		if ( Math.abs( s ) < 0.001 ) s = 1;
                		this.x = ( m32 - m23 ) / s;
                		this.y = ( m13 - m31 ) / s;
                		this.z = ( m21 - m12 ) / s;
                		this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );
                		return this;
                	},
                	min: function ( v ) {
                		this.x = Math.min( this.x, v.x );
                		this.y = Math.min( this.y, v.y );
                		this.z = Math.min( this.z, v.z );
                		this.w = Math.min( this.w, v.w );
                		return this;
                	},
                	max: function ( v ) {
                		this.x = Math.max( this.x, v.x );
                		this.y = Math.max( this.y, v.y );
                		this.z = Math.max( this.z, v.z );
                		this.w = Math.max( this.w, v.w );
                		return this;
                	},
                	clamp: function ( min, max ) {
                		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
                		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
                		this.z = Math.max( min.z, Math.min( max.z, this.z ) );
                		this.w = Math.max( min.w, Math.min( max.w, this.w ) );
                		return this;
                	},
                	clampScalar: function ( minVal, maxVal ) {
                		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
                		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
                		this.z = Math.max( minVal, Math.min( maxVal, this.z ) );
                		this.w = Math.max( minVal, Math.min( maxVal, this.w ) );
                		return this;
                	},
                	clampLength: function ( min, max ) {
                		var length = this.length();
                		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );
                	},
                	floor: function () {
                		this.x = Math.floor( this.x );
                		this.y = Math.floor( this.y );
                		this.z = Math.floor( this.z );
                		this.w = Math.floor( this.w );
                		return this;
                	},
                	ceil: function () {
                		this.x = Math.ceil( this.x );
                		this.y = Math.ceil( this.y );
                		this.z = Math.ceil( this.z );
                		this.w = Math.ceil( this.w );
                		return this;
                	},
                	round: function () {
                		this.x = Math.round( this.x );
                		this.y = Math.round( this.y );
                		this.z = Math.round( this.z );
                		this.w = Math.round( this.w );
                		return this;
                	},
                	roundToZero: function () {
                		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
                		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
                		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
                		this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );
                		return this;
                	},
                	negate: function () {
                		this.x = - this.x;
                		this.y = - this.y;
                		this.z = - this.z;
                		this.w = - this.w;
                		return this;
                	},
                	dot: function ( v ) {
                		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
                	},
                	lengthSq: function () {
                		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
                	},
                	length: function () {
                		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );
                	},
                	manhattanLength: function () {
                		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );
                	},
                	normalize: function () {
                		return this.divideScalar( this.length() || 1 );
                	},
                	setLength: function ( length ) {
                		return this.normalize().multiplyScalar( length );
                	},
                	lerp: function ( v, alpha ) {
                		this.x += ( v.x - this.x ) * alpha;
                		this.y += ( v.y - this.y ) * alpha;
                		this.z += ( v.z - this.z ) * alpha;
                		this.w += ( v.w - this.w ) * alpha;
                		return this;
                	},
                	lerpVectors: function ( v1, v2, alpha ) {
                		return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );
                	},
                	equals: function ( v ) {
                		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );
                	},
                	fromArray: function ( array, offset ) {
                		if ( offset === undefined ) offset = 0;
                		this.x = array[ offset ];
                		this.y = array[ offset + 1 ];
                		this.z = array[ offset + 2 ];
                		this.w = array[ offset + 3 ];
                		return this;
                	},
                	toArray: function ( array, offset ) {
                		if ( array === undefined ) array = [];
                		if ( offset === undefined ) offset = 0;
                		array[ offset ] = this.x;
                		array[ offset + 1 ] = this.y;
                		array[ offset + 2 ] = this.z;
                		array[ offset + 3 ] = this.w;
                		return array;
                	},
                	fromBufferAttribute: function ( attribute, index, offset ) {
                		if ( offset !== undefined ) {
                			console.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );
                		}
                		this.x = attribute.getX( index );
                		this.y = attribute.getY( index );
                		this.z = attribute.getZ( index );
                		this.w = attribute.getW( index );
                		return this;
                	}
                } );
                function WebGLRenderTarget( width, height, options ) {
                	this.width = width;
                	this.height = height;
                	this.scissor = new Vector4( 0, 0, width, height );
                	this.scissorTest = false;
                	this.viewport = new Vector4( 0, 0, width, height );
                	options = options || {};
                	this.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );
                	this.texture.image = {};
                	this.texture.image.width = width;
                	this.texture.image.height = height;
                	this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
                	this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;
                	this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
                	this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
                	this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;
                }
                WebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {
                	constructor: WebGLRenderTarget,
                	isWebGLRenderTarget: true,
                	setSize: function ( width, height ) {
                		if ( this.width !== width || this.height !== height ) {
                			this.width = width;
                			this.height = height;
                			this.texture.image.width = width;
                			this.texture.image.height = height;
                			this.dispose();
                		}
                		this.viewport.set( 0, 0, width, height );
                		this.scissor.set( 0, 0, width, height );
                	},
                	clone: function () {
                		return new this.constructor().copy( this );
                	},
                	copy: function ( source ) {
                		this.width = source.width;
                		this.height = source.height;
                		this.viewport.copy( source.viewport );
                		this.texture = source.texture.clone();
                		this.depthBuffer = source.depthBuffer;
                		this.stencilBuffer = source.stencilBuffer;
                		this.depthTexture = source.depthTexture;
                		return this;
                	},
                	dispose: function () {
                		this.dispatchEvent( { type: 'dispose' } );
                	}
                } );
                function WebGLMultisampleRenderTarget( width, height, options ) {
                	WebGLRenderTarget.call( this, width, height, options );
                	this.samples = 4;
                }
                WebGLMultisampleRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {
                	constructor: WebGLMultisampleRenderTarget,
                	isWebGLMultisampleRenderTarget: true,
                	copy: function ( source ) {
                		WebGLRenderTarget.prototype.copy.call( this, source );
                		this.samples = source.samples;
                		return this;
                	}
                } );
                var _v1 = new Vector3();
                var _m1 = new Matrix4();
                var _zero = new Vector3( 0, 0, 0 );
                var _one = new Vector3( 1, 1, 1 );
                var _x = new Vector3();
                var _y = new Vector3();
                var _z = new Vector3();
                function Matrix4() {
                	this.elements = [
                		1, 0, 0, 0,
                		0, 1, 0, 0,
                		0, 0, 1, 0,
                		0, 0, 0, 1
                	];
                	if ( arguments.length > 0 ) {
                		console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );
                	}
                }
                Object.assign( Matrix4.prototype, {
                	isMatrix4: true,
                	set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {
                		var te = this.elements;
                		te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
                		te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
                		te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
                		te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;
                		return this;
                	},
                	identity: function () {
                		this.set(
                			1, 0, 0, 0,
                			0, 1, 0, 0,
                			0, 0, 1, 0,
                			0, 0, 0, 1
                		);
                		return this;
                	},
                	clone: function () {
                		return new Matrix4().fromArray( this.elements );
                	},
                	copy: function ( m ) {
                		var te = this.elements;
                		var me = m.elements;
                		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
                		te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
                		te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
                		te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];
                		return this;
                	},
                	copyPosition: function ( m ) {
                		var te = this.elements, me = m.elements;
                		te[ 12 ] = me[ 12 ];
                		te[ 13 ] = me[ 13 ];
                		te[ 14 ] = me[ 14 ];
                		return this;
                	},
                	extractBasis: function ( xAxis, yAxis, zAxis ) {
                		xAxis.setFromMatrixColumn( this, 0 );
                		yAxis.setFromMatrixColumn( this, 1 );
                		zAxis.setFromMatrixColumn( this, 2 );
                		return this;
                	},
                	makeBasis: function ( xAxis, yAxis, zAxis ) {
                		this.set(
                			xAxis.x, yAxis.x, zAxis.x, 0,
                			xAxis.y, yAxis.y, zAxis.y, 0,
                			xAxis.z, yAxis.z, zAxis.z, 0,
                			0, 0, 0, 1
                		);
                		return this;
                	},
                	extractRotation: function ( m ) {
                		var te = this.elements;
                		var me = m.elements;
                		var scaleX = 1 / _v1.setFromMatrixColumn( m, 0 ).length();
                		var scaleY = 1 / _v1.setFromMatrixColumn( m, 1 ).length();
                		var scaleZ = 1 / _v1.setFromMatrixColumn( m, 2 ).length();
                		te[ 0 ] = me[ 0 ] * scaleX;
                		te[ 1 ] = me[ 1 ] * scaleX;
                		te[ 2 ] = me[ 2 ] * scaleX;
                		te[ 3 ] = 0;
                		te[ 4 ] = me[ 4 ] * scaleY;
                		te[ 5 ] = me[ 5 ] * scaleY;
                		te[ 6 ] = me[ 6 ] * scaleY;
                		te[ 7 ] = 0;
                		te[ 8 ] = me[ 8 ] * scaleZ;
                		te[ 9 ] = me[ 9 ] * scaleZ;
                		te[ 10 ] = me[ 10 ] * scaleZ;
                		te[ 11 ] = 0;
                		te[ 12 ] = 0;
                		te[ 13 ] = 0;
                		te[ 14 ] = 0;
                		te[ 15 ] = 1;
                		return this;
                	},
                	makeRotationFromEuler: function ( euler ) {
                		if ( ! ( euler && euler.isEuler ) ) {
                			console.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );
                		}
                		var te = this.elements;
                		var x = euler.x, y = euler.y, z = euler.z;
                		var a = Math.cos( x ), b = Math.sin( x );
                		var c = Math.cos( y ), d = Math.sin( y );
                		var e = Math.cos( z ), f = Math.sin( z );
                		if ( euler.order === 'XYZ' ) {
                			var ae = a * e, af = a * f, be = b * e, bf = b * f;
                			te[ 0 ] = c * e;
                			te[ 4 ] = - c * f;
                			te[ 8 ] = d;
                			te[ 1 ] = af + be * d;
                			te[ 5 ] = ae - bf * d;
                			te[ 9 ] = - b * c;
                			te[ 2 ] = bf - ae * d;
                			te[ 6 ] = be + af * d;
                			te[ 10 ] = a * c;
                		} else if ( euler.order === 'YXZ' ) {
                			var ce = c * e, cf = c * f, de = d * e, df = d * f;
                			te[ 0 ] = ce + df * b;
                			te[ 4 ] = de * b - cf;
                			te[ 8 ] = a * d;
                			te[ 1 ] = a * f;
                			te[ 5 ] = a * e;
                			te[ 9 ] = - b;
                			te[ 2 ] = cf * b - de;
                			te[ 6 ] = df + ce * b;
                			te[ 10 ] = a * c;
                		} else if ( euler.order === 'ZXY' ) {
                			var ce = c * e, cf = c * f, de = d * e, df = d * f;
                			te[ 0 ] = ce - df * b;
                			te[ 4 ] = - a * f;
                			te[ 8 ] = de + cf * b;
                			te[ 1 ] = cf + de * b;
                			te[ 5 ] = a * e;
                			te[ 9 ] = df - ce * b;
                			te[ 2 ] = - a * d;
                			te[ 6 ] = b;
                			te[ 10 ] = a * c;
                		} else if ( euler.order === 'ZYX' ) {
                			var ae = a * e, af = a * f, be = b * e, bf = b * f;
                			te[ 0 ] = c * e;
                			te[ 4 ] = be * d - af;
                			te[ 8 ] = ae * d + bf;
                			te[ 1 ] = c * f;
                			te[ 5 ] = bf * d + ae;
                			te[ 9 ] = af * d - be;
                			te[ 2 ] = - d;
                			te[ 6 ] = b * c;
                			te[ 10 ] = a * c;
                		} else if ( euler.order === 'YZX' ) {
                			var ac = a * c, ad = a * d, bc = b * c, bd = b * d;
                			te[ 0 ] = c * e;
                			te[ 4 ] = bd - ac * f;
                			te[ 8 ] = bc * f + ad;
                			te[ 1 ] = f;
                			te[ 5 ] = a * e;
                			te[ 9 ] = - b * e;
                			te[ 2 ] = - d * e;
                			te[ 6 ] = ad * f + bc;
                			te[ 10 ] = ac - bd * f;
                		} else if ( euler.order === 'XZY' ) {
                			var ac = a * c, ad = a * d, bc = b * c, bd = b * d;
                			te[ 0 ] = c * e;
                			te[ 4 ] = - f;
                			te[ 8 ] = d * e;
                			te[ 1 ] = ac * f + bd;
                			te[ 5 ] = a * e;
                			te[ 9 ] = ad * f - bc;
                			te[ 2 ] = bc * f - ad;
                			te[ 6 ] = b * e;
                			te[ 10 ] = bd * f + ac;
                		}
                		te[ 3 ] = 0;
                		te[ 7 ] = 0;
                		te[ 11 ] = 0;
                		te[ 12 ] = 0;
                		te[ 13 ] = 0;
                		te[ 14 ] = 0;
                		te[ 15 ] = 1;
                		return this;
                	},
                	makeRotationFromQuaternion: function ( q ) {
                		return this.compose( _zero, q, _one );
                	},
                	lookAt: function ( eye, target, up ) {
                		var te = this.elements;
                		_z.subVectors( eye, target );
                		if ( _z.lengthSq() === 0 ) {
                			_z.z = 1;
                		}
                		_z.normalize();
                		_x.crossVectors( up, _z );
                		if ( _x.lengthSq() === 0 ) {
                			if ( Math.abs( up.z ) === 1 ) {
                				_z.x += 0.0001;
                			} else {
                				_z.z += 0.0001;
                			}
                			_z.normalize();
                			_x.crossVectors( up, _z );
                		}
                		_x.normalize();
                		_y.crossVectors( _z, _x );
                		te[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;
                		te[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;
                		te[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;
                		return this;
                	},
                	multiply: function ( m, n ) {
                		if ( n !== undefined ) {
                			console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
                			return this.multiplyMatrices( m, n );
                		}
                		return this.multiplyMatrices( this, m );
                	},
                	premultiply: function ( m ) {
                		return this.multiplyMatrices( m, this );
                	},
                	multiplyMatrices: function ( a, b ) {
                		var ae = a.elements;
                		var be = b.elements;
                		var te = this.elements;
                		var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
                		var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
                		var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
                		var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];
                		var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
                		var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
                		var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
                		var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];
                		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
                		te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
                		te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
                		te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
                		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
                		te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
                		te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
                		te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
                		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
                		te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
                		te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
                		te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
                		te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
                		te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
                		te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
                		te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
                		return this;
                	},
                	multiplyScalar: function ( s ) {
                		var te = this.elements;
                		te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
                		te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
                		te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
                		te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;
                		return this;
                	},
                	applyToBufferAttribute: function ( attribute ) {
                		for ( var i = 0, l = attribute.count; i < l; i ++ ) {
                			_v1.x = attribute.getX( i );
                			_v1.y = attribute.getY( i );
                			_v1.z = attribute.getZ( i );
                			_v1.applyMatrix4( this );
                			attribute.setXYZ( i, _v1.x, _v1.y, _v1.z );
                		}
                		return attribute;
                	},
                	determinant: function () {
                		var te = this.elements;
                		var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
                		var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
                		var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
                		var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];
                		return (
                			n41 * (
                				+ n14 * n23 * n32
                				 - n13 * n24 * n32
                				 - n14 * n22 * n33
                				 + n12 * n24 * n33
                				 + n13 * n22 * n34
                				 - n12 * n23 * n34
                			) +
                			n42 * (
                				+ n11 * n23 * n34
                				 - n11 * n24 * n33
                				 + n14 * n21 * n33
                				 - n13 * n21 * n34
                				 + n13 * n24 * n31
                				 - n14 * n23 * n31
                			) +
                			n43 * (
                				+ n11 * n24 * n32
                				 - n11 * n22 * n34
                				 - n14 * n21 * n32
                				 + n12 * n21 * n34
                				 + n14 * n22 * n31
                				 - n12 * n24 * n31
                			) +
                			n44 * (
                				- n13 * n22 * n31
                				 - n11 * n23 * n32
                				 + n11 * n22 * n33
                				 + n13 * n21 * n32
                				 - n12 * n21 * n33
                				 + n12 * n23 * n31
                			)
                		);
                	},
                	transpose: function () {
                		var te = this.elements;
                		var tmp;
                		tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
                		tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
                		tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;
                		tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
                		tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
                		tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;
                		return this;
                	},
                	setPosition: function ( x, y, z ) {
                		var te = this.elements;
                		if ( x.isVector3 ) {
                			te[ 12 ] = x.x;
                			te[ 13 ] = x.y;
                			te[ 14 ] = x.z;
                		} else {
                			te[ 12 ] = x;
                			te[ 13 ] = y;
                			te[ 14 ] = z;
                		}
                		return this;
                	},
                	getInverse: function ( m, throwOnDegenerate ) {
                		var te = this.elements,
                			me = m.elements,
                			n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],
                			n12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],
                			n13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],
                			n14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],
                			t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
                			t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
                			t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
                			t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
                		var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
                		if ( det === 0 ) {
                			var msg = "THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";
                			if ( throwOnDegenerate === true ) {
                				throw new Error( msg );
                			} else {
                				console.warn( msg );
                			}
                			return this.identity();
                		}
                		var detInv = 1 / det;
                		te[ 0 ] = t11 * detInv;
                		te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
                		te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
                		te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;
                		te[ 4 ] = t12 * detInv;
                		te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
                		te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
                		te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;
                		te[ 8 ] = t13 * detInv;
                		te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
                		te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
                		te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;
                		te[ 12 ] = t14 * detInv;
                		te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
                		te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
                		te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;
                		return this;
                	},
                	scale: function ( v ) {
                		var te = this.elements;
                		var x = v.x, y = v.y, z = v.z;
                		te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
                		te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
                		te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
                		te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;
                		return this;
                	},
                	getMaxScaleOnAxis: function () {
                		var te = this.elements;
                		var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
                		var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
                		var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];
                		return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );
                	},
                	makeTranslation: function ( x, y, z ) {
                		this.set(
                			1, 0, 0, x,
                			0, 1, 0, y,
                			0, 0, 1, z,
                			0, 0, 0, 1
                		);
                		return this;
                	},
                	makeRotationX: function ( theta ) {
                		var c = Math.cos( theta ), s = Math.sin( theta );
                		this.set(
                			1, 0, 0, 0,
                			0, c, - s, 0,
                			0, s, c, 0,
                			0, 0, 0, 1
                		);
                		return this;
                	},
                	makeRotationY: function ( theta ) {
                		var c = Math.cos( theta ), s = Math.sin( theta );
                		this.set(
                			 c, 0, s, 0,
                			 0, 1, 0, 0,
                			- s, 0, c, 0,
                			 0, 0, 0, 1
                		);
                		return this;
                	},
                	makeRotationZ: function ( theta ) {
                		var c = Math.cos( theta ), s = Math.sin( theta );
                		this.set(
                			c, - s, 0, 0,
                			s, c, 0, 0,
                			0, 0, 1, 0,
                			0, 0, 0, 1
                		);
                		return this;
                	},
                	makeRotationAxis: function ( axis, angle ) {
                		var c = Math.cos( angle );
                		var s = Math.sin( angle );
                		var t = 1 - c;
                		var x = axis.x, y = axis.y, z = axis.z;
                		var tx = t * x, ty = t * y;
                		this.set(
                			tx * x + c, tx * y - s * z, tx * z + s * y, 0,
                			tx * y + s * z, ty * y + c, ty * z - s * x, 0,
                			tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
                			0, 0, 0, 1
                		);
                		 return this;
                	},
                	makeScale: function ( x, y, z ) {
                		this.set(
                			x, 0, 0, 0,
                			0, y, 0, 0,
                			0, 0, z, 0,
                			0, 0, 0, 1
                		);
                		return this;
                	},
                	makeShear: function ( x, y, z ) {
                		this.set(
                			1, y, z, 0,
                			x, 1, z, 0,
                			x, y, 1, 0,
                			0, 0, 0, 1
                		);
                		return this;
                	},
                	compose: function ( position, quaternion, scale ) {
                		var te = this.elements;
                		var x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
                		var x2 = x + x,	y2 = y + y, z2 = z + z;
                		var xx = x * x2, xy = x * y2, xz = x * z2;
                		var yy = y * y2, yz = y * z2, zz = z * z2;
                		var wx = w * x2, wy = w * y2, wz = w * z2;
                		var sx = scale.x, sy = scale.y, sz = scale.z;
                		te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;
                		te[ 1 ] = ( xy + wz ) * sx;
                		te[ 2 ] = ( xz - wy ) * sx;
                		te[ 3 ] = 0;
                		te[ 4 ] = ( xy - wz ) * sy;
                		te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;
                		te[ 6 ] = ( yz + wx ) * sy;
                		te[ 7 ] = 0;
                		te[ 8 ] = ( xz + wy ) * sz;
                		te[ 9 ] = ( yz - wx ) * sz;
                		te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;
                		te[ 11 ] = 0;
                		te[ 12 ] = position.x;
                		te[ 13 ] = position.y;
                		te[ 14 ] = position.z;
                		te[ 15 ] = 1;
                		return this;
                	},
                	decompose: function ( position, quaternion, scale ) {
                		var te = this.elements;
                		var sx = _v1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
                		var sy = _v1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
                		var sz = _v1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();
                		var det = this.determinant();
                		if ( det < 0 ) sx = - sx;
                		position.x = te[ 12 ];
                		position.y = te[ 13 ];
                		position.z = te[ 14 ];
                		_m1.copy( this );
                		var invSX = 1 / sx;
                		var invSY = 1 / sy;
                		var invSZ = 1 / sz;
                		_m1.elements[ 0 ] *= invSX;
                		_m1.elements[ 1 ] *= invSX;
                		_m1.elements[ 2 ] *= invSX;
                		_m1.elements[ 4 ] *= invSY;
                		_m1.elements[ 5 ] *= invSY;
                		_m1.elements[ 6 ] *= invSY;
                		_m1.elements[ 8 ] *= invSZ;
                		_m1.elements[ 9 ] *= invSZ;
                		_m1.elements[ 10 ] *= invSZ;
                		quaternion.setFromRotationMatrix( _m1 );
                		scale.x = sx;
                		scale.y = sy;
                		scale.z = sz;
                		return this;
                	},
                	makePerspective: function ( left, right, top, bottom, near, far ) {
                		if ( far === undefined ) {
                			console.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );
                		}
                		var te = this.elements;
                		var x = 2 * near / ( right - left );
                		var y = 2 * near / ( top - bottom );
                		var a = ( right + left ) / ( right - left );
                		var b = ( top + bottom ) / ( top - bottom );
                		var c = - ( far + near ) / ( far - near );
                		var d = - 2 * far * near / ( far - near );
                		te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
                		te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
                		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
                		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;
                		return this;
                	},
                	makeOrthographic: function ( left, right, top, bottom, near, far ) {
                		var te = this.elements;
                		var w = 1.0 / ( right - left );
                		var h = 1.0 / ( top - bottom );
                		var p = 1.0 / ( far - near );
                		var x = ( right + left ) * w;
                		var y = ( top + bottom ) * h;
                		var z = ( far + near ) * p;
                		te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
                		te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
                		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
                		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;
                		return this;
                	},
                	equals: function ( matrix ) {
                		var te = this.elements;
                		var me = matrix.elements;
                		for ( var i = 0; i < 16; i ++ ) {
                			if ( te[ i ] !== me[ i ] ) return false;
                		}
                		return true;
                	},
                	fromArray: function ( array, offset ) {
                		if ( offset === undefined ) offset = 0;
                		for ( var i = 0; i < 16; i ++ ) {
                			this.elements[ i ] = array[ i + offset ];
                		}
                		return this;
                	},
                	toArray: function ( array, offset ) {
                		if ( array === undefined ) array = [];
                		if ( offset === undefined ) offset = 0;
                		var te = this.elements;
                		array[ offset ] = te[ 0 ];
                		array[ offset + 1 ] = te[ 1 ];
                		array[ offset + 2 ] = te[ 2 ];
                		array[ offset + 3 ] = te[ 3 ];
                		array[ offset + 4 ] = te[ 4 ];
                		array[ offset + 5 ] = te[ 5 ];
                		array[ offset + 6 ] = te[ 6 ];
                		array[ offset + 7 ] = te[ 7 ];
                		array[ offset + 8 ] = te[ 8 ];
                		array[ offset + 9 ] = te[ 9 ];
                		array[ offset + 10 ] = te[ 10 ];
                		array[ offset + 11 ] = te[ 11 ];
                		array[ offset + 12 ] = te[ 12 ];
                		array[ offset + 13 ] = te[ 13 ];
                		array[ offset + 14 ] = te[ 14 ];
                		array[ offset + 15 ] = te[ 15 ];
                		return array;
                	}
                } );
                var _matrix = new Matrix4();
                var _quaternion$1 = new Quaternion();
                function Euler( x, y, z, order ) {
                	this._x = x || 0;
                	this._y = y || 0;
                	this._z = z || 0;
                	this._order = order || Euler.DefaultOrder;
                }
                Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];
                Euler.DefaultOrder = 'XYZ';
                Object.defineProperties( Euler.prototype, {
                	x: {
                		get: function () {
                			return this._x;
                		},
                		set: function ( value ) {
                			this._x = value;
                			this._onChangeCallback();
                		}
                	},
                	y: {
                		get: function () {
                			return this._y;
                		},
                		set: function ( value ) {
                			this._y = value;
                			this._onChangeCallback();
                		}
                	},
                	z: {
                		get: function () {
                			return this._z;
                		},
                		set: function ( value ) {
                			this._z = value;
                			this._onChangeCallback();
                		}
                	},
                	order: {
                		get: function () {
                			return this._order;
                		},
                		set: function ( value ) {
                			this._order = value;
                			this._onChangeCallback();
                		}
                	}
                } );
                Object.assign( Euler.prototype, {
                	isEuler: true,
                	set: function ( x, y, z, order ) {
                		this._x = x;
                		this._y = y;
                		this._z = z;
                		this._order = order || this._order;
                		this._onChangeCallback();
                		return this;
                	},
                	clone: function () {
                		return new this.constructor( this._x, this._y, this._z, this._order );
                	},
                	copy: function ( euler ) {
                		this._x = euler._x;
                		this._y = euler._y;
                		this._z = euler._z;
                		this._order = euler._order;
                		this._onChangeCallback();
                		return this;
                	},
                	setFromRotationMatrix: function ( m, order, update ) {
                		var clamp = _Math.clamp;
                		var te = m.elements;
                		var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
                		var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
                		var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];
                		order = order || this._order;
                		if ( order === 'XYZ' ) {
                			this._y = Math.asin( clamp( m13, - 1, 1 ) );
                			if ( Math.abs( m13 ) < 0.9999999 ) {
                				this._x = Math.atan2( - m23, m33 );
                				this._z = Math.atan2( - m12, m11 );
                			} else {
                				this._x = Math.atan2( m32, m22 );
                				this._z = 0;
                			}
                		} else if ( order === 'YXZ' ) {
                			this._x = Math.asin( - clamp( m23, - 1, 1 ) );
                			if ( Math.abs( m23 ) < 0.9999999 ) {
                				this._y = Math.atan2( m13, m33 );
                				this._z = Math.atan2( m21, m22 );
                			} else {
                				this._y = Math.atan2( - m31, m11 );
                				this._z = 0;
                			}
                		} else if ( order === 'ZXY' ) {
                			this._x = Math.asin( clamp( m32, - 1, 1 ) );
                			if ( Math.abs( m32 ) < 0.9999999 ) {
                				this._y = Math.atan2( - m31, m33 );
                				this._z = Math.atan2( - m12, m22 );
                			} else {
                				this._y = 0;
                				this._z = Math.atan2( m21, m11 );
                			}
                		} else if ( order === 'ZYX' ) {
                			this._y = Math.asin( - clamp( m31, - 1, 1 ) );
                			if ( Math.abs( m31 ) < 0.9999999 ) {
                				this._x = Math.atan2( m32, m33 );
                				this._z = Math.atan2( m21, m11 );
                			} else {
                				this._x = 0;
                				this._z = Math.atan2( - m12, m22 );
                			}
                		} else if ( order === 'YZX' ) {
                			this._z = Math.asin( clamp( m21, - 1, 1 ) );
                			if ( Math.abs( m21 ) < 0.9999999 ) {
                				this._x = Math.atan2( - m23, m22 );
                				this._y = Math.atan2( - m31, m11 );
                			} else {
                				this._x = 0;
                				this._y = Math.atan2( m13, m33 );
                			}
                		} else if ( order === 'XZY' ) {
                			this._z = Math.asin( - clamp( m12, - 1, 1 ) );
                			if ( Math.abs( m12 ) < 0.9999999 ) {
                				this._x = Math.atan2( m32, m22 );
                				this._y = Math.atan2( m13, m11 );
                			} else {
                				this._x = Math.atan2( - m23, m33 );
                				this._y = 0;
                			}
                		} else {
                			console.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );
                		}
                		this._order = order;
                		if ( update !== false ) this._onChangeCallback();
                		return this;
                	},
                	setFromQuaternion: function ( q, order, update ) {
                		_matrix.makeRotationFromQuaternion( q );
                		return this.setFromRotationMatrix( _matrix, order, update );
                	},
                	setFromVector3: function ( v, order ) {
                		return this.set( v.x, v.y, v.z, order || this._order );
                	},
                	reorder: function ( newOrder ) {
                		_quaternion$1.setFromEuler( this );
                		return this.setFromQuaternion( _quaternion$1, newOrder );
                	},
                	equals: function ( euler ) {
                		return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );
                	},
                	fromArray: function ( array ) {
                		this._x = array[ 0 ];
                		this._y = array[ 1 ];
                		this._z = array[ 2 ];
                		if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];
                		this._onChangeCallback();
                		return this;
                	},
                	toArray: function ( array, offset ) {
                		if ( array === undefined ) array = [];
                		if ( offset === undefined ) offset = 0;
                		array[ offset ] = this._x;
                		array[ offset + 1 ] = this._y;
                		array[ offset + 2 ] = this._z;
                		array[ offset + 3 ] = this._order;
                		return array;
                	},
                	toVector3: function ( optionalResult ) {
                		if ( optionalResult ) {
                			return optionalResult.set( this._x, this._y, this._z );
                		} else {
                			return new Vector3( this._x, this._y, this._z );
                		}
                	},
                	_onChange: function ( callback ) {
                		this._onChangeCallback = callback;
                		return this;
                	},
                	_onChangeCallback: function () {}
                } );
                function Layers() {
                	this.mask = 1 | 0;
                }
                Object.assign( Layers.prototype, {
                	set: function ( channel ) {
                		this.mask = 1 << channel | 0;
                	},
                	enable: function ( channel ) {
                		this.mask |= 1 << channel | 0;
                	},
                	enableAll: function () {
                		this.mask = 0xffffffff | 0;
                	},
                	toggle: function ( channel ) {
                		this.mask ^= 1 << channel | 0;
                	},
                	disable: function ( channel ) {
                		this.mask &= ~ ( 1 << channel | 0 );
                	},
                	disableAll: function () {
                		this.mask = 0;
                	},
                	test: function ( layers ) {
                		return ( this.mask & layers.mask ) !== 0;
                	}
                } );
                var _object3DId = 0;
                var _v1$1 = new Vector3();
                var _q1 = new Quaternion();
                var _m1$1 = new Matrix4();
                var _target = new Vector3();
                var _position = new Vector3();
                var _scale = new Vector3();
                var _quaternion$2 = new Quaternion();
                var _xAxis = new Vector3( 1, 0, 0 );
                var _yAxis = new Vector3( 0, 1, 0 );
                var _zAxis = new Vector3( 0, 0, 1 );
                var _addedEvent = { type: 'added' };
                var _removedEvent = { type: 'removed' };
                function Object3D() {
                	Object.defineProperty( this, 'id', { value: _object3DId ++ } );
                	this.uuid = _Math.generateUUID();
                	this.name = '';
                	this.type = 'Object3D';
                	this.parent = null;
                	this.children = [];
                	this.up = Object3D.DefaultUp.clone();
                	var position = new Vector3();
                	var rotation = new Euler();
                	var quaternion = new Quaternion();
                	var scale = new Vector3( 1, 1, 1 );
                	function onRotationChange() {
                		quaternion.setFromEuler( rotation, false );
                	}
                	function onQuaternionChange() {
                		rotation.setFromQuaternion( quaternion, undefined, false );
                	}
                	rotation._onChange( onRotationChange );
                	quaternion._onChange( onQuaternionChange );
                	Object.defineProperties( this, {
                		position: {
                			configurable: true,
                			enumerable: true,
                			value: position
                		},
                		rotation: {
                			configurable: true,
                			enumerable: true,
                			value: rotation
                		},
                		quaternion: {
                			configurable: true,
                			enumerable: true,
                			value: quaternion
                		},
                		scale: {
                			configurable: true,
                			enumerable: true,
                			value: scale
                		},
                		modelViewMatrix: {
                			value: new Matrix4()
                		},
                		normalMatrix: {
                			value: new Matrix3()
                		}
                	} );
                	this.matrix = new Matrix4();
                	this.matrixWorld = new Matrix4();
                	this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
                	this.matrixWorldNeedsUpdate = false;
                	this.layers = new Layers();
                	this.visible = true;
                	this.castShadow = false;
                	this.receiveShadow = false;
                	this.frustumCulled = true;
                	this.renderOrder = 0;
                	this.userData = {};
                }
                Object3D.DefaultUp = new Vector3( 0, 1, 0 );
                Object3D.DefaultMatrixAutoUpdate = true;
                Object3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {
                	constructor: Object3D,
                	isObject3D: true,
                	onBeforeRender: function () {},
                	onAfterRender: function () {},
                	applyMatrix: function ( matrix ) {
                		if ( this.matrixAutoUpdate ) this.updateMatrix();
                		this.matrix.premultiply( matrix );
                		this.matrix.decompose( this.position, this.quaternion, this.scale );
                	},
                	applyQuaternion: function ( q ) {
                		this.quaternion.premultiply( q );
                		return this;
                	},
                	setRotationFromAxisAngle: function ( axis, angle ) {
                		this.quaternion.setFromAxisAngle( axis, angle );
                	},
                	setRotationFromEuler: function ( euler ) {
                		this.quaternion.setFromEuler( euler, true );
                	},
                	setRotationFromMatrix: function ( m ) {
                		this.quaternion.setFromRotationMatrix( m );
                	},
                	setRotationFromQuaternion: function ( q ) {
                		this.quaternion.copy( q );
                	},
                	rotateOnAxis: function ( axis, angle ) {
                		_q1.setFromAxisAngle( axis, angle );
                		this.quaternion.multiply( _q1 );
                		return this;
                	},
                	rotateOnWorldAxis: function ( axis, angle ) {
                		_q1.setFromAxisAngle( axis, angle );
                		this.quaternion.premultiply( _q1 );
                		return this;
                	},
                	rotateX: function ( angle ) {
                		return this.rotateOnAxis( _xAxis, angle );
                	},
                	rotateY: function ( angle ) {
                		return this.rotateOnAxis( _yAxis, angle );
                	},
                	rotateZ: function ( angle ) {
                		return this.rotateOnAxis( _zAxis, angle );
                	},
                	translateOnAxis: function ( axis, distance ) {
                		_v1$1.copy( axis ).applyQuaternion( this.quaternion );
                		this.position.add( _v1$1.multiplyScalar( distance ) );
                		return this;
                	},
                	translateX: function ( distance ) {
                		return this.translateOnAxis( _xAxis, distance );
                	},
                	translateY: function ( distance ) {
                		return this.translateOnAxis( _yAxis, distance );
                	},
                	translateZ: function ( distance ) {
                		return this.translateOnAxis( _zAxis, distance );
                	},
                	localToWorld: function ( vector ) {
                		return vector.applyMatrix4( this.matrixWorld );
                	},
                	worldToLocal: function ( vector ) {
                		return vector.applyMatrix4( _m1$1.getInverse( this.matrixWorld ) );
                	},
                	lookAt: function ( x, y, z ) {
                		if ( x.isVector3 ) {
                			_target.copy( x );
                		} else {
                			_target.set( x, y, z );
                		}
                		var parent = this.parent;
                		this.updateWorldMatrix( true, false );
                		_position.setFromMatrixPosition( this.matrixWorld );
                		if ( this.isCamera || this.isLight ) {
                			_m1$1.lookAt( _position, _target, this.up );
                		} else {
                			_m1$1.lookAt( _target, _position, this.up );
                		}
                		this.quaternion.setFromRotationMatrix( _m1$1 );
                		if ( parent ) {
                			_m1$1.extractRotation( parent.matrixWorld );
                			_q1.setFromRotationMatrix( _m1$1 );
                			this.quaternion.premultiply( _q1.inverse() );
                		}
                	},
                	add: function ( object ) {
                		if ( arguments.length > 1 ) {
                			for ( var i = 0; i < arguments.length; i ++ ) {
                				this.add( arguments[ i ] );
                			}
                			return this;
                		}
                		if ( object === this ) {
                			console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
                			return this;
                		}
                		if ( ( object && object.isObject3D ) ) {
                			if ( object.parent !== null ) {
                				object.parent.remove( object );
                			}
                			object.parent = this;
                			this.children.push( object );
                			object.dispatchEvent( _addedEvent );
                		} else {
                			console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );
                		}
                		return this;
                	},
                	remove: function ( object ) {
                		if ( arguments.length > 1 ) {
                			for ( var i = 0; i < arguments.length; i ++ ) {
                				this.remove( arguments[ i ] );
                			}
                			return this;
                		}
                		var index = this.children.indexOf( object );
                		if ( index !== - 1 ) {
                			object.parent = null;
                			this.children.splice( index, 1 );
                			object.dispatchEvent( _removedEvent );
                		}
                		return this;
                	},
                	attach: function ( object ) {
                		this.updateWorldMatrix( true, false );
                		_m1$1.getInverse( this.matrixWorld );
                		if ( object.parent !== null ) {
                			object.parent.updateWorldMatrix( true, false );
                			_m1$1.multiply( object.parent.matrixWorld );
                		}
                		object.applyMatrix( _m1$1 );
                		object.updateWorldMatrix( false, false );
                		this.add( object );
                		return this;
                	},
                	getObjectById: function ( id ) {
                		return this.getObjectByProperty( 'id', id );
                	},
                	getObjectByName: function ( name ) {
                		return this.getObjectByProperty( 'name', name );
                	},
                	getObjectByProperty: function ( name, value ) {
                		if ( this[ name ] === value ) return this;
                		for ( var i = 0, l = this.children.length; i < l; i ++ ) {
                			var child = this.children[ i ];
                			var object = child.getObjectByProperty( name, value );
                			if ( object !== undefined ) {
                				return object;
                			}
                		}
                		return undefined;
                	},
                	getWorldPosition: function ( target ) {
                		if ( target === undefined ) {
                			console.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );
                			target = new Vector3();
                		}
                		this.updateMatrixWorld( true );
                		return target.setFromMatrixPosition( this.matrixWorld );
                	},
                	getWorldQuaternion: function ( target ) {
                		if ( target === undefined ) {
                			console.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );
                			target = new Quaternion();
                		}
                		this.updateMatrixWorld( true );
                		this.matrixWorld.decompose( _position, target, _scale );
                		return target;
                	},
                	getWorldScale: function ( target ) {
                		if ( target === undefined ) {
                			console.warn( 'THREE.Object3D: .getWorldScale() target is now required' );
                			target = new Vector3();
                		}
                		this.updateMatrixWorld( true );
                		this.matrixWorld.decompose( _position, _quaternion$2, target );
                		return target;
                	},
                	getWorldDirection: function ( target ) {
                		if ( target === undefined ) {
                			console.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );
                			target = new Vector3();
                		}
                		this.updateMatrixWorld( true );
                		var e = this.matrixWorld.elements;
                		return target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();
                	},
                	raycast: function () {},
                	traverse: function ( callback ) {
                		callback( this );
                		var children = this.children;
                		for ( var i = 0, l = children.length; i < l; i ++ ) {
                			children[ i ].traverse( callback );
                		}
                	},
                	traverseVisible: function ( callback ) {
                		if ( this.visible === false ) return;
                		callback( this );
                		var children = this.children;
                		for ( var i = 0, l = children.length; i < l; i ++ ) {
                			children[ i ].traverseVisible( callback );
                		}
                	},
                	traverseAncestors: function ( callback ) {
                		var parent = this.parent;
                		if ( parent !== null ) {
                			callback( parent );
                			parent.traverseAncestors( callback );
                		}
                	},
                	updateMatrix: function () {
                		this.matrix.compose( this.position, this.quaternion, this.scale );
                		this.matrixWorldNeedsUpdate = true;
                	},
                	updateMatrixWorld: function ( force ) {
                		if ( this.matrixAutoUpdate ) this.updateMatrix();
                		if ( this.matrixWorldNeedsUpdate || force ) {
                			if ( this.parent === null ) {
                				this.matrixWorld.copy( this.matrix );
                			} else {
                				this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );
                			}
                			this.matrixWorldNeedsUpdate = false;
                			force = true;
                		}
                		var children = this.children;
                		for ( var i = 0, l = children.length; i < l; i ++ ) {
                			children[ i ].updateMatrixWorld( force );
                		}
                	},
                	updateWorldMatrix: function ( updateParents, updateChildren ) {
                		var parent = this.parent;
                		if ( updateParents === true && parent !== null ) {
                			parent.updateWorldMatrix( true, false );
                		}
                		if ( this.matrixAutoUpdate ) this.updateMatrix();
                		if ( this.parent === null ) {
                			this.matrixWorld.copy( this.matrix );
                		} else {
                			this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );
                		}
                		if ( updateChildren === true ) {
                			var children = this.children;
                			for ( var i = 0, l = children.length; i < l; i ++ ) {
                				children[ i ].updateWorldMatrix( false, true );
                			}
                		}
                	},
                	toJSON: function ( meta ) {
                		var isRootObject = ( meta === undefined || typeof meta === 'string' );
                		var output = {};
                		if ( isRootObject ) {
                			meta = {
                				geometries: {},
                				materials: {},
                				textures: {},
                				images: {},
                				shapes: {}
                			};
                			output.metadata = {
                				version: 4.5,
                				type: 'Object',
                				generator: 'Object3D.toJSON'
                			};
                		}
                		var object = {};
                		object.uuid = this.uuid;
                		object.type = this.type;
                		if ( this.name !== '' ) object.name = this.name;
                		if ( this.castShadow === true ) object.castShadow = true;
                		if ( this.receiveShadow === true ) object.receiveShadow = true;
                		if ( this.visible === false ) object.visible = false;
                		if ( this.frustumCulled === false ) object.frustumCulled = false;
                		if ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;
                		if ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;
                		object.layers = this.layers.mask;
                		object.matrix = this.matrix.toArray();
                		if ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;
                		if ( this.isMesh && this.drawMode !== TrianglesDrawMode ) object.drawMode = this.drawMode;
                		if ( this.isInstancedMesh ) {
                			object.type = 'InstancedMesh';
                			object.count = this.count;
                			object.instanceMatrix = this.instanceMatrix.toJSON();
                		}
                		function serialize( library, element ) {
                			if ( library[ element.uuid ] === undefined ) {
                				library[ element.uuid ] = element.toJSON( meta );
                			}
                			return element.uuid;
                		}
                		if ( this.isMesh || this.isLine || this.isPoints ) {
                			object.geometry = serialize( meta.geometries, this.geometry );
                			var parameters = this.geometry.parameters;
                			if ( parameters !== undefined && parameters.shapes !== undefined ) {
                				var shapes = parameters.shapes;
                				if ( Array.isArray( shapes ) ) {
                					for ( var i = 0, l = shapes.length; i < l; i ++ ) {
                						var shape = shapes[ i ];
                						serialize( meta.shapes, shape );
                					}
                				} else {
                					serialize( meta.shapes, shapes );
                				}
                			}
                		}
                		if ( this.material !== undefined ) {
                			if ( Array.isArray( this.material ) ) {
                				var uuids = [];
                				for ( var i = 0, l = this.material.length; i < l; i ++ ) {
                					uuids.push( serialize( meta.materials, this.material[ i ] ) );
                				}
                				object.material = uuids;
                			} else {
                				object.material = serialize( meta.materials, this.material );
                			}
                		}
                		if ( this.children.length > 0 ) {
                			object.children = [];
                			for ( var i = 0; i < this.children.length; i ++ ) {
                				object.children.push( this.children[ i ].toJSON( meta ).object );
                			}
                		}
                		if ( isRootObject ) {
                			var geometries = extractFromCache( meta.geometries );
                			var materials = extractFromCache( meta.materials );
                			var textures = extractFromCache( meta.textures );
                			var images = extractFromCache( meta.images );
                			var shapes = extractFromCache( meta.shapes );
                			if ( geometries.length > 0 ) output.geometries = geometries;
                			if ( materials.length > 0 ) output.materials = materials;
                			if ( textures.length > 0 ) output.textures = textures;
                			if ( images.length > 0 ) output.images = images;
                			if ( shapes.length > 0 ) output.shapes = shapes;
                		}
                		output.object = object;
                		return output;
                		function extractFromCache( cache ) {
                			var values = [];
                			for ( var key in cache ) {
                				var data = cache[ key ];
                				delete data.metadata;
                				values.push( data );
                			}
                			return values;
                		}
                	},
                	clone: function ( recursive ) {
                		return new this.constructor().copy( this, recursive );
                	},
                	copy: function ( source, recursive ) {
                		if ( recursive === undefined ) recursive = true;
                		this.name = source.name;
                		this.up.copy( source.up );
                		this.position.copy( source.position );
                		this.quaternion.copy( source.quaternion );
                		this.scale.copy( source.scale );
                		this.matrix.copy( source.matrix );
                		this.matrixWorld.copy( source.matrixWorld );
                		this.matrixAutoUpdate = source.matrixAutoUpdate;
                		this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
                		this.layers.mask = source.layers.mask;
                		this.visible = source.visible;
                		this.castShadow = source.castShadow;
                		this.receiveShadow = source.receiveShadow;
                		this.frustumCulled = source.frustumCulled;
                		this.renderOrder = source.renderOrder;
                		this.userData = JSON.parse( JSON.stringify( source.userData ) );
                		if ( recursive === true ) {
                			for ( var i = 0; i < source.children.length; i ++ ) {
                				var child = source.children[ i ];
                				this.add( child.clone() );
                			}
                		}
                		return this;
                	}
                } );
                function Scene() {
                	Object3D.call( this );
                	this.type = 'Scene';
                	this.background = null;
                	this.fog = null;
                	this.overrideMaterial = null;
                	this.autoUpdate = true;
                	if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {
                		__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );
                	}
                }
                Scene.prototype = Object.assign( Object.create( Object3D.prototype ), {
                	constructor: Scene,
                	isScene: true,
                	copy: function ( source, recursive ) {
                		Object3D.prototype.copy.call( this, source, recursive );
                		if ( source.background !== null ) this.background = source.background.clone();
                		if ( source.fog !== null ) this.fog = source.fog.clone();
                		if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();
                		this.autoUpdate = source.autoUpdate;
                		this.matrixAutoUpdate = source.matrixAutoUpdate;
                		return this;
                	},
                	toJSON: function ( meta ) {
                		var data = Object3D.prototype.toJSON.call( this, meta );
                		if ( this.background !== null ) data.object.background = this.background.toJSON( meta );
                		if ( this.fog !== null ) data.object.fog = this.fog.toJSON();
                		return data;
                	},
                	dispose: function () {
                		this.dispatchEvent( { type: 'dispose' } );
                	}
                } );
                var _points = [
                	new Vector3(),
                	new Vector3(),
                	new Vector3(),
                	new Vector3(),
                	new Vector3(),
                	new Vector3(),
                	new Vector3(),
                	new Vector3()
                ];
                var _vector$2 = new Vector3();
                var _box = new Box3();
                var _v0 = new Vector3();
                var _v1$2 = new Vector3();
                var _v2 = new Vector3();
                var _f0 = new Vector3();
                var _f1 = new Vector3();
                var _f2 = new Vector3();
                var _center = new Vector3();
                var _extents = new Vector3();
                var _triangleNormal = new Vector3();
                var _testAxis = new Vector3();
                function Box3( min, max ) {
                	this.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );
                	this.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );
                }
                Object.assign( Box3.prototype, {
                	isBox3: true,
                	set: function ( min, max ) {
                		this.min.copy( min );
                		this.max.copy( max );
                		return this;
                	},
                	setFromArray: function ( array ) {
                		var minX = + Infinity;
                		var minY = + Infinity;
                		var minZ = + Infinity;
                		var maxX = - Infinity;
                		var maxY = - Infinity;
                		var maxZ = - Infinity;
                		for ( var i = 0, l = array.length; i < l; i += 3 ) {
                			var x = array[ i ];
                			var y = array[ i + 1 ];
                			var z = array[ i + 2 ];
                			if ( x < minX ) minX = x;
                			if ( y < minY ) minY = y;
                			if ( z < minZ ) minZ = z;
                			if ( x > maxX ) maxX = x;
                			if ( y > maxY ) maxY = y;
                			if ( z > maxZ ) maxZ = z;
                		}
                		this.min.set( minX, minY, minZ );
                		this.max.set( maxX, maxY, maxZ );
                		return this;
                	},
                	setFromBufferAttribute: function ( attribute ) {
                		var minX = + Infinity;
                		var minY = + Infinity;
                		var minZ = + Infinity;
                		var maxX = - Infinity;
                		var maxY = - Infinity;
                		var maxZ = - Infinity;
                		for ( var i = 0, l = attribute.count; i < l; i ++ ) {
                			var x = attribute.getX( i );
                			var y = attribute.getY( i );
                			var z = attribute.getZ( i );
                			if ( x < minX ) minX = x;
                			if ( y < minY ) minY = y;
                			if ( z < minZ ) minZ = z;
                			if ( x > maxX ) maxX = x;
                			if ( y > maxY ) maxY = y;
                			if ( z > maxZ ) maxZ = z;
                		}
                		this.min.set( minX, minY, minZ );
                		this.max.set( maxX, maxY, maxZ );
                		return this;
                	},
                	setFromPoints: function ( points ) {
                		this.makeEmpty();
                		for ( var i = 0, il = points.length; i < il; i ++ ) {
                			this.expandByPoint( points[ i ] );
                		}
                		return this;
                	},
                	setFromCenterAndSize: function ( center, size ) {
                		var halfSize = _vector$2.copy( size ).multiplyScalar( 0.5 );
                		this.min.copy( center ).sub( halfSize );
                		this.max.copy( center ).add( halfSize );
                		return this;
                	},
                	setFromObject: function ( object ) {
                		this.makeEmpty();
                		return this.expandByObject( object );
                	},
                	clone: function () {
                		return new this.constructor().copy( this );
                	},
                	copy: function ( box ) {
                		this.min.copy( box.min );
                		this.max.copy( box.max );
                		return this;
                	},
                	makeEmpty: function () {
                		this.min.x = this.min.y = this.min.z = + Infinity;
                		this.max.x = this.max.y = this.max.z = - Infinity;
                		return this;
                	},
                	isEmpty: function () {
                		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );
                	},
                	getCenter: function ( target ) {
                		if ( target === undefined ) {
                			console.warn( 'THREE.Box3: .getCenter() target is now required' );
                			target = new Vector3();
                		}
                		return this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );
                	},
                	getSize: function ( target ) {
                		if ( target === undefined ) {
                			console.warn( 'THREE.Box3: .getSize() target is now required' );
                			target = new Vector3();
                		}
                		return this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );
                	},
                	expandByPoint: function ( point ) {
                		this.min.min( point );
                		this.max.max( point );
                		return this;
                	},
                	expandByVector: function ( vector ) {
                		this.min.sub( vector );
                		this.max.add( vector );
                		return this;
                	},
                	expandByScalar: function ( scalar ) {
                		this.min.addScalar( - scalar );
                		this.max.addScalar( scalar );
                		return this;
                	},
                	expandByObject: function ( object ) {
                		object.updateWorldMatrix( false, false );
                		var geometry = object.geometry;
                		if ( geometry !== undefined ) {
                			if ( geometry.boundingBox === null ) {
                				geometry.computeBoundingBox();
                			}
                			_box.copy( geometry.boundingBox );
                			_box.applyMatrix4( object.matrixWorld );
                			this.expandByPoint( _box.min );
                			this.expandByPoint( _box.max );
                		}
                		var children = object.children;
                		for ( var i = 0, l = children.length; i < l; i ++ ) {
                			this.expandByObject( children[ i ] );
                		}
                		return this;
                	},
                	containsPoint: function ( point ) {
                		return point.x < this.min.x || point.x > this.max.x ||
                			point.y < this.min.y || point.y > this.max.y ||
                			point.z < this.min.z || point.z > this.max.z ? false : true;
                	},
                	containsBox: function ( box ) {
                		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
                			this.min.y <= box.min.y && box.max.y <= this.max.y &&
                			this.min.z <= box.min.z && box.max.z <= this.max.z;
                	},
                	getParameter: function ( point, target ) {
                		if ( target === undefined ) {
                			console.warn( 'THREE.Box3: .getParameter() target is now required' );
                			target = new Vector3();
                		}
                		return target.set(
                			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
                			( point.y - this.min.y ) / ( this.max.y - this.min.y ),
                			( point.z - this.min.z ) / ( this.max.z - this.min.z )
                		);
                	},
                	intersectsBox: function ( box ) {
                		return box.max.x < this.min.x || box.min.x > this.max.x ||
                			box.max.y < this.min.y || box.min.y > this.max.y ||
                			box.max.z < this.min.z || box.min.z > this.max.z ? false : true;
                	},
                	intersectsSphere: function ( sphere ) {
                		this.clampPoint( sphere.center, _vector$2 );
                		return _vector$2.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );
                	},
                	intersectsPlane: function ( plane ) {
                		var min, max;
                		if ( plane.normal.x > 0 ) {
                			min = plane.normal.x * this.min.x;
                			max = plane.normal.x * this.max.x;
                		} else {
                			min = plane.normal.x * this.max.x;
                			max = plane.normal.x * this.min.x;
                		}
                		if ( plane.normal.y > 0 ) {
                			min += plane.normal.y * this.min.y;
                			max += plane.normal.y * this.max.y;
                		} else {
                			min += plane.normal.y * this.max.y;
                			max += plane.normal.y * this.min.y;
                		}
                		if ( plane.normal.z > 0 ) {
                			min += plane.normal.z * this.min.z;
                			max += plane.normal.z * this.max.z;
                		} else {
                			min += plane.normal.z * this.max.z;
                			max += plane.normal.z * this.min.z;
                		}
                		return ( min <= - plane.constant && max >= - plane.constant );
                	},
                	intersectsTriangle: function ( triangle ) {
                		if ( this.isEmpty() ) {
                			return false;
                		}
                		this.getCenter( _center );
                		_extents.subVectors( this.max, _center );
                		_v0.subVectors( triangle.a, _center );
                		_v1$2.subVectors( triangle.b, _center );
                		_v2.subVectors( triangle.c, _center );
                		_f0.subVectors( _v1$2, _v0 );
                		_f1.subVectors( _v2, _v1$2 );
                		_f2.subVectors( _v0, _v2 );
                		var axes = [
                			0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,
                			_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,
                			- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0
                		];
                		if ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {
                			return false;
                		}
                		axes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];
                		if ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {
                			return false;
                		}
                		_triangleNormal.crossVectors( _f0, _f1 );
                		axes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];
                		return satForAxes( axes, _v0, _v1$2, _v2, _extents );
                	},
                	clampPoint: function ( point, target ) {
                		if ( target === undefined ) {
                			console.warn( 'THREE.Box3: .clampPoint() target is now required' );
                			target = new Vector3();
                		}
                		return target.copy( point ).clamp( this.min, this.max );
                	},
                	distanceToPoint: function ( point ) {
                		var clampedPoint = _vector$2.copy( point ).clamp( this.min, this.max );
                		return clampedPoint.sub( point ).length();
                	},
                	getBoundingSphere: function ( target ) {
                		if ( target === undefined ) {
                			console.error( 'THREE.Box3: .getBoundingSphere() target is now required' );
                		}
                		this.getCenter( target.center );
                		target.radius = this.getSize( _vector$2 ).length() * 0.5;
                		return target;
                	},
                	intersect: function ( box ) {
                		this.min.max( box.min );
                		this.max.min( box.max );
                		if ( this.isEmpty() ) this.makeEmpty();
                		return this;
                	},
                	union: function ( box ) {
                		this.min.min( box.min );
                		this.max.max( box.max );
                		return this;
                	},
                	applyMatrix4: function ( matrix ) {
                		if ( this.isEmpty() ) return this;
                		_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix );
                		_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix );
                		_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix );
                		_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix );
                		_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix );
                		_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix );
                		_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix );
                		_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );
                		this.setFromPoints( _points );
                		return this;
                	},
                	translate: function ( offset ) {
                		this.min.add( offset );
                		this.max.add( offset );
                		return this;
                	},
                	equals: function ( box ) {
                		return box.min.equals( this.min ) && box.max.equals( this.max );
                	}
                } );
                function satForAxes( axes, v0, v1, v2, extents ) {
                	var i, j;
                	for ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {
                		_testAxis.fromArray( axes, i );
                		var r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );
                		var p0 = v0.dot( _testAxis );
                		var p1 = v1.dot( _testAxis );
                		var p2 = v2.dot( _testAxis );
                		if ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {
                			return false;
                		}
                	}
                	return true;
                }
                var _box$1 = new Box3();
                function Sphere( center, radius ) {
                	this.center = ( center !== undefined ) ? center : new Vector3();
                	this.radius = ( radius !== undefined ) ? radius : 0;
                }
                Object.assign( Sphere.prototype, {
                	set: function ( center, radius ) {
                		this.center.copy( center );
                		this.radius = radius;
                		return this;
                	},
                	setFromPoints: function ( points, optionalCenter ) {
                		var center = this.center;
                		if ( optionalCenter !== undefined ) {
                			center.copy( optionalCenter );
                		} else {
                			_box$1.setFromPoints( points ).getCenter( center );
                		}
                		var maxRadiusSq = 0;
                		for ( var i = 0, il = points.length; i < il; i ++ ) {
                			maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );
                		}
                		this.radius = Math.sqrt( maxRadiusSq );
                		return this;
                	},
                	clone: function () {
                		return new this.constructor().copy( this );
                	},
                	copy: function ( sphere ) {
                		this.center.copy( sphere.center );
                		this.radius = sphere.radius;
                		return this;
                	},
                	empty: function () {
                		return ( this.radius <= 0 );
                	},
                	containsPoint: function ( point ) {
                		return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );
                	},
                	distanceToPoint: function ( point ) {
                		return ( point.distanceTo( this.center ) - this.radius );
                	},
                	intersectsSphere: function ( sphere ) {
                		var radiusSum = this.radius + sphere.radius;
                		return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );
                	},
                	intersectsBox: function ( box ) {
                		return box.intersectsSphere( this );
                	},
                	intersectsPlane: function ( plane ) {
                		return Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;
                	},
                	clampPoint: function ( point, target ) {
                		var deltaLengthSq = this.center.distanceToSquared( point );
                		if ( target === undefined ) {
                			console.warn( 'THREE.Sphere: .clampPoint() target is now required' );
                			target = new Vector3();
                		}
                		target.copy( point );
                		if ( deltaLengthSq > ( this.radius * this.radius ) ) {
                			target.sub( this.center ).normalize();
                			target.multiplyScalar( this.radius ).add( this.center );
                		}
                		return target;
                	},
                	getBoundingBox: function ( target ) {
                		if ( target === undefined ) {
                			console.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );
                			target = new Box3();
                		}
                		target.set( this.center, this.center );
                		target.expandByScalar( this.radius );
                		return target;
                	},
                	applyMatrix4: function ( matrix ) {
                		this.center.applyMatrix4( matrix );
                		this.radius = this.radius * matrix.getMaxScaleOnAxis();
                		return this;
                	},
                	translate: function ( offset ) {
                		this.center.add( offset );
                		return this;
                	},
                	equals: function ( sphere ) {
                		return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );
                	}
                } );
                var _vector$3 = new Vector3();
                var _segCenter = new Vector3();
                var _segDir = new Vector3();
                var _diff = new Vector3();
                var _edge1 = new Vector3();
                var _edge2 = new Vector3();
                var _normal = new Vector3();
                function Ray( origin, direction ) {
                	this.origin = ( origin !== undefined ) ? origin : new Vector3();
                	this.direction = ( direction !== undefined ) ? direction : new Vector3( 0, 0, - 1 );
                }
                Object.assign( Ray.prototype, {
                	set: function ( origin, direction ) {
                		this.origin.copy( origin );
                		this.direction.copy( direction );
                		return this;
                	},
                	clone: function () {
                		return new this.constructor().copy( this );
                	},
                	copy: function ( ray ) {
                		this.origin.copy( ray.origin );
                		this.direction.copy( ray.direction );
                		return this;
                	},
                	at: function ( t, target ) {
                		if ( target === undefined ) {
                			console.warn( 'THREE.Ray: .at() target is now required' );
                			target = new Vector3();
                		}
                		return target.copy( this.direction ).multiplyScalar( t ).add( this.origin );
                	},
                	lookAt: function ( v ) {
                		this.direction.copy( v ).sub( this.origin ).normalize();
                		return this;
                	},
                	recast: function ( t ) {
                		this.origin.copy( this.at( t, _vector$3 ) );
                		return this;
                	},
                	closestPointToPoint: function ( point, target ) {
                		if ( target === undefined ) {
                			console.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );
                			target = new Vector3();
                		}
                		target.subVectors( point, this.origin );
                		var directionDistance = target.dot( this.direction );
                		if ( directionDistance < 0 ) {
                			return target.copy( this.origin );
                		}
                		return target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );
                	},
                	distanceToPoint: function ( point ) {
                		return Math.sqrt( this.distanceSqToPoint( point ) );
                	},
                	distanceSqToPoint: function ( point ) {
                		var directionDistance = _vector$3.subVectors( point, this.origin ).dot( this.direction );
                		if ( directionDistance < 0 ) {
                			return this.origin.distanceToSquared( point );
                		}
                		_vector$3.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );
                		return _vector$3.distanceToSquared( point );
                	},
                	distanceSqToSegment: function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {
                		_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
                		_segDir.copy( v1 ).sub( v0 ).normalize();
                		_diff.copy( this.origin ).sub( _segCenter );
                		var segExtent = v0.distanceTo( v1 ) * 0.5;
                		var a01 = - this.direction.dot( _segDir );
                		var b0 = _diff.dot( this.direction );
                		var b1 = - _diff.dot( _segDir );
                		var c = _diff.lengthSq();
                		var det = Math.abs( 1 - a01 * a01 );
                		var s0, s1, sqrDist, extDet;
                		if ( det > 0 ) {
                			s0 = a01 * b1 - b0;
                			s1 = a01 * b0 - b1;
                			extDet = segExtent * det;
                			if ( s0 >= 0 ) {
                				if ( s1 >= - extDet ) {
                					if ( s1 <= extDet ) {
                						var invDet = 1 / det;
                						s0 *= invDet;
                						s1 *= invDet;
                						sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;
                					} else {
                						s1 = segExtent;
                						s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
                						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
                					}
                				} else {
                					s1 = - segExtent;
                					s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
                					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
                				}
                			} else {
                				if ( s1 <= - extDet ) {
                					s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
                					s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
                					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
                				} else if ( s1 <= extDet ) {
                					s0 = 0;
                					s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
                					sqrDist = s1 * ( s1 + 2 * b1 ) + c;
                				} else {
                					s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
                					s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
                					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
                				}
                			}
                		} else {
                			s1 = ( a01 > 0 ) ? - segExtent : segExtent;
                			s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
                			sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
                		}
                		if ( optionalPointOnRay ) {
                			optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );
                		}
                		if ( optionalPointOnSegment ) {
                			optionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );
                		}
                		return sqrDist;
                	},
                	intersectSphere: function ( sphere, target ) {
                		_vector$3.subVectors( sphere.center, this.origin );
                		var tca = _vector$3.dot( this.direction );
                		var d2 = _vector$3.dot( _vector$3 ) - tca * tca;
                		var radius2 = sphere.radius * sphere.radius;
                		if ( d2 > radius2 ) return null;
                		var thc = Math.sqrt( radius2 - d2 );
                		var t0 = tca - thc;
                		var t1 = tca + thc;
                		if ( t0 < 0 && t1 < 0 ) return null;
                		if ( t0 < 0 ) return this.at( t1, target );
                		return this.at( t0, target );
                	},
                	intersectsSphere: function ( sphere ) {
                		return this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );
                	},
                	distanceToPlane: function ( plane ) {
                		var denominator = plane.normal.dot( this.direction );
                		if ( denominator === 0 ) {
                			if ( plane.distanceToPoint( this.origin ) === 0 ) {
                				return 0;
                			}
                			return null;
                		}
                		var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;
                		return t >= 0 ? t : null;
                	},
                	intersectPlane: function ( plane, target ) {
                		var t = this.distanceToPlane( plane );
                		if ( t === null ) {
                			return null;
                		}
                		return this.at( t, target );
                	},
                	intersectsPlane: function ( plane ) {
                		var distToPoint = plane.distanceToPoint( this.origin );
                		if ( distToPoint === 0 ) {
                			return true;
                		}
                		var denominator = plane.normal.dot( this.direction );
                		if ( denominator * distToPoint < 0 ) {
                			return true;
                		}
                		return false;
                	},
                	intersectBox: function ( box, target ) {
                		var tmin, tmax, tymin, tymax, tzmin, tzmax;
                		var invdirx = 1 / this.direction.x,
                			invdiry = 1 / this.direction.y,
                			invdirz = 1 / this.direction.z;
                		var origin = this.origin;
                		if ( invdirx >= 0 ) {
                			tmin = ( box.min.x - origin.x ) * invdirx;
                			tmax = ( box.max.x - origin.x ) * invdirx;
                		} else {
                			tmin = ( box.max.x - origin.x ) * invdirx;
                			tmax = ( box.min.x - origin.x ) * invdirx;
                		}
                		if ( invdiry >= 0 ) {
                			tymin = ( box.min.y - origin.y ) * invdiry;
                			tymax = ( box.max.y - origin.y ) * invdiry;
                		} else {
                			tymin = ( box.max.y - origin.y ) * invdiry;
                			tymax = ( box.min.y - origin.y ) * invdiry;
                		}
                		if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;
                		if ( tymin > tmin || tmin !== tmin ) tmin = tymin;
                		if ( tymax < tmax || tmax !== tmax ) tmax = tymax;
                		if ( invdirz >= 0 ) {
                			tzmin = ( box.min.z - origin.z ) * invdirz;
                			tzmax = ( box.max.z - origin.z ) * invdirz;
                		} else {
                			tzmin = ( box.max.z - origin.z ) * invdirz;
                			tzmax = ( box.min.z - origin.z ) * invdirz;
                		}
                		if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;
                		if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;
                		if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;
                		if ( tmax < 0 ) return null;
                		return this.at( tmin >= 0 ? tmin : tmax, target );
                	},
                	intersectsBox: function ( box ) {
                		return this.intersectBox( box, _vector$3 ) !== null;
                	},
                	intersectTriangle: function ( a, b, c, backfaceCulling, target ) {
                		_edge1.subVectors( b, a );
                		_edge2.subVectors( c, a );
                		_normal.crossVectors( _edge1, _edge2 );
                		var DdN = this.direction.dot( _normal );
                		var sign;
                		if ( DdN > 0 ) {
                			if ( backfaceCulling ) return null;
                			sign = 1;
                		} else if ( DdN < 0 ) {
                			sign = - 1;
                			DdN = - DdN;
                		} else {
                			return null;
                		}
                		_diff.subVectors( this.origin, a );
                		var DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );
                		if ( DdQxE2 < 0 ) {
                			return null;
                		}
                		var DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );
                		if ( DdE1xQ < 0 ) {
                			return null;
                		}
                		if ( DdQxE2 + DdE1xQ > DdN ) {
                			return null;
                		}
                		var QdN = - sign * _diff.dot( _normal );
                		if ( QdN < 0 ) {
                			return null;
                		}
                		return this.at( QdN / DdN, target );
                	},
                	applyMatrix4: function ( matrix4 ) {
                		this.origin.applyMatrix4( matrix4 );
                		this.direction.transformDirection( matrix4 );
                		return this;
                	},
                	equals: function ( ray ) {
                		return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );
                	}
                } );
                var _vector1 = new Vector3();
                var _vector2 = new Vector3();
                var _normalMatrix = new Matrix3();
                function Plane( normal, constant ) {
                	this.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );
                	this.constant = ( constant !== undefined ) ? constant : 0;
                }
                Object.assign( Plane.prototype, {
                	isPlane: true,
                	set: function ( normal, constant ) {
                		this.normal.copy( normal );
                		this.constant = constant;
                		return this;
                	},
                	setComponents: function ( x, y, z, w ) {
                		this.normal.set( x, y, z );
                		this.constant = w;
                		return this;
                	},
                	setFromNormalAndCoplanarPoint: function ( normal, point ) {
                		this.normal.copy( normal );
                		this.constant = - point.dot( this.normal );
                		return this;
                	},
                	setFromCoplanarPoints: function ( a, b, c ) {
                		var normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();
                		this.setFromNormalAndCoplanarPoint( normal, a );
                		return this;
                	},
                	clone: function () {
                		return new this.constructor().copy( this );
                	},
                	copy: function ( plane ) {
                		this.normal.copy( plane.normal );
                		this.constant = plane.constant;
                		return this;
                	},
                	normalize: function () {
                		var inverseNormalLength = 1.0 / this.normal.length();
                		this.normal.multiplyScalar( inverseNormalLength );
                		this.constant *= inverseNormalLength;
                		return this;
                	},
                	negate: function () {
                		this.constant *= - 1;
                		this.normal.negate();
                		return this;
                	},
                	distanceToPoint: function ( point ) {
                		return this.normal.dot( point ) + this.constant;
                	},
                	distanceToSphere: function ( sphere ) {
                		return this.distanceToPoint( sphere.center ) - sphere.radius;
                	},
                	projectPoint: function ( point, target ) {
                		if ( target === undefined ) {
                			console.warn( 'THREE.Plane: .projectPoint() target is now required' );
                			target = new Vector3();
                		}
                		return target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );
                	},
                	intersectLine: function ( line, target ) {
                		if ( target === undefined ) {
                			console.warn( 'THREE.Plane: .intersectLine() target is now required' );
                			target = new Vector3();
                		}
                		var direction = line.delta( _vector1 );
                		var denominator = this.normal.dot( direction );
                		if ( denominator === 0 ) {
                			if ( this.distanceToPoint( line.start ) === 0 ) {
                				return target.copy( line.start );
                			}
                			return undefined;
                		}
                		var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;
                		if ( t < 0 || t > 1 ) {
                			return undefined;
                		}
                		return target.copy( direction ).multiplyScalar( t ).add( line.start );
                	},
                	intersectsLine: function ( line ) {
                		var startSign = this.distanceToPoint( line.start );
                		var endSign = this.distanceToPoint( line.end );
                		return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );
                	},
                	intersectsBox: function ( box ) {
                		return box.intersectsPlane( this );
                	},
                	intersectsSphere: function ( sphere ) {
                		return sphere.intersectsPlane( this );
                	},
                	coplanarPoint: function ( target ) {
                		if ( target === undefined ) {
                			console.warn( 'THREE.Plane: .coplanarPoint() target is now required' );
                			target = new Vector3();
                		}
                		return target.copy( this.normal ).multiplyScalar( - this.constant );
                	},
                	applyMatrix4: function ( matrix, optionalNormalMatrix ) {
                		var normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );
                		var referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );
                		var normal = this.normal.applyMatrix3( normalMatrix ).normalize();
                		this.constant = - referencePoint.dot( normal );
                		return this;
                	},
                	translate: function ( offset ) {
                		this.constant -= offset.dot( this.normal );
                		return this;
                	},
                	equals: function ( plane ) {
                		return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );
                	}
                } );
                var _v0$1 = new Vector3();
                var _v1$3 = new Vector3();
                var _v2$1 = new Vector3();
                var _v3 = new Vector3();
                var _vab = new Vector3();
                var _vac = new Vector3();
                var _vbc = new Vector3();
                var _vap = new Vector3();
                var _vbp = new Vector3();
                var _vcp = new Vector3();
                function Triangle( a, b, c ) {
                	this.a = ( a !== undefined ) ? a : new Vector3();
                	this.b = ( b !== undefined ) ? b : new Vector3();
                	this.c = ( c !== undefined ) ? c : new Vector3();
                }
                Object.assign( Triangle, {
                	getNormal: function ( a, b, c, target ) {
                		if ( target === undefined ) {
                			console.warn( 'THREE.Triangle: .getNormal() target is now required' );
                			target = new Vector3();
                		}
                		target.subVectors( c, b );
                		_v0$1.subVectors( a, b );
                		target.cross( _v0$1 );
                		var targetLengthSq = target.lengthSq();
                		if ( targetLengthSq > 0 ) {
                			return target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );
                		}
                		return target.set( 0, 0, 0 );
                	},
                	getBarycoord: function ( point, a, b, c, target ) {
                		_v0$1.subVectors( c, a );
                		_v1$3.subVectors( b, a );
                		_v2$1.subVectors( point, a );
                		var dot00 = _v0$1.dot( _v0$1 );
                		var dot01 = _v0$1.dot( _v1$3 );
                		var dot02 = _v0$1.dot( _v2$1 );
                		var dot11 = _v1$3.dot( _v1$3 );
                		var dot12 = _v1$3.dot( _v2$1 );
                		var denom = ( dot00 * dot11 - dot01 * dot01 );
                		if ( target === undefined ) {
                			console.warn( 'THREE.Triangle: .getBarycoord() target is now required' );
                			target = new Vector3();
                		}
                		if ( denom === 0 ) {
                			return target.set( - 2, - 1, - 1 );
                		}
                		var invDenom = 1 / denom;
                		var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
                		var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;
                		return target.set( 1 - u - v, v, u );
                	},
                	containsPoint: function ( point, a, b, c ) {
                		Triangle.getBarycoord( point, a, b, c, _v3 );
                		return ( _v3.x >= 0 ) && ( _v3.y >= 0 ) && ( ( _v3.x + _v3.y ) <= 1 );
                	},
                	getUV: function ( point, p1, p2, p3, uv1, uv2, uv3, target ) {
                		this.getBarycoord( point, p1, p2, p3, _v3 );
                		target.set( 0, 0 );
                		target.addScaledVector( uv1, _v3.x );
                		target.addScaledVector( uv2, _v3.y );
                		target.addScaledVector( uv3, _v3.z );
                		return target;
                	},
                	isFrontFacing: function ( a, b, c, direction ) {
                		_v0$1.subVectors( c, b );
                		_v1$3.subVectors( a, b );
                		return ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;
                	}
                } );
                Object.assign( Triangle.prototype, {
                	set: function ( a, b, c ) {
                		this.a.copy( a );
                		this.b.copy( b );
                		this.c.copy( c );
                		return this;
                	},
                	setFromPointsAndIndices: function ( points, i0, i1, i2 ) {
                		this.a.copy( points[ i0 ] );
                		this.b.copy( points[ i1 ] );
                		this.c.copy( points[ i2 ] );
                		return this;
                	},
                	clone: function () {
                		return new this.constructor().copy( this );
                	},
                	copy: function ( triangle ) {
                		this.a.copy( triangle.a );
                		this.b.copy( triangle.b );
                		this.c.copy( triangle.c );
                		return this;
                	},
                	getArea: function () {
                		_v0$1.subVectors( this.c, this.b );
                		_v1$3.subVectors( this.a, this.b );
                		return _v0$1.cross( _v1$3 ).length() * 0.5;
                	},
                	getMidpoint: function ( target ) {
                		if ( target === undefined ) {
                			console.warn( 'THREE.Triangle: .getMidpoint() target is now required' );
                			target = new Vector3();
                		}
                		return target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );
                	},
                	getNormal: function ( target ) {
                		return Triangle.getNormal( this.a, this.b, this.c, target );
                	},
                	getPlane: function ( target ) {
                		if ( target === undefined ) {
                			console.warn( 'THREE.Triangle: .getPlane() target is now required' );
                			target = new Plane();
                		}
                		return target.setFromCoplanarPoints( this.a, this.b, this.c );
                	},
                	getBarycoord: function ( point, target ) {
                		return Triangle.getBarycoord( point, this.a, this.b, this.c, target );
                	},
                	getUV: function ( point, uv1, uv2, uv3, target ) {
                		return Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );
                	},
                	containsPoint: function ( point ) {
                		return Triangle.containsPoint( point, this.a, this.b, this.c );
                	},
                	isFrontFacing: function ( direction ) {
                		return Triangle.isFrontFacing( this.a, this.b, this.c, direction );
                	},
                	intersectsBox: function ( box ) {
                		return box.intersectsTriangle( this );
                	},
                	closestPointToPoint: function ( p, target ) {
                		if ( target === undefined ) {
                			console.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );
                			target = new Vector3();
                		}
                		var a = this.a, b = this.b, c = this.c;
                		var v, w;
                		_vab.subVectors( b, a );
                		_vac.subVectors( c, a );
                		_vap.subVectors( p, a );
                		var d1 = _vab.dot( _vap );
                		var d2 = _vac.dot( _vap );
                		if ( d1 <= 0 && d2 <= 0 ) {
                			return target.copy( a );
                		}
                		_vbp.subVectors( p, b );
                		var d3 = _vab.dot( _vbp );
                		var d4 = _vac.dot( _vbp );
                		if ( d3 >= 0 && d4 <= d3 ) {
                			return target.copy( b );
                		}
                		var vc = d1 * d4 - d3 * d2;
                		if ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {
                			v = d1 / ( d1 - d3 );
                			return target.copy( a ).addScaledVector( _vab, v );
                		}
                		_vcp.subVectors( p, c );
                		var d5 = _vab.dot( _vcp );
                		var d6 = _vac.dot( _vcp );
                		if ( d6 >= 0 && d5 <= d6 ) {
                			return target.copy( c );
                		}
                		var vb = d5 * d2 - d1 * d6;
                		if ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {
                			w = d2 / ( d2 - d6 );
                			return target.copy( a ).addScaledVector( _vac, w );
                		}
                		var va = d3 * d6 - d5 * d4;
                		if ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {
                			_vbc.subVectors( c, b );
                			w = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );
                			return target.copy( b ).addScaledVector( _vbc, w );
                		}
                		var denom = 1 / ( va + vb + vc );
                		v = vb * denom;
                		w = vc * denom;
                		return target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );
                	},
                	equals: function ( triangle ) {
                		return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );
                	}
                } );
                var _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
                	'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
                	'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
                	'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
                	'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
                	'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
                	'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
                	'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
                	'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
                	'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
                	'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
                	'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
                	'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
                	'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
                	'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
                	'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
                	'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
                	'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
                	'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
                	'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
                	'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
                	'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
                	'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
                	'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };
                var _hslA = { h: 0, s: 0, l: 0 };
                var _hslB = { h: 0, s: 0, l: 0 };
                function Color( r, g, b ) {
                	if ( g === undefined && b === undefined ) {
                		return this.set( r );
                	}
                	return this.setRGB( r, g, b );
                }
                function hue2rgb( p, q, t ) {
                	if ( t < 0 ) t += 1;
                	if ( t > 1 ) t -= 1;
                	if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
                	if ( t < 1 / 2 ) return q;
                	if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
                	return p;
                }
                function SRGBToLinear( c ) {
                	return ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );
                }
                function LinearToSRGB( c ) {
                	return ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;
                }
                Object.assign( Color.prototype, {
                	isColor: true,
                	r: 1, g: 1, b: 1,
                	set: function ( value ) {
                		if ( value && value.isColor ) {
                			this.copy( value );
                		} else if ( typeof value === 'number' ) {
                			this.setHex( value );
                		} else if ( typeof value === 'string' ) {
                			this.setStyle( value );
                		}
                		return this;
                	},
                	setScalar: function ( scalar ) {
                		this.r = scalar;
                		this.g = scalar;
                		this.b = scalar;
                		return this;
                	},
                	setHex: function ( hex ) {
                		hex = Math.floor( hex );
                		this.r = ( hex >> 16 & 255 ) / 255;
                		this.g = ( hex >> 8 & 255 ) / 255;
                		this.b = ( hex & 255 ) / 255;
                		return this;
                	},
                	setRGB: function ( r, g, b ) {
                		this.r = r;
                		this.g = g;
                		this.b = b;
                		return this;
                	},
                	setHSL: function ( h, s, l ) {
                		h = _Math.euclideanModulo( h, 1 );
                		s = _Math.clamp( s, 0, 1 );
                		l = _Math.clamp( l, 0, 1 );
                		if ( s === 0 ) {
                			this.r = this.g = this.b = l;
                		} else {
                			var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
                			var q = ( 2 * l ) - p;
                			this.r = hue2rgb( q, p, h + 1 / 3 );
                			this.g = hue2rgb( q, p, h );
                			this.b = hue2rgb( q, p, h - 1 / 3 );
                		}
                		return this;
                	},
                	setStyle: function ( style ) {
                		function handleAlpha( string ) {
                			if ( string === undefined ) return;
                			if ( parseFloat( string ) < 1 ) {
                				console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );
                			}
                		}
                		var m;
                		if ( m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec( style ) ) {
                			var color;
                			var name = m[ 1 ];
                			var components = m[ 2 ];
                			switch ( name ) {
                				case 'rgb':
                				case 'rgba':
                					if ( color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {
                						this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
                						this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
                						this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;
                						handleAlpha( color[ 5 ] );
                						return this;
                					}
                					if ( color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {
                						this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
                						this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
                						this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;
                						handleAlpha( color[ 5 ] );
                						return this;
                					}
                					break;
                				case 'hsl':
                				case 'hsla':
                					if ( color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {
                						var h = parseFloat( color[ 1 ] ) / 360;
                						var s = parseInt( color[ 2 ], 10 ) / 100;
                						var l = parseInt( color[ 3 ], 10 ) / 100;
                						handleAlpha( color[ 5 ] );
                						return this.setHSL( h, s, l );
                					}
                					break;
                			}
                		} else if ( m = /^\#([A-Fa-f0-9]+)$/.exec( style ) ) {
                			var hex = m[ 1 ];
                			var size = hex.length;
                			if ( size === 3 ) {
                				this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
                				this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
                				this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;
                				return this;
                			} else if ( size === 6 ) {
                				this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
                				this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
                				this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;
                				return this;
                			}
                		}
                		if ( style && style.length > 0 ) {
                			return this.setColorName( style );
                		}
                		return this;
                	},
                	setColorName: function ( style ) {
                		var hex = _colorKeywords[ style ];
                		if ( hex !== undefined ) {
                			this.setHex( hex );
                		} else {
                			console.warn( 'THREE.Color: Unknown color ' + style );
                		}
                		return this;
                	},
                	clone: function () {
                		return new this.constructor( this.r, this.g, this.b );
                	},
                	copy: function ( color ) {
                		this.r = color.r;
                		this.g = color.g;
                		this.b = color.b;
                		return this;
                	},
                	copyGammaToLinear: function ( color, gammaFactor ) {
                		if ( gammaFactor === undefined ) gammaFactor = 2.0;
                		this.r = Math.pow( color.r, gammaFactor );
                		this.g = Math.pow( color.g, gammaFactor );
                		this.b = Math.pow( color.b, gammaFactor );
                		return this;
                	},
                	copyLinearToGamma: function ( color, gammaFactor ) {
                		if ( gammaFactor === undefined ) gammaFactor = 2.0;
                		var safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;
                		this.r = Math.pow( color.r, safeInverse );
                		this.g = Math.pow( color.g, safeInverse );
                		this.b = Math.pow( color.b, safeInverse );
                		return this;
                	},
                	convertGammaToLinear: function ( gammaFactor ) {
                		this.copyGammaToLinear( this, gammaFactor );
                		return this;
                	},
                	convertLinearToGamma: function ( gammaFactor ) {
                		this.copyLinearToGamma( this, gammaFactor );
                		return this;
                	},
                	copySRGBToLinear: function ( color ) {
                		this.r = SRGBToLinear( color.r );
                		this.g = SRGBToLinear( color.g );
                		this.b = SRGBToLinear( color.b );
                		return this;
                	},
                	copyLinearToSRGB: function ( color ) {
                		this.r = LinearToSRGB( color.r );
                		this.g = LinearToSRGB( color.g );
                		this.b = LinearToSRGB( color.b );
                		return this;
                	},
                	convertSRGBToLinear: function () {
                		this.copySRGBToLinear( this );
                		return this;
                	},
                	convertLinearToSRGB: function () {
                		this.copyLinearToSRGB( this );
                		return this;
                	},
                	getHex: function () {
                		return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;
                	},
                	getHexString: function () {
                		return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );
                	},
                	getHSL: function ( target ) {
                		if ( target === undefined ) {
                			console.warn( 'THREE.Color: .getHSL() target is now required' );
                			target = { h: 0, s: 0, l: 0 };
                		}
                		var r = this.r, g = this.g, b = this.b;
                		var max = Math.max( r, g, b );
                		var min = Math.min( r, g, b );
                		var hue, saturation;
                		var lightness = ( min + max ) / 2.0;
                		if ( min === max ) {
                			hue = 0;
                			saturation = 0;
                		} else {
                			var delta = max - min;
                			saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );
                			switch ( max ) {
                				case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
                				case g: hue = ( b - r ) / delta + 2; break;
                				case b: hue = ( r - g ) / delta + 4; break;
                			}
                			hue /= 6;
                		}
                		target.h = hue;
                		target.s = saturation;
                		target.l = lightness;
                		return target;
                	},
                	getStyle: function () {
                		return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';
                	},
                	offsetHSL: function ( h, s, l ) {
                		this.getHSL( _hslA );
                		_hslA.h += h; _hslA.s += s; _hslA.l += l;
                		this.setHSL( _hslA.h, _hslA.s, _hslA.l );
                		return this;
                	},
                	add: function ( color ) {
                		this.r += color.r;
                		this.g += color.g;
                		this.b += color.b;
                		return this;
                	},
                	addColors: function ( color1, color2 ) {
                		this.r = color1.r + color2.r;
                		this.g = color1.g + color2.g;
                		this.b = color1.b + color2.b;
                		return this;
                	},
                	addScalar: function ( s ) {
                		this.r += s;
                		this.g += s;
                		this.b += s;
                		return this;
                	},
                	sub: function ( color ) {
                		this.r = Math.max( 0, this.r - color.r );
                		this.g = Math.max( 0, this.g - color.g );
                		this.b = Math.max( 0, this.b - color.b );
                		return this;
                	},
                	multiply: function ( color ) {
                		this.r *= color.r;
                		this.g *= color.g;
                		this.b *= color.b;
                		return this;
                	},
                	multiplyScalar: function ( s ) {
                		this.r *= s;
                		this.g *= s;
                		this.b *= s;
                		return this;
                	},
                	lerp: function ( color, alpha ) {
                		this.r += ( color.r - this.r ) * alpha;
                		this.g += ( color.g - this.g ) * alpha;
                		this.b += ( color.b - this.b ) * alpha;
                		return this;
                	},
                	lerpHSL: function ( color, alpha ) {
                		this.getHSL( _hslA );
                		color.getHSL( _hslB );
                		var h = _Math.lerp( _hslA.h, _hslB.h, alpha );
                		var s = _Math.lerp( _hslA.s, _hslB.s, alpha );
                		var l = _Math.lerp( _hslA.l, _hslB.l, alpha );
                		this.setHSL( h, s, l );
                		return this;
                	},
                	equals: function ( c ) {
                		return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );
                	},
                	fromArray: function ( array, offset ) {
                		if ( offset === undefined ) offset = 0;
                		this.r = array[ offset ];
                		this.g = array[ offset + 1 ];
                		this.b = array[ offset + 2 ];
                		return this;
                	},
                	toArray: function ( array, offset ) {
                		if ( array === undefined ) array = [];
                		if ( offset === undefined ) offset = 0;
                		array[ offset ] = this.r;
                		array[ offset + 1 ] = this.g;
                		array[ offset + 2 ] = this.b;
                		return array;
                	},
                	toJSON: function () {
                		return this.getHex();
                	}
                } );
                Color.NAMES = _colorKeywords;
                function Face3( a, b, c, normal, color, materialIndex ) {
                	this.a = a;
                	this.b = b;
                	this.c = c;
                	this.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();
                	this.vertexNormals = Array.isArray( normal ) ? normal : [];
                	this.color = ( color && color.isColor ) ? color : new Color();
                	this.vertexColors = Array.isArray( color ) ? color : [];
                	this.materialIndex = materialIndex !== undefined ? materialIndex : 0;
                }
                Object.assign( Face3.prototype, {
                	clone: function () {
                		return new this.constructor().copy( this );
                	},
                	copy: function ( source ) {
                		this.a = source.a;
                		this.b = source.b;
                		this.c = source.c;
                		this.normal.copy( source.normal );
                		this.color.copy( source.color );
                		this.materialIndex = source.materialIndex;
                		for ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {
                			this.vertexNormals[ i ] = source.vertexNormals[ i ].clone();
                		}
                		for ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {
                			this.vertexColors[ i ] = source.vertexColors[ i ].clone();
                		}
                		return this;
                	}
                } );
                var materialId = 0;
                function Material() {
                	Object.defineProperty( this, 'id', { value: materialId ++ } );
                	this.uuid = _Math.generateUUID();
                	this.name = '';
                	this.type = 'Material';
                	this.fog = true;
                	this.blending = NormalBlending;
                	this.side = FrontSide;
                	this.flatShading = false;
                	this.vertexTangents = false;
                	this.vertexColors = NoColors;
                	this.opacity = 1;
                	this.transparent = false;
                	this.blendSrc = SrcAlphaFactor;
                	this.blendDst = OneMinusSrcAlphaFactor;
                	this.blendEquation = AddEquation;
                	this.blendSrcAlpha = null;
                	this.blendDstAlpha = null;
                	this.blendEquationAlpha = null;
                	this.depthFunc = LessEqualDepth;
                	this.depthTest = true;
                	this.depthWrite = true;
                	this.stencilWriteMask = 0xff;
                	this.stencilFunc = AlwaysStencilFunc;
                	this.stencilRef = 0;
                	this.stencilFuncMask = 0xff;
                	this.stencilFail = KeepStencilOp;
                	this.stencilZFail = KeepStencilOp;
                	this.stencilZPass = KeepStencilOp;
                	this.stencilWrite = false;
                	this.clippingPlanes = null;
                	this.clipIntersection = false;
                	this.clipShadows = false;
                	this.shadowSide = null;
                	this.colorWrite = true;
                	this.precision = null;
                	this.polygonOffset = false;
                	this.polygonOffsetFactor = 0;
                	this.polygonOffsetUnits = 0;
                	this.dithering = false;
                	this.alphaTest = 0;
                	this.premultipliedAlpha = false;
                	this.visible = true;
                	this.toneMapped = true;
                	this.userData = {};
                	this.version = 0;
                }
                Material.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {
                	constructor: Material,
                	isMaterial: true,
                	onBeforeCompile: function () {},
                	setValues: function ( values ) {
                		if ( values === undefined ) return;
                		for ( var key in values ) {
                			var newValue = values[ key ];
                			if ( newValue === undefined ) {
                				console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
                				continue;
                			}
                			if ( key === 'shading' ) {
                				console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
                				this.flatShading = ( newValue === FlatShading ) ? true : false;
                				continue;
                			}
                			var currentValue = this[ key ];
                			if ( currentValue === undefined ) {
                				console.warn( "THREE." + this.type + ": '" + key + "' is not a property of this material." );
                				continue;
                			}
                			if ( currentValue && currentValue.isColor ) {
                				currentValue.set( newValue );
                			} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {
                				currentValue.copy( newValue );
                			} else {
                				this[ key ] = newValue;
                			}
                		}
                	},
                	toJSON: function ( meta ) {
                		var isRoot = ( meta === undefined || typeof meta === 'string' );
                		if ( isRoot ) {
                			meta = {
                				textures: {},
                				images: {}
                			};
                		}
                		var data = {
                			metadata: {
                				version: 4.5,
                				type: 'Material',
                				generator: 'Material.toJSON'
                			}
                		};
                		data.uuid = this.uuid;
                		data.type = this.type;
                		if ( this.name !== '' ) data.name = this.name;
                		if ( this.color && this.color.isColor ) data.color = this.color.getHex();
                		if ( this.roughness !== undefined ) data.roughness = this.roughness;
                		if ( this.metalness !== undefined ) data.metalness = this.metalness;
                		if ( this.sheen && this.sheen.isColor ) data.sheen = this.sheen.getHex();
                		if ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();
                		if ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;
                		if ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();
                		if ( this.shininess !== undefined ) data.shininess = this.shininess;
                		if ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;
                		if ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;
                		if ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {
                			data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;
                			data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
                		}
                		if ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;
                		if ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;
                		if ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;
                		if ( this.lightMap && this.lightMap.isTexture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;
                		if ( this.aoMap && this.aoMap.isTexture ) {
                			data.aoMap = this.aoMap.toJSON( meta ).uuid;
                			data.aoMapIntensity = this.aoMapIntensity;
                		}
                		if ( this.bumpMap && this.bumpMap.isTexture ) {
                			data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
                			data.bumpScale = this.bumpScale;
                		}
                		if ( this.normalMap && this.normalMap.isTexture ) {
                			data.normalMap = this.normalMap.toJSON( meta ).uuid;
                			data.normalMapType = this.normalMapType;
                			data.normalScale = this.normalScale.toArray();
                		}
                		if ( this.displacementMap && this.displacementMap.isTexture ) {
                			data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
                			data.displacementScale = this.displacementScale;
                			data.displacementBias = this.displacementBias;
                		}
                		if ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
                		if ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;
                		if ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
                		if ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;
                		if ( this.envMap && this.envMap.isTexture ) {
                			data.envMap = this.envMap.toJSON( meta ).uuid;
                			data.reflectivity = this.reflectivity;
                			data.refractionRatio = this.refractionRatio;
                			if ( this.combine !== undefined ) data.combine = this.combine;
                			if ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;
                		}
                		if ( this.gradientMap && this.gradientMap.isTexture ) {
                			data.gradientMap = this.gradientMap.toJSON( meta ).uuid;
                		}
                		if ( this.size !== undefined ) data.size = this.size;
                		if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;
                		if ( this.blending !== NormalBlending ) data.blending = this.blending;
                		if ( this.flatShading === true ) data.flatShading = this.flatShading;
                		if ( this.side !== FrontSide ) data.side = this.side;
                		if ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;
                		if ( this.opacity < 1 ) data.opacity = this.opacity;
                		if ( this.transparent === true ) data.transparent = this.transparent;
                		data.depthFunc = this.depthFunc;
                		data.depthTest = this.depthTest;
                		data.depthWrite = this.depthWrite;
                		data.stencilWrite = this.stencilWrite;
                		data.stencilWriteMask = this.stencilWriteMask;
                		data.stencilFunc = this.stencilFunc;
                		data.stencilRef = this.stencilRef;
                		data.stencilFuncMask = this.stencilFuncMask;
                		data.stencilFail = this.stencilFail;
                		data.stencilZFail = this.stencilZFail;
                		data.stencilZPass = this.stencilZPass;
                		if ( this.rotation && this.rotation !== 0 ) data.rotation = this.rotation;
                		if ( this.polygonOffset === true ) data.polygonOffset = true;
                		if ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;
                		if ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;
                		if ( this.linewidth && this.linewidth !== 1 ) data.linewidth = this.linewidth;
                		if ( this.dashSize !== undefined ) data.dashSize = this.dashSize;
                		if ( this.gapSize !== undefined ) data.gapSize = this.gapSize;
                		if ( this.scale !== undefined ) data.scale = this.scale;
                		if ( this.dithering === true ) data.dithering = true;
                		if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
                		if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;
                		if ( this.wireframe === true ) data.wireframe = this.wireframe;
                		if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;
                		if ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;
                		if ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;
                		if ( this.morphTargets === true ) data.morphTargets = true;
                		if ( this.morphNormals === true ) data.morphNormals = true;
                		if ( this.skinning === true ) data.skinning = true;
                		if ( this.visible === false ) data.visible = false;
                		if ( this.toneMapped === false ) data.toneMapped = false;
                		if ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;
                		function extractFromCache( cache ) {
                			var values = [];
                			for ( var key in cache ) {
                				var data = cache[ key ];
                				delete data.metadata;
                				values.push( data );
                			}
                			return values;
                		}
                		if ( isRoot ) {
                			var textures = extractFromCache( meta.textures );
                			var images = extractFromCache( meta.images );
                			if ( textures.length > 0 ) data.textures = textures;
                			if ( images.length > 0 ) data.images = images;
                		}
                		return data;
                	},
                	clone: function () {
                		return new this.constructor().copy( this );
                	},
                	copy: function ( source ) {
                		this.name = source.name;
                		this.fog = source.fog;
                		this.blending = source.blending;
                		this.side = source.side;
                		this.flatShading = source.flatShading;
                		this.vertexTangents = source.vertexTangents;
                		this.vertexColors = source.vertexColors;
                		this.opacity = source.opacity;
                		this.transparent = source.transparent;
                		this.blendSrc = source.blendSrc;
                		this.blendDst = source.blendDst;
                		this.blendEquation = source.blendEquation;
                		this.blendSrcAlpha = source.blendSrcAlpha;
                		this.blendDstAlpha = source.blendDstAlpha;
                		this.blendEquationAlpha = source.blendEquationAlpha;
                		this.depthFunc = source.depthFunc;
                		this.depthTest = source.depthTest;
                		this.depthWrite = source.depthWrite;
                		this.stencilWriteMask = source.stencilWriteMask;
                		this.stencilFunc = source.stencilFunc;
                		this.stencilRef = source.stencilRef;
                		this.stencilFuncMask = source.stencilFuncMask;
                		this.stencilFail = source.stencilFail;
                		this.stencilZFail = source.stencilZFail;
                		this.stencilZPass = source.stencilZPass;
                		this.stencilWrite = source.stencilWrite;
                		var srcPlanes = source.clippingPlanes,
                			dstPlanes = null;
                		if ( srcPlanes !== null ) {
                			var n = srcPlanes.length;
                			dstPlanes = new Array( n );
                			for ( var i = 0; i !== n; ++ i )
                				dstPlanes[ i ] = srcPlanes[ i ].clone();
                		}
                		this.clippingPlanes = dstPlanes;
                		this.clipIntersection = source.clipIntersection;
                		this.clipShadows = source.clipShadows;
                		this.shadowSide = source.shadowSide;
                		this.colorWrite = source.colorWrite;
                		this.precision = source.precision;
                		this.polygonOffset = source.polygonOffset;
                		this.polygonOffsetFactor = source.polygonOffsetFactor;
                		this.polygonOffsetUnits = source.polygonOffsetUnits;
                		this.dithering = source.dithering;
                		this.alphaTest = source.alphaTest;
                		this.premultipliedAlpha = source.premultipliedAlpha;
                		this.visible = source.visible;
                		this.toneMapped = source.toneMapped;
                		this.userData = JSON.parse( JSON.stringify( source.userData ) );
                		return this;
                	},
                	dispose: function () {
                		this.dispatchEvent( { type: 'dispose' } );
                	}
                } );
                Object.defineProperty( Material.prototype, 'needsUpdate', {
                	set: function ( value ) {
                		if ( value === true ) this.version ++;
                	}
                } );
                function MeshBasicMaterial( parameters ) {
                	Material.call( this );
                	this.type = 'MeshBasicMaterial';
                	this.color = new Color( 0xffffff );
                	this.map = null;
                	this.lightMap = null;
                	this.lightMapIntensity = 1.0;
                	this.aoMap = null;
                	this.aoMapIntensity = 1.0;
                	this.specularMap = null;
                	this.alphaMap = null;
                	this.envMap = null;
                	this.combine = MultiplyOperation;
                	this.reflectivity = 1;
                	this.refractionRatio = 0.98;
                	this.wireframe = false;
                	this.wireframeLinewidth = 1;
                	this.wireframeLinecap = 'round';
                	this.wireframeLinejoin = 'round';
                	this.skinning = false;
                	this.morphTargets = false;
                	this.setValues( parameters );
                }
                MeshBasicMaterial.prototype = Object.create( Material.prototype );
                MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;
                MeshBasicMaterial.prototype.isMeshBasicMaterial = true;
                MeshBasicMaterial.prototype.copy = function ( source ) {
                	Material.prototype.copy.call( this, source );
                	this.color.copy( source.color );
                	this.map = source.map;
                	this.lightMap = source.lightMap;
                	this.lightMapIntensity = source.lightMapIntensity;
                	this.aoMap = source.aoMap;
                	this.aoMapIntensity = source.aoMapIntensity;
                	this.specularMap = source.specularMap;
                	this.alphaMap = source.alphaMap;
                	this.envMap = source.envMap;
                	this.combine = source.combine;
                	this.reflectivity = source.reflectivity;
                	this.refractionRatio = source.refractionRatio;
                	this.wireframe = source.wireframe;
                	this.wireframeLinewidth = source.wireframeLinewidth;
                	this.wireframeLinecap = source.wireframeLinecap;
                	this.wireframeLinejoin = source.wireframeLinejoin;
                	this.skinning = source.skinning;
                	this.morphTargets = source.morphTargets;
                	return this;
                };
                function BufferAttribute( array, itemSize, normalized ) {
                	if ( Array.isArray( array ) ) {
                		throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );
                	}
                	this.name = '';
                	this.array = array;
                	this.itemSize = itemSize;
                	this.count = array !== undefined ? array.length / itemSize : 0;
                	this.normalized = normalized === true;
                	this.usage = StaticDrawUsage;
                	this.updateRange = { offset: 0, count: - 1 };
                	this.version = 0;
                }
                Object.defineProperty( BufferAttribute.prototype, 'needsUpdate', {
                	set: function ( value ) {
                		if ( value === true ) this.version ++;
                	}
                } );
                Object.assign( BufferAttribute.prototype, {
                	isBufferAttribute: true,
                	onUploadCallback: function () {},
                	setUsage: function ( value ) {
                		this.usage = value;
                		return this;
                	},
                	copy: function ( source ) {
                		this.name = source.name;
                		this.array = new source.array.constructor( source.array );
                		this.itemSize = source.itemSize;
                		this.count = source.count;
                		this.normalized = source.normalized;
                		this.usage = source.usage;
                		return this;
                	},
                	copyAt: function ( index1, attribute, index2 ) {
                		index1 *= this.itemSize;
                		index2 *= attribute.itemSize;
                		for ( var i = 0, l = this.itemSize; i < l; i ++ ) {
                			this.array[ index1 + i ] = attribute.array[ index2 + i ];
                		}
                		return this;
                	},
                	copyArray: function ( array ) {
                		this.array.set( array );
                		return this;
                	},
                	copyColorsArray: function ( colors ) {
                		var array = this.array, offset = 0;
                		for ( var i = 0, l = colors.length; i < l; i ++ ) {
                			var color = colors[ i ];
                			if ( color === undefined ) {
                				console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
                				color = new Color();
                			}
                			array[ offset ++ ] = color.r;
                			array[ offset ++ ] = color.g;
                			array[ offset ++ ] = color.b;
                		}
                		return this;
                	},
                	copyVector2sArray: function ( vectors ) {
                		var array = this.array, offset = 0;
                		for ( var i = 0, l = vectors.length; i < l; i ++ ) {
                			var vector = vectors[ i ];
                			if ( vector === undefined ) {
                				console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
                				vector = new Vector2();
                			}
                			array[ offset ++ ] = vector.x;
                			array[ offset ++ ] = vector.y;
                		}
                		return this;
                	},
                	copyVector3sArray: function ( vectors ) {
                		var array = this.array, offset = 0;
                		for ( var i = 0, l = vectors.length; i < l; i ++ ) {
                			var vector = vectors[ i ];
                			if ( vector === undefined ) {
                				console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
                				vector = new Vector3();
                			}
                			array[ offset ++ ] = vector.x;
                			array[ offset ++ ] = vector.y;
                			array[ offset ++ ] = vector.z;
                		}
                		return this;
                	},
                	copyVector4sArray: function ( vectors ) {
                		var array = this.array, offset = 0;
                		for ( var i = 0, l = vectors.length; i < l; i ++ ) {
                			var vector = vectors[ i ];
                			if ( vector === undefined ) {
                				console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
                				vector = new Vector4();
                			}
                			array[ offset ++ ] = vector.x;
                			array[ offset ++ ] = vector.y;
                			array[ offset ++ ] = vector.z;
                			array[ offset ++ ] = vector.w;
                		}
                		return this;
                	},
                	set: function ( value, offset ) {
                		if ( offset === undefined ) offset = 0;
                		this.array.set( value, offset );
                		return this;
                	},
                	getX: function ( index ) {
                		return this.array[ index * this.itemSize ];
                	},
                	setX: function ( index, x ) {
                		this.array[ index * this.itemSize ] = x;
                		return this;
                	},
                	getY: function ( index ) {
                		return this.array[ index * this.itemSize + 1 ];
                	},
                	setY: function ( index, y ) {
                		this.array[ index * this.itemSize + 1 ] = y;
                		return this;
                	},
                	getZ: function ( index ) {
                		return this.array[ index * this.itemSize + 2 ];
                	},
                	setZ: function ( index, z ) {
                		this.array[ index * this.itemSize + 2 ] = z;
                		return this;
                	},
                	getW: function ( index ) {
                		return this.array[ index * this.itemSize + 3 ];
                	},
                	setW: function ( index, w ) {
                		this.array[ index * this.itemSize + 3 ] = w;
                		return this;
                	},
                	setXY: function ( index, x, y ) {
                		index *= this.itemSize;
                		this.array[ index + 0 ] = x;
                		this.array[ index + 1 ] = y;
                		return this;
                	},
                	setXYZ: function ( index, x, y, z ) {
                		index *= this.itemSize;
                		this.array[ index + 0 ] = x;
                		this.array[ index + 1 ] = y;
                		this.array[ index + 2 ] = z;
                		return this;
                	},
                	setXYZW: function ( index, x, y, z, w ) {
                		index *= this.itemSize;
                		this.array[ index + 0 ] = x;
                		this.array[ index + 1 ] = y;
                		this.array[ index + 2 ] = z;
                		this.array[ index + 3 ] = w;
                		return this;
                	},
                	onUpload: function ( callback ) {
                		this.onUploadCallback = callback;
                		return this;
                	},
                	clone: function () {
                		return new this.constructor( this.array, this.itemSize ).copy( this );
                	},
                	toJSON: function () {
                		return {
                			itemSize: this.itemSize,
                			type: this.array.constructor.name,
                			array: Array.prototype.slice.call( this.array ),
                			normalized: this.normalized
                		};
                	}
                } );
                function Int8BufferAttribute( array, itemSize, normalized ) {
                	BufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );
                }
                Int8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
                Int8BufferAttribute.prototype.constructor = Int8BufferAttribute;
                function Uint8BufferAttribute( array, itemSize, normalized ) {
                	BufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );
                }
                Uint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
                Uint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;
                function Uint8ClampedBufferAttribute( array, itemSize, normalized ) {
                	BufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );
                }
                Uint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );
                Uint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;
                function Int16BufferAttribute( array, itemSize, normalized ) {
                	BufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );
                }
                Int16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
                Int16BufferAttribute.prototype.constructor = Int16BufferAttribute;
                function Uint16BufferAttribute( array, itemSize, normalized ) {
                	BufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );
                }
                Uint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
                Uint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;
                function Int32BufferAttribute( array, itemSize, normalized ) {
                	BufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );
                }
                Int32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
                Int32BufferAttribute.prototype.constructor = Int32BufferAttribute;
                function Uint32BufferAttribute( array, itemSize, normalized ) {
                	BufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );
                }
                Uint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
                Uint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;
                function Float32BufferAttribute( array, itemSize, normalized ) {
                	BufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );
                }
                Float32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
                Float32BufferAttribute.prototype.constructor = Float32BufferAttribute;
                function Float64BufferAttribute( array, itemSize, normalized ) {
                	BufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );
                }
                Float64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
                Float64BufferAttribute.prototype.constructor = Float64BufferAttribute;
                function DirectGeometry() {
                	this.vertices = [];
                	this.normals = [];
                	this.colors = [];
                	this.uvs = [];
                	this.uvs2 = [];
                	this.groups = [];
                	this.morphTargets = {};
                	this.skinWeights = [];
                	this.skinIndices = [];
                	this.boundingBox = null;
                	this.boundingSphere = null;
                	this.verticesNeedUpdate = false;
                	this.normalsNeedUpdate = false;
                	this.colorsNeedUpdate = false;
                	this.uvsNeedUpdate = false;
                	this.groupsNeedUpdate = false;
                }
                Object.assign( DirectGeometry.prototype, {
                	computeGroups: function ( geometry ) {
                		var group;
                		var groups = [];
                		var materialIndex = undefined;
                		var faces = geometry.faces;
                		for ( var i = 0; i < faces.length; i ++ ) {
                			var face = faces[ i ];
                			if ( face.materialIndex !== materialIndex ) {
                				materialIndex = face.materialIndex;
                				if ( group !== undefined ) {
                					group.count = ( i * 3 ) - group.start;
                					groups.push( group );
                				}
                				group = {
                					start: i * 3,
                					materialIndex: materialIndex
                				};
                			}
                		}
                		if ( group !== undefined ) {
                			group.count = ( i * 3 ) - group.start;
                			groups.push( group );
                		}
                		this.groups = groups;
                	},
                	fromGeometry: function ( geometry ) {
                		var faces = geometry.faces;
                		var vertices = geometry.vertices;
                		var faceVertexUvs = geometry.faceVertexUvs;
                		var hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;
                		var hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;
                		var morphTargets = geometry.morphTargets;
                		var morphTargetsLength = morphTargets.length;
                		var morphTargetsPosition;
                		if ( morphTargetsLength > 0 ) {
                			morphTargetsPosition = [];
                			for ( var i = 0; i < morphTargetsLength; i ++ ) {
                				morphTargetsPosition[ i ] = {
                					name: morphTargets[ i ].name,
                				 	data: []
                				};
                			}
                			this.morphTargets.position = morphTargetsPosition;
                		}
                		var morphNormals = geometry.morphNormals;
                		var morphNormalsLength = morphNormals.length;
                		var morphTargetsNormal;
                		if ( morphNormalsLength > 0 ) {
                			morphTargetsNormal = [];
                			for ( var i = 0; i < morphNormalsLength; i ++ ) {
                				morphTargetsNormal[ i ] = {
                					name: morphNormals[ i ].name,
                				 	data: []
                				};
                			}
                			this.morphTargets.normal = morphTargetsNormal;
                		}
                		var skinIndices = geometry.skinIndices;
                		var skinWeights = geometry.skinWeights;
                		var hasSkinIndices = skinIndices.length === vertices.length;
                		var hasSkinWeights = skinWeights.length === vertices.length;
                		if ( vertices.length > 0 && faces.length === 0 ) {
                			console.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );
                		}
                		for ( var i = 0; i < faces.length; i ++ ) {
                			var face = faces[ i ];
                			this.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );
                			var vertexNormals = face.vertexNormals;
                			if ( vertexNormals.length === 3 ) {
                				this.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );
                			} else {
                				var normal = face.normal;
                				this.normals.push( normal, normal, normal );
                			}
                			var vertexColors = face.vertexColors;
                			if ( vertexColors.length === 3 ) {
                				this.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );
                			} else {
                				var color = face.color;
                				this.colors.push( color, color, color );
                			}
                			if ( hasFaceVertexUv === true ) {
                				var vertexUvs = faceVertexUvs[ 0 ][ i ];
                				if ( vertexUvs !== undefined ) {
                					this.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );
                				} else {
                					console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );
                					this.uvs.push( new Vector2(), new Vector2(), new Vector2() );
                				}
                			}
                			if ( hasFaceVertexUv2 === true ) {
                				var vertexUvs = faceVertexUvs[ 1 ][ i ];
                				if ( vertexUvs !== undefined ) {
                					this.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );
                				} else {
                					console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );
                					this.uvs2.push( new Vector2(), new Vector2(), new Vector2() );
                				}
                			}
                			for ( var j = 0; j < morphTargetsLength; j ++ ) {
                				var morphTarget = morphTargets[ j ].vertices;
                				morphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );
                			}
                			for ( var j = 0; j < morphNormalsLength; j ++ ) {
                				var morphNormal = morphNormals[ j ].vertexNormals[ i ];
                				morphTargetsNormal[ j ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );
                			}
                			if ( hasSkinIndices ) {
                				this.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );
                			}
                			if ( hasSkinWeights ) {
                				this.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );
                			}
                		}
                		this.computeGroups( geometry );
                		this.verticesNeedUpdate = geometry.verticesNeedUpdate;
                		this.normalsNeedUpdate = geometry.normalsNeedUpdate;
                		this.colorsNeedUpdate = geometry.colorsNeedUpdate;
                		this.uvsNeedUpdate = geometry.uvsNeedUpdate;
                		this.groupsNeedUpdate = geometry.groupsNeedUpdate;
                		if ( geometry.boundingSphere !== null ) {
                			this.boundingSphere = geometry.boundingSphere.clone();
                		}
                		if ( geometry.boundingBox !== null ) {
                			this.boundingBox = geometry.boundingBox.clone();
                		}
                		return this;
                	}
                } );
                function arrayMax( array ) {
                	if ( array.length === 0 ) return - Infinity;
                	var max = array[ 0 ];
                	for ( var i = 1, l = array.length; i < l; ++ i ) {
                		if ( array[ i ] > max ) max = array[ i ];
                	}
                	return max;
                }
                var _bufferGeometryId = 1;
                var _m1$2 = new Matrix4();
                var _obj = new Object3D();
                var _offset = new Vector3();
                var _box$2 = new Box3();
                var _boxMorphTargets = new Box3();
                var _vector$4 = new Vector3();
                function BufferGeometry() {
                	Object.defineProperty( this, 'id', { value: _bufferGeometryId += 2 } );
                	this.uuid = _Math.generateUUID();
                	this.name = '';
                	this.type = 'BufferGeometry';
                	this.index = null;
                	this.attributes = {};
                	this.morphAttributes = {};
                	this.morphTargetsRelative = false;
                	this.groups = [];
                	this.boundingBox = null;
                	this.boundingSphere = null;
                	this.drawRange = { start: 0, count: Infinity };
                	this.userData = {};
                }
                BufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {
                	constructor: BufferGeometry,
                	isBufferGeometry: true,
                	getIndex: function () {
                		return this.index;
                	},
                	setIndex: function ( index ) {
                		if ( Array.isArray( index ) ) {
                			this.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );
                		} else {
                			this.index = index;
                		}
                	},
                	getAttribute: function ( name ) {
                		return this.attributes[ name ];
                	},
                	setAttribute: function ( name, attribute ) {
                		this.attributes[ name ] = attribute;
                		return this;
                	},
                	deleteAttribute: function ( name ) {
                		delete this.attributes[ name ];
                		return this;
                	},
                	addGroup: function ( start, count, materialIndex ) {
                		this.groups.push( {
                			start: start,
                			count: count,
                			materialIndex: materialIndex !== undefined ? materialIndex : 0
                		} );
                	},
                	clearGroups: function () {
                		this.groups = [];
                	},
                	setDrawRange: function ( start, count ) {
                		this.drawRange.start = start;
                		this.drawRange.count = count;
                	},
                	applyMatrix: function ( matrix ) {
                		var position = this.attributes.position;
                		if ( position !== undefined ) {
                			matrix.applyToBufferAttribute( position );
                			position.needsUpdate = true;
                		}
                		var normal = this.attributes.normal;
                		if ( normal !== undefined ) {
                			var normalMatrix = new Matrix3().getNormalMatrix( matrix );
                			normalMatrix.applyToBufferAttribute( normal );
                			normal.needsUpdate = true;
                		}
                		var tangent = this.attributes.tangent;
                		if ( tangent !== undefined ) {
                			var normalMatrix = new Matrix3().getNormalMatrix( matrix );
                			normalMatrix.applyToBufferAttribute( tangent );
                			tangent.needsUpdate = true;
                		}
                		if ( this.boundingBox !== null ) {
                			this.computeBoundingBox();
                		}
                		if ( this.boundingSphere !== null ) {
                			this.computeBoundingSphere();
                		}
                		return this;
                	},
                	rotateX: function ( angle ) {
                		_m1$2.makeRotationX( angle );
                		this.applyMatrix( _m1$2 );
                		return this;
                	},
                	rotateY: function ( angle ) {
                		_m1$2.makeRotationY( angle );
                		this.applyMatrix( _m1$2 );
                		return this;
                	},
                	rotateZ: function ( angle ) {
                		_m1$2.makeRotationZ( angle );
                		this.applyMatrix( _m1$2 );
                		return this;
                	},
                	translate: function ( x, y, z ) {
                		_m1$2.makeTranslation( x, y, z );
                		this.applyMatrix( _m1$2 );
                		return this;
                	},
                	scale: function ( x, y, z ) {
                		_m1$2.makeScale( x, y, z );
                		this.applyMatrix( _m1$2 );
                		return this;
                	},
                	lookAt: function ( vector ) {
                		_obj.lookAt( vector );
                		_obj.updateMatrix();
                		this.applyMatrix( _obj.matrix );
                		return this;
                	},
                	center: function () {
                		this.computeBoundingBox();
                		this.boundingBox.getCenter( _offset ).negate();
                		this.translate( _offset.x, _offset.y, _offset.z );
                		return this;
                	},
                	setFromObject: function ( object ) {
                		var geometry = object.geometry;
                		if ( object.isPoints || object.isLine ) {
                			var positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );
                			var colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );
                			this.setAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );
                			this.setAttribute( 'color', colors.copyColorsArray( geometry.colors ) );
                			if ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {
                				var lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );
                				this.setAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );
                			}
                			if ( geometry.boundingSphere !== null ) {
                				this.boundingSphere = geometry.boundingSphere.clone();
                			}
                			if ( geometry.boundingBox !== null ) {
                				this.boundingBox = geometry.boundingBox.clone();
                			}
                		} else if ( object.isMesh ) {
                			if ( geometry && geometry.isGeometry ) {
                				this.fromGeometry( geometry );
                			}
                		}
                		return this;
                	},
                	setFromPoints: function ( points ) {
                		var position = [];
                		for ( var i = 0, l = points.length; i < l; i ++ ) {
                			var point = points[ i ];
                			position.push( point.x, point.y, point.z || 0 );
                		}
                		this.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );
                		return this;
                	},
                	updateFromObject: function ( object ) {
                		var geometry = object.geometry;
                		if ( object.isMesh ) {
                			var direct = geometry.__directGeometry;
                			if ( geometry.elementsNeedUpdate === true ) {
                				direct = undefined;
                				geometry.elementsNeedUpdate = false;
                			}
                			if ( direct === undefined ) {
                				return this.fromGeometry( geometry );
                			}
                			direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
                			direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
                			direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
                			direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
                			direct.groupsNeedUpdate = geometry.groupsNeedUpdate;
                			geometry.verticesNeedUpdate = false;
                			geometry.normalsNeedUpdate = false;
                			geometry.colorsNeedUpdate = false;
                			geometry.uvsNeedUpdate = false;
                			geometry.groupsNeedUpdate = false;
                			geometry = direct;
                		}
                		var attribute;
                		if ( geometry.verticesNeedUpdate === true ) {
                			attribute = this.attributes.position;
                			if ( attribute !== undefined ) {
                				attribute.copyVector3sArray( geometry.vertices );
                				attribute.needsUpdate = true;
                			}
                			geometry.verticesNeedUpdate = false;
                		}
                		if ( geometry.normalsNeedUpdate === true ) {
                			attribute = this.attributes.normal;
                			if ( attribute !== undefined ) {
                				attribute.copyVector3sArray( geometry.normals );
                				attribute.needsUpdate = true;
                			}
                			geometry.normalsNeedUpdate = false;
                		}
                		if ( geometry.colorsNeedUpdate === true ) {
                			attribute = this.attributes.color;
                			if ( attribute !== undefined ) {
                				attribute.copyColorsArray( geometry.colors );
                				attribute.needsUpdate = true;
                			}
                			geometry.colorsNeedUpdate = false;
                		}
                		if ( geometry.uvsNeedUpdate ) {
                			attribute = this.attributes.uv;
                			if ( attribute !== undefined ) {
                				attribute.copyVector2sArray( geometry.uvs );
                				attribute.needsUpdate = true;
                			}
                			geometry.uvsNeedUpdate = false;
                		}
                		if ( geometry.lineDistancesNeedUpdate ) {
                			attribute = this.attributes.lineDistance;
                			if ( attribute !== undefined ) {
                				attribute.copyArray( geometry.lineDistances );
                				attribute.needsUpdate = true;
                			}
                			geometry.lineDistancesNeedUpdate = false;
                		}
                		if ( geometry.groupsNeedUpdate ) {
                			geometry.computeGroups( object.geometry );
                			this.groups = geometry.groups;
                			geometry.groupsNeedUpdate = false;
                		}
                		return this;
                	},
                	fromGeometry: function ( geometry ) {
                		geometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );
                		return this.fromDirectGeometry( geometry.__directGeometry );
                	},
                	fromDirectGeometry: function ( geometry ) {
                		var positions = new Float32Array( geometry.vertices.length * 3 );
                		this.setAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );
                		if ( geometry.normals.length > 0 ) {
                			var normals = new Float32Array( geometry.normals.length * 3 );
                			this.setAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );
                		}
                		if ( geometry.colors.length > 0 ) {
                			var colors = new Float32Array( geometry.colors.length * 3 );
                			this.setAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );
                		}
                		if ( geometry.uvs.length > 0 ) {
                			var uvs = new Float32Array( geometry.uvs.length * 2 );
                			this.setAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );
                		}
                		if ( geometry.uvs2.length > 0 ) {
                			var uvs2 = new Float32Array( geometry.uvs2.length * 2 );
                			this.setAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );
                		}
                		this.groups = geometry.groups;
                		for ( var name in geometry.morphTargets ) {
                			var array = [];
                			var morphTargets = geometry.morphTargets[ name ];
                			for ( var i = 0, l = morphTargets.length; i < l; i ++ ) {
                				var morphTarget = morphTargets[ i ];
                				var attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );
                				attribute.name = morphTarget.name;
                				array.push( attribute.copyVector3sArray( morphTarget.data ) );
                			}
                			this.morphAttributes[ name ] = array;
                		}
                		if ( geometry.skinIndices.length > 0 ) {
                			var skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );
                			this.setAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );
                		}
                		if ( geometry.skinWeights.length > 0 ) {
                			var skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );
                			this.setAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );
                		}
                		if ( geometry.boundingSphere !== null ) {
                			this.boundingSphere = geometry.boundingSphere.clone();
                		}
                		if ( geometry.boundingBox !== null ) {
                			this.boundingBox = geometry.boundingBox.clone();
                		}
                		return this;
                	},
                	computeBoundingBox: function () {
                		if ( this.boundingBox === null ) {
                			this.boundingBox = new Box3();
                		}
                		var position = this.attributes.position;
                		var morphAttributesPosition = this.morphAttributes.position;
                		if ( position !== undefined ) {
                			this.boundingBox.setFromBufferAttribute( position );
                			if ( morphAttributesPosition ) {
                				for ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {
                					var morphAttribute = morphAttributesPosition[ i ];
                					_box$2.setFromBufferAttribute( morphAttribute );
                					if ( this.morphTargetsRelative ) {
                						_vector$4.addVectors( this.boundingBox.min, _box$2.min );
                						this.boundingBox.expandByPoint( _vector$4 );
                						_vector$4.addVectors( this.boundingBox.max, _box$2.max );
                						this.boundingBox.expandByPoint( _vector$4 );
                					} else {
                						this.boundingBox.expandByPoint( _box$2.min );
                						this.boundingBox.expandByPoint( _box$2.max );
                					}
                				}
                			}
                		} else {
                			this.boundingBox.makeEmpty();
                		}
                		if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {
                			console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );
                		}
                	},
                	computeBoundingSphere: function () {
                		if ( this.boundingSphere === null ) {
                			this.boundingSphere = new Sphere();
                		}
                		var position = this.attributes.position;
                		var morphAttributesPosition = this.morphAttributes.position;
                		if ( position ) {
                			var center = this.boundingSphere.center;
                			_box$2.setFromBufferAttribute( position );
                			if ( morphAttributesPosition ) {
                				for ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {
                					var morphAttribute = morphAttributesPosition[ i ];
                					_boxMorphTargets.setFromBufferAttribute( morphAttribute );
                					if ( this.morphTargetsRelative ) {
                						_vector$4.addVectors( _box$2.min, _boxMorphTargets.min );
                						_box$2.expandByPoint( _vector$4 );
                						_vector$4.addVectors( _box$2.max, _boxMorphTargets.max );
                						_box$2.expandByPoint( _vector$4 );
                					} else {
                						_box$2.expandByPoint( _boxMorphTargets.min );
                						_box$2.expandByPoint( _boxMorphTargets.max );
                					}
                				}
                			}
                			_box$2.getCenter( center );
                			var maxRadiusSq = 0;
                			for ( var i = 0, il = position.count; i < il; i ++ ) {
                				_vector$4.fromBufferAttribute( position, i );
                				maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );
                			}
                			if ( morphAttributesPosition ) {
                				for ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {
                					var morphAttribute = morphAttributesPosition[ i ];
                					var morphTargetsRelative = this.morphTargetsRelative;
                					for ( var j = 0, jl = morphAttribute.count; j < jl; j ++ ) {
                						_vector$4.fromBufferAttribute( morphAttribute, j );
                						if ( morphTargetsRelative ) {
                							_offset.fromBufferAttribute( position, j );
                							_vector$4.add( _offset );
                						}
                						maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );
                					}
                				}
                			}
                			this.boundingSphere.radius = Math.sqrt( maxRadiusSq );
                			if ( isNaN( this.boundingSphere.radius ) ) {
                				console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );
                			}
                		}
                	},
                	computeFaceNormals: function () {
                	},
                	computeVertexNormals: function () {
                		var index = this.index;
                		var attributes = this.attributes;
                		if ( attributes.position ) {
                			var positions = attributes.position.array;
                			if ( attributes.normal === undefined ) {
                				this.setAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );
                			} else {
                				var array = attributes.normal.array;
                				for ( var i = 0, il = array.length; i < il; i ++ ) {
                					array[ i ] = 0;
                				}
                			}
                			var normals = attributes.normal.array;
                			var vA, vB, vC;
                			var pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
                			var cb = new Vector3(), ab = new Vector3();
                			if ( index ) {
                				var indices = index.array;
                				for ( var i = 0, il = index.count; i < il; i += 3 ) {
                					vA = indices[ i + 0 ] * 3;
                					vB = indices[ i + 1 ] * 3;
                					vC = indices[ i + 2 ] * 3;
                					pA.fromArray( positions, vA );
                					pB.fromArray( positions, vB );
                					pC.fromArray( positions, vC );
                					cb.subVectors( pC, pB );
                					ab.subVectors( pA, pB );
                					cb.cross( ab );
                					normals[ vA ] += cb.x;
                					normals[ vA + 1 ] += cb.y;
                					normals[ vA + 2 ] += cb.z;
                					normals[ vB ] += cb.x;
                					normals[ vB + 1 ] += cb.y;
                					normals[ vB + 2 ] += cb.z;
                					normals[ vC ] += cb.x;
                					normals[ vC + 1 ] += cb.y;
                					normals[ vC + 2 ] += cb.z;
                				}
                			} else {
                				for ( var i = 0, il = positions.length; i < il; i += 9 ) {
                					pA.fromArray( positions, i );
                					pB.fromArray( positions, i + 3 );
                					pC.fromArray( positions, i + 6 );
                					cb.subVectors( pC, pB );
                					ab.subVectors( pA, pB );
                					cb.cross( ab );
                					normals[ i ] = cb.x;
                					normals[ i + 1 ] = cb.y;
                					normals[ i + 2 ] = cb.z;
                					normals[ i + 3 ] = cb.x;
                					normals[ i + 4 ] = cb.y;
                					normals[ i + 5 ] = cb.z;
                					normals[ i + 6 ] = cb.x;
                					normals[ i + 7 ] = cb.y;
                					normals[ i + 8 ] = cb.z;
                				}
                			}
                			this.normalizeNormals();
                			attributes.normal.needsUpdate = true;
                		}
                	},
                	merge: function ( geometry, offset ) {
                		if ( ! ( geometry && geometry.isBufferGeometry ) ) {
                			console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
                			return;
                		}
                		if ( offset === undefined ) {
                			offset = 0;
                			console.warn(
                				'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '
                				+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'
                			);
                		}
                		var attributes = this.attributes;
                		for ( var key in attributes ) {
                			if ( geometry.attributes[ key ] === undefined ) continue;
                			var attribute1 = attributes[ key ];
                			var attributeArray1 = attribute1.array;
                			var attribute2 = geometry.attributes[ key ];
                			var attributeArray2 = attribute2.array;
                			var attributeOffset = attribute2.itemSize * offset;
                			var length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );
                			for ( var i = 0, j = attributeOffset; i < length; i ++, j ++ ) {
                				attributeArray1[ j ] = attributeArray2[ i ];
                			}
                		}
                		return this;
                	},
                	normalizeNormals: function () {
                		var normals = this.attributes.normal;
                		for ( var i = 0, il = normals.count; i < il; i ++ ) {
                			_vector$4.x = normals.getX( i );
                			_vector$4.y = normals.getY( i );
                			_vector$4.z = normals.getZ( i );
                			_vector$4.normalize();
                			normals.setXYZ( i, _vector$4.x, _vector$4.y, _vector$4.z );
                		}
                	},
                	toNonIndexed: function () {
                		function convertBufferAttribute( attribute, indices ) {
                			var array = attribute.array;
                			var itemSize = attribute.itemSize;
                			var array2 = new array.constructor( indices.length * itemSize );
                			var index = 0, index2 = 0;
                			for ( var i = 0, l = indices.length; i < l; i ++ ) {
                				index = indices[ i ] * itemSize;
                				for ( var j = 0; j < itemSize; j ++ ) {
                					array2[ index2 ++ ] = array[ index ++ ];
                				}
                			}
                			return new BufferAttribute( array2, itemSize );
                		}
                		if ( this.index === null ) {
                			console.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );
                			return this;
                		}
                		var geometry2 = new BufferGeometry();
                		var indices = this.index.array;
                		var attributes = this.attributes;
                		for ( var name in attributes ) {
                			var attribute = attributes[ name ];
                			var newAttribute = convertBufferAttribute( attribute, indices );
                			geometry2.setAttribute( name, newAttribute );
                		}
                		var morphAttributes = this.morphAttributes;
                		for ( name in morphAttributes ) {
                			var morphArray = [];
                			var morphAttribute = morphAttributes[ name ];
                			for ( var i = 0, il = morphAttribute.length; i < il; i ++ ) {
                				var attribute = morphAttribute[ i ];
                				var newAttribute = convertBufferAttribute( attribute, indices );
                				morphArray.push( newAttribute );
                			}
                			geometry2.morphAttributes[ name ] = morphArray;
                		}
                		geometry2.morphTargetsRelative = this.morphTargetsRelative;
                		var groups = this.groups;
                		for ( var i = 0, l = groups.length; i < l; i ++ ) {
                			var group = groups[ i ];
                			geometry2.addGroup( group.start, group.count, group.materialIndex );
                		}
                		return geometry2;
                	},
                	toJSON: function () {
                		var data = {
                			metadata: {
                				version: 4.5,
                				type: 'BufferGeometry',
                				generator: 'BufferGeometry.toJSON'
                			}
                		};
                		data.uuid = this.uuid;
                		data.type = this.type;
                		if ( this.name !== '' ) data.name = this.name;
                		if ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;
                		if ( this.parameters !== undefined ) {
                			var parameters = this.parameters;
                			for ( var key in parameters ) {
                				if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];
                			}
                			return data;
                		}
                		data.data = { attributes: {} };
                		var index = this.index;
                		if ( index !== null ) {
                			data.data.index = {
                				type: index.array.constructor.name,
                				array: Array.prototype.slice.call( index.array )
                			};
                		}
                		var attributes = this.attributes;
                		for ( var key in attributes ) {
                			var attribute = attributes[ key ];
                			var attributeData = attribute.toJSON();
                			if ( attribute.name !== '' ) attributeData.name = attribute.name;
                			data.data.attributes[ key ] = attributeData;
                		}
                		var morphAttributes = {};
                		var hasMorphAttributes = false;
                		for ( var key in this.morphAttributes ) {
                			var attributeArray = this.morphAttributes[ key ];
                			var array = [];
                			for ( var i = 0, il = attributeArray.length; i < il; i ++ ) {
                				var attribute = attributeArray[ i ];
                				var attributeData = attribute.toJSON();
                				if ( attribute.name !== '' ) attributeData.name = attribute.name;
                				array.push( attributeData );
                			}
                			if ( array.length > 0 ) {
                				morphAttributes[ key ] = array;
                				hasMorphAttributes = true;
                			}
                		}
                		if ( hasMorphAttributes ) {
                			data.data.morphAttributes = morphAttributes;
                			data.data.morphTargetsRelative = this.morphTargetsRelative;
                		}
                		var groups = this.groups;
                		if ( groups.length > 0 ) {
                			data.data.groups = JSON.parse( JSON.stringify( groups ) );
                		}
                		var boundingSphere = this.boundingSphere;
                		if ( boundingSphere !== null ) {
                			data.data.boundingSphere = {
                				center: boundingSphere.center.toArray(),
                				radius: boundingSphere.radius
                			};
                		}
                		return data;
                	},
                	clone: function () {
                		return new BufferGeometry().copy( this );
                	},
                	copy: function ( source ) {
                		var name, i, l;
                		this.index = null;
                		this.attributes = {};
                		this.morphAttributes = {};
                		this.groups = [];
                		this.boundingBox = null;
                		this.boundingSphere = null;
                		this.name = source.name;
                		var index = source.index;
                		if ( index !== null ) {
                			this.setIndex( index.clone() );
                		}
                		var attributes = source.attributes;
                		for ( name in attributes ) {
                			var attribute = attributes[ name ];
                			this.setAttribute( name, attribute.clone() );
                		}
                		var morphAttributes = source.morphAttributes;
                		for ( name in morphAttributes ) {
                			var array = [];
                			var morphAttribute = morphAttributes[ name ];
                			for ( i = 0, l = morphAttribute.length; i < l; i ++ ) {
                				array.push( morphAttribute[ i ].clone() );
                			}
                			this.morphAttributes[ name ] = array;
                		}
                		this.morphTargetsRelative = source.morphTargetsRelative;
                		var groups = source.groups;
                		for ( i = 0, l = groups.length; i < l; i ++ ) {
                			var group = groups[ i ];
                			this.addGroup( group.start, group.count, group.materialIndex );
                		}
                		var boundingBox = source.boundingBox;
                		if ( boundingBox !== null ) {
                			this.boundingBox = boundingBox.clone();
                		}
                		var boundingSphere = source.boundingSphere;
                		if ( boundingSphere !== null ) {
                			this.boundingSphere = boundingSphere.clone();
                		}
                		this.drawRange.start = source.drawRange.start;
                		this.drawRange.count = source.drawRange.count;
                		this.userData = source.userData;
                		return this;
                	},
                	dispose: function () {
                		this.dispatchEvent( { type: 'dispose' } );
                	}
                } );
                var _inverseMatrix = new Matrix4();
                var _ray = new Ray();
                var _sphere = new Sphere();
                var _vA = new Vector3();
                var _vB = new Vector3();
                var _vC = new Vector3();
                var _tempA = new Vector3();
                var _tempB = new Vector3();
                var _tempC = new Vector3();
                var _morphA = new Vector3();
                var _morphB = new Vector3();
                var _morphC = new Vector3();
                var _uvA = new Vector2();
                var _uvB = new Vector2();
                var _uvC = new Vector2();
                var _intersectionPoint = new Vector3();
                var _intersectionPointWorld = new Vector3();
                function Mesh( geometry, material ) {
                	Object3D.call( this );
                	this.type = 'Mesh';
                	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
                	this.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );
                	this.drawMode = TrianglesDrawMode;
                	this.updateMorphTargets();
                }
                Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {
                	constructor: Mesh,
                	isMesh: true,
                	setDrawMode: function ( value ) {
                		this.drawMode = value;
                	},
                	copy: function ( source ) {
                		Object3D.prototype.copy.call( this, source );
                		this.drawMode = source.drawMode;
                		if ( source.morphTargetInfluences !== undefined ) {
                			this.morphTargetInfluences = source.morphTargetInfluences.slice();
                		}
                		if ( source.morphTargetDictionary !== undefined ) {
                			this.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );
                		}
                		return this;
                	},
                	updateMorphTargets: function () {
                		var geometry = this.geometry;
                		var m, ml, name;
                		if ( geometry.isBufferGeometry ) {
                			var morphAttributes = geometry.morphAttributes;
                			var keys = Object.keys( morphAttributes );
                			if ( keys.length > 0 ) {
                				var morphAttribute = morphAttributes[ keys[ 0 ] ];
                				if ( morphAttribute !== undefined ) {
                					this.morphTargetInfluences = [];
                					this.morphTargetDictionary = {};
                					for ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {
                						name = morphAttribute[ m ].name || String( m );
                						this.morphTargetInfluences.push( 0 );
                						this.morphTargetDictionary[ name ] = m;
                					}
                				}
                			}
                		} else {
                			var morphTargets = geometry.morphTargets;
                			if ( morphTargets !== undefined && morphTargets.length > 0 ) {
                				console.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );
                			}
                		}
                	},
                	raycast: function ( raycaster, intersects ) {
                		var geometry = this.geometry;
                		var material = this.material;
                		var matrixWorld = this.matrixWorld;
                		if ( material === undefined ) return;
                		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
                		_sphere.copy( geometry.boundingSphere );
                		_sphere.applyMatrix4( matrixWorld );
                		if ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;
                		_inverseMatrix.getInverse( matrixWorld );
                		_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );
                		if ( geometry.boundingBox !== null ) {
                			if ( _ray.intersectsBox( geometry.boundingBox ) === false ) return;
                		}
                		if ( this.drawMode !== TrianglesDrawMode ) {
                			console.warn( 'THREE.Mesh: TriangleStripDrawMode and TriangleFanDrawMode are not supported by .raycast().' );
                			return;
                		}
                		var intersection;
                		if ( geometry.isBufferGeometry ) {
                			var a, b, c;
                			var index = geometry.index;
                			var position = geometry.attributes.position;
                			var morphPosition = geometry.morphAttributes.position;
                			var morphTargetsRelative = geometry.morphTargetsRelative;
                			var uv = geometry.attributes.uv;
                			var uv2 = geometry.attributes.uv2;
                			var groups = geometry.groups;
                			var drawRange = geometry.drawRange;
                			var i, j, il, jl;
                			var group, groupMaterial;
                			var start, end;
                			if ( index !== null ) {
                				if ( Array.isArray( material ) ) {
                					for ( i = 0, il = groups.length; i < il; i ++ ) {
                						group = groups[ i ];
                						groupMaterial = material[ group.materialIndex ];
                						start = Math.max( group.start, drawRange.start );
                						end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );
                						for ( j = start, jl = end; j < jl; j += 3 ) {
                							a = index.getX( j );
                							b = index.getX( j + 1 );
                							c = index.getX( j + 2 );
                							intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );
                							if ( intersection ) {
                								intersection.faceIndex = Math.floor( j / 3 );
                								intersection.face.materialIndex = group.materialIndex;
                								intersects.push( intersection );
                							}
                						}
                					}
                				} else {
                					start = Math.max( 0, drawRange.start );
                					end = Math.min( index.count, ( drawRange.start + drawRange.count ) );
                					for ( i = start, il = end; i < il; i += 3 ) {
                						a = index.getX( i );
                						b = index.getX( i + 1 );
                						c = index.getX( i + 2 );
                						intersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );
                						if ( intersection ) {
                							intersection.faceIndex = Math.floor( i / 3 );
                							intersects.push( intersection );
                						}
                					}
                				}
                			} else if ( position !== undefined ) {
                				if ( Array.isArray( material ) ) {
                					for ( i = 0, il = groups.length; i < il; i ++ ) {
                						group = groups[ i ];
                						groupMaterial = material[ group.materialIndex ];
                						start = Math.max( group.start, drawRange.start );
                						end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );
                						for ( j = start, jl = end; j < jl; j += 3 ) {
                							a = j;
                							b = j + 1;
                							c = j + 2;
                							intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );
                							if ( intersection ) {
                								intersection.faceIndex = Math.floor( j / 3 );
                								intersection.face.materialIndex = group.materialIndex;
                								intersects.push( intersection );
                							}
                						}
                					}
                				} else {
                					start = Math.max( 0, drawRange.start );
                					end = Math.min( position.count, ( drawRange.start + drawRange.count ) );
                					for ( i = start, il = end; i < il; i += 3 ) {
                						a = i;
                						b = i + 1;
                						c = i + 2;
                						intersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );
                						if ( intersection ) {
                							intersection.faceIndex = Math.floor( i / 3 );
                							intersects.push( intersection );
                						}
                					}
                				}
                			}
                		} else if ( geometry.isGeometry ) {
                			var fvA, fvB, fvC;
                			var isMultiMaterial = Array.isArray( material );
                			var vertices = geometry.vertices;
                			var faces = geometry.faces;
                			var uvs;
                			var faceVertexUvs = geometry.faceVertexUvs[ 0 ];
                			if ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;
                			for ( var f = 0, fl = faces.length; f < fl; f ++ ) {
                				var face = faces[ f ];
                				var faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;
                				if ( faceMaterial === undefined ) continue;
                				fvA = vertices[ face.a ];
                				fvB = vertices[ face.b ];
                				fvC = vertices[ face.c ];
                				intersection = checkIntersection( this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint );
                				if ( intersection ) {
                					if ( uvs && uvs[ f ] ) {
                						var uvs_f = uvs[ f ];
                						_uvA.copy( uvs_f[ 0 ] );
                						_uvB.copy( uvs_f[ 1 ] );
                						_uvC.copy( uvs_f[ 2 ] );
                						intersection.uv = Triangle.getUV( _intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2() );
                					}
                					intersection.face = face;
                					intersection.faceIndex = f;
                					intersects.push( intersection );
                				}
                			}
                		}
                	},
                	clone: function () {
                		return new this.constructor( this.geometry, this.material ).copy( this );
                	}
                } );
                function checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {
                	var intersect;
                	if ( material.side === BackSide ) {
                		intersect = ray.intersectTriangle( pC, pB, pA, true, point );
                	} else {
                		intersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );
                	}
                	if ( intersect === null ) return null;
                	_intersectionPointWorld.copy( point );
                	_intersectionPointWorld.applyMatrix4( object.matrixWorld );
                	var distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );
                	if ( distance < raycaster.near || distance > raycaster.far ) return null;
                	return {
                		distance: distance,
                		point: _intersectionPointWorld.clone(),
                		object: object
                	};
                }
                function checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {
                	_vA.fromBufferAttribute( position, a );
                	_vB.fromBufferAttribute( position, b );
                	_vC.fromBufferAttribute( position, c );
                	var morphInfluences = object.morphTargetInfluences;
                	if ( material.morphTargets && morphPosition && morphInfluences ) {
                		_morphA.set( 0, 0, 0 );
                		_morphB.set( 0, 0, 0 );
                		_morphC.set( 0, 0, 0 );
                		for ( var i = 0, il = morphPosition.length; i < il; i ++ ) {
                			var influence = morphInfluences[ i ];
                			var morphAttribute = morphPosition[ i ];
                			if ( influence === 0 ) continue;
                			_tempA.fromBufferAttribute( morphAttribute, a );
                			_tempB.fromBufferAttribute( morphAttribute, b );
                			_tempC.fromBufferAttribute( morphAttribute, c );
                			if ( morphTargetsRelative ) {
                				_morphA.addScaledVector( _tempA, influence );
                				_morphB.addScaledVector( _tempB, influence );
                				_morphC.addScaledVector( _tempC, influence );
                			} else {
                				_morphA.addScaledVector( _tempA.sub( _vA ), influence );
                				_morphB.addScaledVector( _tempB.sub( _vB ), influence );
                				_morphC.addScaledVector( _tempC.sub( _vC ), influence );
                			}
                		}
                		_vA.add( _morphA );
                		_vB.add( _morphB );
                		_vC.add( _morphC );
                	}
                	var intersection = checkIntersection( object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint );
                	if ( intersection ) {
                		if ( uv ) {
                			_uvA.fromBufferAttribute( uv, a );
                			_uvB.fromBufferAttribute( uv, b );
                			_uvC.fromBufferAttribute( uv, c );
                			intersection.uv = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );
                		}
                		if ( uv2 ) {
                			_uvA.fromBufferAttribute( uv2, a );
                			_uvB.fromBufferAttribute( uv2, b );
                			_uvC.fromBufferAttribute( uv2, c );
                			intersection.uv2 = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );
                		}
                		var face = new Face3( a, b, c );
                		Triangle.getNormal( _vA, _vB, _vC, face.normal );
                		intersection.face = face;
                	}
                	return intersection;
                }
                var _geometryId = 0;
                var _m1$3 = new Matrix4();
                var _obj$1 = new Object3D();
                var _offset$1 = new Vector3();
                function Geometry() {
                	Object.defineProperty( this, 'id', { value: _geometryId += 2 } );
                	this.uuid = _Math.generateUUID();
                	this.name = '';
                	this.type = 'Geometry';
                	this.vertices = [];
                	this.colors = [];
                	this.faces = [];
                	this.faceVertexUvs = [[]];
                	this.morphTargets = [];
                	this.morphNormals = [];
                	this.skinWeights = [];
                	this.skinIndices = [];
                	this.lineDistances = [];
                	this.boundingBox = null;
                	this.boundingSphere = null;
                	this.elementsNeedUpdate = false;
                	this.verticesNeedUpdate = false;
                	this.uvsNeedUpdate = false;
                	this.normalsNeedUpdate = false;
                	this.colorsNeedUpdate = false;
                	this.lineDistancesNeedUpdate = false;
                	this.groupsNeedUpdate = false;
                }
                Geometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {
                	constructor: Geometry,
                	isGeometry: true,
                	applyMatrix: function ( matrix ) {
                		var normalMatrix = new Matrix3().getNormalMatrix( matrix );
                		for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {
                			var vertex = this.vertices[ i ];
                			vertex.applyMatrix4( matrix );
                		}
                		for ( var i = 0, il = this.faces.length; i < il; i ++ ) {
                			var face = this.faces[ i ];
                			face.normal.applyMatrix3( normalMatrix ).normalize();
                			for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {
                				face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();
                			}
                		}
                		if ( this.boundingBox !== null ) {
                			this.computeBoundingBox();
                		}
                		if ( this.boundingSphere !== null ) {
                			this.computeBoundingSphere();
                		}
                		this.verticesNeedUpdate = true;
                		this.normalsNeedUpdate = true;
                		return this;
                	},
                	rotateX: function ( angle ) {
                		_m1$3.makeRotationX( angle );
                		this.applyMatrix( _m1$3 );
                		return this;
                	},
                	rotateY: function ( angle ) {
                		_m1$3.makeRotationY( angle );
                		this.applyMatrix( _m1$3 );
                		return this;
                	},
                	rotateZ: function ( angle ) {
                		_m1$3.makeRotationZ( angle );
                		this.applyMatrix( _m1$3 );
                		return this;
                	},
                	translate: function ( x, y, z ) {
                		_m1$3.makeTranslation( x, y, z );
                		this.applyMatrix( _m1$3 );
                		return this;
                	},
                	scale: function ( x, y, z ) {
                		_m1$3.makeScale( x, y, z );
                		this.applyMatrix( _m1$3 );
                		return this;
                	},
                	lookAt: function ( vector ) {
                		_obj$1.lookAt( vector );
                		_obj$1.updateMatrix();
                		this.applyMatrix( _obj$1.matrix );
                		return this;
                	},
                	fromBufferGeometry: function ( geometry ) {
                		var scope = this;
                		var indices = geometry.index !== null ? geometry.index.array : undefined;
                		var attributes = geometry.attributes;
                		if ( attributes.position === undefined ) {
                			console.error( 'THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.' );
                			return this;
                		}
                		var positions = attributes.position.array;
                		var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
                		var colors = attributes.color !== undefined ? attributes.color.array : undefined;
                		var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
                		var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;
                		if ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];
                		for ( var i = 0; i < positions.length; i += 3 ) {
                			scope.vertices.push( new Vector3().fromArray( positions, i ) );
                			if ( colors !== undefined ) {
                				scope.colors.push( new Color().fromArray( colors, i ) );
                			}
                		}
                		function addFace( a, b, c, materialIndex ) {
                			var vertexColors = ( colors === undefined ) ? [] : [
                				scope.colors[ a ].clone(),
                				scope.colors[ b ].clone(),
                				scope.colors[ c ].clone() ];
                			var vertexNormals = ( normals === undefined ) ? [] : [
                				new Vector3().fromArray( normals, a * 3 ),
                				new Vector3().fromArray( normals, b * 3 ),
                				new Vector3().fromArray( normals, c * 3 )
                			];
                			var face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );
                			scope.faces.push( face );
                			if ( uvs !== undefined ) {
                				scope.faceVertexUvs[ 0 ].push( [
                					new Vector2().fromArray( uvs, a * 2 ),
                					new Vector2().fromArray( uvs, b * 2 ),
                					new Vector2().fromArray( uvs, c * 2 )
                				] );
                			}
                			if ( uvs2 !== undefined ) {
                				scope.faceVertexUvs[ 1 ].push( [
                					new Vector2().fromArray( uvs2, a * 2 ),
                					new Vector2().fromArray( uvs2, b * 2 ),
                					new Vector2().fromArray( uvs2, c * 2 )
                				] );
                			}
                		}
                		var groups = geometry.groups;
                		if ( groups.length > 0 ) {
                			for ( var i = 0; i < groups.length; i ++ ) {
                				var group = groups[ i ];
                				var start = group.start;
                				var count = group.count;
                				for ( var j = start, jl = start + count; j < jl; j += 3 ) {
                					if ( indices !== undefined ) {
                						addFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );
                					} else {
                						addFace( j, j + 1, j + 2, group.materialIndex );
                					}
                				}
                			}
                		} else {
                			if ( indices !== undefined ) {
                				for ( var i = 0; i < indices.length; i += 3 ) {
                					addFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );
                				}
                			} else {
                				for ( var i = 0; i < positions.length / 3; i += 3 ) {
                					addFace( i, i + 1, i + 2 );
                				}
                			}
                		}
                		this.computeFaceNormals();
                		if ( geometry.boundingBox !== null ) {
                			this.boundingBox = geometry.boundingBox.clone();
                		}
                		if ( geometry.boundingSphere !== null ) {
                			this.boundingSphere = geometry.boundingSphere.clone();
                		}
                		return this;
                	},
                	center: function () {
                		this.computeBoundingBox();
                		this.boundingBox.getCenter( _offset$1 ).negate();
                		this.translate( _offset$1.x, _offset$1.y, _offset$1.z );
                		return this;
                	},
                	normalize: function () {
                		this.computeBoundingSphere();
                		var center = this.boundingSphere.center;
                		var radius = this.boundingSphere.radius;
                		var s = radius === 0 ? 1 : 1.0 / radius;
                		var matrix = new Matrix4();
                		matrix.set(
                			s, 0, 0, - s * center.x,
                			0, s, 0, - s * center.y,
                			0, 0, s, - s * center.z,
                			0, 0, 0, 1
                		);
                		this.applyMatrix( matrix );
                		return this;
                	},
                	computeFaceNormals: function () {
                		var cb = new Vector3(), ab = new Vector3();
                		for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {
                			var face = this.faces[ f ];
                			var vA = this.vertices[ face.a ];
                			var vB = this.vertices[ face.b ];
                			var vC = this.vertices[ face.c ];
                			cb.subVectors( vC, vB );
                			ab.subVectors( vA, vB );
                			cb.cross( ab );
                			cb.normalize();
                			face.normal.copy( cb );
                		}
                	},
                	computeVertexNormals: function ( areaWeighted ) {
                		if ( areaWeighted === undefined ) areaWeighted = true;
                		var v, vl, f, fl, face, vertices;
                		vertices = new Array( this.vertices.length );
                		for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {
                			vertices[ v ] = new Vector3();
                		}
                		if ( areaWeighted ) {
                			var vA, vB, vC;
                			var cb = new Vector3(), ab = new Vector3();
                			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
                				face = this.faces[ f ];
                				vA = this.vertices[ face.a ];
                				vB = this.vertices[ face.b ];
                				vC = this.vertices[ face.c ];
                				cb.subVectors( vC, vB );
                				ab.subVectors( vA, vB );
                				cb.cross( ab );
                				vertices[ face.a ].add( cb );
                				vertices[ face.b ].add( cb );
                				vertices[ face.c ].add( cb );
                			}
                		} else {
                			this.computeFaceNormals();
                			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
                				face = this.faces[ f ];
                				vertices[ face.a ].add( face.normal );
                				vertices[ face.b ].add( face.normal );
                				vertices[ face.c ].add( face.normal );
                			}
                		}
                		for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {
                			vertices[ v ].normalize();
                		}
                		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
                			face = this.faces[ f ];
                			var vertexNormals = face.vertexNormals;
                			if ( vertexNormals.length === 3 ) {
                				vertexNormals[ 0 ].copy( vertices[ face.a ] );
                				vertexNormals[ 1 ].copy( vertices[ face.b ] );
                				vertexNormals[ 2 ].copy( vertices[ face.c ] );
                			} else {
                				vertexNormals[ 0 ] = vertices[ face.a ].clone();
                				vertexNormals[ 1 ] = vertices[ face.b ].clone();
                				vertexNormals[ 2 ] = vertices[ face.c ].clone();
                			}
                		}
                		if ( this.faces.length > 0 ) {
                			this.normalsNeedUpdate = true;
                		}
                	},
                	computeFlatVertexNormals: function () {
                		var f, fl, face;
                		this.computeFaceNormals();
                		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
                			face = this.faces[ f ];
                			var vertexNormals = face.vertexNormals;
                			if ( vertexNormals.length === 3 ) {
                				vertexNormals[ 0 ].copy( face.normal );
                				vertexNormals[ 1 ].copy( face.normal );
                				vertexNormals[ 2 ].copy( face.normal );
                			} else {
                				vertexNormals[ 0 ] = face.normal.clone();
                				vertexNormals[ 1 ] = face.normal.clone();
                				vertexNormals[ 2 ] = face.normal.clone();
                			}
                		}
                		if ( this.faces.length > 0 ) {
                			this.normalsNeedUpdate = true;
                		}
                	},
                	computeMorphNormals: function () {
                		var i, il, f, fl, face;
                		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
                			face = this.faces[ f ];
                			if ( ! face.__originalFaceNormal ) {
                				face.__originalFaceNormal = face.normal.clone();
                			} else {
                				face.__originalFaceNormal.copy( face.normal );
                			}
                			if ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];
                			for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {
                				if ( ! face.__originalVertexNormals[ i ] ) {
                					face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();
                				} else {
                					face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );
                				}
                			}
                		}
                		var tmpGeo = new Geometry();
                		tmpGeo.faces = this.faces;
                		for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {
                			if ( ! this.morphNormals[ i ] ) {
                				this.morphNormals[ i ] = {};
                				this.morphNormals[ i ].faceNormals = [];
                				this.morphNormals[ i ].vertexNormals = [];
                				var dstNormalsFace = this.morphNormals[ i ].faceNormals;
                				var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;
                				var faceNormal, vertexNormals;
                				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
                					faceNormal = new Vector3();
                					vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };
                					dstNormalsFace.push( faceNormal );
                					dstNormalsVertex.push( vertexNormals );
                				}
                			}
                			var morphNormals = this.morphNormals[ i ];
                			tmpGeo.vertices = this.morphTargets[ i ].vertices;
                			tmpGeo.computeFaceNormals();
                			tmpGeo.computeVertexNormals();
                			var faceNormal, vertexNormals;
                			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
                				face = this.faces[ f ];
                				faceNormal = morphNormals.faceNormals[ f ];
                				vertexNormals = morphNormals.vertexNormals[ f ];
                				faceNormal.copy( face.normal );
                				vertexNormals.a.copy( face.vertexNormals[ 0 ] );
                				vertexNormals.b.copy( face.vertexNormals[ 1 ] );
                				vertexNormals.c.copy( face.vertexNormals[ 2 ] );
                			}
                		}
                		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
                			face = this.faces[ f ];
                			face.normal = face.__originalFaceNormal;
                			face.vertexNormals = face.__originalVertexNormals;
                		}
                	},
                	computeBoundingBox: function () {
                		if ( this.boundingBox === null ) {
                			this.boundingBox = new Box3();
                		}
                		this.boundingBox.setFromPoints( this.vertices );
                	},
                	computeBoundingSphere: function () {
                		if ( this.boundingSphere === null ) {
                			this.boundingSphere = new Sphere();
                		}
                		this.boundingSphere.setFromPoints( this.vertices );
                	},
                	merge: function ( geometry, matrix, materialIndexOffset ) {
                		if ( ! ( geometry && geometry.isGeometry ) ) {
                			console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
                			return;
                		}
                		var normalMatrix,
                			vertexOffset = this.vertices.length,
                			vertices1 = this.vertices,
                			vertices2 = geometry.vertices,
                			faces1 = this.faces,
                			faces2 = geometry.faces,
                			colors1 = this.colors,
                			colors2 = geometry.colors;
                		if ( materialIndexOffset === undefined ) materialIndexOffset = 0;
                		if ( matrix !== undefined ) {
                			normalMatrix = new Matrix3().getNormalMatrix( matrix );
                		}
                		for ( var i = 0, il = vertices2.length; i < il; i ++ ) {
                			var vertex = vertices2[ i ];
                			var vertexCopy = vertex.clone();
                			if ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );
                			vertices1.push( vertexCopy );
                		}
                		for ( var i = 0, il = colors2.length; i < il; i ++ ) {
                			colors1.push( colors2[ i ].clone() );
                		}
                		for ( i = 0, il = faces2.length; i < il; i ++ ) {
                			var face = faces2[ i ], faceCopy, normal, color,
                				faceVertexNormals = face.vertexNormals,
                				faceVertexColors = face.vertexColors;
                			faceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
                			faceCopy.normal.copy( face.normal );
                			if ( normalMatrix !== undefined ) {
                				faceCopy.normal.applyMatrix3( normalMatrix ).normalize();
                			}
                			for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {
                				normal = faceVertexNormals[ j ].clone();
                				if ( normalMatrix !== undefined ) {
                					normal.applyMatrix3( normalMatrix ).normalize();
                				}
                				faceCopy.vertexNormals.push( normal );
                			}
                			faceCopy.color.copy( face.color );
                			for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {
                				color = faceVertexColors[ j ];
                				faceCopy.vertexColors.push( color.clone() );
                			}
                			faceCopy.materialIndex = face.materialIndex + materialIndexOffset;
                			faces1.push( faceCopy );
                		}
                		for ( var i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {
                			var faceVertexUvs2 = geometry.faceVertexUvs[ i ];
                			if ( this.faceVertexUvs[ i ] === undefined ) this.faceVertexUvs[ i ] = [];
                			for ( var j = 0, jl = faceVertexUvs2.length; j < jl; j ++ ) {
                				var uvs2 = faceVertexUvs2[ j ], uvsCopy = [];
                				for ( var k = 0, kl = uvs2.length; k < kl; k ++ ) {
                					uvsCopy.push( uvs2[ k ].clone() );
                				}
                				this.faceVertexUvs[ i ].push( uvsCopy );
                			}
                		}
                	},
                	mergeMesh: function ( mesh ) {
                		if ( ! ( mesh && mesh.isMesh ) ) {
                			console.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );
                			return;
                		}
                		if ( mesh.matrixAutoUpdate ) mesh.updateMatrix();
                		this.merge( mesh.geometry, mesh.matrix );
                	},
                	mergeVertices: function () {
                		var verticesMap = {};
                		var unique = [], changes = [];
                		var v, key;
                		var precisionPoints = 4;
                		var precision = Math.pow( 10, precisionPoints );
                		var i, il, face;
                		var indices, j, jl;
                		for ( i = 0, il = this.vertices.length; i < il; i ++ ) {
                			v = this.vertices[ i ];
                			key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );
                			if ( verticesMap[ key ] === undefined ) {
                				verticesMap[ key ] = i;
                				unique.push( this.vertices[ i ] );
                				changes[ i ] = unique.length - 1;
                			} else {
                				changes[ i ] = changes[ verticesMap[ key ] ];
                			}
                		}
                		var faceIndicesToRemove = [];
                		for ( i = 0, il = this.faces.length; i < il; i ++ ) {
                			face = this.faces[ i ];
                			face.a = changes[ face.a ];
                			face.b = changes[ face.b ];
                			face.c = changes[ face.c ];
                			indices = [ face.a, face.b, face.c ];
                			for ( var n = 0; n < 3; n ++ ) {
                				if ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {
                					faceIndicesToRemove.push( i );
                					break;
                				}
                			}
                		}
                		for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {
                			var idx = faceIndicesToRemove[ i ];
                			this.faces.splice( idx, 1 );
                			for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {
                				this.faceVertexUvs[ j ].splice( idx, 1 );
                			}
                		}
                		var diff = this.vertices.length - unique.length;
                		this.vertices = unique;
                		return diff;
                	},
                	setFromPoints: function ( points ) {
                		this.vertices = [];
                		for ( var i = 0, l = points.length; i < l; i ++ ) {
                			var point = points[ i ];
                			this.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );
                		}
                		return this;
                	},
                	sortFacesByMaterialIndex: function () {
                		var faces = this.faces;
                		var length = faces.length;
                		for ( var i = 0; i < length; i ++ ) {
                			faces[ i ]._id = i;
                		}
                		function materialIndexSort( a, b ) {
                			return a.materialIndex - b.materialIndex;
                		}
                		faces.sort( materialIndexSort );
                		var uvs1 = this.faceVertexUvs[ 0 ];
                		var uvs2 = this.faceVertexUvs[ 1 ];
                		var newUvs1, newUvs2;
                		if ( uvs1 && uvs1.length === length ) newUvs1 = [];
                		if ( uvs2 && uvs2.length === length ) newUvs2 = [];
                		for ( var i = 0; i < length; i ++ ) {
                			var id = faces[ i ]._id;
                			if ( newUvs1 ) newUvs1.push( uvs1[ id ] );
                			if ( newUvs2 ) newUvs2.push( uvs2[ id ] );
                		}
                		if ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;
                		if ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;
                	},
                	toJSON: function () {
                		var data = {
                			metadata: {
                				version: 4.5,
                				type: 'Geometry',
                				generator: 'Geometry.toJSON'
                			}
                		};
                		data.uuid = this.uuid;
                		data.type = this.type;
                		if ( this.name !== '' ) data.name = this.name;
                		if ( this.parameters !== undefined ) {
                			var parameters = this.parameters;
                			for ( var key in parameters ) {
                				if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];
                			}
                			return data;
                		}
                		var vertices = [];
                		for ( var i = 0; i < this.vertices.length; i ++ ) {
                			var vertex = this.vertices[ i ];
                			vertices.push( vertex.x, vertex.y, vertex.z );
                		}
                		var faces = [];
                		var normals = [];
                		var normalsHash = {};
                		var colors = [];
                		var colorsHash = {};
                		var uvs = [];
                		var uvsHash = {};
                		for ( var i = 0; i < this.faces.length; i ++ ) {
                			var face = this.faces[ i ];
                			var hasMaterial = true;
                			var hasFaceUv = false;
                			var hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;
                			var hasFaceNormal = face.normal.length() > 0;
                			var hasFaceVertexNormal = face.vertexNormals.length > 0;
                			var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
                			var hasFaceVertexColor = face.vertexColors.length > 0;
                			var faceType = 0;
                			faceType = setBit( faceType, 0, 0 );
                			faceType = setBit( faceType, 1, hasMaterial );
                			faceType = setBit( faceType, 2, hasFaceUv );
                			faceType = setBit( faceType, 3, hasFaceVertexUv );
                			faceType = setBit( faceType, 4, hasFaceNormal );
                			faceType = setBit( faceType, 5, hasFaceVertexNormal );
                			faceType = setBit( faceType, 6, hasFaceColor );
                			faceType = setBit( faceType, 7, hasFaceVertexColor );
                			faces.push( faceType );
                			faces.push( face.a, face.b, face.c );
                			faces.push( face.materialIndex );
                			if ( hasFaceVertexUv ) {
                				var faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];
                				faces.push(
                					getUvIndex( faceVertexUvs[ 0 ] ),
                					getUvIndex( faceVertexUvs[ 1 ] ),
                					getUvIndex( faceVertexUvs[ 2 ] )
                				);
                			}
                			if ( hasFaceNormal ) {
                				faces.push( getNormalIndex( face.normal ) );
                			}
                			if ( hasFaceVertexNormal ) {
                				var vertexNormals = face.vertexNormals;
                				faces.push(
                					getNormalIndex( vertexNormals[ 0 ] ),
                					getNormalIndex( vertexNormals[ 1 ] ),
                					getNormalIndex( vertexNormals[ 2 ] )
                				);
                			}
                			if ( hasFaceColor ) {
                				faces.push( getColorIndex( face.color ) );
                			}
                			if ( hasFaceVertexColor ) {
                				var vertexColors = face.vertexColors;
                				faces.push(
                					getColorIndex( vertexColors[ 0 ] ),
                					getColorIndex( vertexColors[ 1 ] ),
                					getColorIndex( vertexColors[ 2 ] )
                				);
                			}
                		}
                		function setBit( value, position, enabled ) {
                			return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );
                		}
                		function getNormalIndex( normal ) {
                			var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();
                			if ( normalsHash[ hash ] !== undefined ) {
                				return normalsHash[ hash ];
                			}
                			normalsHash[ hash ] = normals.length / 3;
                			normals.push( normal.x, normal.y, normal.z );
                			return normalsHash[ hash ];
                		}
                		function getColorIndex( color ) {
                			var hash = color.r.toString() + color.g.toString() + color.b.toString();
                			if ( colorsHash[ hash ] !== undefined ) {
                				return colorsHash[ hash ];
                			}
                			colorsHash[ hash ] = colors.length;
                			colors.push( color.getHex() );
                			return colorsHash[ hash ];
                		}
                		function getUvIndex( uv ) {
                			var hash = uv.x.toString() + uv.y.toString();
                			if ( uvsHash[ hash ] !== undefined ) {
                				return uvsHash[ hash ];
                			}
                			uvsHash[ hash ] = uvs.length / 2;
                			uvs.push( uv.x, uv.y );
                			return uvsHash[ hash ];
                		}
                		data.data = {};
                		data.data.vertices = vertices;
                		data.data.normals = normals;
                		if ( colors.length > 0 ) data.data.colors = colors;
                		if ( uvs.length > 0 ) data.data.uvs = [ uvs ];
                		data.data.faces = faces;
                		return data;
                	},
                	clone: function () {
                		return new Geometry().copy( this );
                	},
                	copy: function ( source ) {
                		var i, il, j, jl, k, kl;
                		this.vertices = [];
                		this.colors = [];
                		this.faces = [];
                		this.faceVertexUvs = [[]];
                		this.morphTargets = [];
                		this.morphNormals = [];
                		this.skinWeights = [];
                		this.skinIndices = [];
                		this.lineDistances = [];
                		this.boundingBox = null;
                		this.boundingSphere = null;
                		this.name = source.name;
                		var vertices = source.vertices;
                		for ( i = 0, il = vertices.length; i < il; i ++ ) {
                			this.vertices.push( vertices[ i ].clone() );
                		}
                		var colors = source.colors;
                		for ( i = 0, il = colors.length; i < il; i ++ ) {
                			this.colors.push( colors[ i ].clone() );
                		}
                		var faces = source.faces;
                		for ( i = 0, il = faces.length; i < il; i ++ ) {
                			this.faces.push( faces[ i ].clone() );
                		}
                		for ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {
                			var faceVertexUvs = source.faceVertexUvs[ i ];
                			if ( this.faceVertexUvs[ i ] === undefined ) {
                				this.faceVertexUvs[ i ] = [];
                			}
                			for ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {
                				var uvs = faceVertexUvs[ j ], uvsCopy = [];
                				for ( k = 0, kl = uvs.length; k < kl; k ++ ) {
                					var uv = uvs[ k ];
                					uvsCopy.push( uv.clone() );
                				}
                				this.faceVertexUvs[ i ].push( uvsCopy );
                			}
                		}
                		var morphTargets = source.morphTargets;
                		for ( i = 0, il = morphTargets.length; i < il; i ++ ) {
                			var morphTarget = {};
                			morphTarget.name = morphTargets[ i ].name;
                			if ( morphTargets[ i ].vertices !== undefined ) {
                				morphTarget.vertices = [];
                				for ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {
                					morphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );
                				}
                			}
                			if ( morphTargets[ i ].normals !== undefined ) {
                				morphTarget.normals = [];
                				for ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {
                					morphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );
                				}
                			}
                			this.morphTargets.push( morphTarget );
                		}
                		var morphNormals = source.morphNormals;
                		for ( i = 0, il = morphNormals.length; i < il; i ++ ) {
                			var morphNormal = {};
                			if ( morphNormals[ i ].vertexNormals !== undefined ) {
                				morphNormal.vertexNormals = [];
                				for ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {
                					var srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];
                					var destVertexNormal = {};
                					destVertexNormal.a = srcVertexNormal.a.clone();
                					destVertexNormal.b = srcVertexNormal.b.clone();
                					destVertexNormal.c = srcVertexNormal.c.clone();
                					morphNormal.vertexNormals.push( destVertexNormal );
                				}
                			}
                			if ( morphNormals[ i ].faceNormals !== undefined ) {
                				morphNormal.faceNormals = [];
                				for ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {
                					morphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );
                				}
                			}
                			this.morphNormals.push( morphNormal );
                		}
                		var skinWeights = source.skinWeights;
                		for ( i = 0, il = skinWeights.length; i < il; i ++ ) {
                			this.skinWeights.push( skinWeights[ i ].clone() );
                		}
                		var skinIndices = source.skinIndices;
                		for ( i = 0, il = skinIndices.length; i < il; i ++ ) {
                			this.skinIndices.push( skinIndices[ i ].clone() );
                		}
                		var lineDistances = source.lineDistances;
                		for ( i = 0, il = lineDistances.length; i < il; i ++ ) {
                			this.lineDistances.push( lineDistances[ i ] );
                		}
                		var boundingBox = source.boundingBox;
                		if ( boundingBox !== null ) {
                			this.boundingBox = boundingBox.clone();
                		}
                		var boundingSphere = source.boundingSphere;
                		if ( boundingSphere !== null ) {
                			this.boundingSphere = boundingSphere.clone();
                		}
                		this.elementsNeedUpdate = source.elementsNeedUpdate;
                		this.verticesNeedUpdate = source.verticesNeedUpdate;
                		this.uvsNeedUpdate = source.uvsNeedUpdate;
                		this.normalsNeedUpdate = source.normalsNeedUpdate;
                		this.colorsNeedUpdate = source.colorsNeedUpdate;
                		this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;
                		this.groupsNeedUpdate = source.groupsNeedUpdate;
                		return this;
                	},
                	dispose: function () {
                		this.dispatchEvent( { type: 'dispose' } );
                	}
                } );
                class BoxGeometry extends Geometry {
                	constructor( width, height, depth, widthSegments, heightSegments, depthSegments ) {
                		super();
                		this.type = 'BoxGeometry';
                		this.parameters = {
                			width: width,
                			height: height,
                			depth: depth,
                			widthSegments: widthSegments,
                			heightSegments: heightSegments,
                			depthSegments: depthSegments
                		};
                		this.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );
                		this.mergeVertices();
                	}
                }
                class BoxBufferGeometry extends BufferGeometry {
                	constructor( width, height, depth, widthSegments, heightSegments, depthSegments ) {
                		super();
                		this.type = 'BoxBufferGeometry';
                		this.parameters = {
                			width: width,
                			height: height,
                			depth: depth,
                			widthSegments: widthSegments,
                			heightSegments: heightSegments,
                			depthSegments: depthSegments
                		};
                		var scope = this;
                		width = width || 1;
                		height = height || 1;
                		depth = depth || 1;
                		widthSegments = Math.floor( widthSegments ) || 1;
                		heightSegments = Math.floor( heightSegments ) || 1;
                		depthSegments = Math.floor( depthSegments ) || 1;
                		var indices = [];
                		var vertices = [];
                		var normals = [];
                		var uvs = [];
                		var numberOfVertices = 0;
                		var groupStart = 0;
                		buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 );
                		buildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 );
                		buildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 );
                		buildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 );
                		buildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 );
                		buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 );
                		this.setIndex( indices );
                		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
                		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
                		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
                		function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {
                			var segmentWidth = width / gridX;
                			var segmentHeight = height / gridY;
                			var widthHalf = width / 2;
                			var heightHalf = height / 2;
                			var depthHalf = depth / 2;
                			var gridX1 = gridX + 1;
                			var gridY1 = gridY + 1;
                			var vertexCounter = 0;
                			var groupCount = 0;
                			var ix, iy;
                			var vector = new Vector3();
                			for ( iy = 0; iy < gridY1; iy ++ ) {
                				var y = iy * segmentHeight - heightHalf;
                				for ( ix = 0; ix < gridX1; ix ++ ) {
                					var x = ix * segmentWidth - widthHalf;
                					vector[ u ] = x * udir;
                					vector[ v ] = y * vdir;
                					vector[ w ] = depthHalf;
                					vertices.push( vector.x, vector.y, vector.z );
                					vector[ u ] = 0;
                					vector[ v ] = 0;
                					vector[ w ] = depth > 0 ? 1 : - 1;
                					normals.push( vector.x, vector.y, vector.z );
                					uvs.push( ix / gridX );
                					uvs.push( 1 - ( iy / gridY ) );
                					vertexCounter += 1;
                				}
                			}
                			for ( iy = 0; iy < gridY; iy ++ ) {
                				for ( ix = 0; ix < gridX; ix ++ ) {
                					var a = numberOfVertices + ix + gridX1 * iy;
                					var b = numberOfVertices + ix + gridX1 * ( iy + 1 );
                					var c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
                					var d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;
                					indices.push( a, b, d );
                					indices.push( b, c, d );
                					groupCount += 6;
                				}
                			}
                			scope.addGroup( groupStart, groupCount, materialIndex );
                			groupStart += groupCount;
                			numberOfVertices += vertexCounter;
                		}
                	}
                }
                function cloneUniforms( src ) {
                	var dst = {};
                	for ( var u in src ) {
                		dst[ u ] = {};
                		for ( var p in src[ u ] ) {
                			var property = src[ u ][ p ];
                			if ( property && ( property.isColor ||
                				property.isMatrix3 || property.isMatrix4 ||
                				property.isVector2 || property.isVector3 || property.isVector4 ||
                				property.isTexture ) ) {
                				dst[ u ][ p ] = property.clone();
                			} else if ( Array.isArray( property ) ) {
                				dst[ u ][ p ] = property.slice();
                			} else {
                				dst[ u ][ p ] = property;
                			}
                		}
                	}
                	return dst;
                }
                function mergeUniforms( uniforms ) {
                	var merged = {};
                	for ( var u = 0; u < uniforms.length; u ++ ) {
                		var tmp = cloneUniforms( uniforms[ u ] );
                		for ( var p in tmp ) {
                			merged[ p ] = tmp[ p ];
                		}
                	}
                	return merged;
                }
                var UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };
                var default_vertex = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
                var default_fragment = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
                function ShaderMaterial( parameters ) {
                	Material.call( this );
                	this.type = 'ShaderMaterial';
                	this.defines = {};
                	this.uniforms = {};
                	this.vertexShader = default_vertex;
                	this.fragmentShader = default_fragment;
                	this.linewidth = 1;
                	this.wireframe = false;
                	this.wireframeLinewidth = 1;
                	this.fog = false;
                	this.lights = false;
                	this.clipping = false;
                	this.skinning = false;
                	this.morphTargets = false;
                	this.morphNormals = false;
                	this.extensions = {
                		derivatives: false,
                		fragDepth: false,
                		drawBuffers: false,
                		shaderTextureLOD: false
                	};
                	this.defaultAttributeValues = {
                		'color': [ 1, 1, 1 ],
                		'uv': [ 0, 0 ],
                		'uv2': [ 0, 0 ]
                	};
                	this.index0AttributeName = undefined;
                	this.uniformsNeedUpdate = false;
                	if ( parameters !== undefined ) {
                		if ( parameters.attributes !== undefined ) {
                			console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );
                		}
                		this.setValues( parameters );
                	}
                }
                ShaderMaterial.prototype = Object.create( Material.prototype );
                ShaderMaterial.prototype.constructor = ShaderMaterial;
                ShaderMaterial.prototype.isShaderMaterial = true;
                ShaderMaterial.prototype.copy = function ( source ) {
                	Material.prototype.copy.call( this, source );
                	this.fragmentShader = source.fragmentShader;
                	this.vertexShader = source.vertexShader;
                	this.uniforms = cloneUniforms( source.uniforms );
                	this.defines = Object.assign( {}, source.defines );
                	this.wireframe = source.wireframe;
                	this.wireframeLinewidth = source.wireframeLinewidth;
                	this.lights = source.lights;
                	this.clipping = source.clipping;
                	this.skinning = source.skinning;
                	this.morphTargets = source.morphTargets;
                	this.morphNormals = source.morphNormals;
                	this.extensions = source.extensions;
                	return this;
                };
                ShaderMaterial.prototype.toJSON = function ( meta ) {
                	var data = Material.prototype.toJSON.call( this, meta );
                	data.uniforms = {};
                	for ( var name in this.uniforms ) {
                		var uniform = this.uniforms[ name ];
                		var value = uniform.value;
                		if ( value && value.isTexture ) {
                			data.uniforms[ name ] = {
                				type: 't',
                				value: value.toJSON( meta ).uuid
                			};
                		} else if ( value && value.isColor ) {
                			data.uniforms[ name ] = {
                				type: 'c',
                				value: value.getHex()
                			};
                		} else if ( value && value.isVector2 ) {
                			data.uniforms[ name ] = {
                				type: 'v2',
                				value: value.toArray()
                			};
                		} else if ( value && value.isVector3 ) {
                			data.uniforms[ name ] = {
                				type: 'v3',
                				value: value.toArray()
                			};
                		} else if ( value && value.isVector4 ) {
                			data.uniforms[ name ] = {
                				type: 'v4',
                				value: value.toArray()
                			};
                		} else if ( value && value.isMatrix3 ) {
                			data.uniforms[ name ] = {
                				type: 'm3',
                				value: value.toArray()
                			};
                		} else if ( value && value.isMatrix4 ) {
                			data.uniforms[ name ] = {
                				type: 'm4',
                				value: value.toArray()
                			};
                		} else {
                			data.uniforms[ name ] = {
                				value: value
                			};
                		}
                	}
                	if ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;
                	data.vertexShader = this.vertexShader;
                	data.fragmentShader = this.fragmentShader;
                	var extensions = {};
                	for ( var key in this.extensions ) {
                		if ( this.extensions[ key ] === true ) extensions[ key ] = true;
                	}
                	if ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;
                	return data;
                };
                function Camera() {
                	Object3D.call( this );
                	this.type = 'Camera';
                	this.matrixWorldInverse = new Matrix4();
                	this.projectionMatrix = new Matrix4();
                	this.projectionMatrixInverse = new Matrix4();
                }
                Camera.prototype = Object.assign( Object.create( Object3D.prototype ), {
                	constructor: Camera,
                	isCamera: true,
                	copy: function ( source, recursive ) {
                		Object3D.prototype.copy.call( this, source, recursive );
                		this.matrixWorldInverse.copy( source.matrixWorldInverse );
                		this.projectionMatrix.copy( source.projectionMatrix );
                		this.projectionMatrixInverse.copy( source.projectionMatrixInverse );
                		return this;
                	},
                	getWorldDirection: function ( target ) {
                		if ( target === undefined ) {
                			console.warn( 'THREE.Camera: .getWorldDirection() target is now required' );
                			target = new Vector3();
                		}
                		this.updateMatrixWorld( true );
                		var e = this.matrixWorld.elements;
                		return target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();
                	},
                	updateMatrixWorld: function ( force ) {
                		Object3D.prototype.updateMatrixWorld.call( this, force );
                		this.matrixWorldInverse.getInverse( this.matrixWorld );
                	},
                	clone: function () {
                		return new this.constructor().copy( this );
                	}
                } );
                function PerspectiveCamera( fov, aspect, near, far ) {
                	Camera.call( this );
                	this.type = 'PerspectiveCamera';
                	this.fov = fov !== undefined ? fov : 50;
                	this.zoom = 1;
                	this.near = near !== undefined ? near : 0.1;
                	this.far = far !== undefined ? far : 2000;
                	this.focus = 10;
                	this.aspect = aspect !== undefined ? aspect : 1;
                	this.view = null;
                	this.filmGauge = 35;
                	this.filmOffset = 0;
                	this.updateProjectionMatrix();
                }
                PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {
                	constructor: PerspectiveCamera,
                	isPerspectiveCamera: true,
                	copy: function ( source, recursive ) {
                		Camera.prototype.copy.call( this, source, recursive );
                		this.fov = source.fov;
                		this.zoom = source.zoom;
                		this.near = source.near;
                		this.far = source.far;
                		this.focus = source.focus;
                		this.aspect = source.aspect;
                		this.view = source.view === null ? null : Object.assign( {}, source.view );
                		this.filmGauge = source.filmGauge;
                		this.filmOffset = source.filmOffset;
                		return this;
                	},
                	setFocalLength: function ( focalLength ) {
                		var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
                		this.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );
                		this.updateProjectionMatrix();
                	},
                	getFocalLength: function () {
                		var vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );
                		return 0.5 * this.getFilmHeight() / vExtentSlope;
                	},
                	getEffectiveFOV: function () {
                		return _Math.RAD2DEG * 2 * Math.atan(
                			Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );
                	},
                	getFilmWidth: function () {
                		return this.filmGauge * Math.min( this.aspect, 1 );
                	},
                	getFilmHeight: function () {
                		return this.filmGauge / Math.max( this.aspect, 1 );
                	},
                	setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {
                		this.aspect = fullWidth / fullHeight;
                		if ( this.view === null ) {
                			this.view = {
                				enabled: true,
                				fullWidth: 1,
                				fullHeight: 1,
                				offsetX: 0,
                				offsetY: 0,
                				width: 1,
                				height: 1
                			};
                		}
                		this.view.enabled = true;
                		this.view.fullWidth = fullWidth;
                		this.view.fullHeight = fullHeight;
                		this.view.offsetX = x;
                		this.view.offsetY = y;
                		this.view.width = width;
                		this.view.height = height;
                		this.updateProjectionMatrix();
                	},
                	clearViewOffset: function () {
                		if ( this.view !== null ) {
                			this.view.enabled = false;
                		}
                		this.updateProjectionMatrix();
                	},
                	updateProjectionMatrix: function () {
                		var near = this.near,
                			top = near * Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,
                			height = 2 * top,
                			width = this.aspect * height,
                			left = - 0.5 * width,
                			view = this.view;
                		if ( this.view !== null && this.view.enabled ) {
                			var fullWidth = view.fullWidth,
                				fullHeight = view.fullHeight;
                			left += view.offsetX * width / fullWidth;
                			top -= view.offsetY * height / fullHeight;
                			width *= view.width / fullWidth;
                			height *= view.height / fullHeight;
                		}
                		var skew = this.filmOffset;
                		if ( skew !== 0 ) left += near * skew / this.getFilmWidth();
                		this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );
                		this.projectionMatrixInverse.getInverse( this.projectionMatrix );
                	},
                	toJSON: function ( meta ) {
                		var data = Object3D.prototype.toJSON.call( this, meta );
                		data.object.fov = this.fov;
                		data.object.zoom = this.zoom;
                		data.object.near = this.near;
                		data.object.far = this.far;
                		data.object.focus = this.focus;
                		data.object.aspect = this.aspect;
                		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );
                		data.object.filmGauge = this.filmGauge;
                		data.object.filmOffset = this.filmOffset;
                		return data;
                	}
                } );
                var fov = 90, aspect = 1;
                function CubeCamera( near, far, cubeResolution, options ) {
                	Object3D.call( this );
                	this.type = 'CubeCamera';
                	var cameraPX = new PerspectiveCamera( fov, aspect, near, far );
                	cameraPX.up.set( 0, - 1, 0 );
                	cameraPX.lookAt( new Vector3( 1, 0, 0 ) );
                	this.add( cameraPX );
                	var cameraNX = new PerspectiveCamera( fov, aspect, near, far );
                	cameraNX.up.set( 0, - 1, 0 );
                	cameraNX.lookAt( new Vector3( - 1, 0, 0 ) );
                	this.add( cameraNX );
                	var cameraPY = new PerspectiveCamera( fov, aspect, near, far );
                	cameraPY.up.set( 0, 0, 1 );
                	cameraPY.lookAt( new Vector3( 0, 1, 0 ) );
                	this.add( cameraPY );
                	var cameraNY = new PerspectiveCamera( fov, aspect, near, far );
                	cameraNY.up.set( 0, 0, - 1 );
                	cameraNY.lookAt( new Vector3( 0, - 1, 0 ) );
                	this.add( cameraNY );
                	var cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
                	cameraPZ.up.set( 0, - 1, 0 );
                	cameraPZ.lookAt( new Vector3( 0, 0, 1 ) );
                	this.add( cameraPZ );
                	var cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
                	cameraNZ.up.set( 0, - 1, 0 );
                	cameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );
                	this.add( cameraNZ );
                	options = options || { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };
                	this.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );
                	this.renderTarget.texture.name = "CubeCamera";
                	this.update = function ( renderer, scene ) {
                		if ( this.parent === null ) this.updateMatrixWorld();
                		var currentRenderTarget = renderer.getRenderTarget();
                		var renderTarget = this.renderTarget;
                		var generateMipmaps = renderTarget.texture.generateMipmaps;
                		renderTarget.texture.generateMipmaps = false;
                		renderer.setRenderTarget( renderTarget, 0 );
                		renderer.render( scene, cameraPX );
                		renderer.setRenderTarget( renderTarget, 1 );
                		renderer.render( scene, cameraNX );
                		renderer.setRenderTarget( renderTarget, 2 );
                		renderer.render( scene, cameraPY );
                		renderer.setRenderTarget( renderTarget, 3 );
                		renderer.render( scene, cameraNY );
                		renderer.setRenderTarget( renderTarget, 4 );
                		renderer.render( scene, cameraPZ );
                		renderTarget.texture.generateMipmaps = generateMipmaps;
                		renderer.setRenderTarget( renderTarget, 5 );
                		renderer.render( scene, cameraNZ );
                		renderer.setRenderTarget( currentRenderTarget );
                	};
                	this.clear = function ( renderer, color, depth, stencil ) {
                		var currentRenderTarget = renderer.getRenderTarget();
                		var renderTarget = this.renderTarget;
                		for ( var i = 0; i < 6; i ++ ) {
                			renderer.setRenderTarget( renderTarget, i );
                			renderer.clear( color, depth, stencil );
                		}
                		renderer.setRenderTarget( currentRenderTarget );
                	};
                }
                CubeCamera.prototype = Object.create( Object3D.prototype );
                CubeCamera.prototype.constructor = CubeCamera;
                function WebGLRenderTargetCube( width, height, options ) {
                	WebGLRenderTarget.call( this, width, height, options );
                }
                WebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );
                WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;
                WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;
                WebGLRenderTargetCube.prototype.fromEquirectangularTexture = function ( renderer, texture ) {
                	this.texture.type = texture.type;
                	this.texture.format = texture.format;
                	this.texture.encoding = texture.encoding;
                	var scene = new Scene();
                	var shader = {
                		uniforms: {
                			tEquirect: { value: null },
                		},
                		vertexShader: [
                			"varying vec3 vWorldDirection;",
                			"vec3 transformDirection( in vec3 dir, in mat4 matrix ) {",
                			"	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );",
                			"}",
                			"void main() {",
                			"	vWorldDirection = transformDirection( position, modelMatrix );",
                			"	#include <begin_vertex>",
                			"	#include <project_vertex>",
                			"}"
                		].join( '\n' ),
                		fragmentShader: [
                			"uniform sampler2D tEquirect;",
                			"varying vec3 vWorldDirection;",
                			"#define RECIPROCAL_PI 0.31830988618",
                			"#define RECIPROCAL_PI2 0.15915494",
                			"void main() {",
                			"	vec3 direction = normalize( vWorldDirection );",
                			"	vec2 sampleUV;",
                			"	sampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;",
                			"	sampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;",
                			"	gl_FragColor = texture2D( tEquirect, sampleUV );",
                			"}"
                		].join( '\n' ),
                	};
                	var material = new ShaderMaterial( {
                		type: 'CubemapFromEquirect',
                		uniforms: cloneUniforms( shader.uniforms ),
                		vertexShader: shader.vertexShader,
                		fragmentShader: shader.fragmentShader,
                		side: BackSide,
                		blending: NoBlending
                	} );
                	material.uniforms.tEquirect.value = texture;
                	var mesh = new Mesh( new BoxBufferGeometry( 5, 5, 5 ), material );
                	scene.add( mesh );
                	var camera = new CubeCamera( 1, 10, 1 );
                	camera.renderTarget = this;
                	camera.renderTarget.texture.name = 'CubeCameraTexture';
                	camera.update( renderer, scene );
                	mesh.geometry.dispose();
                	mesh.material.dispose();
                	return this;
                };
                function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {
                	Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );
                	this.image = { data: data || null, width: width || 1, height: height || 1 };
                	this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
                	this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;
                	this.generateMipmaps = false;
                	this.flipY = false;
                	this.unpackAlignment = 1;
                	this.needsUpdate = true;
                }
                DataTexture.prototype = Object.create( Texture.prototype );
                DataTexture.prototype.constructor = DataTexture;
                DataTexture.prototype.isDataTexture = true;
                var _sphere$1 = new Sphere();
                var _vector$5 = new Vector3();
                function Frustum( p0, p1, p2, p3, p4, p5 ) {
                	this.planes = [
                		( p0 !== undefined ) ? p0 : new Plane(),
                		( p1 !== undefined ) ? p1 : new Plane(),
                		( p2 !== undefined ) ? p2 : new Plane(),
                		( p3 !== undefined ) ? p3 : new Plane(),
                		( p4 !== undefined ) ? p4 : new Plane(),
                		( p5 !== undefined ) ? p5 : new Plane()
                	];
                }
                Object.assign( Frustum.prototype, {
                	set: function ( p0, p1, p2, p3, p4, p5 ) {
                		var planes = this.planes;
                		planes[ 0 ].copy( p0 );
                		planes[ 1 ].copy( p1 );
                		planes[ 2 ].copy( p2 );
                		planes[ 3 ].copy( p3 );
                		planes[ 4 ].copy( p4 );
                		planes[ 5 ].copy( p5 );
                		return this;
                	},
                	clone: function () {
                		return new this.constructor().copy( this );
                	},
                	copy: function ( frustum ) {
                		var planes = this.planes;
                		for ( var i = 0; i < 6; i ++ ) {
                			planes[ i ].copy( frustum.planes[ i ] );
                		}
                		return this;
                	},
                	setFromMatrix: function ( m ) {
                		var planes = this.planes;
                		var me = m.elements;
                		var me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
                		var me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
                		var me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
                		var me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];
                		planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
                		planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
                		planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
                		planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
                		planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
                		planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();
                		return this;
                	},
                	intersectsObject: function ( object ) {
                		var geometry = object.geometry;
                		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
                		_sphere$1.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );
                		return this.intersectsSphere( _sphere$1 );
                	},
                	intersectsSprite: function ( sprite ) {
                		_sphere$1.center.set( 0, 0, 0 );
                		_sphere$1.radius = 0.7071067811865476;
                		_sphere$1.applyMatrix4( sprite.matrixWorld );
                		return this.intersectsSphere( _sphere$1 );
                	},
                	intersectsSphere: function ( sphere ) {
                		var planes = this.planes;
                		var center = sphere.center;
                		var negRadius = - sphere.radius;
                		for ( var i = 0; i < 6; i ++ ) {
                			var distance = planes[ i ].distanceToPoint( center );
                			if ( distance < negRadius ) {
                				return false;
                			}
                		}
                		return true;
                	},
                	intersectsBox: function ( box ) {
                		var planes = this.planes;
                		for ( var i = 0; i < 6; i ++ ) {
                			var plane = planes[ i ];
                			_vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;
                			_vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;
                			_vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;
                			if ( plane.distanceToPoint( _vector$5 ) < 0 ) {
                				return false;
                			}
                		}
                		return true;
                	},
                	containsPoint: function ( point ) {
                		var planes = this.planes;
                		for ( var i = 0; i < 6; i ++ ) {
                			if ( planes[ i ].distanceToPoint( point ) < 0 ) {
                				return false;
                			}
                		}
                		return true;
                	}
                } );
                var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";
                var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";
                var alphatest_fragment = "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif";
                var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif";
                var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";
                var begin_vertex = "vec3 transformed = vec3( position );";
                var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";
                var bsdfs = "vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha  = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif";
                var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";
                var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t#endif\n#endif";
                var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
                var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvarying vec3 vViewPosition;\n#endif";
                var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif";
                var color_fragment = "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif";
                var color_pars_fragment = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";
                var color_pars_vertex = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";
                var color_vertex = "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif";
                var common = "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n  return m[ 2 ][ 3 ] == - 1.0;\n}";
                var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif";
                var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\ttransformedNormal = mat3( instanceMatrix ) * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = normalMatrix * objectTangent;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";
                var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";
                var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif";
                var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
                var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";
                var encodings_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
                var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}";
                var envmap_fragment = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\t\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t}  else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";
                var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";
                var envmap_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";
                var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";
                var envmap_vertex = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) { \n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";
                var fog_vertex = "#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif";
                var fog_pars_vertex = "#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif";
                var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
                var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";
                var gradientmap_pars_fragment = "#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif";
                var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif";
                var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";
                var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif";
                var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif";
                var envmap_physical_pars_fragment = "#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t  vec3 reflectVec = reflect( -viewDir, normal );\n\t\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, roughness );\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif";
                var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
                var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)";
                var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = saturate( clearcoat );\tmaterial.clearcoatRoughness = clamp( clearcoatRoughness, 0.04, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif";
                var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
                var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tdirectLight.color *= all( bvec3( pointLight.shadow, directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tdirectLight.color *= all( bvec3( spotLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectLight.color *= all( bvec3( directionalLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";
                var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif";
                var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";
                var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
                var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";
                var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif";
                var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif";
                var map_fragment = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif";
                var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";
                var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";
                var map_particle_pars_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";
                var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";
                var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";
                var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif";
                var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";
                var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t#endif\n#endif";
                var normal_fragment_begin = "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;";
                var normal_fragment_maps = "#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif";
                var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\tvec3 N = normalize( surf_norm );\n\t\tmat3 tsn = mat3( S, T, N );\n\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif";
                var clearcoat_normal_fragment_begin = "#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif";
                var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\n\t#endif\n#endif";
                var clearcoat_normalmap_pars_fragment = "#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif";
                var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpack2HalfToRGBA( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";
                var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";
                var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";
                var dithering_fragment = "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
                var dithering_pars_fragment = "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";
                var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";
                var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";
                var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpack2HalfToRGBA( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = ( floor( uv * size - 0.5 ) + 0.5 ) * texelSize;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif";
                var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";
                var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif";
                var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= all( bvec2( directionalLight.shadow, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= all( bvec2( spotLight.shadow, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= all( bvec2( pointLight.shadow, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}";
                var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
                var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif";
                var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
                var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";
                var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";
                var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";
                var tonemapping_fragment = "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
                var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\n}";
                var uv_pars_fragment = "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif";
                var uv_pars_vertex = "#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif";
                var uv_vertex = "#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";
                var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";
                var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif";
                var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif";
                var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";
                var background_frag = "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
                var background_vert = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
                var cube_frag = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
                var cube_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";
                var depth_frag = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}";
                var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}";
                var distanceRGBA_frag = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";
                var distanceRGBA_vert = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";
                var equirect_frag = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
                var equirect_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";
                var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
                var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";
                var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
                var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";
                var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
                var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
                var meshmatcap_frag = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
                var meshmatcap_vert = "#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";
                var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
                var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
                var meshphysical_frag = "#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSPARENCY\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSPARENCY\n\tuniform float transparency;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#ifdef TRANSPARENCY\n\t\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\n\t#endif\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
                var meshphysical_vert = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
                var normal_frag = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}";
                var normal_vert = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";
                var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
                var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";
                var shadow_frag = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}";
                var shadow_vert = "#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
                var sprite_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
                var sprite_vert = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";
                var ShaderChunk = {
                	alphamap_fragment: alphamap_fragment,
                	alphamap_pars_fragment: alphamap_pars_fragment,
                	alphatest_fragment: alphatest_fragment,
                	aomap_fragment: aomap_fragment,
                	aomap_pars_fragment: aomap_pars_fragment,
                	begin_vertex: begin_vertex,
                	beginnormal_vertex: beginnormal_vertex,
                	bsdfs: bsdfs,
                	bumpmap_pars_fragment: bumpmap_pars_fragment,
                	clipping_planes_fragment: clipping_planes_fragment,
                	clipping_planes_pars_fragment: clipping_planes_pars_fragment,
                	clipping_planes_pars_vertex: clipping_planes_pars_vertex,
                	clipping_planes_vertex: clipping_planes_vertex,
                	color_fragment: color_fragment,
                	color_pars_fragment: color_pars_fragment,
                	color_pars_vertex: color_pars_vertex,
                	color_vertex: color_vertex,
                	common: common,
                	cube_uv_reflection_fragment: cube_uv_reflection_fragment,
                	defaultnormal_vertex: defaultnormal_vertex,
                	displacementmap_pars_vertex: displacementmap_pars_vertex,
                	displacementmap_vertex: displacementmap_vertex,
                	emissivemap_fragment: emissivemap_fragment,
                	emissivemap_pars_fragment: emissivemap_pars_fragment,
                	encodings_fragment: encodings_fragment,
                	encodings_pars_fragment: encodings_pars_fragment,
                	envmap_fragment: envmap_fragment,
                	envmap_common_pars_fragment: envmap_common_pars_fragment,
                	envmap_pars_fragment: envmap_pars_fragment,
                	envmap_pars_vertex: envmap_pars_vertex,
                	envmap_physical_pars_fragment: envmap_physical_pars_fragment,
                	envmap_vertex: envmap_vertex,
                	fog_vertex: fog_vertex,
                	fog_pars_vertex: fog_pars_vertex,
                	fog_fragment: fog_fragment,
                	fog_pars_fragment: fog_pars_fragment,
                	gradientmap_pars_fragment: gradientmap_pars_fragment,
                	lightmap_fragment: lightmap_fragment,
                	lightmap_pars_fragment: lightmap_pars_fragment,
                	lights_lambert_vertex: lights_lambert_vertex,
                	lights_pars_begin: lights_pars_begin,
                	lights_phong_fragment: lights_phong_fragment,
                	lights_phong_pars_fragment: lights_phong_pars_fragment,
                	lights_physical_fragment: lights_physical_fragment,
                	lights_physical_pars_fragment: lights_physical_pars_fragment,
                	lights_fragment_begin: lights_fragment_begin,
                	lights_fragment_maps: lights_fragment_maps,
                	lights_fragment_end: lights_fragment_end,
                	logdepthbuf_fragment: logdepthbuf_fragment,
                	logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
                	logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
                	logdepthbuf_vertex: logdepthbuf_vertex,
                	map_fragment: map_fragment,
                	map_pars_fragment: map_pars_fragment,
                	map_particle_fragment: map_particle_fragment,
                	map_particle_pars_fragment: map_particle_pars_fragment,
                	metalnessmap_fragment: metalnessmap_fragment,
                	metalnessmap_pars_fragment: metalnessmap_pars_fragment,
                	morphnormal_vertex: morphnormal_vertex,
                	morphtarget_pars_vertex: morphtarget_pars_vertex,
                	morphtarget_vertex: morphtarget_vertex,
                	normal_fragment_begin: normal_fragment_begin,
                	normal_fragment_maps: normal_fragment_maps,
                	normalmap_pars_fragment: normalmap_pars_fragment,
                	clearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,
                	clearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,
                	clearcoat_normalmap_pars_fragment: clearcoat_normalmap_pars_fragment,
                	packing: packing,
                	premultiplied_alpha_fragment: premultiplied_alpha_fragment,
                	project_vertex: project_vertex,
                	dithering_fragment: dithering_fragment,
                	dithering_pars_fragment: dithering_pars_fragment,
                	roughnessmap_fragment: roughnessmap_fragment,
                	roughnessmap_pars_fragment: roughnessmap_pars_fragment,
                	shadowmap_pars_fragment: shadowmap_pars_fragment,
                	shadowmap_pars_vertex: shadowmap_pars_vertex,
                	shadowmap_vertex: shadowmap_vertex,
                	shadowmask_pars_fragment: shadowmask_pars_fragment,
                	skinbase_vertex: skinbase_vertex,
                	skinning_pars_vertex: skinning_pars_vertex,
                	skinning_vertex: skinning_vertex,
                	skinnormal_vertex: skinnormal_vertex,
                	specularmap_fragment: specularmap_fragment,
                	specularmap_pars_fragment: specularmap_pars_fragment,
                	tonemapping_fragment: tonemapping_fragment,
                	tonemapping_pars_fragment: tonemapping_pars_fragment,
                	uv_pars_fragment: uv_pars_fragment,
                	uv_pars_vertex: uv_pars_vertex,
                	uv_vertex: uv_vertex,
                	uv2_pars_fragment: uv2_pars_fragment,
                	uv2_pars_vertex: uv2_pars_vertex,
                	uv2_vertex: uv2_vertex,
                	worldpos_vertex: worldpos_vertex,
                	background_frag: background_frag,
                	background_vert: background_vert,
                	cube_frag: cube_frag,
                	cube_vert: cube_vert,
                	depth_frag: depth_frag,
                	depth_vert: depth_vert,
                	distanceRGBA_frag: distanceRGBA_frag,
                	distanceRGBA_vert: distanceRGBA_vert,
                	equirect_frag: equirect_frag,
                	equirect_vert: equirect_vert,
                	linedashed_frag: linedashed_frag,
                	linedashed_vert: linedashed_vert,
                	meshbasic_frag: meshbasic_frag,
                	meshbasic_vert: meshbasic_vert,
                	meshlambert_frag: meshlambert_frag,
                	meshlambert_vert: meshlambert_vert,
                	meshmatcap_frag: meshmatcap_frag,
                	meshmatcap_vert: meshmatcap_vert,
                	meshphong_frag: meshphong_frag,
                	meshphong_vert: meshphong_vert,
                	meshphysical_frag: meshphysical_frag,
                	meshphysical_vert: meshphysical_vert,
                	normal_frag: normal_frag,
                	normal_vert: normal_vert,
                	points_frag: points_frag,
                	points_vert: points_vert,
                	shadow_frag: shadow_frag,
                	shadow_vert: shadow_vert,
                	sprite_frag: sprite_frag,
                	sprite_vert: sprite_vert
                };
                var UniformsLib = {
                	common: {
                		diffuse: { value: new Color( 0xeeeeee ) },
                		opacity: { value: 1.0 },
                		map: { value: null },
                		uvTransform: { value: new Matrix3() },
                		alphaMap: { value: null },
                	},
                	specularmap: {
                		specularMap: { value: null },
                	},
                	envmap: {
                		envMap: { value: null },
                		flipEnvMap: { value: - 1 },
                		reflectivity: { value: 1.0 },
                		refractionRatio: { value: 0.98 },
                		maxMipLevel: { value: 0 }
                	},
                	aomap: {
                		aoMap: { value: null },
                		aoMapIntensity: { value: 1 }
                	},
                	lightmap: {
                		lightMap: { value: null },
                		lightMapIntensity: { value: 1 }
                	},
                	emissivemap: {
                		emissiveMap: { value: null }
                	},
                	bumpmap: {
                		bumpMap: { value: null },
                		bumpScale: { value: 1 }
                	},
                	normalmap: {
                		normalMap: { value: null },
                		normalScale: { value: new Vector2( 1, 1 ) }
                	},
                	displacementmap: {
                		displacementMap: { value: null },
                		displacementScale: { value: 1 },
                		displacementBias: { value: 0 }
                	},
                	roughnessmap: {
                		roughnessMap: { value: null }
                	},
                	metalnessmap: {
                		metalnessMap: { value: null }
                	},
                	gradientmap: {
                		gradientMap: { value: null }
                	},
                	fog: {
                		fogDensity: { value: 0.00025 },
                		fogNear: { value: 1 },
                		fogFar: { value: 2000 },
                		fogColor: { value: new Color( 0xffffff ) }
                	},
                	lights: {
                		ambientLightColor: { value: [] },
                		lightProbe: { value: [] },
                		directionalLights: { value: [], properties: {
                			direction: {},
                			color: {},
                			shadow: {},
                			shadowBias: {},
                			shadowRadius: {},
                			shadowMapSize: {}
                		} },
                		directionalShadowMap: { value: [] },
                		directionalShadowMatrix: { value: [] },
                		spotLights: { value: [], properties: {
                			color: {},
                			position: {},
                			direction: {},
                			distance: {},
                			coneCos: {},
                			penumbraCos: {},
                			decay: {},
                			shadow: {},
                			shadowBias: {},
                			shadowRadius: {},
                			shadowMapSize: {}
                		} },
                		spotShadowMap: { value: [] },
                		spotShadowMatrix: { value: [] },
                		pointLights: { value: [], properties: {
                			color: {},
                			position: {},
                			decay: {},
                			distance: {},
                			shadow: {},
                			shadowBias: {},
                			shadowRadius: {},
                			shadowMapSize: {},
                			shadowCameraNear: {},
                			shadowCameraFar: {}
                		} },
                		pointShadowMap: { value: [] },
                		pointShadowMatrix: { value: [] },
                		hemisphereLights: { value: [], properties: {
                			direction: {},
                			skyColor: {},
                			groundColor: {}
                		} },
                		rectAreaLights: { value: [], properties: {
                			color: {},
                			position: {},
                			width: {},
                			height: {}
                		} }
                	},
                	points: {
                		diffuse: { value: new Color( 0xeeeeee ) },
                		opacity: { value: 1.0 },
                		size: { value: 1.0 },
                		scale: { value: 1.0 },
                		map: { value: null },
                		alphaMap: { value: null },
                		uvTransform: { value: new Matrix3() }
                	},
                	sprite: {
                		diffuse: { value: new Color( 0xeeeeee ) },
                		opacity: { value: 1.0 },
                		center: { value: new Vector2( 0.5, 0.5 ) },
                		rotation: { value: 0.0 },
                		map: { value: null },
                		alphaMap: { value: null },
                		uvTransform: { value: new Matrix3() }
                	}
                };
                var ShaderLib = {
                	basic: {
                		uniforms: mergeUniforms( [
                			UniformsLib.common,
                			UniformsLib.specularmap,
                			UniformsLib.envmap,
                			UniformsLib.aomap,
                			UniformsLib.lightmap,
                			UniformsLib.fog
                		] ),
                		vertexShader: ShaderChunk.meshbasic_vert,
                		fragmentShader: ShaderChunk.meshbasic_frag
                	},
                	lambert: {
                		uniforms: mergeUniforms( [
                			UniformsLib.common,
                			UniformsLib.specularmap,
                			UniformsLib.envmap,
                			UniformsLib.aomap,
                			UniformsLib.lightmap,
                			UniformsLib.emissivemap,
                			UniformsLib.fog,
                			UniformsLib.lights,
                			{
                				emissive: { value: new Color( 0x000000 ) }
                			}
                		] ),
                		vertexShader: ShaderChunk.meshlambert_vert,
                		fragmentShader: ShaderChunk.meshlambert_frag
                	},
                	phong: {
                		uniforms: mergeUniforms( [
                			UniformsLib.common,
                			UniformsLib.specularmap,
                			UniformsLib.envmap,
                			UniformsLib.aomap,
                			UniformsLib.lightmap,
                			UniformsLib.emissivemap,
                			UniformsLib.bumpmap,
                			UniformsLib.normalmap,
                			UniformsLib.displacementmap,
                			UniformsLib.gradientmap,
                			UniformsLib.fog,
                			UniformsLib.lights,
                			{
                				emissive: { value: new Color( 0x000000 ) },
                				specular: { value: new Color( 0x111111 ) },
                				shininess: { value: 30 }
                			}
                		] ),
                		vertexShader: ShaderChunk.meshphong_vert,
                		fragmentShader: ShaderChunk.meshphong_frag
                	},
                	standard: {
                		uniforms: mergeUniforms( [
                			UniformsLib.common,
                			UniformsLib.envmap,
                			UniformsLib.aomap,
                			UniformsLib.lightmap,
                			UniformsLib.emissivemap,
                			UniformsLib.bumpmap,
                			UniformsLib.normalmap,
                			UniformsLib.displacementmap,
                			UniformsLib.roughnessmap,
                			UniformsLib.metalnessmap,
                			UniformsLib.fog,
                			UniformsLib.lights,
                			{
                				emissive: { value: new Color( 0x000000 ) },
                				roughness: { value: 0.5 },
                				metalness: { value: 0.5 },
                				envMapIntensity: { value: 1 }
                			}
                		] ),
                		vertexShader: ShaderChunk.meshphysical_vert,
                		fragmentShader: ShaderChunk.meshphysical_frag
                	},
                	matcap: {
                		uniforms: mergeUniforms( [
                			UniformsLib.common,
                			UniformsLib.bumpmap,
                			UniformsLib.normalmap,
                			UniformsLib.displacementmap,
                			UniformsLib.fog,
                			{
                				matcap: { value: null }
                			}
                		] ),
                		vertexShader: ShaderChunk.meshmatcap_vert,
                		fragmentShader: ShaderChunk.meshmatcap_frag
                	},
                	points: {
                		uniforms: mergeUniforms( [
                			UniformsLib.points,
                			UniformsLib.fog
                		] ),
                		vertexShader: ShaderChunk.points_vert,
                		fragmentShader: ShaderChunk.points_frag
                	},
                	dashed: {
                		uniforms: mergeUniforms( [
                			UniformsLib.common,
                			UniformsLib.fog,
                			{
                				scale: { value: 1 },
                				dashSize: { value: 1 },
                				totalSize: { value: 2 }
                			}
                		] ),
                		vertexShader: ShaderChunk.linedashed_vert,
                		fragmentShader: ShaderChunk.linedashed_frag
                	},
                	depth: {
                		uniforms: mergeUniforms( [
                			UniformsLib.common,
                			UniformsLib.displacementmap
                		] ),
                		vertexShader: ShaderChunk.depth_vert,
                		fragmentShader: ShaderChunk.depth_frag
                	},
                	normal: {
                		uniforms: mergeUniforms( [
                			UniformsLib.common,
                			UniformsLib.bumpmap,
                			UniformsLib.normalmap,
                			UniformsLib.displacementmap,
                			{
                				opacity: { value: 1.0 }
                			}
                		] ),
                		vertexShader: ShaderChunk.normal_vert,
                		fragmentShader: ShaderChunk.normal_frag
                	},
                	sprite: {
                		uniforms: mergeUniforms( [
                			UniformsLib.sprite,
                			UniformsLib.fog
                		] ),
                		vertexShader: ShaderChunk.sprite_vert,
                		fragmentShader: ShaderChunk.sprite_frag
                	},
                	background: {
                		uniforms: {
                			uvTransform: { value: new Matrix3() },
                			t2D: { value: null },
                		},
                		vertexShader: ShaderChunk.background_vert,
                		fragmentShader: ShaderChunk.background_frag
                	},
                	cube: {
                		uniforms: {
                			tCube: { value: null },
                			tFlip: { value: - 1 },
                			opacity: { value: 1.0 }
                		},
                		vertexShader: ShaderChunk.cube_vert,
                		fragmentShader: ShaderChunk.cube_frag
                	},
                	equirect: {
                		uniforms: {
                			tEquirect: { value: null },
                		},
                		vertexShader: ShaderChunk.equirect_vert,
                		fragmentShader: ShaderChunk.equirect_frag
                	},
                	distanceRGBA: {
                		uniforms: mergeUniforms( [
                			UniformsLib.common,
                			UniformsLib.displacementmap,
                			{
                				referencePosition: { value: new Vector3() },
                				nearDistance: { value: 1 },
                				farDistance: { value: 1000 }
                			}
                		] ),
                		vertexShader: ShaderChunk.distanceRGBA_vert,
                		fragmentShader: ShaderChunk.distanceRGBA_frag
                	},
                	shadow: {
                		uniforms: mergeUniforms( [
                			UniformsLib.lights,
                			UniformsLib.fog,
                			{
                				color: { value: new Color( 0x00000 ) },
                				opacity: { value: 1.0 }
                			},
                		] ),
                		vertexShader: ShaderChunk.shadow_vert,
                		fragmentShader: ShaderChunk.shadow_frag
                	}
                };
                ShaderLib.physical = {
                	uniforms: mergeUniforms( [
                		ShaderLib.standard.uniforms,
                		{
                			transparency: { value: 0 },
                			clearcoat: { value: 0 },
                			clearcoatRoughness: { value: 0 },
                			sheen: { value: new Color( 0x000000 ) },
                			clearcoatNormalScale: { value: new Vector2( 1, 1 ) },
                			clearcoatNormalMap: { value: null },
                		}
                	] ),
                	vertexShader: ShaderChunk.meshphysical_vert,
                	fragmentShader: ShaderChunk.meshphysical_frag
                };
                function WebGLAnimation() {
                	var context = null;
                	var isAnimating = false;
                	var animationLoop = null;
                	function onAnimationFrame( time, frame ) {
                		if ( isAnimating === false ) return;
                		animationLoop( time, frame );
                		context.requestAnimationFrame( onAnimationFrame );
                	}
                	return {
                		start: function () {
                			if ( isAnimating === true ) return;
                			if ( animationLoop === null ) return;
                			context.requestAnimationFrame( onAnimationFrame );
                			isAnimating = true;
                		},
                		stop: function () {
                			isAnimating = false;
                		},
                		setAnimationLoop: function ( callback ) {
                			animationLoop = callback;
                		},
                		setContext: function ( value ) {
                			context = value;
                		}
                	};
                }
                function WebGLAttributes( gl ) {
                	var buffers = new WeakMap();
                	function createBuffer( attribute, bufferType ) {
                		var array = attribute.array;
                		var usage = attribute.usage;
                		var buffer = gl.createBuffer();
                		gl.bindBuffer( bufferType, buffer );
                		gl.bufferData( bufferType, array, usage );
                		attribute.onUploadCallback();
                		var type = 5126;
                		if ( array instanceof Float32Array ) {
                			type = 5126;
                		} else if ( array instanceof Float64Array ) {
                			console.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );
                		} else if ( array instanceof Uint16Array ) {
                			type = 5123;
                		} else if ( array instanceof Int16Array ) {
                			type = 5122;
                		} else if ( array instanceof Uint32Array ) {
                			type = 5125;
                		} else if ( array instanceof Int32Array ) {
                			type = 5124;
                		} else if ( array instanceof Int8Array ) {
                			type = 5120;
                		} else if ( array instanceof Uint8Array ) {
                			type = 5121;
                		}
                		return {
                			buffer: buffer,
                			type: type,
                			bytesPerElement: array.BYTES_PER_ELEMENT,
                			version: attribute.version
                		};
                	}
                	function updateBuffer( buffer, attribute, bufferType ) {
                		var array = attribute.array;
                		var updateRange = attribute.updateRange;
                		gl.bindBuffer( bufferType, buffer );
                		if ( updateRange.count === - 1 ) {
                			gl.bufferSubData( bufferType, 0, array );
                		} else {
                			gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
                				array.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );
                			updateRange.count = - 1;
                		}
                	}
                	function get( attribute ) {
                		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;
                		return buffers.get( attribute );
                	}
                	function remove( attribute ) {
                		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;
                		var data = buffers.get( attribute );
                		if ( data ) {
                			gl.deleteBuffer( data.buffer );
                			buffers.delete( attribute );
                		}
                	}
                	function update( attribute, bufferType ) {
                		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;
                		var data = buffers.get( attribute );
                		if ( data === undefined ) {
                			buffers.set( attribute, createBuffer( attribute, bufferType ) );
                		} else if ( data.version < attribute.version ) {
                			updateBuffer( data.buffer, attribute, bufferType );
                			data.version = attribute.version;
                		}
                	}
                	return {
                		get: get,
                		remove: remove,
                		update: update
                	};
                }
                function PlaneGeometry( width, height, widthSegments, heightSegments ) {
                	Geometry.call( this );
                	this.type = 'PlaneGeometry';
                	this.parameters = {
                		width: width,
                		height: height,
                		widthSegments: widthSegments,
                		heightSegments: heightSegments
                	};
                	this.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );
                	this.mergeVertices();
                }
                PlaneGeometry.prototype = Object.create( Geometry.prototype );
                PlaneGeometry.prototype.constructor = PlaneGeometry;
                function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {
                	BufferGeometry.call( this );
                	this.type = 'PlaneBufferGeometry';
                	this.parameters = {
                		width: width,
                		height: height,
                		widthSegments: widthSegments,
                		heightSegments: heightSegments
                	};
                	width = width || 1;
                	height = height || 1;
                	var width_half = width / 2;
                	var height_half = height / 2;
                	var gridX = Math.floor( widthSegments ) || 1;
                	var gridY = Math.floor( heightSegments ) || 1;
                	var gridX1 = gridX + 1;
                	var gridY1 = gridY + 1;
                	var segment_width = width / gridX;
                	var segment_height = height / gridY;
                	var ix, iy;
                	var indices = [];
                	var vertices = [];
                	var normals = [];
                	var uvs = [];
                	for ( iy = 0; iy < gridY1; iy ++ ) {
                		var y = iy * segment_height - height_half;
                		for ( ix = 0; ix < gridX1; ix ++ ) {
                			var x = ix * segment_width - width_half;
                			vertices.push( x, - y, 0 );
                			normals.push( 0, 0, 1 );
                			uvs.push( ix / gridX );
                			uvs.push( 1 - ( iy / gridY ) );
                		}
                	}
                	for ( iy = 0; iy < gridY; iy ++ ) {
                		for ( ix = 0; ix < gridX; ix ++ ) {
                			var a = ix + gridX1 * iy;
                			var b = ix + gridX1 * ( iy + 1 );
                			var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
                			var d = ( ix + 1 ) + gridX1 * iy;
                			indices.push( a, b, d );
                			indices.push( b, c, d );
                		}
                	}
                	this.setIndex( indices );
                	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
                	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
                	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
                }
                PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
                PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;
                function WebGLBackground( renderer, state, objects, premultipliedAlpha ) {
                	var clearColor = new Color( 0x000000 );
                	var clearAlpha = 0;
                	var planeMesh;
                	var boxMesh;
                	var currentBackground = null;
                	var currentBackgroundVersion = 0;
                	function render( renderList, scene, camera, forceClear ) {
                		var background = scene.background;
                		var vr = renderer.vr;
                		var session = vr.getSession && vr.getSession();
                		if ( session && session.environmentBlendMode === 'additive' ) {
                			background = null;
                		}
                		if ( background === null ) {
                			setClear( clearColor, clearAlpha );
                			currentBackground = null;
                			currentBackgroundVersion = 0;
                		} else if ( background && background.isColor ) {
                			setClear( background, 1 );
                			forceClear = true;
                			currentBackground = null;
                			currentBackgroundVersion = 0;
                		}
                		if ( renderer.autoClear || forceClear ) {
                			renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );
                		}
                		if ( background && ( background.isCubeTexture || background.isWebGLRenderTargetCube ) ) {
                			if ( boxMesh === undefined ) {
                				boxMesh = new Mesh(
                					new BoxBufferGeometry( 1, 1, 1 ),
                					new ShaderMaterial( {
                						type: 'BackgroundCubeMaterial',
                						uniforms: cloneUniforms( ShaderLib.cube.uniforms ),
                						vertexShader: ShaderLib.cube.vertexShader,
                						fragmentShader: ShaderLib.cube.fragmentShader,
                						side: BackSide,
                						depthTest: false,
                						depthWrite: false,
                						fog: false
                					} )
                				);
                				boxMesh.geometry.deleteAttribute( 'normal' );
                				boxMesh.geometry.deleteAttribute( 'uv' );
                				boxMesh.onBeforeRender = function ( renderer, scene, camera ) {
                					this.matrixWorld.copyPosition( camera.matrixWorld );
                				};
                				Object.defineProperty( boxMesh.material, 'map', {
                					get: function () {
                						return this.uniforms.tCube.value;
                					}
                				} );
                				objects.update( boxMesh );
                			}
                			var texture = background.isWebGLRenderTargetCube ? background.texture : background;
                			boxMesh.material.uniforms.tCube.value = texture;
                			boxMesh.material.uniforms.tFlip.value = ( background.isWebGLRenderTargetCube ) ? 1 : - 1;
                			if ( currentBackground !== background ||
                			     currentBackgroundVersion !== texture.version ) {
                				boxMesh.material.needsUpdate = true;
                				currentBackground = background;
                				currentBackgroundVersion = texture.version;
                			}
                			renderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );
                		} else if ( background && background.isTexture ) {
                			if ( planeMesh === undefined ) {
                				planeMesh = new Mesh(
                					new PlaneBufferGeometry( 2, 2 ),
                					new ShaderMaterial( {
                						type: 'BackgroundMaterial',
                						uniforms: cloneUniforms( ShaderLib.background.uniforms ),
                						vertexShader: ShaderLib.background.vertexShader,
                						fragmentShader: ShaderLib.background.fragmentShader,
                						side: FrontSide,
                						depthTest: false,
                						depthWrite: false,
                						fog: false
                					} )
                				);
                				planeMesh.geometry.deleteAttribute( 'normal' );
                				Object.defineProperty( planeMesh.material, 'map', {
                					get: function () {
                						return this.uniforms.t2D.value;
                					}
                				} );
                				objects.update( planeMesh );
                			}
                			planeMesh.material.uniforms.t2D.value = background;
                			if ( background.matrixAutoUpdate === true ) {
                				background.updateMatrix();
                			}
                			planeMesh.material.uniforms.uvTransform.value.copy( background.matrix );
                			if ( currentBackground !== background ||
                				   currentBackgroundVersion !== background.version ) {
                				planeMesh.material.needsUpdate = true;
                				currentBackground = background;
                				currentBackgroundVersion = background.version;
                			}
                			renderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );
                		}
                	}
                	function setClear( color, alpha ) {
                		state.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );
                	}
                	return {
                		getClearColor: function () {
                			return clearColor;
                		},
                		setClearColor: function ( color, alpha ) {
                			clearColor.set( color );
                			clearAlpha = alpha !== undefined ? alpha : 1;
                			setClear( clearColor, clearAlpha );
                		},
                		getClearAlpha: function () {
                			return clearAlpha;
                		},
                		setClearAlpha: function ( alpha ) {
                			clearAlpha = alpha;
                			setClear( clearColor, clearAlpha );
                		},
                		render: render
                	};
                }
                function WebGLBufferRenderer( gl, extensions, info, capabilities ) {
                	var isWebGL2 = capabilities.isWebGL2;
                	var mode;
                	function setMode( value ) {
                		mode = value;
                	}
                	function render( start, count ) {
                		gl.drawArrays( mode, start, count );
                		info.update( count, mode );
                	}
                	function renderInstances( geometry, start, count, primcount ) {
                		if ( primcount === 0 ) return;
                		var extension, methodName;
                		if ( isWebGL2 ) {
                			extension = gl;
                			methodName = 'drawArraysInstanced';
                		} else {
                			extension = extensions.get( 'ANGLE_instanced_arrays' );
                			methodName = 'drawArraysInstancedANGLE';
                			if ( extension === null ) {
                				console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
                				return;
                			}
                		}
                		extension[ methodName ]( mode, start, count, primcount );
                		info.update( count, mode, primcount );
                	}
                	this.setMode = setMode;
                	this.render = render;
                	this.renderInstances = renderInstances;
                }
                function WebGLCapabilities( gl, extensions, parameters ) {
                	var maxAnisotropy;
                	function getMaxAnisotropy() {
                		if ( maxAnisotropy !== undefined ) return maxAnisotropy;
                		var extension = extensions.get( 'EXT_texture_filter_anisotropic' );
                		if ( extension !== null ) {
                			maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );
                		} else {
                			maxAnisotropy = 0;
                		}
                		return maxAnisotropy;
                	}
                	function getMaxPrecision( precision ) {
                		if ( precision === 'highp' ) {
                			if ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&
                				gl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {
                				return 'highp';
                			}
                			precision = 'mediump';
                		}
                		if ( precision === 'mediump' ) {
                			if ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&
                				gl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {
                				return 'mediump';
                			}
                		}
                		return 'lowp';
                	}
                	var isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||
                		( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );
                	var precision = parameters.precision !== undefined ? parameters.precision : 'highp';
                	var maxPrecision = getMaxPrecision( precision );
                	if ( maxPrecision !== precision ) {
                		console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
                		precision = maxPrecision;
                	}
                	var logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
                	var maxTextures = gl.getParameter( 34930 );
                	var maxVertexTextures = gl.getParameter( 35660 );
                	var maxTextureSize = gl.getParameter( 3379 );
                	var maxCubemapSize = gl.getParameter( 34076 );
                	var maxAttributes = gl.getParameter( 34921 );
                	var maxVertexUniforms = gl.getParameter( 36347 );
                	var maxVaryings = gl.getParameter( 36348 );
                	var maxFragmentUniforms = gl.getParameter( 36349 );
                	var vertexTextures = maxVertexTextures > 0;
                	var floatFragmentTextures = isWebGL2 || !! extensions.get( 'OES_texture_float' );
                	var floatVertexTextures = vertexTextures && floatFragmentTextures;
                	var maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;
                	return {
                		isWebGL2: isWebGL2,
                		getMaxAnisotropy: getMaxAnisotropy,
                		getMaxPrecision: getMaxPrecision,
                		precision: precision,
                		logarithmicDepthBuffer: logarithmicDepthBuffer,
                		maxTextures: maxTextures,
                		maxVertexTextures: maxVertexTextures,
                		maxTextureSize: maxTextureSize,
                		maxCubemapSize: maxCubemapSize,
                		maxAttributes: maxAttributes,
                		maxVertexUniforms: maxVertexUniforms,
                		maxVaryings: maxVaryings,
                		maxFragmentUniforms: maxFragmentUniforms,
                		vertexTextures: vertexTextures,
                		floatFragmentTextures: floatFragmentTextures,
                		floatVertexTextures: floatVertexTextures,
                		maxSamples: maxSamples
                	};
                }
                function WebGLClipping() {
                	var scope = this,
                		globalState = null,
                		numGlobalPlanes = 0,
                		localClippingEnabled = false,
                		renderingShadows = false,
                		plane = new Plane(),
                		viewNormalMatrix = new Matrix3(),
                		uniform = { value: null, needsUpdate: false };
                	this.uniform = uniform;
                	this.numPlanes = 0;
                	this.numIntersection = 0;
                	this.init = function ( planes, enableLocalClipping, camera ) {
                		var enabled =
                			planes.length !== 0 ||
                			enableLocalClipping ||
                			numGlobalPlanes !== 0 ||
                			localClippingEnabled;
                		localClippingEnabled = enableLocalClipping;
                		globalState = projectPlanes( planes, camera, 0 );
                		numGlobalPlanes = planes.length;
                		return enabled;
                	};
                	this.beginShadows = function () {
                		renderingShadows = true;
                		projectPlanes( null );
                	};
                	this.endShadows = function () {
                		renderingShadows = false;
                		resetGlobalState();
                	};
                	this.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {
                		if ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {
                			if ( renderingShadows ) {
                				projectPlanes( null );
                			} else {
                				resetGlobalState();
                			}
                		} else {
                			var nGlobal = renderingShadows ? 0 : numGlobalPlanes,
                				lGlobal = nGlobal * 4,
                				dstArray = cache.clippingState || null;
                			uniform.value = dstArray;
                			dstArray = projectPlanes( planes, camera, lGlobal, fromCache );
                			for ( var i = 0; i !== lGlobal; ++ i ) {
                				dstArray[ i ] = globalState[ i ];
                			}
                			cache.clippingState = dstArray;
                			this.numIntersection = clipIntersection ? this.numPlanes : 0;
                			this.numPlanes += nGlobal;
                		}
                	};
                	function resetGlobalState() {
                		if ( uniform.value !== globalState ) {
                			uniform.value = globalState;
                			uniform.needsUpdate = numGlobalPlanes > 0;
                		}
                		scope.numPlanes = numGlobalPlanes;
                		scope.numIntersection = 0;
                	}
                	function projectPlanes( planes, camera, dstOffset, skipTransform ) {
                		var nPlanes = planes !== null ? planes.length : 0,
                			dstArray = null;
                		if ( nPlanes !== 0 ) {
                			dstArray = uniform.value;
                			if ( skipTransform !== true || dstArray === null ) {
                				var flatSize = dstOffset + nPlanes * 4,
                					viewMatrix = camera.matrixWorldInverse;
                				viewNormalMatrix.getNormalMatrix( viewMatrix );
                				if ( dstArray === null || dstArray.length < flatSize ) {
                					dstArray = new Float32Array( flatSize );
                				}
                				for ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {
                					plane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );
                					plane.normal.toArray( dstArray, i4 );
                					dstArray[ i4 + 3 ] = plane.constant;
                				}
                			}
                			uniform.value = dstArray;
                			uniform.needsUpdate = true;
                		}
                		scope.numPlanes = nPlanes;
                		return dstArray;
                	}
                }
                function WebGLExtensions( gl ) {
                	var extensions = {};
                	return {
                		get: function ( name ) {
                			if ( extensions[ name ] !== undefined ) {
                				return extensions[ name ];
                			}
                			var extension;
                			switch ( name ) {
                				case 'WEBGL_depth_texture':
                					extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
                					break;
                				case 'EXT_texture_filter_anisotropic':
                					extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
                					break;
                				case 'WEBGL_compressed_texture_s3tc':
                					extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
                					break;
                				case 'WEBGL_compressed_texture_pvrtc':
                					extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
                					break;
                				default:
                					extension = gl.getExtension( name );
                			}
                			if ( extension === null ) {
                				console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );
                			}
                			extensions[ name ] = extension;
                			return extension;
                		}
                	};
                }
                function WebGLGeometries( gl, attributes, info ) {
                	var geometries = new WeakMap();
                	var wireframeAttributes = new WeakMap();
                	function onGeometryDispose( event ) {
                		var geometry = event.target;
                		var buffergeometry = geometries.get( geometry );
                		if ( buffergeometry.index !== null ) {
                			attributes.remove( buffergeometry.index );
                		}
                		for ( var name in buffergeometry.attributes ) {
                			attributes.remove( buffergeometry.attributes[ name ] );
                		}
                		geometry.removeEventListener( 'dispose', onGeometryDispose );
                		geometries.delete( geometry );
                		var attribute = wireframeAttributes.get( buffergeometry );
                		if ( attribute ) {
                			attributes.remove( attribute );
                			wireframeAttributes.delete( buffergeometry );
                		}
                		info.memory.geometries --;
                	}
                	function get( object, geometry ) {
                		var buffergeometry = geometries.get( geometry );
                		if ( buffergeometry ) return buffergeometry;
                		geometry.addEventListener( 'dispose', onGeometryDispose );
                		if ( geometry.isBufferGeometry ) {
                			buffergeometry = geometry;
                		} else if ( geometry.isGeometry ) {
                			if ( geometry._bufferGeometry === undefined ) {
                				geometry._bufferGeometry = new BufferGeometry().setFromObject( object );
                			}
                			buffergeometry = geometry._bufferGeometry;
                		}
                		geometries.set( geometry, buffergeometry );
                		info.memory.geometries ++;
                		return buffergeometry;
                	}
                	function update( geometry ) {
                		var index = geometry.index;
                		var geometryAttributes = geometry.attributes;
                		if ( index !== null ) {
                			attributes.update( index, 34963 );
                		}
                		for ( var name in geometryAttributes ) {
                			attributes.update( geometryAttributes[ name ], 34962 );
                		}
                		var morphAttributes = geometry.morphAttributes;
                		for ( var name in morphAttributes ) {
                			var array = morphAttributes[ name ];
                			for ( var i = 0, l = array.length; i < l; i ++ ) {
                				attributes.update( array[ i ], 34962 );
                			}
                		}
                	}
                	function updateWireframeAttribute( geometry ) {
                		var indices = [];
                		var geometryIndex = geometry.index;
                		var geometryPosition = geometry.attributes.position;
                		var version = 0;
                		if ( geometryIndex !== null ) {
                			var array = geometryIndex.array;
                			version = geometryIndex.version;
                			for ( var i = 0, l = array.length; i < l; i += 3 ) {
                				var a = array[ i + 0 ];
                				var b = array[ i + 1 ];
                				var c = array[ i + 2 ];
                				indices.push( a, b, b, c, c, a );
                			}
                		} else {
                			var array = geometryPosition.array;
                			version = geometryPosition.version;
                			for ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {
                				var a = i + 0;
                				var b = i + 1;
                				var c = i + 2;
                				indices.push( a, b, b, c, c, a );
                			}
                		}
                		var attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );
                		attribute.version = version;
                		attributes.update( attribute, 34963 );
                		var previousAttribute = wireframeAttributes.get( geometry );
                		if ( previousAttribute ) attributes.remove( previousAttribute );
                		wireframeAttributes.set( geometry, attribute );
                	}
                	function getWireframeAttribute( geometry ) {
                		var currentAttribute = wireframeAttributes.get( geometry );
                		if ( currentAttribute ) {
                			var geometryIndex = geometry.index;
                			if ( geometryIndex !== null ) {
                				if ( currentAttribute.version < geometryIndex.version ) {
                					updateWireframeAttribute( geometry );
                				}
                			}
                		} else {
                			updateWireframeAttribute( geometry );
                		}
                		return wireframeAttributes.get( geometry );
                	}
                	return {
                		get: get,
                		update: update,
                		getWireframeAttribute: getWireframeAttribute
                	};
                }
                function WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {
                	var isWebGL2 = capabilities.isWebGL2;
                	var mode;
                	function setMode( value ) {
                		mode = value;
                	}
                	var type, bytesPerElement;
                	function setIndex( value ) {
                		type = value.type;
                		bytesPerElement = value.bytesPerElement;
                	}
                	function render( start, count ) {
                		gl.drawElements( mode, count, type, start * bytesPerElement );
                		info.update( count, mode );
                	}
                	function renderInstances( geometry, start, count, primcount ) {
                		if ( primcount === 0 ) return;
                		var extension, methodName;
                		if ( isWebGL2 ) {
                			extension = gl;
                			methodName = 'drawElementsInstanced';
                		} else {
                			extension = extensions.get( 'ANGLE_instanced_arrays' );
                			methodName = 'drawElementsInstancedANGLE';
                			if ( extension === null ) {
                				console.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
                				return;
                			}
                		}
                		extension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );
                		info.update( count, mode, primcount );
                	}
                	this.setMode = setMode;
                	this.setIndex = setIndex;
                	this.render = render;
                	this.renderInstances = renderInstances;
                }
                function WebGLInfo( gl ) {
                	var memory = {
                		geometries: 0,
                		textures: 0
                	};
                	var render = {
                		frame: 0,
                		calls: 0,
                		triangles: 0,
                		points: 0,
                		lines: 0
                	};
                	function update( count, mode, instanceCount ) {
                		instanceCount = instanceCount || 1;
                		render.calls ++;
                		switch ( mode ) {
                			case 4:
                				render.triangles += instanceCount * ( count / 3 );
                				break;
                			case 5:
                			case 6:
                				render.triangles += instanceCount * ( count - 2 );
                				break;
                			case 1:
                				render.lines += instanceCount * ( count / 2 );
                				break;
                			case 3:
                				render.lines += instanceCount * ( count - 1 );
                				break;
                			case 2:
                				render.lines += instanceCount * count;
                				break;
                			case 0:
                				render.points += instanceCount * count;
                				break;
                			default:
                				console.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );
                				break;
                		}
                	}
                	function reset() {
                		render.frame ++;
                		render.calls = 0;
                		render.triangles = 0;
                		render.points = 0;
                		render.lines = 0;
                	}
                	return {
                		memory: memory,
                		render: render,
                		programs: null,
                		autoReset: true,
                		reset: reset,
                		update: update
                	};
                }
                function absNumericalSort( a, b ) {
                	return Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );
                }
                function WebGLMorphtargets( gl ) {
                	var influencesList = {};
                	var morphInfluences = new Float32Array( 8 );
                	function update( object, geometry, material, program ) {
                		var objectInfluences = object.morphTargetInfluences;
                		var length = objectInfluences.length;
                		var influences = influencesList[ geometry.id ];
                		if ( influences === undefined ) {
                			influences = [];
                			for ( var i = 0; i < length; i ++ ) {
                				influences[ i ] = [ i, 0 ];
                			}
                			influencesList[ geometry.id ] = influences;
                		}
                		var morphTargets = material.morphTargets && geometry.morphAttributes.position;
                		var morphNormals = material.morphNormals && geometry.morphAttributes.normal;
                		for ( var i = 0; i < length; i ++ ) {
                			var influence = influences[ i ];
                			if ( influence[ 1 ] !== 0 ) {
                				if ( morphTargets ) geometry.deleteAttribute( 'morphTarget' + i );
                				if ( morphNormals ) geometry.deleteAttribute( 'morphNormal' + i );
                			}
                		}
                		for ( var i = 0; i < length; i ++ ) {
                			var influence = influences[ i ];
                			influence[ 0 ] = i;
                			influence[ 1 ] = objectInfluences[ i ];
                		}
                		influences.sort( absNumericalSort );
                		var morphInfluencesSum = 0;
                		for ( var i = 0; i < 8; i ++ ) {
                			var influence = influences[ i ];
                			if ( influence ) {
                				var index = influence[ 0 ];
                				var value = influence[ 1 ];
                				if ( value ) {
                					if ( morphTargets ) geometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] );
                					if ( morphNormals ) geometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] );
                					morphInfluences[ i ] = value;
                					morphInfluencesSum += value;
                					continue;
                				}
                			}
                			morphInfluences[ i ] = 0;
                		}
                		var morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
                		program.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );
                		program.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );
                	}
                	return {
                		update: update
                	};
                }
                function WebGLObjects( gl, geometries, attributes, info ) {
                	var updateList = {};
                	function update( object ) {
                		var frame = info.render.frame;
                		var geometry = object.geometry;
                		var buffergeometry = geometries.get( object, geometry );
                		if ( updateList[ buffergeometry.id ] !== frame ) {
                			if ( geometry.isGeometry ) {
                				buffergeometry.updateFromObject( object );
                			}
                			geometries.update( buffergeometry );
                			updateList[ buffergeometry.id ] = frame;
                		}
                		if ( object.isInstancedMesh ) {
                			attributes.update( object.instanceMatrix, 34962 );
                		}
                		return buffergeometry;
                	}
                	function dispose() {
                		updateList = {};
                	}
                	return {
                		update: update,
                		dispose: dispose
                	};
                }
                function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {
                	images = images !== undefined ? images : [];
                	mapping = mapping !== undefined ? mapping : CubeReflectionMapping;
                	format = format !== undefined ? format : RGBFormat;
                	Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );
                	this.flipY = false;
                }
                CubeTexture.prototype = Object.create( Texture.prototype );
                CubeTexture.prototype.constructor = CubeTexture;
                CubeTexture.prototype.isCubeTexture = true;
                Object.defineProperty( CubeTexture.prototype, 'images', {
                	get: function () {
                		return this.image;
                	},
                	set: function ( value ) {
                		this.image = value;
                	}
                } );
                function DataTexture2DArray( data, width, height, depth ) {
                	Texture.call( this, null );
                	this.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };
                	this.magFilter = NearestFilter;
                	this.minFilter = NearestFilter;
                	this.wrapR = ClampToEdgeWrapping;
                	this.generateMipmaps = false;
                	this.flipY = false;
                	this.needsUpdate = true;
                }
                DataTexture2DArray.prototype = Object.create( Texture.prototype );
                DataTexture2DArray.prototype.constructor = DataTexture2DArray;
                DataTexture2DArray.prototype.isDataTexture2DArray = true;
                function DataTexture3D( data, width, height, depth ) {
                	Texture.call( this, null );
                	this.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };
                	this.magFilter = NearestFilter;
                	this.minFilter = NearestFilter;
                	this.wrapR = ClampToEdgeWrapping;
                	this.generateMipmaps = false;
                	this.flipY = false;
                	this.needsUpdate = true;
                }
                DataTexture3D.prototype = Object.create( Texture.prototype );
                DataTexture3D.prototype.constructor = DataTexture3D;
                DataTexture3D.prototype.isDataTexture3D = true;
                var emptyTexture = new Texture();
                var emptyTexture2dArray = new DataTexture2DArray();
                var emptyTexture3d = new DataTexture3D();
                var emptyCubeTexture = new CubeTexture();
                var arrayCacheF32 = [];
                var arrayCacheI32 = [];
                var mat4array = new Float32Array( 16 );
                var mat3array = new Float32Array( 9 );
                var mat2array = new Float32Array( 4 );
                function flatten( array, nBlocks, blockSize ) {
                	var firstElem = array[ 0 ];
                	if ( firstElem <= 0 || firstElem > 0 ) return array;
                	var n = nBlocks * blockSize,
                		r = arrayCacheF32[ n ];
                	if ( r === undefined ) {
                		r = new Float32Array( n );
                		arrayCacheF32[ n ] = r;
                	}
                	if ( nBlocks !== 0 ) {
                		firstElem.toArray( r, 0 );
                		for ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {
                			offset += blockSize;
                			array[ i ].toArray( r, offset );
                		}
                	}
                	return r;
                }
                function arraysEqual( a, b ) {
                	if ( a.length !== b.length ) return false;
                	for ( var i = 0, l = a.length; i < l; i ++ ) {
                		if ( a[ i ] !== b[ i ] ) return false;
                	}
                	return true;
                }
                function copyArray( a, b ) {
                	for ( var i = 0, l = b.length; i < l; i ++ ) {
                		a[ i ] = b[ i ];
                	}
                }
                function allocTexUnits( textures, n ) {
                	var r = arrayCacheI32[ n ];
                	if ( r === undefined ) {
                		r = new Int32Array( n );
                		arrayCacheI32[ n ] = r;
                	}
                	for ( var i = 0; i !== n; ++ i )
                		r[ i ] = textures.allocateTextureUnit();
                	return r;
                }
                function setValueV1f( gl, v ) {
                	var cache = this.cache;
                	if ( cache[ 0 ] === v ) return;
                	gl.uniform1f( this.addr, v );
                	cache[ 0 ] = v;
                }
                function setValueV2f( gl, v ) {
                	var cache = this.cache;
                	if ( v.x !== undefined ) {
                		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {
                			gl.uniform2f( this.addr, v.x, v.y );
                			cache[ 0 ] = v.x;
                			cache[ 1 ] = v.y;
                		}
                	} else {
                		if ( arraysEqual( cache, v ) ) return;
                		gl.uniform2fv( this.addr, v );
                		copyArray( cache, v );
                	}
                }
                function setValueV3f( gl, v ) {
                	var cache = this.cache;
                	if ( v.x !== undefined ) {
                		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {
                			gl.uniform3f( this.addr, v.x, v.y, v.z );
                			cache[ 0 ] = v.x;
                			cache[ 1 ] = v.y;
                			cache[ 2 ] = v.z;
                		}
                	} else if ( v.r !== undefined ) {
                		if ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {
                			gl.uniform3f( this.addr, v.r, v.g, v.b );
                			cache[ 0 ] = v.r;
                			cache[ 1 ] = v.g;
                			cache[ 2 ] = v.b;
                		}
                	} else {
                		if ( arraysEqual( cache, v ) ) return;
                		gl.uniform3fv( this.addr, v );
                		copyArray( cache, v );
                	}
                }
                function setValueV4f( gl, v ) {
                	var cache = this.cache;
                	if ( v.x !== undefined ) {
                		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {
                			gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );
                			cache[ 0 ] = v.x;
                			cache[ 1 ] = v.y;
                			cache[ 2 ] = v.z;
                			cache[ 3 ] = v.w;
                		}
                	} else {
                		if ( arraysEqual( cache, v ) ) return;
                		gl.uniform4fv( this.addr, v );
                		copyArray( cache, v );
                	}
                }
                function setValueM2( gl, v ) {
                	var cache = this.cache;
                	var elements = v.elements;
                	if ( elements === undefined ) {
                		if ( arraysEqual( cache, v ) ) return;
                		gl.uniformMatrix2fv( this.addr, false, v );
                		copyArray( cache, v );
                	} else {
                		if ( arraysEqual( cache, elements ) ) return;
                		mat2array.set( elements );
                		gl.uniformMatrix2fv( this.addr, false, mat2array );
                		copyArray( cache, elements );
                	}
                }
                function setValueM3( gl, v ) {
                	var cache = this.cache;
                	var elements = v.elements;
                	if ( elements === undefined ) {
                		if ( arraysEqual( cache, v ) ) return;
                		gl.uniformMatrix3fv( this.addr, false, v );
                		copyArray( cache, v );
                	} else {
                		if ( arraysEqual( cache, elements ) ) return;
                		mat3array.set( elements );
                		gl.uniformMatrix3fv( this.addr, false, mat3array );
                		copyArray( cache, elements );
                	}
                }
                function setValueM4( gl, v ) {
                	var cache = this.cache;
                	var elements = v.elements;
                	if ( elements === undefined ) {
                		if ( arraysEqual( cache, v ) ) return;
                		gl.uniformMatrix4fv( this.addr, false, v );
                		copyArray( cache, v );
                	} else {
                		if ( arraysEqual( cache, elements ) ) return;
                		mat4array.set( elements );
                		gl.uniformMatrix4fv( this.addr, false, mat4array );
                		copyArray( cache, elements );
                	}
                }
                function setValueT1( gl, v, textures ) {
                	var cache = this.cache;
                	var unit = textures.allocateTextureUnit();
                	if ( cache[ 0 ] !== unit ) {
                		gl.uniform1i( this.addr, unit );
                		cache[ 0 ] = unit;
                	}
                	textures.safeSetTexture2D( v || emptyTexture, unit );
                }
                function setValueT2DArray1( gl, v, textures ) {
                	var cache = this.cache;
                	var unit = textures.allocateTextureUnit();
                	if ( cache[ 0 ] !== unit ) {
                		gl.uniform1i( this.addr, unit );
                		cache[ 0 ] = unit;
                	}
                	textures.setTexture2DArray( v || emptyTexture2dArray, unit );
                }
                function setValueT3D1( gl, v, textures ) {
                	var cache = this.cache;
                	var unit = textures.allocateTextureUnit();
                	if ( cache[ 0 ] !== unit ) {
                		gl.uniform1i( this.addr, unit );
                		cache[ 0 ] = unit;
                	}
                	textures.setTexture3D( v || emptyTexture3d, unit );
                }
                function setValueT6( gl, v, textures ) {
                	var cache = this.cache;
                	var unit = textures.allocateTextureUnit();
                	if ( cache[ 0 ] !== unit ) {
                		gl.uniform1i( this.addr, unit );
                		cache[ 0 ] = unit;
                	}
                	textures.safeSetTextureCube( v || emptyCubeTexture, unit );
                }
                function setValueV1i( gl, v ) {
                	var cache = this.cache;
                	if ( cache[ 0 ] === v ) return;
                	gl.uniform1i( this.addr, v );
                	cache[ 0 ] = v;
                }
                function setValueV2i( gl, v ) {
                	var cache = this.cache;
                	if ( arraysEqual( cache, v ) ) return;
                	gl.uniform2iv( this.addr, v );
                	copyArray( cache, v );
                }
                function setValueV3i( gl, v ) {
                	var cache = this.cache;
                	if ( arraysEqual( cache, v ) ) return;
                	gl.uniform3iv( this.addr, v );
                	copyArray( cache, v );
                }
                function setValueV4i( gl, v ) {
                	var cache = this.cache;
                	if ( arraysEqual( cache, v ) ) return;
                	gl.uniform4iv( this.addr, v );
                	copyArray( cache, v );
                }
                function getSingularSetter( type ) {
                	switch ( type ) {
                		case 0x1406: return setValueV1f;
                		case 0x8b50: return setValueV2f;
                		case 0x8b51: return setValueV3f;
                		case 0x8b52: return setValueV4f;
                		case 0x8b5a: return setValueM2;
                		case 0x8b5b: return setValueM3;
                		case 0x8b5c: return setValueM4;
                		case 0x8b5e: case 0x8d66: return setValueT1;
                		case 0x8b5f: return setValueT3D1;
                		case 0x8b60: return setValueT6;
                		case 0x8DC1: return setValueT2DArray1;
                		case 0x1404: case 0x8b56: return setValueV1i;
                		case 0x8b53: case 0x8b57: return setValueV2i;
                		case 0x8b54: case 0x8b58: return setValueV3i;
                		case 0x8b55: case 0x8b59: return setValueV4i;
                	}
                }
                function setValueV1fArray( gl, v ) {
                	gl.uniform1fv( this.addr, v );
                }
                function setValueV1iArray( gl, v ) {
                	gl.uniform1iv( this.addr, v );
                }
                function setValueV2iArray( gl, v ) {
                	gl.uniform2iv( this.addr, v );
                }
                function setValueV3iArray( gl, v ) {
                	gl.uniform3iv( this.addr, v );
                }
                function setValueV4iArray( gl, v ) {
                	gl.uniform4iv( this.addr, v );
                }
                function setValueV2fArray( gl, v ) {
                	var data = flatten( v, this.size, 2 );
                	gl.uniform2fv( this.addr, data );
                }
                function setValueV3fArray( gl, v ) {
                	var data = flatten( v, this.size, 3 );
                	gl.uniform3fv( this.addr, data );
                }
                function setValueV4fArray( gl, v ) {
                	var data = flatten( v, this.size, 4 );
                	gl.uniform4fv( this.addr, data );
                }
                function setValueM2Array( gl, v ) {
                	var data = flatten( v, this.size, 4 );
                	gl.uniformMatrix2fv( this.addr, false, data );
                }
                function setValueM3Array( gl, v ) {
                	var data = flatten( v, this.size, 9 );
                	gl.uniformMatrix3fv( this.addr, false, data );
                }
                function setValueM4Array( gl, v ) {
                	var data = flatten( v, this.size, 16 );
                	gl.uniformMatrix4fv( this.addr, false, data );
                }
                function setValueT1Array( gl, v, textures ) {
                	var n = v.length;
                	var units = allocTexUnits( textures, n );
                	gl.uniform1iv( this.addr, units );
                	for ( var i = 0; i !== n; ++ i ) {
                		textures.safeSetTexture2D( v[ i ] || emptyTexture, units[ i ] );
                	}
                }
                function setValueT6Array( gl, v, textures ) {
                	var n = v.length;
                	var units = allocTexUnits( textures, n );
                	gl.uniform1iv( this.addr, units );
                	for ( var i = 0; i !== n; ++ i ) {
                		textures.safeSetTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );
                	}
                }
                function getPureArraySetter( type ) {
                	switch ( type ) {
                		case 0x1406: return setValueV1fArray;
                		case 0x8b50: return setValueV2fArray;
                		case 0x8b51: return setValueV3fArray;
                		case 0x8b52: return setValueV4fArray;
                		case 0x8b5a: return setValueM2Array;
                		case 0x8b5b: return setValueM3Array;
                		case 0x8b5c: return setValueM4Array;
                		case 0x8b5e: return setValueT1Array;
                		case 0x8b60: return setValueT6Array;
                		case 0x1404: case 0x8b56: return setValueV1iArray;
                		case 0x8b53: case 0x8b57: return setValueV2iArray;
                		case 0x8b54: case 0x8b58: return setValueV3iArray;
                		case 0x8b55: case 0x8b59: return setValueV4iArray;
                	}
                }
                function SingleUniform( id, activeInfo, addr ) {
                	this.id = id;
                	this.addr = addr;
                	this.cache = [];
                	this.setValue = getSingularSetter( activeInfo.type );
                }
                function PureArrayUniform( id, activeInfo, addr ) {
                	this.id = id;
                	this.addr = addr;
                	this.cache = [];
                	this.size = activeInfo.size;
                	this.setValue = getPureArraySetter( activeInfo.type );
                }
                PureArrayUniform.prototype.updateCache = function ( data ) {
                	var cache = this.cache;
                	if ( data instanceof Float32Array && cache.length !== data.length ) {
                		this.cache = new Float32Array( data.length );
                	}
                	copyArray( cache, data );
                };
                function StructuredUniform( id ) {
                	this.id = id;
                	this.seq = [];
                	this.map = {};
                }
                StructuredUniform.prototype.setValue = function ( gl, value, textures ) {
                	var seq = this.seq;
                	for ( var i = 0, n = seq.length; i !== n; ++ i ) {
                		var u = seq[ i ];
                		u.setValue( gl, value[ u.id ], textures );
                	}
                };
                var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g;
                function addUniform( container, uniformObject ) {
                	container.seq.push( uniformObject );
                	container.map[ uniformObject.id ] = uniformObject;
                }
                function parseUniform( activeInfo, addr, container ) {
                	var path = activeInfo.name,
                		pathLength = path.length;
                	RePathPart.lastIndex = 0;
                	while ( true ) {
                		var match = RePathPart.exec( path ),
                			matchEnd = RePathPart.lastIndex,
                			id = match[ 1 ],
                			idIsIndex = match[ 2 ] === ']',
                			subscript = match[ 3 ];
                		if ( idIsIndex ) id = id | 0;
                		if ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {
                			addUniform( container, subscript === undefined ?
                				new SingleUniform( id, activeInfo, addr ) :
                				new PureArrayUniform( id, activeInfo, addr ) );
                			break;
                		} else {
                			var map = container.map, next = map[ id ];
                			if ( next === undefined ) {
                				next = new StructuredUniform( id );
                				addUniform( container, next );
                			}
                			container = next;
                		}
                	}
                }
                function WebGLUniforms( gl, program ) {
                	this.seq = [];
                	this.map = {};
                	var n = gl.getProgramParameter( program, 35718 );
                	for ( var i = 0; i < n; ++ i ) {
                		var info = gl.getActiveUniform( program, i ),
                			addr = gl.getUniformLocation( program, info.name );
                		parseUniform( info, addr, this );
                	}
                }
                WebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {
                	var u = this.map[ name ];
                	if ( u !== undefined ) u.setValue( gl, value, textures );
                };
                WebGLUniforms.prototype.setOptional = function ( gl, object, name ) {
                	var v = object[ name ];
                	if ( v !== undefined ) this.setValue( gl, name, v );
                };
                WebGLUniforms.upload = function ( gl, seq, values, textures ) {
                	for ( var i = 0, n = seq.length; i !== n; ++ i ) {
                		var u = seq[ i ],
                			v = values[ u.id ];
                		if ( v.needsUpdate !== false ) {
                			u.setValue( gl, v.value, textures );
                		}
                	}
                };
                WebGLUniforms.seqWithValue = function ( seq, values ) {
                	var r = [];
                	for ( var i = 0, n = seq.length; i !== n; ++ i ) {
                		var u = seq[ i ];
                		if ( u.id in values ) r.push( u );
                	}
                	return r;
                };
                function WebGLShader( gl, type, string ) {
                	var shader = gl.createShader( type );
                	gl.shaderSource( shader, string );
                	gl.compileShader( shader );
                	return shader;
                }
                var programIdCount = 0;
                function addLineNumbers( string ) {
                	var lines = string.split( '\n' );
                	for ( var i = 0; i < lines.length; i ++ ) {
                		lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];
                	}
                	return lines.join( '\n' );
                }
                function getEncodingComponents( encoding ) {
                	switch ( encoding ) {
                		case LinearEncoding:
                			return [ 'Linear', '( value )' ];
                		case sRGBEncoding:
                			return [ 'sRGB', '( value )' ];
                		case RGBEEncoding:
                			return [ 'RGBE', '( value )' ];
                		case RGBM7Encoding:
                			return [ 'RGBM', '( value, 7.0 )' ];
                		case RGBM16Encoding:
                			return [ 'RGBM', '( value, 16.0 )' ];
                		case RGBDEncoding:
                			return [ 'RGBD', '( value, 256.0 )' ];
                		case GammaEncoding:
                			return [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];
                		case LogLuvEncoding:
                			return [ 'LogLuv', '( value )' ];
                		default:
                			throw new Error( 'unsupported encoding: ' + encoding );
                	}
                }
                function getShaderErrors( gl, shader, type ) {
                	var status = gl.getShaderParameter( shader, 35713 );
                	var log = gl.getShaderInfoLog( shader ).trim();
                	if ( status && log === '' ) return '';
                	var source = gl.getShaderSource( shader );
                	return 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\n' + log + addLineNumbers( source );
                }
                function getTexelDecodingFunction( functionName, encoding ) {
                	var components = getEncodingComponents( encoding );
                	return 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';
                }
                function getTexelEncodingFunction( functionName, encoding ) {
                	var components = getEncodingComponents( encoding );
                	return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';
                }
                function getToneMappingFunction( functionName, toneMapping ) {
                	var toneMappingName;
                	switch ( toneMapping ) {
                		case LinearToneMapping:
                			toneMappingName = 'Linear';
                			break;
                		case ReinhardToneMapping:
                			toneMappingName = 'Reinhard';
                			break;
                		case Uncharted2ToneMapping:
                			toneMappingName = 'Uncharted2';
                			break;
                		case CineonToneMapping:
                			toneMappingName = 'OptimizedCineon';
                			break;
                		case ACESFilmicToneMapping:
                			toneMappingName = 'ACESFilmic';
                			break;
                		default:
                			throw new Error( 'unsupported toneMapping: ' + toneMapping );
                	}
                	return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';
                }
                function generateExtensions( extensions, parameters, rendererExtensions ) {
                	extensions = extensions || {};
                	var chunks = [
                		( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',
                		( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',
                		( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',
                		( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''
                	];
                	return chunks.filter( filterEmptyLine ).join( '\n' );
                }
                function generateDefines( defines ) {
                	var chunks = [];
                	for ( var name in defines ) {
                		var value = defines[ name ];
                		if ( value === false ) continue;
                		chunks.push( '#define ' + name + ' ' + value );
                	}
                	return chunks.join( '\n' );
                }
                function fetchAttributeLocations( gl, program ) {
                	var attributes = {};
                	var n = gl.getProgramParameter( program, 35721 );
                	for ( var i = 0; i < n; i ++ ) {
                		var info = gl.getActiveAttrib( program, i );
                		var name = info.name;
                		attributes[ name ] = gl.getAttribLocation( program, name );
                	}
                	return attributes;
                }
                function filterEmptyLine( string ) {
                	return string !== '';
                }
                function replaceLightNums( string, parameters ) {
                	return string
                		.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
                		.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
                		.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )
                		.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
                		.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )
                		.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )
                		.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )
                		.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );
                }
                function replaceClippingPlaneNums( string, parameters ) {
                	return string
                		.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )
                		.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );
                }
                var includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
                function resolveIncludes( string ) {
                	return string.replace( includePattern, includeReplacer );
                }
                function includeReplacer( match, include ) {
                	var string = ShaderChunk[ include ];
                	if ( string === undefined ) {
                		throw new Error( 'Can not resolve #include <' + include + '>' );
                	}
                	return resolveIncludes( string );
                }
                var loopPattern = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
                function unrollLoops( string ) {
                	return string.replace( loopPattern, loopReplacer );
                }
                function loopReplacer( match, start, end, snippet ) {
                	var string = '';
                	for ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {
                		string += snippet
                			.replace( /\[ i \]/g, '[ ' + i + ' ]' )
                			.replace( /UNROLLED_LOOP_INDEX/g, i );
                	}
                	return string;
                }
                function generatePrecision( parameters ) {
                	var precisionstring = "precision " + parameters.precision + " float;\nprecision " + parameters.precision + " int;";
                	if ( parameters.precision === "highp" ) {
                		precisionstring += "\n#define HIGH_PRECISION";
                	} else if ( parameters.precision === "mediump" ) {
                		precisionstring += "\n#define MEDIUM_PRECISION";
                	} else if ( parameters.precision === "lowp" ) {
                		precisionstring += "\n#define LOW_PRECISION";
                	}
                	return precisionstring;
                }
                function generateShadowMapTypeDefine( parameters ) {
                	var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';
                	if ( parameters.shadowMapType === PCFShadowMap ) {
                		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';
                	} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {
                		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';
                	} else if ( parameters.shadowMapType === VSMShadowMap ) {
                		shadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';
                	}
                	return shadowMapTypeDefine;
                }
                function generateEnvMapTypeDefine( parameters ) {
                	var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
                	if ( parameters.envMap ) {
                		switch ( parameters.envMapMode ) {
                			case CubeReflectionMapping:
                			case CubeRefractionMapping:
                				envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
                				break;
                			case CubeUVReflectionMapping:
                			case CubeUVRefractionMapping:
                				envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
                				break;
                			case EquirectangularReflectionMapping:
                			case EquirectangularRefractionMapping:
                				envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
                				break;
                			case SphericalReflectionMapping:
                				envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';
                				break;
                		}
                	}
                	return envMapTypeDefine;
                }
                function generateEnvMapModeDefine( parameters ) {
                	var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
                	if ( parameters.envMap ) {
                		switch ( parameters.envMapMode ) {
                			case CubeRefractionMapping:
                			case EquirectangularRefractionMapping:
                				envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
                				break;
                		}
                	}
                	return envMapModeDefine;
                }
                function generateEnvMapBlendingDefine( parameters ) {
                	var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
                	if ( parameters.envMap ) {
                		switch ( parameters.combine ) {
                			case MultiplyOperation:
                				envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
                				break;
                			case MixOperation:
                				envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
                				break;
                			case AddOperation:
                				envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
                				break;
                		}
                	}
                	return envMapBlendingDefine;
                }
                function WebGLProgram( renderer, extensions, cacheKey, material, shader, parameters ) {
                	var gl = renderer.getContext();
                	var defines = material.defines;
                	var vertexShader = shader.vertexShader;
                	var fragmentShader = shader.fragmentShader;
                	var shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );
                	var envMapTypeDefine = generateEnvMapTypeDefine( parameters );
                	var envMapModeDefine = generateEnvMapModeDefine( parameters );
                	var envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );
                	var gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;
                	var customExtensions = parameters.isWebGL2 ? '' : generateExtensions( material.extensions, parameters, extensions );
                	var customDefines = generateDefines( defines );
                	var program = gl.createProgram();
                	var prefixVertex, prefixFragment;
                	var numMultiviewViews = parameters.numMultiviewViews;
                	if ( material.isRawShaderMaterial ) {
                		prefixVertex = [
                			customDefines
                		].filter( filterEmptyLine ).join( '\n' );
                		if ( prefixVertex.length > 0 ) {
                			prefixVertex += '\n';
                		}
                		prefixFragment = [
                			customExtensions,
                			customDefines
                		].filter( filterEmptyLine ).join( '\n' );
                		if ( prefixFragment.length > 0 ) {
                			prefixFragment += '\n';
                		}
                	} else {
                		prefixVertex = [
                			generatePrecision( parameters ),
                			'#define SHADER_NAME ' + shader.name,
                			customDefines,
                			parameters.instancing ? '#define USE_INSTANCING' : '',
                			parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',
                			'#define GAMMA_FACTOR ' + gammaFactorDefine,
                			'#define MAX_BONES ' + parameters.maxBones,
                			( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
                			( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',
                			parameters.map ? '#define USE_MAP' : '',
                			parameters.envMap ? '#define USE_ENVMAP' : '',
                			parameters.envMap ? '#define ' + envMapModeDefine : '',
                			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
                			parameters.aoMap ? '#define USE_AOMAP' : '',
                			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
                			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
                			parameters.normalMap ? '#define USE_NORMALMAP' : '',
                			( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
                			( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',
                			parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
                			parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
                			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
                			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
                			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
                			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
                			parameters.vertexTangents ? '#define USE_TANGENT' : '',
                			parameters.vertexColors ? '#define USE_COLOR' : '',
                			parameters.vertexUvs ? '#define USE_UV' : '',
                			parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',
                			parameters.flatShading ? '#define FLAT_SHADED' : '',
                			parameters.skinning ? '#define USE_SKINNING' : '',
                			parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',
                			parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
                			parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
                			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
                			parameters.flipSided ? '#define FLIP_SIDED' : '',
                			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
                			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',
                			parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',
                			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
                			parameters.logarithmicDepthBuffer && ( parameters.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',
                			'uniform mat4 modelMatrix;',
                			'uniform mat4 modelViewMatrix;',
                			'uniform mat4 projectionMatrix;',
                			'uniform mat4 viewMatrix;',
                			'uniform mat3 normalMatrix;',
                			'uniform vec3 cameraPosition;',
                			'uniform bool isOrthographic;',
                			'#ifdef USE_INSTANCING',
                			' attribute mat4 instanceMatrix;',
                			'#endif',
                			'attribute vec3 position;',
                			'attribute vec3 normal;',
                			'attribute vec2 uv;',
                			'#ifdef USE_TANGENT',
                			'	attribute vec4 tangent;',
                			'#endif',
                			'#ifdef USE_COLOR',
                			'	attribute vec3 color;',
                			'#endif',
                			'#ifdef USE_MORPHTARGETS',
                			'	attribute vec3 morphTarget0;',
                			'	attribute vec3 morphTarget1;',
                			'	attribute vec3 morphTarget2;',
                			'	attribute vec3 morphTarget3;',
                			'	#ifdef USE_MORPHNORMALS',
                			'		attribute vec3 morphNormal0;',
                			'		attribute vec3 morphNormal1;',
                			'		attribute vec3 morphNormal2;',
                			'		attribute vec3 morphNormal3;',
                			'	#else',
                			'		attribute vec3 morphTarget4;',
                			'		attribute vec3 morphTarget5;',
                			'		attribute vec3 morphTarget6;',
                			'		attribute vec3 morphTarget7;',
                			'	#endif',
                			'#endif',
                			'#ifdef USE_SKINNING',
                			'	attribute vec4 skinIndex;',
                			'	attribute vec4 skinWeight;',
                			'#endif',
                			'\n'
                		].filter( filterEmptyLine ).join( '\n' );
                		prefixFragment = [
                			customExtensions,
                			generatePrecision( parameters ),
                			'#define SHADER_NAME ' + shader.name,
                			customDefines,
                			parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + ( parameters.alphaTest % 1 ? '' : '.0' ) : '',
                			'#define GAMMA_FACTOR ' + gammaFactorDefine,
                			( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
                			( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',
                			parameters.map ? '#define USE_MAP' : '',
                			parameters.matcap ? '#define USE_MATCAP' : '',
                			parameters.envMap ? '#define USE_ENVMAP' : '',
                			parameters.envMap ? '#define ' + envMapTypeDefine : '',
                			parameters.envMap ? '#define ' + envMapModeDefine : '',
                			parameters.envMap ? '#define ' + envMapBlendingDefine : '',
                			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
                			parameters.aoMap ? '#define USE_AOMAP' : '',
                			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
                			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
                			parameters.normalMap ? '#define USE_NORMALMAP' : '',
                			( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
                			( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',
                			parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
                			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
                			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
                			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
                			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
                			parameters.sheen ? '#define USE_SHEEN' : '',
                			parameters.vertexTangents ? '#define USE_TANGENT' : '',
                			parameters.vertexColors ? '#define USE_COLOR' : '',
                			parameters.vertexUvs ? '#define USE_UV' : '',
                			parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',
                			parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',
                			parameters.flatShading ? '#define FLAT_SHADED' : '',
                			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
                			parameters.flipSided ? '#define FLIP_SIDED' : '',
                			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
                			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',
                			parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',
                			parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',
                			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
                			parameters.logarithmicDepthBuffer && ( parameters.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',
                			( ( material.extensions ? material.extensions.shaderTextureLOD : false ) || parameters.envMap ) && ( parameters.isWebGL2 || extensions.get( 'EXT_shader_texture_lod' ) ) ? '#define TEXTURE_LOD_EXT' : '',
                			'uniform mat4 viewMatrix;',
                			'uniform vec3 cameraPosition;',
                			'uniform bool isOrthographic;',
                			( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',
                			( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '',
                			( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',
                			parameters.dithering ? '#define DITHERING' : '',
                			( parameters.outputEncoding || parameters.mapEncoding || parameters.matcapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ?
                				ShaderChunk[ 'encodings_pars_fragment' ] : '',
                			parameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',
                			parameters.matcapEncoding ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',
                			parameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',
                			parameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',
                			parameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',
                			parameters.depthPacking ? '#define DEPTH_PACKING ' + material.depthPacking : '',
                			'\n'
                		].filter( filterEmptyLine ).join( '\n' );
                	}
                	vertexShader = resolveIncludes( vertexShader );
                	vertexShader = replaceLightNums( vertexShader, parameters );
                	vertexShader = replaceClippingPlaneNums( vertexShader, parameters );
                	fragmentShader = resolveIncludes( fragmentShader );
                	fragmentShader = replaceLightNums( fragmentShader, parameters );
                	fragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );
                	vertexShader = unrollLoops( vertexShader );
                	fragmentShader = unrollLoops( fragmentShader );
                	if ( parameters.isWebGL2 && ! material.isRawShaderMaterial ) {
                		var isGLSL3ShaderMaterial = false;
                		var versionRegex = /^\s*#version\s+300\s+es\s*\n/;
                		if ( material.isShaderMaterial &&
                			vertexShader.match( versionRegex ) !== null &&
                			fragmentShader.match( versionRegex ) !== null ) {
                			isGLSL3ShaderMaterial = true;
                			vertexShader = vertexShader.replace( versionRegex, '' );
                			fragmentShader = fragmentShader.replace( versionRegex, '' );
                		}
                		prefixVertex = [
                			'#version 300 es\n',
                			'#define attribute in',
                			'#define varying out',
                			'#define texture2D texture'
                		].join( '\n' ) + '\n' + prefixVertex;
                		prefixFragment = [
                			'#version 300 es\n',
                			'#define varying in',
                			isGLSL3ShaderMaterial ? '' : 'out highp vec4 pc_fragColor;',
                			isGLSL3ShaderMaterial ? '' : '#define gl_FragColor pc_fragColor',
                			'#define gl_FragDepthEXT gl_FragDepth',
                			'#define texture2D texture',
                			'#define textureCube texture',
                			'#define texture2DProj textureProj',
                			'#define texture2DLodEXT textureLod',
                			'#define texture2DProjLodEXT textureProjLod',
                			'#define textureCubeLodEXT textureLod',
                			'#define texture2DGradEXT textureGrad',
                			'#define texture2DProjGradEXT textureProjGrad',
                			'#define textureCubeGradEXT textureGrad'
                		].join( '\n' ) + '\n' + prefixFragment;
                		if ( numMultiviewViews > 0 ) {
                			prefixVertex = prefixVertex.replace(
                				'#version 300 es\n',
                				[
                					'#version 300 es\n',
                					'#extension GL_OVR_multiview2 : require',
                					'layout(num_views = ' + numMultiviewViews + ') in;',
                					'#define VIEW_ID gl_ViewID_OVR'
                				].join( '\n' )
                			);
                			prefixVertex = prefixVertex.replace(
                				[
                					'uniform mat4 modelViewMatrix;',
                					'uniform mat4 projectionMatrix;',
                					'uniform mat4 viewMatrix;',
                					'uniform mat3 normalMatrix;'
                				].join( '\n' ),
                				[
                					'uniform mat4 modelViewMatrices[' + numMultiviewViews + '];',
                					'uniform mat4 projectionMatrices[' + numMultiviewViews + '];',
                					'uniform mat4 viewMatrices[' + numMultiviewViews + '];',
                					'uniform mat3 normalMatrices[' + numMultiviewViews + '];',
                					'#define modelViewMatrix modelViewMatrices[VIEW_ID]',
                					'#define projectionMatrix projectionMatrices[VIEW_ID]',
                					'#define viewMatrix viewMatrices[VIEW_ID]',
                					'#define normalMatrix normalMatrices[VIEW_ID]'
                				].join( '\n' )
                			);
                			prefixFragment = prefixFragment.replace(
                				'#version 300 es\n',
                				[
                					'#version 300 es\n',
                					'#extension GL_OVR_multiview2 : require',
                					'#define VIEW_ID gl_ViewID_OVR'
                				].join( '\n' )
                			);
                			prefixFragment = prefixFragment.replace(
                				'uniform mat4 viewMatrix;',
                				[
                					'uniform mat4 viewMatrices[' + numMultiviewViews + '];',
                					'#define viewMatrix viewMatrices[VIEW_ID]'
                				].join( '\n' )
                			);
                		}
                	}
                	var vertexGlsl = prefixVertex + vertexShader;
                	var fragmentGlsl = prefixFragment + fragmentShader;
                	var glVertexShader = WebGLShader( gl, 35633, vertexGlsl );
                	var glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );
                	gl.attachShader( program, glVertexShader );
                	gl.attachShader( program, glFragmentShader );
                	if ( material.index0AttributeName !== undefined ) {
                		gl.bindAttribLocation( program, 0, material.index0AttributeName );
                	} else if ( parameters.morphTargets === true ) {
                		gl.bindAttribLocation( program, 0, 'position' );
                	}
                	gl.linkProgram( program );
                	if ( renderer.debug.checkShaderErrors ) {
                		var programLog = gl.getProgramInfoLog( program ).trim();
                		var vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();
                		var fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();
                		var runnable = true;
                		var haveDiagnostics = true;
                		if ( gl.getProgramParameter( program, 35714 ) === false ) {
                			runnable = false;
                			var vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );
                			var fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );
                			console.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter( program, 35715 ), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors );
                		} else if ( programLog !== '' ) {
                			console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );
                		} else if ( vertexLog === '' || fragmentLog === '' ) {
                			haveDiagnostics = false;
                		}
                		if ( haveDiagnostics ) {
                			this.diagnostics = {
                				runnable: runnable,
                				material: material,
                				programLog: programLog,
                				vertexShader: {
                					log: vertexLog,
                					prefix: prefixVertex
                				},
                				fragmentShader: {
                					log: fragmentLog,
                					prefix: prefixFragment
                				}
                			};
                		}
                	}
                	gl.deleteShader( glVertexShader );
                	gl.deleteShader( glFragmentShader );
                	var cachedUniforms;
                	this.getUniforms = function () {
                		if ( cachedUniforms === undefined ) {
                			cachedUniforms = new WebGLUniforms( gl, program );
                		}
                		return cachedUniforms;
                	};
                	var cachedAttributes;
                	this.getAttributes = function () {
                		if ( cachedAttributes === undefined ) {
                			cachedAttributes = fetchAttributeLocations( gl, program );
                		}
                		return cachedAttributes;
                	};
                	this.destroy = function () {
                		gl.deleteProgram( program );
                		this.program = undefined;
                	};
                	this.name = shader.name;
                	this.id = programIdCount ++;
                	this.cacheKey = cacheKey;
                	this.usedTimes = 1;
                	this.program = program;
                	this.vertexShader = glVertexShader;
                	this.fragmentShader = glFragmentShader;
                	this.numMultiviewViews = numMultiviewViews;
                	return this;
                }
                function WebGLPrograms( renderer, extensions, capabilities ) {
                	var programs = [];
                	var isWebGL2 = capabilities.isWebGL2;
                	var logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
                	var floatVertexTextures = capabilities.floatVertexTextures;
                	var precision = capabilities.precision;
                	var maxVertexUniforms = capabilities.maxVertexUniforms;
                	var vertexTextures = capabilities.vertexTextures;
                	var shaderIDs = {
                		MeshDepthMaterial: 'depth',
                		MeshDistanceMaterial: 'distanceRGBA',
                		MeshNormalMaterial: 'normal',
                		MeshBasicMaterial: 'basic',
                		MeshLambertMaterial: 'lambert',
                		MeshPhongMaterial: 'phong',
                		MeshToonMaterial: 'phong',
                		MeshStandardMaterial: 'physical',
                		MeshPhysicalMaterial: 'physical',
                		MeshMatcapMaterial: 'matcap',
                		LineBasicMaterial: 'basic',
                		LineDashedMaterial: 'dashed',
                		PointsMaterial: 'points',
                		ShadowMaterial: 'shadow',
                		SpriteMaterial: 'sprite'
                	};
                	var parameterNames = [
                		"precision", "isWebGL2", "supportsVertexTextures", "outputEncoding", "instancing", "numMultiviewViews",
                		"map", "mapEncoding", "matcap", "matcapEncoding", "envMap", "envMapMode", "envMapEncoding", "envMapCubeUV",
                		"lightMap", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "objectSpaceNormalMap", "tangentSpaceNormalMap", "clearcoatNormalMap", "displacementMap", "specularMap",
                		"roughnessMap", "metalnessMap", "gradientMap",
                		"alphaMap", "combine", "vertexColors", "vertexTangents", "vertexUvs", "uvsVertexOnly", "fog", "useFog", "fogExp2",
                		"flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning",
                		"maxBones", "useVertexTexture", "morphTargets", "morphNormals",
                		"maxMorphTargets", "maxMorphNormals", "premultipliedAlpha",
                		"numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights",
                		"numDirLightShadows", "numPointLightShadows", "numSpotLightShadows",
                		"shadowMapEnabled", "shadowMapType", "toneMapping", 'physicallyCorrectLights',
                		"alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering",
                		"sheen"
                	];
                	function allocateBones( object ) {
                		var skeleton = object.skeleton;
                		var bones = skeleton.bones;
                		if ( floatVertexTextures ) {
                			return 1024;
                		} else {
                			var nVertexUniforms = maxVertexUniforms;
                			var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );
                			var maxBones = Math.min( nVertexMatrices, bones.length );
                			if ( maxBones < bones.length ) {
                				console.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );
                				return 0;
                			}
                			return maxBones;
                		}
                	}
                	function getTextureEncodingFromMap( map, gammaOverrideLinear ) {
                		var encoding;
                		if ( ! map ) {
                			encoding = LinearEncoding;
                		} else if ( map.isTexture ) {
                			encoding = map.encoding;
                		} else if ( map.isWebGLRenderTarget ) {
                			console.warn( "THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead." );
                			encoding = map.texture.encoding;
                		}
                		if ( encoding === LinearEncoding && gammaOverrideLinear ) {
                			encoding = GammaEncoding;
                		}
                		return encoding;
                	}
                	this.getParameters = function ( material, lights, shadows, fog, nClipPlanes, nClipIntersection, object ) {
                		var shaderID = shaderIDs[ material.type ];
                		var maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;
                		if ( material.precision !== null ) {
                			precision = capabilities.getMaxPrecision( material.precision );
                			if ( precision !== material.precision ) {
                				console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );
                			}
                		}
                		var currentRenderTarget = renderer.getRenderTarget();
                		var numMultiviewViews = currentRenderTarget && currentRenderTarget.isWebGLMultiviewRenderTarget ? currentRenderTarget.numViews : 0;
                		var parameters = {
                			isWebGL2: isWebGL2,
                			shaderID: shaderID,
                			precision: precision,
                			instancing: object.isInstancedMesh === true,
                			supportsVertexTextures: vertexTextures,
                			numMultiviewViews: numMultiviewViews,
                			outputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),
                			map: !! material.map,
                			mapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),
                			matcap: !! material.matcap,
                			matcapEncoding: getTextureEncodingFromMap( material.matcap, renderer.gammaInput ),
                			envMap: !! material.envMap,
                			envMapMode: material.envMap && material.envMap.mapping,
                			envMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),
                			envMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),
                			lightMap: !! material.lightMap,
                			aoMap: !! material.aoMap,
                			emissiveMap: !! material.emissiveMap,
                			emissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),
                			bumpMap: !! material.bumpMap,
                			normalMap: !! material.normalMap,
                			objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,
                			tangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,
                			clearcoatNormalMap: !! material.clearcoatNormalMap,
                			displacementMap: !! material.displacementMap,
                			roughnessMap: !! material.roughnessMap,
                			metalnessMap: !! material.metalnessMap,
                			specularMap: !! material.specularMap,
                			alphaMap: !! material.alphaMap,
                			gradientMap: !! material.gradientMap,
                			sheen: !! material.sheen,
                			combine: material.combine,
                			vertexTangents: ( material.normalMap && material.vertexTangents ),
                			vertexColors: material.vertexColors,
                			vertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap || !! material.displacementMap,
                			uvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap ) && !! material.displacementMap,
                			fog: !! fog,
                			useFog: material.fog,
                			fogExp2: ( fog && fog.isFogExp2 ),
                			flatShading: material.flatShading,
                			sizeAttenuation: material.sizeAttenuation,
                			logarithmicDepthBuffer: logarithmicDepthBuffer,
                			skinning: material.skinning && maxBones > 0,
                			maxBones: maxBones,
                			useVertexTexture: floatVertexTextures,
                			morphTargets: material.morphTargets,
                			morphNormals: material.morphNormals,
                			maxMorphTargets: renderer.maxMorphTargets,
                			maxMorphNormals: renderer.maxMorphNormals,
                			numDirLights: lights.directional.length,
                			numPointLights: lights.point.length,
                			numSpotLights: lights.spot.length,
                			numRectAreaLights: lights.rectArea.length,
                			numHemiLights: lights.hemi.length,
                			numDirLightShadows: lights.directionalShadowMap.length,
                			numPointLightShadows: lights.pointShadowMap.length,
                			numSpotLightShadows: lights.spotShadowMap.length,
                			numClippingPlanes: nClipPlanes,
                			numClipIntersection: nClipIntersection,
                			dithering: material.dithering,
                			shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
                			shadowMapType: renderer.shadowMap.type,
                			toneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,
                			physicallyCorrectLights: renderer.physicallyCorrectLights,
                			premultipliedAlpha: material.premultipliedAlpha,
                			alphaTest: material.alphaTest,
                			doubleSided: material.side === DoubleSide,
                			flipSided: material.side === BackSide,
                			depthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false
                		};
                		return parameters;
                	};
                	this.getProgramCacheKey = function ( material, parameters ) {
                		var array = [];
                		if ( parameters.shaderID ) {
                			array.push( parameters.shaderID );
                		} else {
                			array.push( material.fragmentShader );
                			array.push( material.vertexShader );
                		}
                		if ( material.defines !== undefined ) {
                			for ( var name in material.defines ) {
                				array.push( name );
                				array.push( material.defines[ name ] );
                			}
                		}
                		for ( var i = 0; i < parameterNames.length; i ++ ) {
                			array.push( parameters[ parameterNames[ i ] ] );
                		}
                		array.push( material.onBeforeCompile.toString() );
                		array.push( renderer.gammaOutput );
                		array.push( renderer.gammaFactor );
                		return array.join();
                	};
                	this.acquireProgram = function ( material, shader, parameters, cacheKey ) {
                		var program;
                		for ( var p = 0, pl = programs.length; p < pl; p ++ ) {
                			var preexistingProgram = programs[ p ];
                			if ( preexistingProgram.cacheKey === cacheKey ) {
                				program = preexistingProgram;
                				++ program.usedTimes;
                				break;
                			}
                		}
                		if ( program === undefined ) {
                			program = new WebGLProgram( renderer, extensions, cacheKey, material, shader, parameters );
                			programs.push( program );
                		}
                		return program;
                	};
                	this.releaseProgram = function ( program ) {
                		if ( -- program.usedTimes === 0 ) {
                			var i = programs.indexOf( program );
                			programs[ i ] = programs[ programs.length - 1 ];
                			programs.pop();
                			program.destroy();
                		}
                	};
                	this.programs = programs;
                }
                function WebGLProperties() {
                	var properties = new WeakMap();
                	function get( object ) {
                		var map = properties.get( object );
                		if ( map === undefined ) {
                			map = {};
                			properties.set( object, map );
                		}
                		return map;
                	}
                	function remove( object ) {
                		properties.delete( object );
                	}
                	function update( object, key, value ) {
                		properties.get( object )[ key ] = value;
                	}
                	function dispose() {
                		properties = new WeakMap();
                	}
                	return {
                		get: get,
                		remove: remove,
                		update: update,
                		dispose: dispose
                	};
                }
                function painterSortStable( a, b ) {
                	if ( a.groupOrder !== b.groupOrder ) {
                		return a.groupOrder - b.groupOrder;
                	} else if ( a.renderOrder !== b.renderOrder ) {
                		return a.renderOrder - b.renderOrder;
                	} else if ( a.program !== b.program ) {
                		return a.program.id - b.program.id;
                	} else if ( a.material.id !== b.material.id ) {
                		return a.material.id - b.material.id;
                	} else if ( a.z !== b.z ) {
                		return a.z - b.z;
                	} else {
                		return a.id - b.id;
                	}
                }
                function reversePainterSortStable( a, b ) {
                	if ( a.groupOrder !== b.groupOrder ) {
                		return a.groupOrder - b.groupOrder;
                	} else if ( a.renderOrder !== b.renderOrder ) {
                		return a.renderOrder - b.renderOrder;
                	} else if ( a.z !== b.z ) {
                		return b.z - a.z;
                	} else {
                		return a.id - b.id;
                	}
                }
                function WebGLRenderList() {
                	var renderItems = [];
                	var renderItemsIndex = 0;
                	var opaque = [];
                	var transparent = [];
                	var defaultProgram = { id: - 1 };
                	function init() {
                		renderItemsIndex = 0;
                		opaque.length = 0;
                		transparent.length = 0;
                	}
                	function getNextRenderItem( object, geometry, material, groupOrder, z, group ) {
                		var renderItem = renderItems[ renderItemsIndex ];
                		if ( renderItem === undefined ) {
                			renderItem = {
                				id: object.id,
                				object: object,
                				geometry: geometry,
                				material: material,
                				program: material.program || defaultProgram,
                				groupOrder: groupOrder,
                				renderOrder: object.renderOrder,
                				z: z,
                				group: group
                			};
                			renderItems[ renderItemsIndex ] = renderItem;
                		} else {
                			renderItem.id = object.id;
                			renderItem.object = object;
                			renderItem.geometry = geometry;
                			renderItem.material = material;
                			renderItem.program = material.program || defaultProgram;
                			renderItem.groupOrder = groupOrder;
                			renderItem.renderOrder = object.renderOrder;
                			renderItem.z = z;
                			renderItem.group = group;
                		}
                		renderItemsIndex ++;
                		return renderItem;
                	}
                	function push( object, geometry, material, groupOrder, z, group ) {
                		var renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );
                		( material.transparent === true ? transparent : opaque ).push( renderItem );
                	}
                	function unshift( object, geometry, material, groupOrder, z, group ) {
                		var renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );
                		( material.transparent === true ? transparent : opaque ).unshift( renderItem );
                	}
                	function sort() {
                		if ( opaque.length > 1 ) opaque.sort( painterSortStable );
                		if ( transparent.length > 1 ) transparent.sort( reversePainterSortStable );
                	}
                	return {
                		opaque: opaque,
                		transparent: transparent,
                		init: init,
                		push: push,
                		unshift: unshift,
                		sort: sort
                	};
                }
                function WebGLRenderLists() {
                	var lists = new WeakMap();
                	function onSceneDispose( event ) {
                		var scene = event.target;
                		scene.removeEventListener( 'dispose', onSceneDispose );
                		lists.delete( scene );
                	}
                	function get( scene, camera ) {
                		var cameras = lists.get( scene );
                		var list;
                		if ( cameras === undefined ) {
                			list = new WebGLRenderList();
                			lists.set( scene, new WeakMap() );
                			lists.get( scene ).set( camera, list );
                			scene.addEventListener( 'dispose', onSceneDispose );
                		} else {
                			list = cameras.get( camera );
                			if ( list === undefined ) {
                				list = new WebGLRenderList();
                				cameras.set( camera, list );
                			}
                		}
                		return list;
                	}
                	function dispose() {
                		lists = new WeakMap();
                	}
                	return {
                		get: get,
                		dispose: dispose
                	};
                }
                function UniformsCache() {
                	var lights = {};
                	return {
                		get: function ( light ) {
                			if ( lights[ light.id ] !== undefined ) {
                				return lights[ light.id ];
                			}
                			var uniforms;
                			switch ( light.type ) {
                				case 'DirectionalLight':
                					uniforms = {
                						direction: new Vector3(),
                						color: new Color(),
                						shadow: false,
                						shadowBias: 0,
                						shadowRadius: 1,
                						shadowMapSize: new Vector2()
                					};
                					break;
                				case 'SpotLight':
                					uniforms = {
                						position: new Vector3(),
                						direction: new Vector3(),
                						color: new Color(),
                						distance: 0,
                						coneCos: 0,
                						penumbraCos: 0,
                						decay: 0,
                						shadow: false,
                						shadowBias: 0,
                						shadowRadius: 1,
                						shadowMapSize: new Vector2()
                					};
                					break;
                				case 'PointLight':
                					uniforms = {
                						position: new Vector3(),
                						color: new Color(),
                						distance: 0,
                						decay: 0,
                						shadow: false,
                						shadowBias: 0,
                						shadowRadius: 1,
                						shadowMapSize: new Vector2(),
                						shadowCameraNear: 1,
                						shadowCameraFar: 1000
                					};
                					break;
                				case 'HemisphereLight':
                					uniforms = {
                						direction: new Vector3(),
                						skyColor: new Color(),
                						groundColor: new Color()
                					};
                					break;
                				case 'RectAreaLight':
                					uniforms = {
                						color: new Color(),
                						position: new Vector3(),
                						halfWidth: new Vector3(),
                						halfHeight: new Vector3()
                					};
                					break;
                			}
                			lights[ light.id ] = uniforms;
                			return uniforms;
                		}
                	};
                }
                var nextVersion = 0;
                function shadowCastingLightsFirst( lightA, lightB ) {
                	return ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );
                }
                function WebGLLights() {
                	var cache = new UniformsCache();
                	var state = {
                		version: 0,
                		hash: {
                			directionalLength: - 1,
                			pointLength: - 1,
                			spotLength: - 1,
                			rectAreaLength: - 1,
                			hemiLength: - 1,
                			numDirectionalShadows: - 1,
                			numPointShadows: - 1,
                			numSpotShadows: - 1,
                		},
                		ambient: [ 0, 0, 0 ],
                		probe: [],
                		directional: [],
                		directionalShadowMap: [],
                		directionalShadowMatrix: [],
                		spot: [],
                		spotShadowMap: [],
                		spotShadowMatrix: [],
                		rectArea: [],
                		point: [],
                		pointShadowMap: [],
                		pointShadowMatrix: [],
                		hemi: [],
                		numDirectionalShadows: - 1,
                		numPointShadows: - 1,
                		numSpotShadows: - 1
                	};
                	for ( var i = 0; i < 9; i ++ ) state.probe.push( new Vector3() );
                	var vector3 = new Vector3();
                	var matrix4 = new Matrix4();
                	var matrix42 = new Matrix4();
                	function setup( lights, shadows, camera ) {
                		var r = 0, g = 0, b = 0;
                		for ( var i = 0; i < 9; i ++ ) state.probe[ i ].set( 0, 0, 0 );
                		var directionalLength = 0;
                		var pointLength = 0;
                		var spotLength = 0;
                		var rectAreaLength = 0;
                		var hemiLength = 0;
                		var numDirectionalShadows = 0;
                		var numPointShadows = 0;
                		var numSpotShadows = 0;
                		var viewMatrix = camera.matrixWorldInverse;
                		lights.sort( shadowCastingLightsFirst );
                		for ( var i = 0, l = lights.length; i < l; i ++ ) {
                			var light = lights[ i ];
                			var color = light.color;
                			var intensity = light.intensity;
                			var distance = light.distance;
                			var shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;
                			if ( light.isAmbientLight ) {
                				r += color.r * intensity;
                				g += color.g * intensity;
                				b += color.b * intensity;
                			} else if ( light.isLightProbe ) {
                				for ( var j = 0; j < 9; j ++ ) {
                					state.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );
                				}
                			} else if ( light.isDirectionalLight ) {
                				var uniforms = cache.get( light );
                				uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
                				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
                				vector3.setFromMatrixPosition( light.target.matrixWorld );
                				uniforms.direction.sub( vector3 );
                				uniforms.direction.transformDirection( viewMatrix );
                				uniforms.shadow = light.castShadow;
                				if ( light.castShadow ) {
                					var shadow = light.shadow;
                					uniforms.shadowBias = shadow.bias;
                					uniforms.shadowRadius = shadow.radius;
                					uniforms.shadowMapSize = shadow.mapSize;
                					state.directionalShadowMap[ directionalLength ] = shadowMap;
                					state.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;
                					numDirectionalShadows ++;
                				}
                				state.directional[ directionalLength ] = uniforms;
                				directionalLength ++;
                			} else if ( light.isSpotLight ) {
                				var uniforms = cache.get( light );
                				uniforms.position.setFromMatrixPosition( light.matrixWorld );
                				uniforms.position.applyMatrix4( viewMatrix );
                				uniforms.color.copy( color ).multiplyScalar( intensity );
                				uniforms.distance = distance;
                				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
                				vector3.setFromMatrixPosition( light.target.matrixWorld );
                				uniforms.direction.sub( vector3 );
                				uniforms.direction.transformDirection( viewMatrix );
                				uniforms.coneCos = Math.cos( light.angle );
                				uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
                				uniforms.decay = light.decay;
                				uniforms.shadow = light.castShadow;
                				if ( light.castShadow ) {
                					var shadow = light.shadow;
                					uniforms.shadowBias = shadow.bias;
                					uniforms.shadowRadius = shadow.radius;
                					uniforms.shadowMapSize = shadow.mapSize;
                					state.spotShadowMap[ spotLength ] = shadowMap;
                					state.spotShadowMatrix[ spotLength ] = light.shadow.matrix;
                					numSpotShadows ++;
                				}
                				state.spot[ spotLength ] = uniforms;
                				spotLength ++;
                			} else if ( light.isRectAreaLight ) {
                				var uniforms = cache.get( light );
                				uniforms.color.copy( color ).multiplyScalar( intensity );
                				uniforms.position.setFromMatrixPosition( light.matrixWorld );
                				uniforms.position.applyMatrix4( viewMatrix );
                				matrix42.identity();
                				matrix4.copy( light.matrixWorld );
                				matrix4.premultiply( viewMatrix );
                				matrix42.extractRotation( matrix4 );
                				uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
                				uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );
                				uniforms.halfWidth.applyMatrix4( matrix42 );
                				uniforms.halfHeight.applyMatrix4( matrix42 );
                				state.rectArea[ rectAreaLength ] = uniforms;
                				rectAreaLength ++;
                			} else if ( light.isPointLight ) {
                				var uniforms = cache.get( light );
                				uniforms.position.setFromMatrixPosition( light.matrixWorld );
                				uniforms.position.applyMatrix4( viewMatrix );
                				uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
                				uniforms.distance = light.distance;
                				uniforms.decay = light.decay;
                				uniforms.shadow = light.castShadow;
                				if ( light.castShadow ) {
                					var shadow = light.shadow;
                					uniforms.shadowBias = shadow.bias;
                					uniforms.shadowRadius = shadow.radius;
                					uniforms.shadowMapSize = shadow.mapSize;
                					uniforms.shadowCameraNear = shadow.camera.near;
                					uniforms.shadowCameraFar = shadow.camera.far;
                					state.pointShadowMap[ pointLength ] = shadowMap;
                					state.pointShadowMatrix[ pointLength ] = light.shadow.matrix;
                					numPointShadows ++;
                				}
                				state.point[ pointLength ] = uniforms;
                				pointLength ++;
                			} else if ( light.isHemisphereLight ) {
                				var uniforms = cache.get( light );
                				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
                				uniforms.direction.transformDirection( viewMatrix );
                				uniforms.direction.normalize();
                				uniforms.skyColor.copy( light.color ).multiplyScalar( intensity );
                				uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );
                				state.hemi[ hemiLength ] = uniforms;
                				hemiLength ++;
                			}
                		}
                		state.ambient[ 0 ] = r;
                		state.ambient[ 1 ] = g;
                		state.ambient[ 2 ] = b;
                		var hash = state.hash;
                		if ( hash.directionalLength !== directionalLength ||
                			hash.pointLength !== pointLength ||
                			hash.spotLength !== spotLength ||
                			hash.rectAreaLength !== rectAreaLength ||
                			hash.hemiLength !== hemiLength ||
                			hash.numDirectionalShadows !== numDirectionalShadows ||
                			hash.numPointShadows !== numPointShadows ||
                			hash.numSpotShadows !== numSpotShadows ) {
                			state.directional.length = directionalLength;
                			state.spot.length = spotLength;
                			state.rectArea.length = rectAreaLength;
                			state.point.length = pointLength;
                			state.hemi.length = hemiLength;
                			state.directionalShadowMap.length = numDirectionalShadows;
                			state.pointShadowMap.length = numPointShadows;
                			state.spotShadowMap.length = numSpotShadows;
                			state.directionalShadowMatrix.length = numDirectionalShadows;
                			state.pointShadowMatrix.length = numPointShadows;
                			state.spotShadowMatrix.length = numSpotShadows;
                			hash.directionalLength = directionalLength;
                			hash.pointLength = pointLength;
                			hash.spotLength = spotLength;
                			hash.rectAreaLength = rectAreaLength;
                			hash.hemiLength = hemiLength;
                			hash.numDirectionalShadows = numDirectionalShadows;
                			hash.numPointShadows = numPointShadows;
                			hash.numSpotShadows = numSpotShadows;
                			state.version = nextVersion ++;
                		}
                	}
                	return {
                		setup: setup,
                		state: state
                	};
                }
                function WebGLRenderState() {
                	var lights = new WebGLLights();
                	var lightsArray = [];
                	var shadowsArray = [];
                	function init() {
                		lightsArray.length = 0;
                		shadowsArray.length = 0;
                	}
                	function pushLight( light ) {
                		lightsArray.push( light );
                	}
                	function pushShadow( shadowLight ) {
                		shadowsArray.push( shadowLight );
                	}
                	function setupLights( camera ) {
                		lights.setup( lightsArray, shadowsArray, camera );
                	}
                	var state = {
                		lightsArray: lightsArray,
                		shadowsArray: shadowsArray,
                		lights: lights
                	};
                	return {
                		init: init,
                		state: state,
                		setupLights: setupLights,
                		pushLight: pushLight,
                		pushShadow: pushShadow
                	};
                }
                function WebGLRenderStates() {
                	var renderStates = new WeakMap();
                	function onSceneDispose( event ) {
                		var scene = event.target;
                		scene.removeEventListener( 'dispose', onSceneDispose );
                		renderStates.delete( scene );
                	}
                	function get( scene, camera ) {
                		var renderState;
                		if ( renderStates.has( scene ) === false ) {
                			renderState = new WebGLRenderState();
                			renderStates.set( scene, new WeakMap() );
                			renderStates.get( scene ).set( camera, renderState );
                			scene.addEventListener( 'dispose', onSceneDispose );
                		} else {
                			if ( renderStates.get( scene ).has( camera ) === false ) {
                				renderState = new WebGLRenderState();
                				renderStates.get( scene ).set( camera, renderState );
                			} else {
                				renderState = renderStates.get( scene ).get( camera );
                			}
                		}
                		return renderState;
                	}
                	function dispose() {
                		renderStates = new WeakMap();
                	}
                	return {
                		get: get,
                		dispose: dispose
                	};
                }
                function MeshDepthMaterial( parameters ) {
                	Material.call( this );
                	this.type = 'MeshDepthMaterial';
                	this.depthPacking = BasicDepthPacking;
                	this.skinning = false;
                	this.morphTargets = false;
                	this.map = null;
                	this.alphaMap = null;
                	this.displacementMap = null;
                	this.displacementScale = 1;
                	this.displacementBias = 0;
                	this.wireframe = false;
                	this.wireframeLinewidth = 1;
                	this.fog = false;
                	this.setValues( parameters );
                }
                MeshDepthMaterial.prototype = Object.create( Material.prototype );
                MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;
                MeshDepthMaterial.prototype.isMeshDepthMaterial = true;
                MeshDepthMaterial.prototype.copy = function ( source ) {
                	Material.prototype.copy.call( this, source );
                	this.depthPacking = source.depthPacking;
                	this.skinning = source.skinning;
                	this.morphTargets = source.morphTargets;
                	this.map = source.map;
                	this.alphaMap = source.alphaMap;
                	this.displacementMap = source.displacementMap;
                	this.displacementScale = source.displacementScale;
                	this.displacementBias = source.displacementBias;
                	this.wireframe = source.wireframe;
                	this.wireframeLinewidth = source.wireframeLinewidth;
                	return this;
                };
                function MeshDistanceMaterial( parameters ) {
                	Material.call( this );
                	this.type = 'MeshDistanceMaterial';
                	this.referencePosition = new Vector3();
                	this.nearDistance = 1;
                	this.farDistance = 1000;
                	this.skinning = false;
                	this.morphTargets = false;
                	this.map = null;
                	this.alphaMap = null;
                	this.displacementMap = null;
                	this.displacementScale = 1;
                	this.displacementBias = 0;
                	this.fog = false;
                	this.setValues( parameters );
                }
                MeshDistanceMaterial.prototype = Object.create( Material.prototype );
                MeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;
                MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;
                MeshDistanceMaterial.prototype.copy = function ( source ) {
                	Material.prototype.copy.call( this, source );
                	this.referencePosition.copy( source.referencePosition );
                	this.nearDistance = source.nearDistance;
                	this.farDistance = source.farDistance;
                	this.skinning = source.skinning;
                	this.morphTargets = source.morphTargets;
                	this.map = source.map;
                	this.alphaMap = source.alphaMap;
                	this.displacementMap = source.displacementMap;
                	this.displacementScale = source.displacementScale;
                	this.displacementBias = source.displacementBias;
                	return this;
                };
                var vsm_frag = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n  float mean = 0.0;\n  float squared_mean = 0.0;\n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n    #ifdef HORIZONAL_PASS\n      vec2 distribution = unpack2HalfToRGBA ( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n      mean += distribution.x;\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n    #else\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\n      mean += depth;\n      squared_mean += depth * depth;\n    #endif\n  }\n  mean = mean * HALF_SAMPLE_RATE;\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\n  float std_dev = sqrt( squared_mean - mean * mean );\n  gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";
                var vsm_vert = "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";
                function WebGLShadowMap( _renderer, _objects, maxTextureSize ) {
                	var _frustum = new Frustum(),
                		_shadowMapSize = new Vector2(),
                		_viewportSize = new Vector2(),
                		_viewport = new Vector4(),
                		_depthMaterials = [],
                		_distanceMaterials = [],
                		_materialCache = {};
                	var shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };
                	var shadowMaterialVertical = new ShaderMaterial( {
                		defines: {
                			SAMPLE_RATE: 2.0 / 8.0,
                			HALF_SAMPLE_RATE: 1.0 / 8.0
                		},
                		uniforms: {
                			shadow_pass: { value: null },
                			resolution: { value: new Vector2() },
                			radius: { value: 4.0 }
                		},
                		vertexShader: vsm_vert,
                		fragmentShader: vsm_frag
                	} );
                	var shadowMaterialHorizonal = shadowMaterialVertical.clone();
                	shadowMaterialHorizonal.defines.HORIZONAL_PASS = 1;
                	var fullScreenTri = new BufferGeometry();
                	fullScreenTri.setAttribute(
                		"position",
                		new BufferAttribute(
                			new Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),
                			3
                		)
                	);
                	var fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );
                	var scope = this;
                	this.enabled = false;
                	this.autoUpdate = true;
                	this.needsUpdate = false;
                	this.type = PCFShadowMap;
                	this.render = function ( lights, scene, camera ) {
                		if ( scope.enabled === false ) return;
                		if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;
                		if ( lights.length === 0 ) return;
                		var currentRenderTarget = _renderer.getRenderTarget();
                		var activeCubeFace = _renderer.getActiveCubeFace();
                		var activeMipmapLevel = _renderer.getActiveMipmapLevel();
                		var _state = _renderer.state;
                		_state.setBlending( NoBlending );
                		_state.buffers.color.setClear( 1, 1, 1, 1 );
                		_state.buffers.depth.setTest( true );
                		_state.setScissorTest( false );
                		for ( var i = 0, il = lights.length; i < il; i ++ ) {
                			var light = lights[ i ];
                			var shadow = light.shadow;
                			if ( shadow === undefined ) {
                				console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
                				continue;
                			}
                			_shadowMapSize.copy( shadow.mapSize );
                			var shadowFrameExtents = shadow.getFrameExtents();
                			_shadowMapSize.multiply( shadowFrameExtents );
                			_viewportSize.copy( shadow.mapSize );
                			if ( _shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize ) {
                				console.warn( 'THREE.WebGLShadowMap:', light, 'has shadow exceeding max texture size, reducing' );
                				if ( _shadowMapSize.x > maxTextureSize ) {
                					_viewportSize.x = Math.floor( maxTextureSize / shadowFrameExtents.x );
                					_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
                					shadow.mapSize.x = _viewportSize.x;
                				}
                				if ( _shadowMapSize.y > maxTextureSize ) {
                					_viewportSize.y = Math.floor( maxTextureSize / shadowFrameExtents.y );
                					_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
                					shadow.mapSize.y = _viewportSize.y;
                				}
                			}
                			if ( shadow.map === null && ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {
                				var pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };
                				shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
                				shadow.map.texture.name = light.name + ".shadowMap";
                				shadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
                				shadow.camera.updateProjectionMatrix();
                			}
                			if ( shadow.map === null ) {
                				var pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };
                				shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
                				shadow.map.texture.name = light.name + ".shadowMap";
                				shadow.camera.updateProjectionMatrix();
                			}
                			_renderer.setRenderTarget( shadow.map );
                			_renderer.clear();
                			var viewportCount = shadow.getViewportCount();
                			for ( var vp = 0; vp < viewportCount; vp ++ ) {
                				var viewport = shadow.getViewport( vp );
                				_viewport.set(
                					_viewportSize.x * viewport.x,
                					_viewportSize.y * viewport.y,
                					_viewportSize.x * viewport.z,
                					_viewportSize.y * viewport.w
                				);
                				_state.viewport( _viewport );
                				shadow.updateMatrices( light, vp );
                				_frustum = shadow.getFrustum();
                				renderObject( scene, camera, shadow.camera, light, this.type );
                			}
                			if ( ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {
                				VSMPass( shadow, camera );
                			}
                		}
                		scope.needsUpdate = false;
                		_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );
                	};
                	function VSMPass( shadow, camera ) {
                		var geometry = _objects.update( fullScreenMesh );
                		shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
                		shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
                		shadowMaterialVertical.uniforms.radius.value = shadow.radius;
                		_renderer.setRenderTarget( shadow.mapPass );
                		_renderer.clear();
                		_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );
                		shadowMaterialHorizonal.uniforms.shadow_pass.value = shadow.mapPass.texture;
                		shadowMaterialHorizonal.uniforms.resolution.value = shadow.mapSize;
                		shadowMaterialHorizonal.uniforms.radius.value = shadow.radius;
                		_renderer.setRenderTarget( shadow.map );
                		_renderer.clear();
                		_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizonal, fullScreenMesh, null );
                	}
                	function getDepthMaterialVariant( useMorphing, useSkinning, useInstancing ) {
                		var index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;
                		var material = _depthMaterials[ index ];
                		if ( material === undefined ) {
                			material = new MeshDepthMaterial( {
                				depthPacking: RGBADepthPacking,
                				morphTargets: useMorphing,
                				skinning: useSkinning
                			} );
                			_depthMaterials[ index ] = material;
                		}
                		return material;
                	}
                	function getDistanceMaterialVariant( useMorphing, useSkinning, useInstancing ) {
                		var index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;
                		var material = _distanceMaterials[ index ];
                		if ( material === undefined ) {
                			material = new MeshDistanceMaterial( {
                				morphTargets: useMorphing,
                				skinning: useSkinning
                			} );
                			_distanceMaterials[ index ] = material;
                		}
                		return material;
                	}
                	function getDepthMaterial( object, material, light, shadowCameraNear, shadowCameraFar, type ) {
                		var geometry = object.geometry;
                		var result = null;
                		var getMaterialVariant = getDepthMaterialVariant;
                		var customMaterial = object.customDepthMaterial;
                		if ( light.isPointLight === true ) {
                			getMaterialVariant = getDistanceMaterialVariant;
                			customMaterial = object.customDistanceMaterial;
                		}
                		if ( customMaterial === undefined ) {
                			var useMorphing = false;
                			if ( material.morphTargets === true ) {
                				if ( geometry.isBufferGeometry === true ) {
                					useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;
                				} else if ( geometry.isGeometry === true ) {
                					useMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;
                				}
                			}
                			var useSkinning = false;
                			if ( object.isSkinnedMesh === true ) {
                				if ( material.skinning === true ) {
                					useSkinning = true;
                				} else {
                					console.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );
                				}
                			}
                			var useInstancing = object.isInstancedMesh === true;
                			result = getMaterialVariant( useMorphing, useSkinning, useInstancing );
                		} else {
                			result = customMaterial;
                		}
                		if ( _renderer.localClippingEnabled &&
                				material.clipShadows === true &&
                				material.clippingPlanes.length !== 0 ) {
                			var keyA = result.uuid, keyB = material.uuid;
                			var materialsForVariant = _materialCache[ keyA ];
                			if ( materialsForVariant === undefined ) {
                				materialsForVariant = {};
                				_materialCache[ keyA ] = materialsForVariant;
                			}
                			var cachedMaterial = materialsForVariant[ keyB ];
                			if ( cachedMaterial === undefined ) {
                				cachedMaterial = result.clone();
                				materialsForVariant[ keyB ] = cachedMaterial;
                			}
                			result = cachedMaterial;
                		}
                		result.visible = material.visible;
                		result.wireframe = material.wireframe;
                		if ( type === VSMShadowMap ) {
                			result.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;
                		} else {
                			result.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];
                		}
                		result.clipShadows = material.clipShadows;
                		result.clippingPlanes = material.clippingPlanes;
                		result.clipIntersection = material.clipIntersection;
                		result.wireframeLinewidth = material.wireframeLinewidth;
                		result.linewidth = material.linewidth;
                		if ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {
                			result.referencePosition.setFromMatrixPosition( light.matrixWorld );
                			result.nearDistance = shadowCameraNear;
                			result.farDistance = shadowCameraFar;
                		}
                		return result;
                	}
                	function renderObject( object, camera, shadowCamera, light, type ) {
                		if ( object.visible === false ) return;
                		var visible = object.layers.test( camera.layers );
                		if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {
                			if ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {
                				object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );
                				var geometry = _objects.update( object );
                				var material = object.material;
                				if ( Array.isArray( material ) ) {
                					var groups = geometry.groups;
                					for ( var k = 0, kl = groups.length; k < kl; k ++ ) {
                						var group = groups[ k ];
                						var groupMaterial = material[ group.materialIndex ];
                						if ( groupMaterial && groupMaterial.visible ) {
                							var depthMaterial = getDepthMaterial( object, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );
                							_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );
                						}
                					}
                				} else if ( material.visible ) {
                					var depthMaterial = getDepthMaterial( object, material, light, shadowCamera.near, shadowCamera.far, type );
                					_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );
                				}
                			}
                		}
                		var children = object.children;
                		for ( var i = 0, l = children.length; i < l; i ++ ) {
                			renderObject( children[ i ], camera, shadowCamera, light, type );
                		}
                	}
                }
                function WebGLState( gl, extensions, capabilities ) {
                	var isWebGL2 = capabilities.isWebGL2;
                	function ColorBuffer() {
                		var locked = false;
                		var color = new Vector4();
                		var currentColorMask = null;
                		var currentColorClear = new Vector4( 0, 0, 0, 0 );
                		return {
                			setMask: function ( colorMask ) {
                				if ( currentColorMask !== colorMask && ! locked ) {
                					gl.colorMask( colorMask, colorMask, colorMask, colorMask );
                					currentColorMask = colorMask;
                				}
                			},
                			setLocked: function ( lock ) {
                				locked = lock;
                			},
                			setClear: function ( r, g, b, a, premultipliedAlpha ) {
                				if ( premultipliedAlpha === true ) {
                					r *= a; g *= a; b *= a;
                				}
                				color.set( r, g, b, a );
                				if ( currentColorClear.equals( color ) === false ) {
                					gl.clearColor( r, g, b, a );
                					currentColorClear.copy( color );
                				}
                			},
                			reset: function () {
                				locked = false;
                				currentColorMask = null;
                				currentColorClear.set( - 1, 0, 0, 0 );
                			}
                		};
                	}
                	function DepthBuffer() {
                		var locked = false;
                		var currentDepthMask = null;
                		var currentDepthFunc = null;
                		var currentDepthClear = null;
                		return {
                			setTest: function ( depthTest ) {
                				if ( depthTest ) {
                					enable( 2929 );
                				} else {
                					disable( 2929 );
                				}
                			},
                			setMask: function ( depthMask ) {
                				if ( currentDepthMask !== depthMask && ! locked ) {
                					gl.depthMask( depthMask );
                					currentDepthMask = depthMask;
                				}
                			},
                			setFunc: function ( depthFunc ) {
                				if ( currentDepthFunc !== depthFunc ) {
                					if ( depthFunc ) {
                						switch ( depthFunc ) {
                							case NeverDepth:
                								gl.depthFunc( 512 );
                								break;
                							case AlwaysDepth:
                								gl.depthFunc( 519 );
                								break;
                							case LessDepth:
                								gl.depthFunc( 513 );
                								break;
                							case LessEqualDepth:
                								gl.depthFunc( 515 );
                								break;
                							case EqualDepth:
                								gl.depthFunc( 514 );
                								break;
                							case GreaterEqualDepth:
                								gl.depthFunc( 518 );
                								break;
                							case GreaterDepth:
                								gl.depthFunc( 516 );
                								break;
                							case NotEqualDepth:
                								gl.depthFunc( 517 );
                								break;
                							default:
                								gl.depthFunc( 515 );
                						}
                					} else {
                						gl.depthFunc( 515 );
                					}
                					currentDepthFunc = depthFunc;
                				}
                			},
                			setLocked: function ( lock ) {
                				locked = lock;
                			},
                			setClear: function ( depth ) {
                				if ( currentDepthClear !== depth ) {
                					gl.clearDepth( depth );
                					currentDepthClear = depth;
                				}
                			},
                			reset: function () {
                				locked = false;
                				currentDepthMask = null;
                				currentDepthFunc = null;
                				currentDepthClear = null;
                			}
                		};
                	}
                	function StencilBuffer() {
                		var locked = false;
                		var currentStencilMask = null;
                		var currentStencilFunc = null;
                		var currentStencilRef = null;
                		var currentStencilFuncMask = null;
                		var currentStencilFail = null;
                		var currentStencilZFail = null;
                		var currentStencilZPass = null;
                		var currentStencilClear = null;
                		return {
                			setTest: function ( stencilTest ) {
                				if ( ! locked ) {
                					if ( stencilTest ) {
                						enable( 2960 );
                					} else {
                						disable( 2960 );
                					}
                				}
                			},
                			setMask: function ( stencilMask ) {
                				if ( currentStencilMask !== stencilMask && ! locked ) {
                					gl.stencilMask( stencilMask );
                					currentStencilMask = stencilMask;
                				}
                			},
                			setFunc: function ( stencilFunc, stencilRef, stencilMask ) {
                				if ( currentStencilFunc !== stencilFunc ||
                				     currentStencilRef 	!== stencilRef 	||
                				     currentStencilFuncMask !== stencilMask ) {
                					gl.stencilFunc( stencilFunc, stencilRef, stencilMask );
                					currentStencilFunc = stencilFunc;
                					currentStencilRef = stencilRef;
                					currentStencilFuncMask = stencilMask;
                				}
                			},
                			setOp: function ( stencilFail, stencilZFail, stencilZPass ) {
                				if ( currentStencilFail	 !== stencilFail 	||
                				     currentStencilZFail !== stencilZFail ||
                				     currentStencilZPass !== stencilZPass ) {
                					gl.stencilOp( stencilFail, stencilZFail, stencilZPass );
                					currentStencilFail = stencilFail;
                					currentStencilZFail = stencilZFail;
                					currentStencilZPass = stencilZPass;
                				}
                			},
                			setLocked: function ( lock ) {
                				locked = lock;
                			},
                			setClear: function ( stencil ) {
                				if ( currentStencilClear !== stencil ) {
                					gl.clearStencil( stencil );
                					currentStencilClear = stencil;
                				}
                			},
                			reset: function () {
                				locked = false;
                				currentStencilMask = null;
                				currentStencilFunc = null;
                				currentStencilRef = null;
                				currentStencilFuncMask = null;
                				currentStencilFail = null;
                				currentStencilZFail = null;
                				currentStencilZPass = null;
                				currentStencilClear = null;
                			}
                		};
                	}
                	var colorBuffer = new ColorBuffer();
                	var depthBuffer = new DepthBuffer();
                	var stencilBuffer = new StencilBuffer();
                	var maxVertexAttributes = gl.getParameter( 34921 );
                	var newAttributes = new Uint8Array( maxVertexAttributes );
                	var enabledAttributes = new Uint8Array( maxVertexAttributes );
                	var attributeDivisors = new Uint8Array( maxVertexAttributes );
                	var enabledCapabilities = {};
                	var currentProgram = null;
                	var currentBlendingEnabled = null;
                	var currentBlending = null;
                	var currentBlendEquation = null;
                	var currentBlendSrc = null;
                	var currentBlendDst = null;
                	var currentBlendEquationAlpha = null;
                	var currentBlendSrcAlpha = null;
                	var currentBlendDstAlpha = null;
                	var currentPremultipledAlpha = false;
                	var currentFlipSided = null;
                	var currentCullFace = null;
                	var currentLineWidth = null;
                	var currentPolygonOffsetFactor = null;
                	var currentPolygonOffsetUnits = null;
                	var maxTextures = gl.getParameter( 35661 );
                	var lineWidthAvailable = false;
                	var version = 0;
                	var glVersion = gl.getParameter( 7938 );
                	if ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {
                		version = parseFloat( /^WebGL\ ([0-9])/.exec( glVersion )[ 1 ] );
                		lineWidthAvailable = ( version >= 1.0 );
                	} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {
                		version = parseFloat( /^OpenGL\ ES\ ([0-9])/.exec( glVersion )[ 1 ] );
                		lineWidthAvailable = ( version >= 2.0 );
                	}
                	var currentTextureSlot = null;
                	var currentBoundTextures = {};
                	var currentScissor = new Vector4();
                	var currentViewport = new Vector4();
                	function createTexture( type, target, count ) {
                		var data = new Uint8Array( 4 );
                		var texture = gl.createTexture();
                		gl.bindTexture( type, texture );
                		gl.texParameteri( type, 10241, 9728 );
                		gl.texParameteri( type, 10240, 9728 );
                		for ( var i = 0; i < count; i ++ ) {
                			gl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );
                		}
                		return texture;
                	}
                	var emptyTextures = {};
                	emptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );
                	emptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );
                	colorBuffer.setClear( 0, 0, 0, 1 );
                	depthBuffer.setClear( 1 );
                	stencilBuffer.setClear( 0 );
                	enable( 2929 );
                	depthBuffer.setFunc( LessEqualDepth );
                	setFlipSided( false );
                	setCullFace( CullFaceBack );
                	enable( 2884 );
                	setBlending( NoBlending );
                	function initAttributes() {
                		for ( var i = 0, l = newAttributes.length; i < l; i ++ ) {
                			newAttributes[ i ] = 0;
                		}
                	}
                	function enableAttribute( attribute ) {
                		enableAttributeAndDivisor( attribute, 0 );
                	}
                	function enableAttributeAndDivisor( attribute, meshPerAttribute ) {
                		newAttributes[ attribute ] = 1;
                		if ( enabledAttributes[ attribute ] === 0 ) {
                			gl.enableVertexAttribArray( attribute );
                			enabledAttributes[ attribute ] = 1;
                		}
                		if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {
                			var extension = isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );
                			extension[ isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );
                			attributeDivisors[ attribute ] = meshPerAttribute;
                		}
                	}
                	function disableUnusedAttributes() {
                		for ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {
                			if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {
                				gl.disableVertexAttribArray( i );
                				enabledAttributes[ i ] = 0;
                			}
                		}
                	}
                	function enable( id ) {
                		if ( enabledCapabilities[ id ] !== true ) {
                			gl.enable( id );
                			enabledCapabilities[ id ] = true;
                		}
                	}
                	function disable( id ) {
                		if ( enabledCapabilities[ id ] !== false ) {
                			gl.disable( id );
                			enabledCapabilities[ id ] = false;
                		}
                	}
                	function useProgram( program ) {
                		if ( currentProgram !== program ) {
                			gl.useProgram( program );
                			currentProgram = program;
                			return true;
                		}
                		return false;
                	}
                	var equationToGL = {
                		[ AddEquation ]: 32774,
                		[ SubtractEquation ]: 32778,
                		[ ReverseSubtractEquation ]: 32779
                	};
                	if ( isWebGL2 ) {
                		equationToGL[ MinEquation ] = 32775;
                		equationToGL[ MaxEquation ] = 32776;
                	} else {
                		var extension = extensions.get( 'EXT_blend_minmax' );
                		if ( extension !== null ) {
                			equationToGL[ MinEquation ] = extension.MIN_EXT;
                			equationToGL[ MaxEquation ] = extension.MAX_EXT;
                		}
                	}
                	var factorToGL = {
                		[ ZeroFactor ]: 0,
                		[ OneFactor ]: 1,
                		[ SrcColorFactor ]: 768,
                		[ SrcAlphaFactor ]: 770,
                		[ SrcAlphaSaturateFactor ]: 776,
                		[ DstColorFactor ]: 774,
                		[ DstAlphaFactor ]: 772,
                		[ OneMinusSrcColorFactor ]: 769,
                		[ OneMinusSrcAlphaFactor ]: 771,
                		[ OneMinusDstColorFactor ]: 775,
                		[ OneMinusDstAlphaFactor ]: 773
                	};
                	function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {
                		if ( blending === NoBlending ) {
                			if ( currentBlendingEnabled ) {
                				disable( 3042 );
                				currentBlendingEnabled = false;
                			}
                			return;
                		}
                		if ( ! currentBlendingEnabled ) {
                			enable( 3042 );
                			currentBlendingEnabled = true;
                		}
                		if ( blending !== CustomBlending ) {
                			if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {
                				if ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {
                					gl.blendEquation( 32774 );
                					currentBlendEquation = AddEquation;
                					currentBlendEquationAlpha = AddEquation;
                				}
                				if ( premultipliedAlpha ) {
                					switch ( blending ) {
                						case NormalBlending:
                							gl.blendFuncSeparate( 1, 771, 1, 771 );
                							break;
                						case AdditiveBlending:
                							gl.blendFunc( 1, 1 );
                							break;
                						case SubtractiveBlending:
                							gl.blendFuncSeparate( 0, 0, 769, 771 );
                							break;
                						case MultiplyBlending:
                							gl.blendFuncSeparate( 0, 768, 0, 770 );
                							break;
                						default:
                							console.error( 'THREE.WebGLState: Invalid blending: ', blending );
                							break;
                					}
                				} else {
                					switch ( blending ) {
                						case NormalBlending:
                							gl.blendFuncSeparate( 770, 771, 1, 771 );
                							break;
                						case AdditiveBlending:
                							gl.blendFunc( 770, 1 );
                							break;
                						case SubtractiveBlending:
                							gl.blendFunc( 0, 769 );
                							break;
                						case MultiplyBlending:
                							gl.blendFunc( 0, 768 );
                							break;
                						default:
                							console.error( 'THREE.WebGLState: Invalid blending: ', blending );
                							break;
                					}
                				}
                				currentBlendSrc = null;
                				currentBlendDst = null;
                				currentBlendSrcAlpha = null;
                				currentBlendDstAlpha = null;
                				currentBlending = blending;
                				currentPremultipledAlpha = premultipliedAlpha;
                			}
                			return;
                		}
                		blendEquationAlpha = blendEquationAlpha || blendEquation;
                		blendSrcAlpha = blendSrcAlpha || blendSrc;
                		blendDstAlpha = blendDstAlpha || blendDst;
                		if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {
                			gl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );
                			currentBlendEquation = blendEquation;
                			currentBlendEquationAlpha = blendEquationAlpha;
                		}
                		if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {
                			gl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );
                			currentBlendSrc = blendSrc;
                			currentBlendDst = blendDst;
                			currentBlendSrcAlpha = blendSrcAlpha;
                			currentBlendDstAlpha = blendDstAlpha;
                		}
                		currentBlending = blending;
                		currentPremultipledAlpha = null;
                	}
                	function setMaterial( material, frontFaceCW ) {
                		material.side === DoubleSide
                			? disable( 2884 )
                			: enable( 2884 );
                		var flipSided = ( material.side === BackSide );
                		if ( frontFaceCW ) flipSided = ! flipSided;
                		setFlipSided( flipSided );
                		( material.blending === NormalBlending && material.transparent === false )
                			? setBlending( NoBlending )
                			: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );
                		depthBuffer.setFunc( material.depthFunc );
                		depthBuffer.setTest( material.depthTest );
                		depthBuffer.setMask( material.depthWrite );
                		colorBuffer.setMask( material.colorWrite );
                		var stencilWrite = material.stencilWrite;
                		stencilBuffer.setTest( stencilWrite );
                		if ( stencilWrite ) {
                			stencilBuffer.setMask( material.stencilWriteMask );
                			stencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );
                			stencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );
                		}
                		setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );
                	}
                	function setFlipSided( flipSided ) {
                		if ( currentFlipSided !== flipSided ) {
                			if ( flipSided ) {
                				gl.frontFace( 2304 );
                			} else {
                				gl.frontFace( 2305 );
                			}
                			currentFlipSided = flipSided;
                		}
                	}
                	function setCullFace( cullFace ) {
                		if ( cullFace !== CullFaceNone ) {
                			enable( 2884 );
                			if ( cullFace !== currentCullFace ) {
                				if ( cullFace === CullFaceBack ) {
                					gl.cullFace( 1029 );
                				} else if ( cullFace === CullFaceFront ) {
                					gl.cullFace( 1028 );
                				} else {
                					gl.cullFace( 1032 );
                				}
                			}
                		} else {
                			disable( 2884 );
                		}
                		currentCullFace = cullFace;
                	}
                	function setLineWidth( width ) {
                		if ( width !== currentLineWidth ) {
                			if ( lineWidthAvailable ) gl.lineWidth( width );
                			currentLineWidth = width;
                		}
                	}
                	function setPolygonOffset( polygonOffset, factor, units ) {
                		if ( polygonOffset ) {
                			enable( 32823 );
                			if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {
                				gl.polygonOffset( factor, units );
                				currentPolygonOffsetFactor = factor;
                				currentPolygonOffsetUnits = units;
                			}
                		} else {
                			disable( 32823 );
                		}
                	}
                	function setScissorTest( scissorTest ) {
                		if ( scissorTest ) {
                			enable( 3089 );
                		} else {
                			disable( 3089 );
                		}
                	}
                	function activeTexture( webglSlot ) {
                		if ( webglSlot === undefined ) webglSlot = 33984 + maxTextures - 1;
                		if ( currentTextureSlot !== webglSlot ) {
                			gl.activeTexture( webglSlot );
                			currentTextureSlot = webglSlot;
                		}
                	}
                	function bindTexture( webglType, webglTexture ) {
                		if ( currentTextureSlot === null ) {
                			activeTexture();
                		}
                		var boundTexture = currentBoundTextures[ currentTextureSlot ];
                		if ( boundTexture === undefined ) {
                			boundTexture = { type: undefined, texture: undefined };
                			currentBoundTextures[ currentTextureSlot ] = boundTexture;
                		}
                		if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {
                			gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );
                			boundTexture.type = webglType;
                			boundTexture.texture = webglTexture;
                		}
                	}
                	function unbindTexture() {
                		var boundTexture = currentBoundTextures[ currentTextureSlot ];
                		if ( boundTexture !== undefined && boundTexture.type !== undefined ) {
                			gl.bindTexture( boundTexture.type, null );
                			boundTexture.type = undefined;
                			boundTexture.texture = undefined;
                		}
                	}
                	function compressedTexImage2D() {
                		try {
                			gl.compressedTexImage2D.apply( gl, arguments );
                		} catch ( error ) {
                			console.error( 'THREE.WebGLState:', error );
                		}
                	}
                	function texImage2D() {
                		try {
                			gl.texImage2D.apply( gl, arguments );
                		} catch ( error ) {
                			console.error( 'THREE.WebGLState:', error );
                		}
                	}
                	function texImage3D() {
                		try {
                			gl.texImage3D.apply( gl, arguments );
                		} catch ( error ) {
                			console.error( 'THREE.WebGLState:', error );
                		}
                	}
                	function scissor( scissor ) {
                		if ( currentScissor.equals( scissor ) === false ) {
                			gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
                			currentScissor.copy( scissor );
                		}
                	}
                	function viewport( viewport ) {
                		if ( currentViewport.equals( viewport ) === false ) {
                			gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
                			currentViewport.copy( viewport );
                		}
                	}
                	function reset() {
                		for ( var i = 0; i < enabledAttributes.length; i ++ ) {
                			if ( enabledAttributes[ i ] === 1 ) {
                				gl.disableVertexAttribArray( i );
                				enabledAttributes[ i ] = 0;
                			}
                		}
                		enabledCapabilities = {};
                		currentTextureSlot = null;
                		currentBoundTextures = {};
                		currentProgram = null;
                		currentBlending = null;
                		currentFlipSided = null;
                		currentCullFace = null;
                		colorBuffer.reset();
                		depthBuffer.reset();
                		stencilBuffer.reset();
                	}
                	return {
                		buffers: {
                			color: colorBuffer,
                			depth: depthBuffer,
                			stencil: stencilBuffer
                		},
                		initAttributes: initAttributes,
                		enableAttribute: enableAttribute,
                		enableAttributeAndDivisor: enableAttributeAndDivisor,
                		disableUnusedAttributes: disableUnusedAttributes,
                		enable: enable,
                		disable: disable,
                		useProgram: useProgram,
                		setBlending: setBlending,
                		setMaterial: setMaterial,
                		setFlipSided: setFlipSided,
                		setCullFace: setCullFace,
                		setLineWidth: setLineWidth,
                		setPolygonOffset: setPolygonOffset,
                		setScissorTest: setScissorTest,
                		activeTexture: activeTexture,
                		bindTexture: bindTexture,
                		unbindTexture: unbindTexture,
                		compressedTexImage2D: compressedTexImage2D,
                		texImage2D: texImage2D,
                		texImage3D: texImage3D,
                		scissor: scissor,
                		viewport: viewport,
                		reset: reset
                	};
                }
                function WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {
                	var isWebGL2 = capabilities.isWebGL2;
                	var maxTextures = capabilities.maxTextures;
                	var maxCubemapSize = capabilities.maxCubemapSize;
                	var maxTextureSize = capabilities.maxTextureSize;
                	var maxSamples = capabilities.maxSamples;
                	var _videoTextures = new WeakMap();
                	var _canvas;
                	var useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'
                		&& ( new OffscreenCanvas( 1, 1 ).getContext( "2d" ) ) !== null;
                	function createCanvas( width, height ) {
                		return useOffscreenCanvas ?
                			new OffscreenCanvas( width, height ) :
                			document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
                	}
                	function resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {
                		var scale = 1;
                		if ( image.width > maxSize || image.height > maxSize ) {
                			scale = maxSize / Math.max( image.width, image.height );
                		}
                		if ( scale < 1 || needsPowerOfTwo === true ) {
                			if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
                				( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
                				( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {
                				var floor = needsPowerOfTwo ? _Math.floorPowerOfTwo : Math.floor;
                				var width = floor( scale * image.width );
                				var height = floor( scale * image.height );
                				if ( _canvas === undefined ) _canvas = createCanvas( width, height );
                				var canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;
                				canvas.width = width;
                				canvas.height = height;
                				var context = canvas.getContext( '2d' );
                				context.drawImage( image, 0, 0, width, height );
                				console.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );
                				return canvas;
                			} else {
                				if ( 'data' in image ) {
                					console.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );
                				}
                				return image;
                			}
                		}
                		return image;
                	}
                	function isPowerOfTwo( image ) {
                		return _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );
                	}
                	function textureNeedsPowerOfTwo( texture ) {
                		if ( isWebGL2 ) return false;
                		return ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||
                			( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );
                	}
                	function textureNeedsGenerateMipmaps( texture, supportsMips ) {
                		return texture.generateMipmaps && supportsMips &&
                			texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
                	}
                	function generateMipmap( target, texture, width, height ) {
                		_gl.generateMipmap( target );
                		var textureProperties = properties.get( texture );
                		textureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;
                	}
                	function getInternalFormat( glFormat, glType ) {
                		if ( isWebGL2 === false ) return glFormat;
                		var internalFormat = glFormat;
                		if ( glFormat === 6403 ) {
                			if ( glType === 5126 ) internalFormat = 33326;
                			if ( glType === 5131 ) internalFormat = 33325;
                			if ( glType === 5121 ) internalFormat = 33321;
                		}
                		if ( glFormat === 6407 ) {
                			if ( glType === 5126 ) internalFormat = 34837;
                			if ( glType === 5131 ) internalFormat = 34843;
                			if ( glType === 5121 ) internalFormat = 32849;
                		}
                		if ( glFormat === 6408 ) {
                			if ( glType === 5126 ) internalFormat = 34836;
                			if ( glType === 5131 ) internalFormat = 34842;
                			if ( glType === 5121 ) internalFormat = 32856;
                		}
                		if ( internalFormat === 33325 || internalFormat === 33326 ||
                			internalFormat === 34842 || internalFormat === 34836 ) {
                			extensions.get( 'EXT_color_buffer_float' );
                		} else if ( internalFormat === 34843 || internalFormat === 34837 ) {
                			console.warn( 'THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead.' );
                		}
                		return internalFormat;
                	}
                	function filterFallback( f ) {
                		if ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {
                			return 9728;
                		}
                		return 9729;
                	}
                	function onTextureDispose( event ) {
                		var texture = event.target;
                		texture.removeEventListener( 'dispose', onTextureDispose );
                		deallocateTexture( texture );
                		if ( texture.isVideoTexture ) {
                			_videoTextures.delete( texture );
                		}
                		info.memory.textures --;
                	}
                	function onRenderTargetDispose( event ) {
                		var renderTarget = event.target;
                		renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );
                		deallocateRenderTarget( renderTarget );
                		info.memory.textures --;
                	}
                	function deallocateTexture( texture ) {
                		var textureProperties = properties.get( texture );
                		if ( textureProperties.__webglInit === undefined ) return;
                		_gl.deleteTexture( textureProperties.__webglTexture );
                		properties.remove( texture );
                	}
                	function deallocateRenderTarget( renderTarget ) {
                		var renderTargetProperties = properties.get( renderTarget );
                		var textureProperties = properties.get( renderTarget.texture );
                		if ( ! renderTarget ) return;
                		if ( textureProperties.__webglTexture !== undefined ) {
                			_gl.deleteTexture( textureProperties.__webglTexture );
                		}
                		if ( renderTarget.depthTexture ) {
                			renderTarget.depthTexture.dispose();
                		}
                		if ( renderTarget.isWebGLRenderTargetCube ) {
                			for ( var i = 0; i < 6; i ++ ) {
                				_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
                				if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );
                			}
                		} else {
                			_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
                			if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );
                		}
                		if ( renderTarget.isWebGLMultiviewRenderTarget ) {
                			_gl.deleteTexture( renderTargetProperties.__webglColorTexture );
                			_gl.deleteTexture( renderTargetProperties.__webglDepthStencilTexture );
                			info.memory.textures -= 2;
                			for ( var i = 0, il = renderTargetProperties.__webglViewFramebuffers.length; i < il; i ++ ) {
                				_gl.deleteFramebuffer( renderTargetProperties.__webglViewFramebuffers[ i ] );
                			}
                		}
                		properties.remove( renderTarget.texture );
                		properties.remove( renderTarget );
                	}
                	var textureUnits = 0;
                	function resetTextureUnits() {
                		textureUnits = 0;
                	}
                	function allocateTextureUnit() {
                		var textureUnit = textureUnits;
                		if ( textureUnit >= maxTextures ) {
                			console.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );
                		}
                		textureUnits += 1;
                		return textureUnit;
                	}
                	function setTexture2D( texture, slot ) {
                		var textureProperties = properties.get( texture );
                		if ( texture.isVideoTexture ) updateVideoTexture( texture );
                		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {
                			var image = texture.image;
                			if ( image === undefined ) {
                				console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );
                			} else if ( image.complete === false ) {
                				console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );
                			} else {
                				uploadTexture( textureProperties, texture, slot );
                				return;
                			}
                		}
                		state.activeTexture( 33984 + slot );
                		state.bindTexture( 3553, textureProperties.__webglTexture );
                	}
                	function setTexture2DArray( texture, slot ) {
                		var textureProperties = properties.get( texture );
                		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {
                			uploadTexture( textureProperties, texture, slot );
                			return;
                		}
                		state.activeTexture( 33984 + slot );
                		state.bindTexture( 35866, textureProperties.__webglTexture );
                	}
                	function setTexture3D( texture, slot ) {
                		var textureProperties = properties.get( texture );
                		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {
                			uploadTexture( textureProperties, texture, slot );
                			return;
                		}
                		state.activeTexture( 33984 + slot );
                		state.bindTexture( 32879, textureProperties.__webglTexture );
                	}
                	function setTextureCube( texture, slot ) {
                		if ( texture.image.length !== 6 ) return;
                		var textureProperties = properties.get( texture );
                		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {
                			initTexture( textureProperties, texture );
                			state.activeTexture( 33984 + slot );
                			state.bindTexture( 34067, textureProperties.__webglTexture );
                			_gl.pixelStorei( 37440, texture.flipY );
                			var isCompressed = ( texture && texture.isCompressedTexture );
                			var isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );
                			var cubeImage = [];
                			for ( var i = 0; i < 6; i ++ ) {
                				if ( ! isCompressed && ! isDataTexture ) {
                					cubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );
                				} else {
                					cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];
                				}
                			}
                			var image = cubeImage[ 0 ],
                				supportsMips = isPowerOfTwo( image ) || isWebGL2,
                				glFormat = utils.convert( texture.format ),
                				glType = utils.convert( texture.type ),
                				glInternalFormat = getInternalFormat( glFormat, glType );
                			setTextureParameters( 34067, texture, supportsMips );
                			var mipmaps;
                			if ( isCompressed ) {
                				for ( var i = 0; i < 6; i ++ ) {
                					mipmaps = cubeImage[ i ].mipmaps;
                					for ( var j = 0; j < mipmaps.length; j ++ ) {
                						var mipmap = mipmaps[ j ];
                						if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {
                							if ( glFormat !== null ) {
                								state.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );
                							} else {
                								console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );
                							}
                						} else {
                							state.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
                						}
                					}
                				}
                				textureProperties.__maxMipLevel = mipmaps.length - 1;
                			} else {
                				mipmaps = texture.mipmaps;
                				for ( var i = 0; i < 6; i ++ ) {
                					if ( isDataTexture ) {
                						state.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );
                						for ( var j = 0; j < mipmaps.length; j ++ ) {
                							var mipmap = mipmaps[ j ];
                							var mipmapImage = mipmap.image[ i ].image;
                							state.texImage2D( 34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );
                						}
                					} else {
                						state.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );
                						for ( var j = 0; j < mipmaps.length; j ++ ) {
                							var mipmap = mipmaps[ j ];
                							state.texImage2D( 34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );
                						}
                					}
                				}
                				textureProperties.__maxMipLevel = mipmaps.length;
                			}
                			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {
                				generateMipmap( 34067, texture, image.width, image.height );
                			}
                			textureProperties.__version = texture.version;
                			if ( texture.onUpdate ) texture.onUpdate( texture );
                		} else {
                			state.activeTexture( 33984 + slot );
                			state.bindTexture( 34067, textureProperties.__webglTexture );
                		}
                	}
                	function setTextureCubeDynamic( texture, slot ) {
                		state.activeTexture( 33984 + slot );
                		state.bindTexture( 34067, properties.get( texture ).__webglTexture );
                	}
                	var wrappingToGL = {
                		[ RepeatWrapping ]: 10497,
                		[ ClampToEdgeWrapping ]: 33071,
                		[ MirroredRepeatWrapping ]: 33648
                	};
                	var filterToGL = {
                		[ NearestFilter ]: 9728,
                		[ NearestMipmapNearestFilter ]: 9984,
                		[ NearestMipmapLinearFilter ]: 9986,
                		[ LinearFilter ]: 9729,
                		[ LinearMipmapNearestFilter ]: 9985,
                		[ LinearMipmapLinearFilter ]: 9987
                	};
                	function setTextureParameters( textureType, texture, supportsMips ) {
                		if ( supportsMips ) {
                			_gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );
                			_gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );
                			if ( textureType === 32879 || textureType === 35866 ) {
                				_gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );
                			}
                			_gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );
                			_gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );
                		} else {
                			_gl.texParameteri( textureType, 10242, 33071 );
                			_gl.texParameteri( textureType, 10243, 33071 );
                			if ( textureType === 32879 || textureType === 35866 ) {
                				_gl.texParameteri( textureType, 32882, 33071 );
                			}
                			if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {
                				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );
                			}
                			_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );
                			_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );
                			if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {
                				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );
                			}
                		}
                		var extension = extensions.get( 'EXT_texture_filter_anisotropic' );
                		if ( extension ) {
                			if ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;
                			if ( texture.type === HalfFloatType && ( isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) return;
                			if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {
                				_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
                				properties.get( texture ).__currentAnisotropy = texture.anisotropy;
                			}
                		}
                	}
                	function initTexture( textureProperties, texture ) {
                		if ( textureProperties.__webglInit === undefined ) {
                			textureProperties.__webglInit = true;
                			texture.addEventListener( 'dispose', onTextureDispose );
                			textureProperties.__webglTexture = _gl.createTexture();
                			info.memory.textures ++;
                		}
                	}
                	function uploadTexture( textureProperties, texture, slot ) {
                		var textureType = 3553;
                		if ( texture.isDataTexture2DArray ) textureType = 35866;
                		if ( texture.isDataTexture3D ) textureType = 32879;
                		initTexture( textureProperties, texture );
                		state.activeTexture( 33984 + slot );
                		state.bindTexture( textureType, textureProperties.__webglTexture );
                		_gl.pixelStorei( 37440, texture.flipY );
                		_gl.pixelStorei( 37441, texture.premultiplyAlpha );
                		_gl.pixelStorei( 3317, texture.unpackAlignment );
                		var needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false;
                		var image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );
                		var supportsMips = isPowerOfTwo( image ) || isWebGL2,
                			glFormat = utils.convert( texture.format ),
                			glType = utils.convert( texture.type ),
                			glInternalFormat = getInternalFormat( glFormat, glType );
                		setTextureParameters( textureType, texture, supportsMips );
                		var mipmap, mipmaps = texture.mipmaps;
                		if ( texture.isDepthTexture ) {
                			glInternalFormat = 6402;
                			if ( texture.type === FloatType ) {
                				if ( isWebGL2 === false ) throw new Error( 'Float Depth Texture only supported in WebGL2.0' );
                				glInternalFormat = 36012;
                			} else if ( isWebGL2 ) {
                				glInternalFormat = 33189;
                			}
                			if ( texture.format === DepthFormat && glInternalFormat === 6402 ) {
                				if ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {
                					console.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );
                					texture.type = UnsignedShortType;
                					glType = utils.convert( texture.type );
                				}
                			}
                			if ( texture.format === DepthStencilFormat ) {
                				glInternalFormat = 34041;
                				if ( texture.type !== UnsignedInt248Type ) {
                					console.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );
                					texture.type = UnsignedInt248Type;
                					glType = utils.convert( texture.type );
                				}
                			}
                			state.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );
                		} else if ( texture.isDataTexture ) {
                			if ( mipmaps.length > 0 && supportsMips ) {
                				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {
                					mipmap = mipmaps[ i ];
                					state.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
                				}
                				texture.generateMipmaps = false;
                				textureProperties.__maxMipLevel = mipmaps.length - 1;
                			} else {
                				state.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );
                				textureProperties.__maxMipLevel = 0;
                			}
                		} else if ( texture.isCompressedTexture ) {
                			for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {
                				mipmap = mipmaps[ i ];
                				if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {
                					if ( glFormat !== null ) {
                						state.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );
                					} else {
                						console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );
                					}
                				} else {
                					state.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
                				}
                			}
                			textureProperties.__maxMipLevel = mipmaps.length - 1;
                		} else if ( texture.isDataTexture2DArray ) {
                			state.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );
                			textureProperties.__maxMipLevel = 0;
                		} else if ( texture.isDataTexture3D ) {
                			state.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );
                			textureProperties.__maxMipLevel = 0;
                		} else {
                			if ( mipmaps.length > 0 && supportsMips ) {
                				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {
                					mipmap = mipmaps[ i ];
                					state.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );
                				}
                				texture.generateMipmaps = false;
                				textureProperties.__maxMipLevel = mipmaps.length - 1;
                			} else {
                				state.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );
                				textureProperties.__maxMipLevel = 0;
                			}
                		}
                		if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {
                			generateMipmap( 3553, texture, image.width, image.height );
                		}
                		textureProperties.__version = texture.version;
                		if ( texture.onUpdate ) texture.onUpdate( texture );
                	}
                	function setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {
                		var glFormat = utils.convert( renderTarget.texture.format );
                		var glType = utils.convert( renderTarget.texture.type );
                		var glInternalFormat = getInternalFormat( glFormat, glType );
                		state.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
                		_gl.bindFramebuffer( 36160, framebuffer );
                		_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );
                		_gl.bindFramebuffer( 36160, null );
                	}
                	function setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {
                		_gl.bindRenderbuffer( 36161, renderbuffer );
                		if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {
                			if ( isMultisample ) {
                				var samples = getRenderTargetSamples( renderTarget );
                				_gl.renderbufferStorageMultisample( 36161, samples, 33189, renderTarget.width, renderTarget.height );
                			} else {
                				_gl.renderbufferStorage( 36161, 33189, renderTarget.width, renderTarget.height );
                			}
                			_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );
                		} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {
                			if ( isMultisample ) {
                				var samples = getRenderTargetSamples( renderTarget );
                				_gl.renderbufferStorageMultisample( 36161, samples, 35056, renderTarget.width, renderTarget.height );
                			} else {
                				_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );
                			}
                			_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );
                		} else {
                			var glFormat = utils.convert( renderTarget.texture.format );
                			var glType = utils.convert( renderTarget.texture.type );
                			var glInternalFormat = getInternalFormat( glFormat, glType );
                			if ( isMultisample ) {
                				var samples = getRenderTargetSamples( renderTarget );
                				_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );
                			} else {
                				_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );
                			}
                		}
                		_gl.bindRenderbuffer( 36161, null );
                	}
                	function setupDepthTexture( framebuffer, renderTarget ) {
                		var isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );
                		if ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );
                		_gl.bindFramebuffer( 36160, framebuffer );
                		if ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {
                			throw new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );
                		}
                		if ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||
                				renderTarget.depthTexture.image.width !== renderTarget.width ||
                				renderTarget.depthTexture.image.height !== renderTarget.height ) {
                			renderTarget.depthTexture.image.width = renderTarget.width;
                			renderTarget.depthTexture.image.height = renderTarget.height;
                			renderTarget.depthTexture.needsUpdate = true;
                		}
                		setTexture2D( renderTarget.depthTexture, 0 );
                		var webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;
                		if ( renderTarget.depthTexture.format === DepthFormat ) {
                			_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );
                		} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {
                			_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );
                		} else {
                			throw new Error( 'Unknown depthTexture format' );
                		}
                	}
                	function setupDepthRenderbuffer( renderTarget ) {
                		var renderTargetProperties = properties.get( renderTarget );
                		var isCube = ( renderTarget.isWebGLRenderTargetCube === true );
                		if ( renderTarget.depthTexture ) {
                			if ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );
                			setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );
                		} else {
                			if ( isCube ) {
                				renderTargetProperties.__webglDepthbuffer = [];
                				for ( var i = 0; i < 6; i ++ ) {
                					_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );
                					renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
                					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );
                				}
                			} else {
                				_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );
                				renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
                				setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );
                			}
                		}
                		_gl.bindFramebuffer( 36160, null );
                	}
                	function setupRenderTarget( renderTarget ) {
                		var renderTargetProperties = properties.get( renderTarget );
                		var textureProperties = properties.get( renderTarget.texture );
                		renderTarget.addEventListener( 'dispose', onRenderTargetDispose );
                		textureProperties.__webglTexture = _gl.createTexture();
                		info.memory.textures ++;
                		var isCube = ( renderTarget.isWebGLRenderTargetCube === true );
                		var isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );
                		var isMultiview = ( renderTarget.isWebGLMultiviewRenderTarget === true );
                		var supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;
                		if ( isCube ) {
                			renderTargetProperties.__webglFramebuffer = [];
                			for ( var i = 0; i < 6; i ++ ) {
                				renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();
                			}
                		} else {
                			renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();
                			if ( isMultisample ) {
                				if ( isWebGL2 ) {
                					renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
                					renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();
                					_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );
                					var glFormat = utils.convert( renderTarget.texture.format );
                					var glType = utils.convert( renderTarget.texture.type );
                					var glInternalFormat = getInternalFormat( glFormat, glType );
                					var samples = getRenderTargetSamples( renderTarget );
                					_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );
                					_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );
                					_gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );
                					_gl.bindRenderbuffer( 36161, null );
                					if ( renderTarget.depthBuffer ) {
                						renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
                						setupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );
                					}
                					_gl.bindFramebuffer( 36160, null );
                				} else {
                					console.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );
                				}
                			} else if ( isMultiview ) {
                				var width = renderTarget.width;
                				var height = renderTarget.height;
                				var numViews = renderTarget.numViews;
                				_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );
                				var ext = extensions.get( 'OVR_multiview2' );
                				info.memory.textures += 2;
                				var colorTexture = _gl.createTexture();
                				_gl.bindTexture( 35866, colorTexture );
                				_gl.texParameteri( 35866, 10240, 9728 );
                				_gl.texParameteri( 35866, 10241, 9728 );
                				_gl.texImage3D( 35866, 0, 32856, width, height, numViews, 0, 6408, 5121, null );
                				ext.framebufferTextureMultiviewOVR( 36160, 36064, colorTexture, 0, 0, numViews );
                				var depthStencilTexture = _gl.createTexture();
                				_gl.bindTexture( 35866, depthStencilTexture );
                				_gl.texParameteri( 35866, 10240, 9728 );
                				_gl.texParameteri( 35866, 10241, 9728 );
                				_gl.texImage3D( 35866, 0, 35056, width, height, numViews, 0, 34041, 34042, null );
                				ext.framebufferTextureMultiviewOVR( 36160, 33306, depthStencilTexture, 0, 0, numViews );
                				var viewFramebuffers = new Array( numViews );
                				for ( var i = 0; i < numViews; ++ i ) {
                					viewFramebuffers[ i ] = _gl.createFramebuffer();
                					_gl.bindFramebuffer( 36160, viewFramebuffers[ i ] );
                					_gl.framebufferTextureLayer( 36160, 36064, colorTexture, 0, i );
                				}
                				renderTargetProperties.__webglColorTexture = colorTexture;
                				renderTargetProperties.__webglDepthStencilTexture = depthStencilTexture;
                				renderTargetProperties.__webglViewFramebuffers = viewFramebuffers;
                				_gl.bindFramebuffer( 36160, null );
                				_gl.bindTexture( 35866, null );
                			}
                		}
                		if ( isCube ) {
                			state.bindTexture( 34067, textureProperties.__webglTexture );
                			setTextureParameters( 34067, renderTarget.texture, supportsMips );
                			for ( var i = 0; i < 6; i ++ ) {
                				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, 36064, 34069 + i );
                			}
                			if ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {
                				generateMipmap( 34067, renderTarget.texture, renderTarget.width, renderTarget.height );
                			}
                			state.bindTexture( 34067, null );
                		} else if ( ! isMultiview ) {
                			state.bindTexture( 3553, textureProperties.__webglTexture );
                			setTextureParameters( 3553, renderTarget.texture, supportsMips );
                			setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553 );
                			if ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {
                				generateMipmap( 3553, renderTarget.texture, renderTarget.width, renderTarget.height );
                			}
                			state.bindTexture( 3553, null );
                		}
                		if ( renderTarget.depthBuffer ) {
                			setupDepthRenderbuffer( renderTarget );
                		}
                	}
                	function updateRenderTargetMipmap( renderTarget ) {
                		var texture = renderTarget.texture;
                		var supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;
                		if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {
                			var target = renderTarget.isWebGLRenderTargetCube ? 34067 : 3553;
                			var webglTexture = properties.get( texture ).__webglTexture;
                			state.bindTexture( target, webglTexture );
                			generateMipmap( target, texture, renderTarget.width, renderTarget.height );
                			state.bindTexture( target, null );
                		}
                	}
                	function updateMultisampleRenderTarget( renderTarget ) {
                		if ( renderTarget.isWebGLMultisampleRenderTarget ) {
                			if ( isWebGL2 ) {
                				var renderTargetProperties = properties.get( renderTarget );
                				_gl.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );
                				_gl.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );
                				var width = renderTarget.width;
                				var height = renderTarget.height;
                				var mask = 16384;
                				if ( renderTarget.depthBuffer ) mask |= 256;
                				if ( renderTarget.stencilBuffer ) mask |= 1024;
                				_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );
                			} else {
                				console.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );
                			}
                		}
                	}
                	function getRenderTargetSamples( renderTarget ) {
                		return ( isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?
                			Math.min( maxSamples, renderTarget.samples ) : 0;
                	}
                	function updateVideoTexture( texture ) {
                		var frame = info.render.frame;
                		if ( _videoTextures.get( texture ) !== frame ) {
                			_videoTextures.set( texture, frame );
                			texture.update();
                		}
                	}
                	var warnedTexture2D = false;
                	var warnedTextureCube = false;
                	function safeSetTexture2D( texture, slot ) {
                		if ( texture && texture.isWebGLRenderTarget ) {
                			if ( warnedTexture2D === false ) {
                				console.warn( "THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead." );
                				warnedTexture2D = true;
                			}
                			texture = texture.texture;
                		}
                		setTexture2D( texture, slot );
                	}
                	function safeSetTextureCube( texture, slot ) {
                		if ( texture && texture.isWebGLRenderTargetCube ) {
                			if ( warnedTextureCube === false ) {
                				console.warn( "THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead." );
                				warnedTextureCube = true;
                			}
                			texture = texture.texture;
                		}
                		if ( ( texture && texture.isCubeTexture ) ||
                			( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {
                			setTextureCube( texture, slot );
                		} else {
                			setTextureCubeDynamic( texture, slot );
                		}
                	}
                	this.allocateTextureUnit = allocateTextureUnit;
                	this.resetTextureUnits = resetTextureUnits;
                	this.setTexture2D = setTexture2D;
                	this.setTexture2DArray = setTexture2DArray;
                	this.setTexture3D = setTexture3D;
                	this.setTextureCube = setTextureCube;
                	this.setTextureCubeDynamic = setTextureCubeDynamic;
                	this.setupRenderTarget = setupRenderTarget;
                	this.updateRenderTargetMipmap = updateRenderTargetMipmap;
                	this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
                	this.safeSetTexture2D = safeSetTexture2D;
                	this.safeSetTextureCube = safeSetTextureCube;
                }
                function WebGLUtils( gl, extensions, capabilities ) {
                	var isWebGL2 = capabilities.isWebGL2;
                	function convert( p ) {
                		var extension;
                		if ( p === UnsignedByteType ) return 5121;
                		if ( p === UnsignedShort4444Type ) return 32819;
                		if ( p === UnsignedShort5551Type ) return 32820;
                		if ( p === UnsignedShort565Type ) return 33635;
                		if ( p === ByteType ) return 5120;
                		if ( p === ShortType ) return 5122;
                		if ( p === UnsignedShortType ) return 5123;
                		if ( p === IntType ) return 5124;
                		if ( p === UnsignedIntType ) return 5125;
                		if ( p === FloatType ) return 5126;
                		if ( p === HalfFloatType ) {
                			if ( isWebGL2 ) return 5131;
                			extension = extensions.get( 'OES_texture_half_float' );
                			if ( extension !== null ) {
                				return extension.HALF_FLOAT_OES;
                			} else {
                				return null;
                			}
                		}
                		if ( p === AlphaFormat ) return 6406;
                		if ( p === RGBFormat ) return 6407;
                		if ( p === RGBAFormat ) return 6408;
                		if ( p === LuminanceFormat ) return 6409;
                		if ( p === LuminanceAlphaFormat ) return 6410;
                		if ( p === DepthFormat ) return 6402;
                		if ( p === DepthStencilFormat ) return 34041;
                		if ( p === RedFormat ) return 6403;
                		if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||
                			p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {
                			extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );
                			if ( extension !== null ) {
                				if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
                				if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                				if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                				if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
                			} else {
                				return null;
                			}
                		}
                		if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||
                			p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {
                			extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );
                			if ( extension !== null ) {
                				if ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                				if ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                				if ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                				if ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
                			} else {
                				return null;
                			}
                		}
                		if ( p === RGB_ETC1_Format ) {
                			extension = extensions.get( 'WEBGL_compressed_texture_etc1' );
                			if ( extension !== null ) {
                				return extension.COMPRESSED_RGB_ETC1_WEBGL;
                			} else {
                				return null;
                			}
                		}
                		if ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||
                			p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||
                			p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||
                			p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||
                			p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {
                			extension = extensions.get( 'WEBGL_compressed_texture_astc' );
                			if ( extension !== null ) {
                				return p;
                			} else {
                				return null;
                			}
                		}
                		if ( p === UnsignedInt248Type ) {
                			if ( isWebGL2 ) return 34042;
                			extension = extensions.get( 'WEBGL_depth_texture' );
                			if ( extension !== null ) {
                				return extension.UNSIGNED_INT_24_8_WEBGL;
                			} else {
                				return null;
                			}
                		}
                	}
                	return { convert: convert };
                }
                function WebGLMultiviewRenderTarget( width, height, numViews, options ) {
                	WebGLRenderTarget.call( this, width, height, options );
                	this.depthBuffer = false;
                	this.stencilBuffer = false;
                	this.numViews = numViews;
                }
                WebGLMultiviewRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {
                	constructor: WebGLMultiviewRenderTarget,
                	isWebGLMultiviewRenderTarget: true,
                	copy: function ( source ) {
                		WebGLRenderTarget.prototype.copy.call( this, source );
                		this.numViews = source.numViews;
                		return this;
                	},
                	setNumViews: function ( numViews ) {
                		if ( this.numViews !== numViews ) {
                			this.numViews = numViews;
                			this.dispose();
                		}
                		return this;
                	}
                } );
                function WebGLMultiview( renderer, gl ) {
                	var DEFAULT_NUMVIEWS = 2;
                	var extensions = renderer.extensions;
                	var properties = renderer.properties;
                	var renderTarget, currentRenderTarget;
                	var mat3, mat4, cameraArray, renderSize;
                	var available;
                	var maxNumViews = 0;
                	function isAvailable() {
                		if ( available === undefined ) {
                			var extension = extensions.get( 'OVR_multiview2' );
                			available = extension !== null && gl.getContextAttributes().antialias === false;
                			if ( available ) {
                				maxNumViews = gl.getParameter( extension.MAX_VIEWS_OVR );
                				renderTarget = new WebGLMultiviewRenderTarget( 0, 0, DEFAULT_NUMVIEWS );
                				renderSize = new Vector2();
                				mat4 = [];
                				mat3 = [];
                				cameraArray = [];
                				for ( var i = 0; i < maxNumViews; i ++ ) {
                					mat4[ i ] = new Matrix4();
                					mat3[ i ] = new Matrix3();
                				}
                			}
                		}
                		return available;
                	}
                	function getCameraArray( camera ) {
                		if ( camera.isArrayCamera ) return camera.cameras;
                		cameraArray[ 0 ] = camera;
                		return cameraArray;
                	}
                	function updateCameraProjectionMatricesUniform( camera, uniforms ) {
                		var cameras = getCameraArray( camera );
                		for ( var i = 0; i < cameras.length; i ++ ) {
                			mat4[ i ].copy( cameras[ i ].projectionMatrix );
                		}
                		uniforms.setValue( gl, 'projectionMatrices', mat4 );
                	}
                	function updateCameraViewMatricesUniform( camera, uniforms ) {
                		var cameras = getCameraArray( camera );
                		for ( var i = 0; i < cameras.length; i ++ ) {
                			mat4[ i ].copy( cameras[ i ].matrixWorldInverse );
                		}
                		uniforms.setValue( gl, 'viewMatrices', mat4 );
                	}
                	function updateObjectMatricesUniforms( object, camera, uniforms ) {
                		var cameras = getCameraArray( camera );
                		for ( var i = 0; i < cameras.length; i ++ ) {
                			mat4[ i ].multiplyMatrices( cameras[ i ].matrixWorldInverse, object.matrixWorld );
                			mat3[ i ].getNormalMatrix( mat4[ i ] );
                		}
                		uniforms.setValue( gl, 'modelViewMatrices', mat4 );
                		uniforms.setValue( gl, 'normalMatrices', mat3 );
                	}
                	function isMultiviewCompatible( camera ) {
                		if ( camera.isArrayCamera === undefined ) return true;
                		var cameras = camera.cameras;
                		if ( cameras.length > maxNumViews ) return false;
                		for ( var i = 1, il = cameras.length; i < il; i ++ ) {
                			if ( cameras[ 0 ].viewport.z !== cameras[ i ].viewport.z ||
                				cameras[ 0 ].viewport.w !== cameras[ i ].viewport.w ) return false;
                		}
                		return true;
                	}
                	function resizeRenderTarget( camera ) {
                		if ( currentRenderTarget ) {
                			renderSize.set( currentRenderTarget.width, currentRenderTarget.height );
                		} else {
                			renderer.getDrawingBufferSize( renderSize );
                		}
                		if ( camera.isArrayCamera ) {
                			var viewport = camera.cameras[ 0 ].viewport;
                			renderTarget.setSize( viewport.z, viewport.w );
                			renderTarget.setNumViews( camera.cameras.length );
                		} else {
                			renderTarget.setSize( renderSize.x, renderSize.y );
                			renderTarget.setNumViews( DEFAULT_NUMVIEWS );
                		}
                	}
                	function attachCamera( camera ) {
                		if ( isMultiviewCompatible( camera ) === false ) return;
                		currentRenderTarget = renderer.getRenderTarget();
                		resizeRenderTarget( camera );
                		renderer.setRenderTarget( renderTarget );
                	}
                	function detachCamera( camera ) {
                		if ( renderTarget !== renderer.getRenderTarget() ) return;
                		renderer.setRenderTarget( currentRenderTarget );
                		flush( camera );
                	}
                	function flush( camera ) {
                		var srcRenderTarget = renderTarget;
                		var numViews = srcRenderTarget.numViews;
                		var srcFramebuffers = properties.get( srcRenderTarget ).__webglViewFramebuffers;
                		var viewWidth = srcRenderTarget.width;
                		var viewHeight = srcRenderTarget.height;
                		if ( camera.isArrayCamera ) {
                			for ( var i = 0; i < numViews; i ++ ) {
                				var viewport = camera.cameras[ i ].viewport;
                				var x1 = viewport.x;
                				var y1 = viewport.y;
                				var x2 = x1 + viewport.z;
                				var y2 = y1 + viewport.w;
                				gl.bindFramebuffer( 36008, srcFramebuffers[ i ] );
                				gl.blitFramebuffer( 0, 0, viewWidth, viewHeight, x1, y1, x2, y2, 16384, 9728 );
                			}
                		} else {
                			gl.bindFramebuffer( 36008, srcFramebuffers[ 0 ] );
                			gl.blitFramebuffer( 0, 0, viewWidth, viewHeight, 0, 0, renderSize.x, renderSize.y, 16384, 9728 );
                		}
                	}
                	this.isAvailable = isAvailable;
                	this.attachCamera = attachCamera;
                	this.detachCamera = detachCamera;
                	this.updateCameraProjectionMatricesUniform = updateCameraProjectionMatricesUniform;
                	this.updateCameraViewMatricesUniform = updateCameraViewMatricesUniform;
                	this.updateObjectMatricesUniforms = updateObjectMatricesUniforms;
                }
                function Group() {
                	Object3D.call( this );
                	this.type = 'Group';
                }
                Group.prototype = Object.assign( Object.create( Object3D.prototype ), {
                	constructor: Group,
                	isGroup: true
                } );
                function ArrayCamera( array ) {
                	PerspectiveCamera.call( this );
                	this.cameras = array || [];
                }
                ArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {
                	constructor: ArrayCamera,
                	isArrayCamera: true
                } );
                var cameraLPos = new Vector3();
                var cameraRPos = new Vector3();
                function setProjectionFromUnion( camera, cameraL, cameraR ) {
                	cameraLPos.setFromMatrixPosition( cameraL.matrixWorld );
                	cameraRPos.setFromMatrixPosition( cameraR.matrixWorld );
                	var ipd = cameraLPos.distanceTo( cameraRPos );
                	var projL = cameraL.projectionMatrix.elements;
                	var projR = cameraR.projectionMatrix.elements;
                	var near = projL[ 14 ] / ( projL[ 10 ] - 1 );
                	var far = projL[ 14 ] / ( projL[ 10 ] + 1 );
                	var topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];
                	var bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];
                	var leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];
                	var rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];
                	var left = near * leftFov;
                	var right = near * rightFov;
                	var zOffset = ipd / ( - leftFov + rightFov );
                	var xOffset = zOffset * - leftFov;
                	cameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );
                	camera.translateX( xOffset );
                	camera.translateZ( zOffset );
                	camera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );
                	camera.matrixWorldInverse.getInverse( camera.matrixWorld );
                	var near2 = near + zOffset;
                	var far2 = far + zOffset;
                	var left2 = left - xOffset;
                	var right2 = right + ( ipd - xOffset );
                	var top2 = topFov * far / far2 * near2;
                	var bottom2 = bottomFov * far / far2 * near2;
                	camera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );
                }
                function WebVRManager( renderer ) {
                	var renderWidth, renderHeight;
                	var scope = this;
                	var device = null;
                	var frameData = null;
                	var controllers = [];
                	var standingMatrix = new Matrix4();
                	var standingMatrixInverse = new Matrix4();
                	var framebufferScaleFactor = 1.0;
                	var referenceSpaceType = 'local-floor';
                	if ( typeof window !== 'undefined' && 'VRFrameData' in window ) {
                		frameData = new window.VRFrameData();
                		window.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );
                	}
                	var matrixWorldInverse = new Matrix4();
                	var tempQuaternion = new Quaternion();
                	var tempPosition = new Vector3();
                	var tempCamera = new PerspectiveCamera();
                	var cameraL = new PerspectiveCamera();
                	cameraL.viewport = new Vector4();
                	cameraL.layers.enable( 1 );
                	var cameraR = new PerspectiveCamera();
                	cameraR.viewport = new Vector4();
                	cameraR.layers.enable( 2 );
                	var cameraVR = new ArrayCamera( [ cameraL, cameraR ] );
                	cameraVR.layers.enable( 1 );
                	cameraVR.layers.enable( 2 );
                	function isPresenting() {
                		return device !== null && device.isPresenting === true;
                	}
                	var currentSize = new Vector2(), currentPixelRatio;
                	function onVRDisplayPresentChange() {
                		if ( isPresenting() ) {
                			var eyeParameters = device.getEyeParameters( 'left' );
                			renderWidth = 2 * eyeParameters.renderWidth * framebufferScaleFactor;
                			renderHeight = eyeParameters.renderHeight * framebufferScaleFactor;
                			currentPixelRatio = renderer.getPixelRatio();
                			renderer.getSize( currentSize );
                			renderer.setDrawingBufferSize( renderWidth, renderHeight, 1 );
                			cameraL.viewport.set( 0, 0, renderWidth / 2, renderHeight );
                			cameraR.viewport.set( renderWidth / 2, 0, renderWidth / 2, renderHeight );
                			animation.start();
                			scope.dispatchEvent( { type: 'sessionstart' } );
                		} else {
                			if ( scope.enabled ) {
                				renderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );
                			}
                			animation.stop();
                			scope.dispatchEvent( { type: 'sessionend' } );
                		}
                	}
                	var triggers = [];
                	var grips = [];
                	function findGamepad( id ) {
                		var gamepads = navigator.getGamepads && navigator.getGamepads();
                		for ( var i = 0, l = gamepads.length; i < l; i ++ ) {
                			var gamepad = gamepads[ i ];
                			if ( gamepad && ( gamepad.id === 'Daydream Controller' ||
                				gamepad.id === 'Gear VR Controller' || gamepad.id === 'Oculus Go Controller' ||
                				gamepad.id === 'OpenVR Gamepad' || gamepad.id.startsWith( 'Oculus Touch' ) ||
                				gamepad.id.startsWith( 'HTC Vive Focus' ) ||
                				gamepad.id.startsWith( 'Spatial Controller' ) ) ) {
                				var hand = gamepad.hand;
                				if ( id === 0 && ( hand === '' || hand === 'right' ) ) return gamepad;
                				if ( id === 1 && ( hand === 'left' ) ) return gamepad;
                			}
                		}
                	}
                	function updateControllers() {
                		for ( var i = 0; i < controllers.length; i ++ ) {
                			var controller = controllers[ i ];
                			var gamepad = findGamepad( i );
                			if ( gamepad !== undefined && gamepad.pose !== undefined ) {
                				if ( gamepad.pose === null ) return;
                				var pose = gamepad.pose;
                				if ( pose.hasPosition === false ) controller.position.set( 0.2, - 0.6, - 0.05 );
                				if ( pose.position !== null ) controller.position.fromArray( pose.position );
                				if ( pose.orientation !== null ) controller.quaternion.fromArray( pose.orientation );
                				controller.matrix.compose( controller.position, controller.quaternion, controller.scale );
                				controller.matrix.premultiply( standingMatrix );
                				controller.matrix.decompose( controller.position, controller.quaternion, controller.scale );
                				controller.matrixWorldNeedsUpdate = true;
                				controller.visible = true;
                				var buttonId = gamepad.id === 'Daydream Controller' ? 0 : 1;
                				if ( triggers[ i ] === undefined ) triggers[ i ] = false;
                				if ( triggers[ i ] !== gamepad.buttons[ buttonId ].pressed ) {
                					triggers[ i ] = gamepad.buttons[ buttonId ].pressed;
                					if ( triggers[ i ] === true ) {
                						controller.dispatchEvent( { type: 'selectstart' } );
                					} else {
                						controller.dispatchEvent( { type: 'selectend' } );
                						controller.dispatchEvent( { type: 'select' } );
                					}
                				}
                				buttonId = 2;
                				if ( grips[ i ] === undefined ) grips[ i ] = false;
                				if ( gamepad.buttons[ buttonId ] !== undefined ) {
                					if ( grips[ i ] !== gamepad.buttons[ buttonId ].pressed ) {
                						grips[ i ] = gamepad.buttons[ buttonId ].pressed;
                						if ( grips[ i ] === true ) {
                							controller.dispatchEvent( { type: 'squeezestart' } );
                						} else {
                							controller.dispatchEvent( { type: 'squeezeend' } );
                							controller.dispatchEvent( { type: 'squeeze' } );
                						}
                					}
                				}
                			} else {
                				controller.visible = false;
                			}
                		}
                	}
                	function updateViewportFromBounds( viewport, bounds ) {
                		if ( bounds !== null && bounds.length === 4 ) {
                			viewport.set( bounds[ 0 ] * renderWidth, bounds[ 1 ] * renderHeight, bounds[ 2 ] * renderWidth, bounds[ 3 ] * renderHeight );
                		}
                	}
                	this.enabled = false;
                	this.getController = function ( id ) {
                		var controller = controllers[ id ];
                		if ( controller === undefined ) {
                			controller = new Group();
                			controller.matrixAutoUpdate = false;
                			controller.visible = false;
                			controllers[ id ] = controller;
                		}
                		return controller;
                	};
                	this.getDevice = function () {
                		return device;
                	};
                	this.setDevice = function ( value ) {
                		if ( value !== undefined ) device = value;
                		animation.setContext( value );
                	};
                	this.setFramebufferScaleFactor = function ( value ) {
                		framebufferScaleFactor = value;
                	};
                	this.setReferenceSpaceType = function ( value ) {
                		referenceSpaceType = value;
                	};
                	this.getCamera = function ( camera ) {
                		var userHeight = referenceSpaceType === 'local-floor' ? 1.6 : 0;
                		device.depthNear = camera.near;
                		device.depthFar = camera.far;
                		device.getFrameData( frameData );
                		if ( referenceSpaceType === 'local-floor' ) {
                			var stageParameters = device.stageParameters;
                			if ( stageParameters ) {
                				standingMatrix.fromArray( stageParameters.sittingToStandingTransform );
                			} else {
                				standingMatrix.makeTranslation( 0, userHeight, 0 );
                			}
                		}
                		var pose = frameData.pose;
                		tempCamera.matrix.copy( standingMatrix );
                		tempCamera.matrix.decompose( tempCamera.position, tempCamera.quaternion, tempCamera.scale );
                		if ( pose.orientation !== null ) {
                			tempQuaternion.fromArray( pose.orientation );
                			tempCamera.quaternion.multiply( tempQuaternion );
                		}
                		if ( pose.position !== null ) {
                			tempQuaternion.setFromRotationMatrix( standingMatrix );
                			tempPosition.fromArray( pose.position );
                			tempPosition.applyQuaternion( tempQuaternion );
                			tempCamera.position.add( tempPosition );
                		}
                		tempCamera.updateMatrixWorld();
                		camera.matrixWorld.copy( tempCamera.matrixWorld );
                		var children = camera.children;
                		for ( var i = 0, l = children.length; i < l; i ++ ) {
                			children[ i ].updateMatrixWorld( true );
                		}
                		cameraL.near = camera.near;
                		cameraR.near = camera.near;
                		cameraL.far = camera.far;
                		cameraR.far = camera.far;
                		cameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );
                		cameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );
                		standingMatrixInverse.getInverse( standingMatrix );
                		if ( referenceSpaceType === 'local-floor' ) {
                			cameraL.matrixWorldInverse.multiply( standingMatrixInverse );
                			cameraR.matrixWorldInverse.multiply( standingMatrixInverse );
                		}
                		var parent = camera.parent;
                		if ( parent !== null ) {
                			matrixWorldInverse.getInverse( parent.matrixWorld );
                			cameraL.matrixWorldInverse.multiply( matrixWorldInverse );
                			cameraR.matrixWorldInverse.multiply( matrixWorldInverse );
                		}
                		cameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );
                		cameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );
                		cameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );
                		cameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );
                		setProjectionFromUnion( cameraVR, cameraL, cameraR );
                		var layers = device.getLayers();
                		if ( layers.length ) {
                			var layer = layers[ 0 ];
                			updateViewportFromBounds( cameraL.viewport, layer.leftBounds );
                			updateViewportFromBounds( cameraR.viewport, layer.rightBounds );
                		}
                		updateControllers();
                		return cameraVR;
                	};
                	this.getStandingMatrix = function () {
                		return standingMatrix;
                	};
                	this.isPresenting = isPresenting;
                	var animation = new WebGLAnimation();
                	this.setAnimationLoop = function ( callback ) {
                		animation.setAnimationLoop( callback );
                		if ( isPresenting() ) animation.start();
                	};
                	this.submitFrame = function () {
                		if ( isPresenting() ) device.submitFrame();
                	};
                	this.dispose = function () {
                		if ( typeof window !== 'undefined' ) {
                			window.removeEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange );
                		}
                	};
                	this.setFrameOfReferenceType = function () {
                		console.warn( 'THREE.WebVRManager: setFrameOfReferenceType() has been deprecated.' );
                	};
                }
                Object.assign( WebVRManager.prototype, EventDispatcher.prototype );
                function WebXRManager( renderer, gl ) {
                	var scope = this;
                	var session = null;
                	var referenceSpace = null;
                	var referenceSpaceType = 'local-floor';
                	var pose = null;
                	var controllers = [];
                	var sortedInputSources = [];
                	function isPresenting() {
                		return session !== null && referenceSpace !== null;
                	}
                	var cameraL = new PerspectiveCamera();
                	cameraL.layers.enable( 1 );
                	cameraL.viewport = new Vector4();
                	var cameraR = new PerspectiveCamera();
                	cameraR.layers.enable( 2 );
                	cameraR.viewport = new Vector4();
                	var cameraVR = new ArrayCamera( [ cameraL, cameraR ] );
                	cameraVR.layers.enable( 1 );
                	cameraVR.layers.enable( 2 );
                	this.enabled = false;
                	this.getController = function ( id ) {
                		var controller = controllers[ id ];
                		if ( controller === undefined ) {
                			controller = new Group();
                			controller.matrixAutoUpdate = false;
                			controller.visible = false;
                			controllers[ id ] = controller;
                		}
                		return controller;
                	};
                	function onSessionEvent( event ) {
                		for ( var i = 0; i < controllers.length; i ++ ) {
                			if ( sortedInputSources[ i ] === event.inputSource ) {
                				controllers[ i ].dispatchEvent( { type: event.type } );
                			}
                		}
                	}
                	function onSessionEnd() {
                		renderer.setFramebuffer( null );
                		renderer.setRenderTarget( renderer.getRenderTarget() );
                		animation.stop();
                		scope.dispatchEvent( { type: 'sessionend' } );
                	}
                	function onRequestReferenceSpace( value ) {
                		referenceSpace = value;
                		animation.setContext( session );
                		animation.start();
                		scope.dispatchEvent( { type: 'sessionstart' } );
                	}
                	this.setFramebufferScaleFactor = function (             ) {
                	};
                	this.setReferenceSpaceType = function ( value ) {
                		referenceSpaceType = value;
                	};
                	this.getSession = function () {
                		return session;
                	};
                	this.setSession = function ( value ) {
                		session = value;
                		if ( session !== null ) {
                			session.addEventListener( 'select', onSessionEvent );
                			session.addEventListener( 'selectstart', onSessionEvent );
                			session.addEventListener( 'selectend', onSessionEvent );
                			session.addEventListener( 'squeeze', onSessionEvent );
                			session.addEventListener( 'squeezestart', onSessionEvent );
                			session.addEventListener( 'squeezeend', onSessionEvent );
                			session.addEventListener( 'end', onSessionEnd );
                			session.updateRenderState( { baseLayer: new XRWebGLLayer( session, gl ) } );
                			session.requestReferenceSpace( referenceSpaceType ).then( onRequestReferenceSpace );
                			session.addEventListener( 'inputsourceschange', updateInputSources );
                			updateInputSources();
                		}
                	};
                	function updateInputSources() {
                		for ( var i = 0; i < controllers.length; i ++ ) {
                			sortedInputSources[ i ] = findInputSource( i );
                		}
                	}
                	function findInputSource( id ) {
                		var inputSources = session.inputSources;
                		for ( var i = 0; i < inputSources.length; i ++ ) {
                			var inputSource = inputSources[ i ];
                			var handedness = inputSource.handedness;
                			if ( id === 0 && ( handedness === 'none' || handedness === 'right' ) ) return inputSource;
                			if ( id === 1 && ( handedness === 'left' ) ) return inputSource;
                		}
                	}
                	function updateCamera( camera, parent ) {
                		if ( parent === null ) {
                			camera.matrixWorld.copy( camera.matrix );
                		} else {
                			camera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );
                		}
                		camera.matrixWorldInverse.getInverse( camera.matrixWorld );
                	}
                	this.getCamera = function ( camera ) {
                		var parent = camera.parent;
                		var cameras = cameraVR.cameras;
                		updateCamera( cameraVR, parent );
                		for ( var i = 0; i < cameras.length; i ++ ) {
                			updateCamera( cameras[ i ], parent );
                		}
                		camera.matrixWorld.copy( cameraVR.matrixWorld );
                		var children = camera.children;
                		for ( var i = 0, l = children.length; i < l; i ++ ) {
                			children[ i ].updateMatrixWorld( true );
                		}
                		setProjectionFromUnion( cameraVR, cameraL, cameraR );
                		return cameraVR;
                	};
                	this.isPresenting = isPresenting;
                	var onAnimationFrameCallback = null;
                	function onAnimationFrame( time, frame ) {
                		pose = frame.getViewerPose( referenceSpace );
                		if ( pose !== null ) {
                			var views = pose.views;
                			var baseLayer = session.renderState.baseLayer;
                			renderer.setFramebuffer( baseLayer.framebuffer );
                			for ( var i = 0; i < views.length; i ++ ) {
                				var view = views[ i ];
                				var viewport = baseLayer.getViewport( view );
                				var viewMatrix = view.transform.inverse.matrix;
                				var camera = cameraVR.cameras[ i ];
                				camera.matrix.fromArray( viewMatrix ).getInverse( camera.matrix );
                				camera.projectionMatrix.fromArray( view.projectionMatrix );
                				camera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );
                				if ( i === 0 ) {
                					cameraVR.matrix.copy( camera.matrix );
                				}
                			}
                		}
                		for ( var i = 0; i < controllers.length; i ++ ) {
                			var controller = controllers[ i ];
                			var inputSource = sortedInputSources[ i ];
                			if ( inputSource ) {
                				var inputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );
                				if ( inputPose !== null ) {
                					controller.matrix.fromArray( inputPose.transform.matrix );
                					controller.matrix.decompose( controller.position, controller.rotation, controller.scale );
                					controller.visible = true;
                					continue;
                				}
                			}
                			controller.visible = false;
                		}
                		if ( onAnimationFrameCallback ) onAnimationFrameCallback( time );
                	}
                	var animation = new WebGLAnimation();
                	animation.setAnimationLoop( onAnimationFrame );
                	this.setAnimationLoop = function ( callback ) {
                		onAnimationFrameCallback = callback;
                	};
                	this.dispose = function () {};
                	this.getStandingMatrix = function () {
                		console.warn( 'THREE.WebXRManager: getStandingMatrix() is no longer needed.' );
                		return new Matrix4();
                	};
                	this.getDevice = function () {
                		console.warn( 'THREE.WebXRManager: getDevice() has been deprecated.' );
                	};
                	this.setDevice = function () {
                		console.warn( 'THREE.WebXRManager: setDevice() has been deprecated.' );
                	};
                	this.setFrameOfReferenceType = function () {
                		console.warn( 'THREE.WebXRManager: setFrameOfReferenceType() has been deprecated.' );
                	};
                	this.submitFrame = function () {};
                }
                Object.assign( WebXRManager.prototype, EventDispatcher.prototype );
                function WebGLRenderer( parameters ) {
                	parameters = parameters || {};
                	var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),
                		_context = parameters.context !== undefined ? parameters.context : null,
                		_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
                		_depth = parameters.depth !== undefined ? parameters.depth : true,
                		_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
                		_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
                		_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
                		_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
                		_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',
                		_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;
                	var currentRenderList = null;
                	var currentRenderState = null;
                	this.domElement = _canvas;
                	this.debug = {
                		checkShaderErrors: true
                	};
                	this.autoClear = true;
                	this.autoClearColor = true;
                	this.autoClearDepth = true;
                	this.autoClearStencil = true;
                	this.sortObjects = true;
                	this.clippingPlanes = [];
                	this.localClippingEnabled = false;
                	this.gammaFactor = 2.0;
                	this.gammaInput = false;
                	this.gammaOutput = false;
                	this.physicallyCorrectLights = false;
                	this.toneMapping = LinearToneMapping;
                	this.toneMappingExposure = 1.0;
                	this.toneMappingWhitePoint = 1.0;
                	this.maxMorphTargets = 8;
                	this.maxMorphNormals = 4;
                	var _this = this,
                		_isContextLost = false,
                		_framebuffer = null,
                		_currentActiveCubeFace = 0,
                		_currentActiveMipmapLevel = 0,
                		_currentRenderTarget = null,
                		_currentFramebuffer = null,
                		_currentMaterialId = - 1,
                		_currentGeometryProgram = {
                			geometry: null,
                			program: null,
                			wireframe: false
                		},
                		_currentCamera = null,
                		_currentArrayCamera = null,
                		_currentViewport = new Vector4(),
                		_currentScissor = new Vector4(),
                		_currentScissorTest = null,
                		_width = _canvas.width,
                		_height = _canvas.height,
                		_pixelRatio = 1,
                		_viewport = new Vector4( 0, 0, _width, _height ),
                		_scissor = new Vector4( 0, 0, _width, _height ),
                		_scissorTest = false,
                		_frustum = new Frustum(),
                		_clipping = new WebGLClipping(),
                		_clippingEnabled = false,
                		_localClippingEnabled = false,
                		_projScreenMatrix = new Matrix4(),
                		_vector3 = new Vector3();
                	function getTargetPixelRatio() {
                		return _currentRenderTarget === null ? _pixelRatio : 1;
                	}
                	var _gl;
                	try {
                		var contextAttributes = {
                			alpha: _alpha,
                			depth: _depth,
                			stencil: _stencil,
                			antialias: _antialias,
                			premultipliedAlpha: _premultipliedAlpha,
                			preserveDrawingBuffer: _preserveDrawingBuffer,
                			powerPreference: _powerPreference,
                			failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat,
                			xrCompatible: true
                		};
                		_canvas.addEventListener( 'webglcontextlost', onContextLost, false );
                		_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );
                		_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );
                		if ( _gl === null ) {
                			if ( _canvas.getContext( 'webgl' ) !== null ) {
                				throw new Error( 'Error creating WebGL context with your selected attributes.' );
                			} else {
                				throw new Error( 'Error creating WebGL context.' );
                			}
                		}
                		if ( _gl.getShaderPrecisionFormat === undefined ) {
                			_gl.getShaderPrecisionFormat = function () {
                				return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };
                			};
                		}
                	} catch ( error ) {
                		console.error( 'THREE.WebGLRenderer: ' + error.message );
                		throw error;
                	}
                	var extensions, capabilities, state, info;
                	var properties, textures, attributes, geometries, objects;
                	var programCache, renderLists, renderStates;
                	var background, morphtargets, bufferRenderer, indexedBufferRenderer;
                	var utils;
                	function initGLContext() {
                		extensions = new WebGLExtensions( _gl );
                		capabilities = new WebGLCapabilities( _gl, extensions, parameters );
                		if ( capabilities.isWebGL2 === false ) {
                			extensions.get( 'WEBGL_depth_texture' );
                			extensions.get( 'OES_texture_float' );
                			extensions.get( 'OES_texture_half_float' );
                			extensions.get( 'OES_texture_half_float_linear' );
                			extensions.get( 'OES_standard_derivatives' );
                			extensions.get( 'OES_element_index_uint' );
                			extensions.get( 'ANGLE_instanced_arrays' );
                		}
                		extensions.get( 'OES_texture_float_linear' );
                		utils = new WebGLUtils( _gl, extensions, capabilities );
                		state = new WebGLState( _gl, extensions, capabilities );
                		state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );
                		state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );
                		info = new WebGLInfo( _gl );
                		properties = new WebGLProperties();
                		textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );
                		attributes = new WebGLAttributes( _gl );
                		geometries = new WebGLGeometries( _gl, attributes, info );
                		objects = new WebGLObjects( _gl, geometries, attributes, info );
                		morphtargets = new WebGLMorphtargets( _gl );
                		programCache = new WebGLPrograms( _this, extensions, capabilities );
                		renderLists = new WebGLRenderLists();
                		renderStates = new WebGLRenderStates();
                		background = new WebGLBackground( _this, state, objects, _premultipliedAlpha );
                		bufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );
                		indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );
                		info.programs = programCache.programs;
                		_this.capabilities = capabilities;
                		_this.extensions = extensions;
                		_this.properties = properties;
                		_this.renderLists = renderLists;
                		_this.state = state;
                		_this.info = info;
                	}
                	initGLContext();
                	var vr = ( typeof navigator !== 'undefined' && 'xr' in navigator ) ? new WebXRManager( _this, _gl ) : new WebVRManager( _this );
                	this.vr = vr;
                	var multiview = new WebGLMultiview( _this, _gl );
                	var shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );
                	this.shadowMap = shadowMap;
                	this.getContext = function () {
                		return _gl;
                	};
                	this.getContextAttributes = function () {
                		return _gl.getContextAttributes();
                	};
                	this.forceContextLoss = function () {
                		var extension = extensions.get( 'WEBGL_lose_context' );
                		if ( extension ) extension.loseContext();
                	};
                	this.forceContextRestore = function () {
                		var extension = extensions.get( 'WEBGL_lose_context' );
                		if ( extension ) extension.restoreContext();
                	};
                	this.getPixelRatio = function () {
                		return _pixelRatio;
                	};
                	this.setPixelRatio = function ( value ) {
                		if ( value === undefined ) return;
                		_pixelRatio = value;
                		this.setSize( _width, _height, false );
                	};
                	this.getSize = function ( target ) {
                		if ( target === undefined ) {
                			console.warn( 'WebGLRenderer: .getsize() now requires a Vector2 as an argument' );
                			target = new Vector2();
                		}
                		return target.set( _width, _height );
                	};
                	this.setSize = function ( width, height, updateStyle ) {
                		if ( vr.isPresenting() ) {
                			console.warn( 'THREE.WebGLRenderer: Can\'t change size while VR device is presenting.' );
                			return;
                		}
                		_width = width;
                		_height = height;
                		_canvas.width = Math.floor( width * _pixelRatio );
                		_canvas.height = Math.floor( height * _pixelRatio );
                		if ( updateStyle !== false ) {
                			_canvas.style.width = width + 'px';
                			_canvas.style.height = height + 'px';
                		}
                		this.setViewport( 0, 0, width, height );
                	};
                	this.getDrawingBufferSize = function ( target ) {
                		if ( target === undefined ) {
                			console.warn( 'WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument' );
                			target = new Vector2();
                		}
                		return target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();
                	};
                	this.setDrawingBufferSize = function ( width, height, pixelRatio ) {
                		_width = width;
                		_height = height;
                		_pixelRatio = pixelRatio;
                		_canvas.width = Math.floor( width * pixelRatio );
                		_canvas.height = Math.floor( height * pixelRatio );
                		this.setViewport( 0, 0, width, height );
                	};
                	this.getCurrentViewport = function ( target ) {
                		if ( target === undefined ) {
                			console.warn( 'WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument' );
                			target = new Vector4();
                		}
                		return target.copy( _currentViewport );
                	};
                	this.getViewport = function ( target ) {
                		return target.copy( _viewport );
                	};
                	this.setViewport = function ( x, y, width, height ) {
                		if ( x.isVector4 ) {
                			_viewport.set( x.x, x.y, x.z, x.w );
                		} else {
                			_viewport.set( x, y, width, height );
                		}
                		state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );
                	};
                	this.getScissor = function ( target ) {
                		return target.copy( _scissor );
                	};
                	this.setScissor = function ( x, y, width, height ) {
                		if ( x.isVector4 ) {
                			_scissor.set( x.x, x.y, x.z, x.w );
                		} else {
                			_scissor.set( x, y, width, height );
                		}
                		state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );
                	};
                	this.getScissorTest = function () {
                		return _scissorTest;
                	};
                	this.setScissorTest = function ( boolean ) {
                		state.setScissorTest( _scissorTest = boolean );
                	};
                	this.getClearColor = function () {
                		return background.getClearColor();
                	};
                	this.setClearColor = function () {
                		background.setClearColor.apply( background, arguments );
                	};
                	this.getClearAlpha = function () {
                		return background.getClearAlpha();
                	};
                	this.setClearAlpha = function () {
                		background.setClearAlpha.apply( background, arguments );
                	};
                	this.clear = function ( color, depth, stencil ) {
                		var bits = 0;
                		if ( color === undefined || color ) bits |= 16384;
                		if ( depth === undefined || depth ) bits |= 256;
                		if ( stencil === undefined || stencil ) bits |= 1024;
                		_gl.clear( bits );
                	};
                	this.clearColor = function () {
                		this.clear( true, false, false );
                	};
                	this.clearDepth = function () {
                		this.clear( false, true, false );
                	};
                	this.clearStencil = function () {
                		this.clear( false, false, true );
                	};
                	this.dispose = function () {
                		_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );
                		_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );
                		renderLists.dispose();
                		renderStates.dispose();
                		properties.dispose();
                		objects.dispose();
                		vr.dispose();
                		animation.stop();
                	};
                	function onContextLost( event ) {
                		event.preventDefault();
                		console.log( 'THREE.WebGLRenderer: Context Lost.' );
                		_isContextLost = true;
                	}
                	function onContextRestore(             ) {
                		console.log( 'THREE.WebGLRenderer: Context Restored.' );
                		_isContextLost = false;
                		initGLContext();
                	}
                	function onMaterialDispose( event ) {
                		var material = event.target;
                		material.removeEventListener( 'dispose', onMaterialDispose );
                		deallocateMaterial( material );
                	}
                	function deallocateMaterial( material ) {
                		releaseMaterialProgramReference( material );
                		properties.remove( material );
                	}
                	function releaseMaterialProgramReference( material ) {
                		var programInfo = properties.get( material ).program;
                		material.program = undefined;
                		if ( programInfo !== undefined ) {
                			programCache.releaseProgram( programInfo );
                		}
                	}
                	function renderObjectImmediate( object, program ) {
                		object.render( function ( object ) {
                			_this.renderBufferImmediate( object, program );
                		} );
                	}
                	this.renderBufferImmediate = function ( object, program ) {
                		state.initAttributes();
                		var buffers = properties.get( object );
                		if ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();
                		if ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();
                		if ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();
                		if ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();
                		var programAttributes = program.getAttributes();
                		if ( object.hasPositions ) {
                			_gl.bindBuffer( 34962, buffers.position );
                			_gl.bufferData( 34962, object.positionArray, 35048 );
                			state.enableAttribute( programAttributes.position );
                			_gl.vertexAttribPointer( programAttributes.position, 3, 5126, false, 0, 0 );
                		}
                		if ( object.hasNormals ) {
                			_gl.bindBuffer( 34962, buffers.normal );
                			_gl.bufferData( 34962, object.normalArray, 35048 );
                			state.enableAttribute( programAttributes.normal );
                			_gl.vertexAttribPointer( programAttributes.normal, 3, 5126, false, 0, 0 );
                		}
                		if ( object.hasUvs ) {
                			_gl.bindBuffer( 34962, buffers.uv );
                			_gl.bufferData( 34962, object.uvArray, 35048 );
                			state.enableAttribute( programAttributes.uv );
                			_gl.vertexAttribPointer( programAttributes.uv, 2, 5126, false, 0, 0 );
                		}
                		if ( object.hasColors ) {
                			_gl.bindBuffer( 34962, buffers.color );
                			_gl.bufferData( 34962, object.colorArray, 35048 );
                			state.enableAttribute( programAttributes.color );
                			_gl.vertexAttribPointer( programAttributes.color, 3, 5126, false, 0, 0 );
                		}
                		state.disableUnusedAttributes();
                		_gl.drawArrays( 4, 0, object.count );
                		object.count = 0;
                	};
                	this.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {
                		var frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );
                		state.setMaterial( material, frontFaceCW );
                		var program = setProgram( camera, fog, material, object );
                		var updateBuffers = false;
                		if ( _currentGeometryProgram.geometry !== geometry.id ||
                			_currentGeometryProgram.program !== program.id ||
                			_currentGeometryProgram.wireframe !== ( material.wireframe === true ) ) {
                			_currentGeometryProgram.geometry = geometry.id;
                			_currentGeometryProgram.program = program.id;
                			_currentGeometryProgram.wireframe = material.wireframe === true;
                			updateBuffers = true;
                		}
                		if ( object.morphTargetInfluences ) {
                			morphtargets.update( object, geometry, material, program );
                			updateBuffers = true;
                		}
                		var index = geometry.index;
                		var position = geometry.attributes.position;
                		if ( index !== null && index.count === 0 ) return;
                		if ( position === undefined || position.count === 0 ) return;
                		var rangeFactor = 1;
                		if ( material.wireframe === true ) {
                			index = geometries.getWireframeAttribute( geometry );
                			rangeFactor = 2;
                		}
                		var attribute;
                		var renderer = bufferRenderer;
                		if ( index !== null ) {
                			attribute = attributes.get( index );
                			renderer = indexedBufferRenderer;
                			renderer.setIndex( attribute );
                		}
                		if ( updateBuffers ) {
                			setupVertexAttributes( object, geometry, material, program );
                			if ( index !== null ) {
                				_gl.bindBuffer( 34963, attribute.buffer );
                			}
                		}
                		var dataCount = Infinity;
                		if ( index !== null ) {
                			dataCount = index.count;
                		} else if ( position !== undefined ) {
                			dataCount = position.count;
                		}
                		var rangeStart = geometry.drawRange.start * rangeFactor;
                		var rangeCount = geometry.drawRange.count * rangeFactor;
                		var groupStart = group !== null ? group.start * rangeFactor : 0;
                		var groupCount = group !== null ? group.count * rangeFactor : Infinity;
                		var drawStart = Math.max( rangeStart, groupStart );
                		var drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;
                		var drawCount = Math.max( 0, drawEnd - drawStart + 1 );
                		if ( drawCount === 0 ) return;
                		if ( object.isMesh ) {
                			if ( material.wireframe === true ) {
                				state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
                				renderer.setMode( 1 );
                			} else {
                				switch ( object.drawMode ) {
                					case TrianglesDrawMode:
                						renderer.setMode( 4 );
                						break;
                					case TriangleStripDrawMode:
                						renderer.setMode( 5 );
                						break;
                					case TriangleFanDrawMode:
                						renderer.setMode( 6 );
                						break;
                				}
                			}
                		} else if ( object.isLine ) {
                			var lineWidth = material.linewidth;
                			if ( lineWidth === undefined ) lineWidth = 1;
                			state.setLineWidth( lineWidth * getTargetPixelRatio() );
                			if ( object.isLineSegments ) {
                				renderer.setMode( 1 );
                			} else if ( object.isLineLoop ) {
                				renderer.setMode( 2 );
                			} else {
                				renderer.setMode( 3 );
                			}
                		} else if ( object.isPoints ) {
                			renderer.setMode( 0 );
                		} else if ( object.isSprite ) {
                			renderer.setMode( 4 );
                		}
                		if ( object.isInstancedMesh ) {
                			renderer.renderInstances( geometry, drawStart, drawCount, object.count );
                		} else if ( geometry.isInstancedBufferGeometry ) {
                			renderer.renderInstances( geometry, drawStart, drawCount, geometry.maxInstancedCount );
                		} else {
                			renderer.render( drawStart, drawCount );
                		}
                	};
                	function setupVertexAttributes( object, geometry, material, program ) {
                		if ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {
                			if ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) return;
                		}
                		state.initAttributes();
                		var geometryAttributes = geometry.attributes;
                		var programAttributes = program.getAttributes();
                		var materialDefaultAttributeValues = material.defaultAttributeValues;
                		for ( var name in programAttributes ) {
                			var programAttribute = programAttributes[ name ];
                			if ( programAttribute >= 0 ) {
                				var geometryAttribute = geometryAttributes[ name ];
                				if ( geometryAttribute !== undefined ) {
                					var normalized = geometryAttribute.normalized;
                					var size = geometryAttribute.itemSize;
                					var attribute = attributes.get( geometryAttribute );
                					if ( attribute === undefined ) continue;
                					var buffer = attribute.buffer;
                					var type = attribute.type;
                					var bytesPerElement = attribute.bytesPerElement;
                					if ( geometryAttribute.isInterleavedBufferAttribute ) {
                						var data = geometryAttribute.data;
                						var stride = data.stride;
                						var offset = geometryAttribute.offset;
                						if ( data && data.isInstancedInterleavedBuffer ) {
                							state.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );
                							if ( geometry.maxInstancedCount === undefined ) {
                								geometry.maxInstancedCount = data.meshPerAttribute * data.count;
                							}
                						} else {
                							state.enableAttribute( programAttribute );
                						}
                						_gl.bindBuffer( 34962, buffer );
                						_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );
                					} else {
                						if ( geometryAttribute.isInstancedBufferAttribute ) {
                							state.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );
                							if ( geometry.maxInstancedCount === undefined ) {
                								geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
                							}
                						} else {
                							state.enableAttribute( programAttribute );
                						}
                						_gl.bindBuffer( 34962, buffer );
                						_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );
                					}
                				} else if ( name === 'instanceMatrix' ) {
                					var attribute = attributes.get( object.instanceMatrix );
                					if ( attribute === undefined ) continue;
                					var buffer = attribute.buffer;
                					var type = attribute.type;
                					state.enableAttributeAndDivisor( programAttribute + 0, 1 );
                					state.enableAttributeAndDivisor( programAttribute + 1, 1 );
                					state.enableAttributeAndDivisor( programAttribute + 2, 1 );
                					state.enableAttributeAndDivisor( programAttribute + 3, 1 );
                					_gl.bindBuffer( 34962, buffer );
                					_gl.vertexAttribPointer( programAttribute + 0, 4, type, false, 64, 0 );
                					_gl.vertexAttribPointer( programAttribute + 1, 4, type, false, 64, 16 );
                					_gl.vertexAttribPointer( programAttribute + 2, 4, type, false, 64, 32 );
                					_gl.vertexAttribPointer( programAttribute + 3, 4, type, false, 64, 48 );
                				} else if ( materialDefaultAttributeValues !== undefined ) {
                					var value = materialDefaultAttributeValues[ name ];
                					if ( value !== undefined ) {
                						switch ( value.length ) {
                							case 2:
                								_gl.vertexAttrib2fv( programAttribute, value );
                								break;
                							case 3:
                								_gl.vertexAttrib3fv( programAttribute, value );
                								break;
                							case 4:
                								_gl.vertexAttrib4fv( programAttribute, value );
                								break;
                							default:
                								_gl.vertexAttrib1fv( programAttribute, value );
                						}
                					}
                				}
                			}
                		}
                		state.disableUnusedAttributes();
                	}
                	this.compile = function ( scene, camera ) {
                		currentRenderState = renderStates.get( scene, camera );
                		currentRenderState.init();
                		scene.traverse( function ( object ) {
                			if ( object.isLight ) {
                				currentRenderState.pushLight( object );
                				if ( object.castShadow ) {
                					currentRenderState.pushShadow( object );
                				}
                			}
                		} );
                		currentRenderState.setupLights( camera );
                		scene.traverse( function ( object ) {
                			if ( object.material ) {
                				if ( Array.isArray( object.material ) ) {
                					for ( var i = 0; i < object.material.length; i ++ ) {
                						initMaterial( object.material[ i ], scene.fog, object );
                					}
                				} else {
                					initMaterial( object.material, scene.fog, object );
                				}
                			}
                		} );
                	};
                	var onAnimationFrameCallback = null;
                	function onAnimationFrame( time ) {
                		if ( vr.isPresenting() ) return;
                		if ( onAnimationFrameCallback ) onAnimationFrameCallback( time );
                	}
                	var animation = new WebGLAnimation();
                	animation.setAnimationLoop( onAnimationFrame );
                	if ( typeof window !== 'undefined' ) animation.setContext( window );
                	this.setAnimationLoop = function ( callback ) {
                		onAnimationFrameCallback = callback;
                		vr.setAnimationLoop( callback );
                		animation.start();
                	};
                	this.render = function ( scene, camera ) {
                		var renderTarget, forceClear;
                		if ( arguments[ 2 ] !== undefined ) {
                			console.warn( 'THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.' );
                			renderTarget = arguments[ 2 ];
                		}
                		if ( arguments[ 3 ] !== undefined ) {
                			console.warn( 'THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.' );
                			forceClear = arguments[ 3 ];
                		}
                		if ( ! ( camera && camera.isCamera ) ) {
                			console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
                			return;
                		}
                		if ( _isContextLost ) return;
                		_currentGeometryProgram.geometry = null;
                		_currentGeometryProgram.program = null;
                		_currentGeometryProgram.wireframe = false;
                		_currentMaterialId = - 1;
                		_currentCamera = null;
                		if ( scene.autoUpdate === true ) scene.updateMatrixWorld();
                		if ( camera.parent === null ) camera.updateMatrixWorld();
                		if ( vr.enabled && vr.isPresenting() ) {
                			camera = vr.getCamera( camera );
                		}
                		currentRenderState = renderStates.get( scene, camera );
                		currentRenderState.init();
                		scene.onBeforeRender( _this, scene, camera, renderTarget || _currentRenderTarget );
                		_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
                		_frustum.setFromMatrix( _projScreenMatrix );
                		_localClippingEnabled = this.localClippingEnabled;
                		_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );
                		currentRenderList = renderLists.get( scene, camera );
                		currentRenderList.init();
                		projectObject( scene, camera, 0, _this.sortObjects );
                		if ( _this.sortObjects === true ) {
                			currentRenderList.sort();
                		}
                		if ( _clippingEnabled ) _clipping.beginShadows();
                		var shadowsArray = currentRenderState.state.shadowsArray;
                		shadowMap.render( shadowsArray, scene, camera );
                		currentRenderState.setupLights( camera );
                		if ( _clippingEnabled ) _clipping.endShadows();
                		if ( this.info.autoReset ) this.info.reset();
                		if ( renderTarget !== undefined ) {
                			this.setRenderTarget( renderTarget );
                		}
                		if ( vr.enabled && multiview.isAvailable() ) {
                			multiview.attachCamera( camera );
                		}
                		background.render( currentRenderList, scene, camera, forceClear );
                		var opaqueObjects = currentRenderList.opaque;
                		var transparentObjects = currentRenderList.transparent;
                		if ( scene.overrideMaterial ) {
                			var overrideMaterial = scene.overrideMaterial;
                			if ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera, overrideMaterial );
                			if ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera, overrideMaterial );
                		} else {
                			if ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera );
                			if ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera );
                		}
                		scene.onAfterRender( _this, scene, camera );
                		if ( _currentRenderTarget !== null ) {
                			textures.updateRenderTargetMipmap( _currentRenderTarget );
                			textures.updateMultisampleRenderTarget( _currentRenderTarget );
                		}
                		state.buffers.depth.setTest( true );
                		state.buffers.depth.setMask( true );
                		state.buffers.color.setMask( true );
                		state.setPolygonOffset( false );
                		if ( vr.enabled ) {
                			if ( multiview.isAvailable() ) {
                				multiview.detachCamera( camera );
                			}
                			vr.submitFrame();
                		}
                		currentRenderList = null;
                		currentRenderState = null;
                	};
                	function projectObject( object, camera, groupOrder, sortObjects ) {
                		if ( object.visible === false ) return;
                		var visible = object.layers.test( camera.layers );
                		if ( visible ) {
                			if ( object.isGroup ) {
                				groupOrder = object.renderOrder;
                			} else if ( object.isLOD ) {
                				if ( object.autoUpdate === true ) object.update( camera );
                			} else if ( object.isLight ) {
                				currentRenderState.pushLight( object );
                				if ( object.castShadow ) {
                					currentRenderState.pushShadow( object );
                				}
                			} else if ( object.isSprite ) {
                				if ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {
                					if ( sortObjects ) {
                						_vector3.setFromMatrixPosition( object.matrixWorld )
                							.applyMatrix4( _projScreenMatrix );
                					}
                					var geometry = objects.update( object );
                					var material = object.material;
                					if ( material.visible ) {
                						currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );
                					}
                				}
                			} else if ( object.isImmediateRenderObject ) {
                				if ( sortObjects ) {
                					_vector3.setFromMatrixPosition( object.matrixWorld )
                						.applyMatrix4( _projScreenMatrix );
                				}
                				currentRenderList.push( object, null, object.material, groupOrder, _vector3.z, null );
                			} else if ( object.isMesh || object.isLine || object.isPoints ) {
                				if ( object.isSkinnedMesh ) {
                					if ( object.skeleton.frame !== info.render.frame ) {
                						object.skeleton.update();
                						object.skeleton.frame = info.render.frame;
                					}
                				}
                				if ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {
                					if ( sortObjects ) {
                						_vector3.setFromMatrixPosition( object.matrixWorld )
                							.applyMatrix4( _projScreenMatrix );
                					}
                					var geometry = objects.update( object );
                					var material = object.material;
                					if ( Array.isArray( material ) ) {
                						var groups = geometry.groups;
                						for ( var i = 0, l = groups.length; i < l; i ++ ) {
                							var group = groups[ i ];
                							var groupMaterial = material[ group.materialIndex ];
                							if ( groupMaterial && groupMaterial.visible ) {
                								currentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );
                							}
                						}
                					} else if ( material.visible ) {
                						currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );
                					}
                				}
                			}
                		}
                		var children = object.children;
                		for ( var i = 0, l = children.length; i < l; i ++ ) {
                			projectObject( children[ i ], camera, groupOrder, sortObjects );
                		}
                	}
                	function renderObjects( renderList, scene, camera, overrideMaterial ) {
                		for ( var i = 0, l = renderList.length; i < l; i ++ ) {
                			var renderItem = renderList[ i ];
                			var object = renderItem.object;
                			var geometry = renderItem.geometry;
                			var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;
                			var group = renderItem.group;
                			if ( camera.isArrayCamera ) {
                				_currentArrayCamera = camera;
                				if ( vr.enabled && multiview.isAvailable() ) {
                					renderObject( object, scene, camera, geometry, material, group );
                				} else {
                					var cameras = camera.cameras;
                					for ( var j = 0, jl = cameras.length; j < jl; j ++ ) {
                						var camera2 = cameras[ j ];
                						if ( object.layers.test( camera2.layers ) ) {
                							state.viewport( _currentViewport.copy( camera2.viewport ) );
                							currentRenderState.setupLights( camera2 );
                							renderObject( object, scene, camera2, geometry, material, group );
                						}
                					}
                				}
                			} else {
                				_currentArrayCamera = null;
                				renderObject( object, scene, camera, geometry, material, group );
                			}
                		}
                	}
                	function renderObject( object, scene, camera, geometry, material, group ) {
                		object.onBeforeRender( _this, scene, camera, geometry, material, group );
                		currentRenderState = renderStates.get( scene, _currentArrayCamera || camera );
                		object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
                		object.normalMatrix.getNormalMatrix( object.modelViewMatrix );
                		if ( object.isImmediateRenderObject ) {
                			state.setMaterial( material );
                			var program = setProgram( camera, scene.fog, material, object );
                			_currentGeometryProgram.geometry = null;
                			_currentGeometryProgram.program = null;
                			_currentGeometryProgram.wireframe = false;
                			renderObjectImmediate( object, program );
                		} else {
                			_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );
                		}
                		object.onAfterRender( _this, scene, camera, geometry, material, group );
                		currentRenderState = renderStates.get( scene, _currentArrayCamera || camera );
                	}
                	function initMaterial( material, fog, object ) {
                		var materialProperties = properties.get( material );
                		var lights = currentRenderState.state.lights;
                		var shadowsArray = currentRenderState.state.shadowsArray;
                		var lightsStateVersion = lights.state.version;
                		var parameters = programCache.getParameters(
                			material, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object );
                		var programCacheKey = programCache.getProgramCacheKey( material, parameters );
                		var program = materialProperties.program;
                		var programChange = true;
                		if ( program === undefined ) {
                			material.addEventListener( 'dispose', onMaterialDispose );
                		} else if ( program.cacheKey !== programCacheKey ) {
                			releaseMaterialProgramReference( material );
                		} else if ( materialProperties.lightsStateVersion !== lightsStateVersion ) {
                			materialProperties.lightsStateVersion = lightsStateVersion;
                			programChange = false;
                		} else if ( parameters.shaderID !== undefined ) {
                			return;
                		} else {
                			programChange = false;
                		}
                		if ( programChange ) {
                			if ( parameters.shaderID ) {
                				var shader = ShaderLib[ parameters.shaderID ];
                				materialProperties.shader = {
                					name: material.type,
                					uniforms: cloneUniforms( shader.uniforms ),
                					vertexShader: shader.vertexShader,
                					fragmentShader: shader.fragmentShader
                				};
                			} else {
                				materialProperties.shader = {
                					name: material.type,
                					uniforms: material.uniforms,
                					vertexShader: material.vertexShader,
                					fragmentShader: material.fragmentShader
                				};
                			}
                			material.onBeforeCompile( materialProperties.shader, _this );
                			programCacheKey = programCache.getProgramCacheKey( material, parameters );
                			program = programCache.acquireProgram( material, materialProperties.shader, parameters, programCacheKey );
                			materialProperties.program = program;
                			material.program = program;
                		}
                		var programAttributes = program.getAttributes();
                		if ( material.morphTargets ) {
                			material.numSupportedMorphTargets = 0;
                			for ( var i = 0; i < _this.maxMorphTargets; i ++ ) {
                				if ( programAttributes[ 'morphTarget' + i ] >= 0 ) {
                					material.numSupportedMorphTargets ++;
                				}
                			}
                		}
                		if ( material.morphNormals ) {
                			material.numSupportedMorphNormals = 0;
                			for ( var i = 0; i < _this.maxMorphNormals; i ++ ) {
                				if ( programAttributes[ 'morphNormal' + i ] >= 0 ) {
                					material.numSupportedMorphNormals ++;
                				}
                			}
                		}
                		var uniforms = materialProperties.shader.uniforms;
                		if ( ! material.isShaderMaterial &&
                			! material.isRawShaderMaterial ||
                			material.clipping === true ) {
                			materialProperties.numClippingPlanes = _clipping.numPlanes;
                			materialProperties.numIntersection = _clipping.numIntersection;
                			uniforms.clippingPlanes = _clipping.uniform;
                		}
                		materialProperties.fog = fog;
                		materialProperties.needsLights = materialNeedsLights( material );
                		materialProperties.lightsStateVersion = lightsStateVersion;
                		if ( materialProperties.needsLights ) {
                			uniforms.ambientLightColor.value = lights.state.ambient;
                			uniforms.lightProbe.value = lights.state.probe;
                			uniforms.directionalLights.value = lights.state.directional;
                			uniforms.spotLights.value = lights.state.spot;
                			uniforms.rectAreaLights.value = lights.state.rectArea;
                			uniforms.pointLights.value = lights.state.point;
                			uniforms.hemisphereLights.value = lights.state.hemi;
                			uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
                			uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
                			uniforms.spotShadowMap.value = lights.state.spotShadowMap;
                			uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
                			uniforms.pointShadowMap.value = lights.state.pointShadowMap;
                			uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
                		}
                		var progUniforms = materialProperties.program.getUniforms(),
                			uniformsList =
                				WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );
                		materialProperties.uniformsList = uniformsList;
                	}
                	function setProgram( camera, fog, material, object ) {
                		textures.resetTextureUnits();
                		var materialProperties = properties.get( material );
                		var lights = currentRenderState.state.lights;
                		if ( _clippingEnabled ) {
                			if ( _localClippingEnabled || camera !== _currentCamera ) {
                				var useCache =
                					camera === _currentCamera &&
                					material.id === _currentMaterialId;
                				_clipping.setState(
                					material.clippingPlanes, material.clipIntersection, material.clipShadows,
                					camera, materialProperties, useCache );
                			}
                		}
                		if ( material.version === materialProperties.__version ) {
                			if ( materialProperties.program === undefined ) {
                				material.needsUpdate = true;
                			} else if ( material.fog && materialProperties.fog !== fog ) {
                				material.needsUpdate = true;
                			} else if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {
                				material.needsUpdate = true;
                			} else if ( materialProperties.numClippingPlanes !== undefined &&
                				( materialProperties.numClippingPlanes !== _clipping.numPlanes ||
                				materialProperties.numIntersection !== _clipping.numIntersection ) ) {
                				material.needsUpdate = true;
                			}
                		}
                		if ( material.version !== materialProperties.__version ) {
                			initMaterial( material, fog, object );
                			materialProperties.__version = material.version;
                		}
                		var refreshProgram = false;
                		var refreshMaterial = false;
                		var refreshLights = false;
                		var program = materialProperties.program,
                			p_uniforms = program.getUniforms(),
                			m_uniforms = materialProperties.shader.uniforms;
                		if ( state.useProgram( program.program ) ) {
                			refreshProgram = true;
                			refreshMaterial = true;
                			refreshLights = true;
                		}
                		if ( material.id !== _currentMaterialId ) {
                			_currentMaterialId = material.id;
                			refreshMaterial = true;
                		}
                		if ( refreshProgram || _currentCamera !== camera ) {
                			if ( program.numMultiviewViews > 0 ) {
                				multiview.updateCameraProjectionMatricesUniform( camera, p_uniforms );
                			} else {
                				p_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );
                			}
                			if ( capabilities.logarithmicDepthBuffer ) {
                				p_uniforms.setValue( _gl, 'logDepthBufFC',
                					2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );
                			}
                			if ( _currentCamera !== camera ) {
                				_currentCamera = camera;
                				refreshMaterial = true;
                				refreshLights = true;
                			}
                			if ( material.isShaderMaterial ||
                				material.isMeshPhongMaterial ||
                				material.isMeshStandardMaterial ||
                				material.envMap ) {
                				var uCamPos = p_uniforms.map.cameraPosition;
                				if ( uCamPos !== undefined ) {
                					uCamPos.setValue( _gl,
                						_vector3.setFromMatrixPosition( camera.matrixWorld ) );
                				}
                			}
                			if ( material.isMeshPhongMaterial ||
                				material.isMeshLambertMaterial ||
                				material.isMeshBasicMaterial ||
                				material.isMeshStandardMaterial ||
                				material.isShaderMaterial ) {
                				p_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );
                			}
                			if ( material.isMeshPhongMaterial ||
                				material.isMeshLambertMaterial ||
                				material.isMeshBasicMaterial ||
                				material.isMeshStandardMaterial ||
                				material.isShaderMaterial ||
                				material.skinning ) {
                				if ( program.numMultiviewViews > 0 ) {
                					multiview.updateCameraViewMatricesUniform( camera, p_uniforms );
                				} else {
                					p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );
                				}
                			}
                		}
                		if ( material.skinning ) {
                			p_uniforms.setOptional( _gl, object, 'bindMatrix' );
                			p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );
                			var skeleton = object.skeleton;
                			if ( skeleton ) {
                				var bones = skeleton.bones;
                				if ( capabilities.floatVertexTextures ) {
                					if ( skeleton.boneTexture === undefined ) {
                						var size = Math.sqrt( bones.length * 4 );
                						size = _Math.ceilPowerOfTwo( size );
                						size = Math.max( size, 4 );
                						var boneMatrices = new Float32Array( size * size * 4 );
                						boneMatrices.set( skeleton.boneMatrices );
                						var boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );
                						skeleton.boneMatrices = boneMatrices;
                						skeleton.boneTexture = boneTexture;
                						skeleton.boneTextureSize = size;
                					}
                					p_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );
                					p_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );
                				} else {
                					p_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );
                				}
                			}
                		}
                		if ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {
                			materialProperties.receiveShadow = object.receiveShadow;
                			p_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );
                		}
                		if ( refreshMaterial ) {
                			p_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );
                			p_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );
                			if ( materialProperties.needsLights ) {
                				markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );
                			}
                			if ( fog && material.fog ) {
                				refreshUniformsFog( m_uniforms, fog );
                			}
                			if ( material.isMeshBasicMaterial ) {
                				refreshUniformsCommon( m_uniforms, material );
                			} else if ( material.isMeshLambertMaterial ) {
                				refreshUniformsCommon( m_uniforms, material );
                				refreshUniformsLambert( m_uniforms, material );
                			} else if ( material.isMeshPhongMaterial ) {
                				refreshUniformsCommon( m_uniforms, material );
                				if ( material.isMeshToonMaterial ) {
                					refreshUniformsToon( m_uniforms, material );
                				} else {
                					refreshUniformsPhong( m_uniforms, material );
                				}
                			} else if ( material.isMeshStandardMaterial ) {
                				refreshUniformsCommon( m_uniforms, material );
                				if ( material.isMeshPhysicalMaterial ) {
                					refreshUniformsPhysical( m_uniforms, material );
                				} else {
                					refreshUniformsStandard( m_uniforms, material );
                				}
                			} else if ( material.isMeshMatcapMaterial ) {
                				refreshUniformsCommon( m_uniforms, material );
                				refreshUniformsMatcap( m_uniforms, material );
                			} else if ( material.isMeshDepthMaterial ) {
                				refreshUniformsCommon( m_uniforms, material );
                				refreshUniformsDepth( m_uniforms, material );
                			} else if ( material.isMeshDistanceMaterial ) {
                				refreshUniformsCommon( m_uniforms, material );
                				refreshUniformsDistance( m_uniforms, material );
                			} else if ( material.isMeshNormalMaterial ) {
                				refreshUniformsCommon( m_uniforms, material );
                				refreshUniformsNormal( m_uniforms, material );
                			} else if ( material.isLineBasicMaterial ) {
                				refreshUniformsLine( m_uniforms, material );
                				if ( material.isLineDashedMaterial ) {
                					refreshUniformsDash( m_uniforms, material );
                				}
                			} else if ( material.isPointsMaterial ) {
                				refreshUniformsPoints( m_uniforms, material );
                			} else if ( material.isSpriteMaterial ) {
                				refreshUniformsSprites( m_uniforms, material );
                			} else if ( material.isShadowMaterial ) {
                				m_uniforms.color.value.copy( material.color );
                				m_uniforms.opacity.value = material.opacity;
                			}
                			if ( m_uniforms.ltc_1 !== undefined ) m_uniforms.ltc_1.value = UniformsLib.LTC_1;
                			if ( m_uniforms.ltc_2 !== undefined ) m_uniforms.ltc_2.value = UniformsLib.LTC_2;
                			WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );
                			if ( material.isShaderMaterial ) {
                				material.uniformsNeedUpdate = false;
                			}
                		}
                		if ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {
                			WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );
                			material.uniformsNeedUpdate = false;
                		}
                		if ( material.isSpriteMaterial ) {
                			p_uniforms.setValue( _gl, 'center', object.center );
                		}
                		if ( program.numMultiviewViews > 0 ) {
                			multiview.updateObjectMatricesUniforms( object, camera, p_uniforms );
                		} else {
                			p_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );
                			p_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );
                		}
                		p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );
                		return program;
                	}
                	function refreshUniformsCommon( uniforms, material ) {
                		uniforms.opacity.value = material.opacity;
                		if ( material.color ) {
                			uniforms.diffuse.value.copy( material.color );
                		}
                		if ( material.emissive ) {
                			uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );
                		}
                		if ( material.map ) {
                			uniforms.map.value = material.map;
                		}
                		if ( material.alphaMap ) {
                			uniforms.alphaMap.value = material.alphaMap;
                		}
                		if ( material.specularMap ) {
                			uniforms.specularMap.value = material.specularMap;
                		}
                		if ( material.envMap ) {
                			uniforms.envMap.value = material.envMap;
                			uniforms.flipEnvMap.value = material.envMap.isCubeTexture ? - 1 : 1;
                			uniforms.reflectivity.value = material.reflectivity;
                			uniforms.refractionRatio.value = material.refractionRatio;
                			uniforms.maxMipLevel.value = properties.get( material.envMap ).__maxMipLevel;
                		}
                		if ( material.lightMap ) {
                			uniforms.lightMap.value = material.lightMap;
                			uniforms.lightMapIntensity.value = material.lightMapIntensity;
                		}
                		if ( material.aoMap ) {
                			uniforms.aoMap.value = material.aoMap;
                			uniforms.aoMapIntensity.value = material.aoMapIntensity;
                		}
                		var uvScaleMap;
                		if ( material.map ) {
                			uvScaleMap = material.map;
                		} else if ( material.specularMap ) {
                			uvScaleMap = material.specularMap;
                		} else if ( material.displacementMap ) {
                			uvScaleMap = material.displacementMap;
                		} else if ( material.normalMap ) {
                			uvScaleMap = material.normalMap;
                		} else if ( material.bumpMap ) {
                			uvScaleMap = material.bumpMap;
                		} else if ( material.roughnessMap ) {
                			uvScaleMap = material.roughnessMap;
                		} else if ( material.metalnessMap ) {
                			uvScaleMap = material.metalnessMap;
                		} else if ( material.alphaMap ) {
                			uvScaleMap = material.alphaMap;
                		} else if ( material.emissiveMap ) {
                			uvScaleMap = material.emissiveMap;
                		}
                		if ( uvScaleMap !== undefined ) {
                			if ( uvScaleMap.isWebGLRenderTarget ) {
                				uvScaleMap = uvScaleMap.texture;
                			}
                			if ( uvScaleMap.matrixAutoUpdate === true ) {
                				uvScaleMap.updateMatrix();
                			}
                			uniforms.uvTransform.value.copy( uvScaleMap.matrix );
                		}
                	}
                	function refreshUniformsLine( uniforms, material ) {
                		uniforms.diffuse.value.copy( material.color );
                		uniforms.opacity.value = material.opacity;
                	}
                	function refreshUniformsDash( uniforms, material ) {
                		uniforms.dashSize.value = material.dashSize;
                		uniforms.totalSize.value = material.dashSize + material.gapSize;
                		uniforms.scale.value = material.scale;
                	}
                	function refreshUniformsPoints( uniforms, material ) {
                		uniforms.diffuse.value.copy( material.color );
                		uniforms.opacity.value = material.opacity;
                		uniforms.size.value = material.size * _pixelRatio;
                		uniforms.scale.value = _height * 0.5;
                		if ( material.map ) {
                			uniforms.map.value = material.map;
                		}
                		if ( material.alphaMap ) {
                			uniforms.alphaMap.value = material.alphaMap;
                		}
                		var uvScaleMap;
                		if ( material.map ) {
                			uvScaleMap = material.map;
                		} else if ( material.alphaMap ) {
                			uvScaleMap = material.alphaMap;
                		}
                		if ( uvScaleMap !== undefined ) {
                			if ( uvScaleMap.matrixAutoUpdate === true ) {
                				uvScaleMap.updateMatrix();
                			}
                			uniforms.uvTransform.value.copy( uvScaleMap.matrix );
                		}
                	}
                	function refreshUniformsSprites( uniforms, material ) {
                		uniforms.diffuse.value.copy( material.color );
                		uniforms.opacity.value = material.opacity;
                		uniforms.rotation.value = material.rotation;
                		if ( material.map ) {
                			uniforms.map.value = material.map;
                		}
                		if ( material.alphaMap ) {
                			uniforms.alphaMap.value = material.alphaMap;
                		}
                		var uvScaleMap;
                		if ( material.map ) {
                			uvScaleMap = material.map;
                		} else if ( material.alphaMap ) {
                			uvScaleMap = material.alphaMap;
                		}
                		if ( uvScaleMap !== undefined ) {
                			if ( uvScaleMap.matrixAutoUpdate === true ) {
                				uvScaleMap.updateMatrix();
                			}
                			uniforms.uvTransform.value.copy( uvScaleMap.matrix );
                		}
                	}
                	function refreshUniformsFog( uniforms, fog ) {
                		uniforms.fogColor.value.copy( fog.color );
                		if ( fog.isFog ) {
                			uniforms.fogNear.value = fog.near;
                			uniforms.fogFar.value = fog.far;
                		} else if ( fog.isFogExp2 ) {
                			uniforms.fogDensity.value = fog.density;
                		}
                	}
                	function refreshUniformsLambert( uniforms, material ) {
                		if ( material.emissiveMap ) {
                			uniforms.emissiveMap.value = material.emissiveMap;
                		}
                	}
                	function refreshUniformsPhong( uniforms, material ) {
                		uniforms.specular.value.copy( material.specular );
                		uniforms.shininess.value = Math.max( material.shininess, 1e-4 );
                		if ( material.emissiveMap ) {
                			uniforms.emissiveMap.value = material.emissiveMap;
                		}
                		if ( material.bumpMap ) {
                			uniforms.bumpMap.value = material.bumpMap;
                			uniforms.bumpScale.value = material.bumpScale;
                			if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;
                		}
                		if ( material.normalMap ) {
                			uniforms.normalMap.value = material.normalMap;
                			uniforms.normalScale.value.copy( material.normalScale );
                			if ( material.side === BackSide ) uniforms.normalScale.value.negate();
                		}
                		if ( material.displacementMap ) {
                			uniforms.displacementMap.value = material.displacementMap;
                			uniforms.displacementScale.value = material.displacementScale;
                			uniforms.displacementBias.value = material.displacementBias;
                		}
                	}
                	function refreshUniformsToon( uniforms, material ) {
                		refreshUniformsPhong( uniforms, material );
                		if ( material.gradientMap ) {
                			uniforms.gradientMap.value = material.gradientMap;
                		}
                	}
                	function refreshUniformsStandard( uniforms, material ) {
                		uniforms.roughness.value = material.roughness;
                		uniforms.metalness.value = material.metalness;
                		if ( material.roughnessMap ) {
                			uniforms.roughnessMap.value = material.roughnessMap;
                		}
                		if ( material.metalnessMap ) {
                			uniforms.metalnessMap.value = material.metalnessMap;
                		}
                		if ( material.emissiveMap ) {
                			uniforms.emissiveMap.value = material.emissiveMap;
                		}
                		if ( material.bumpMap ) {
                			uniforms.bumpMap.value = material.bumpMap;
                			uniforms.bumpScale.value = material.bumpScale;
                			if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;
                		}
                		if ( material.normalMap ) {
                			uniforms.normalMap.value = material.normalMap;
                			uniforms.normalScale.value.copy( material.normalScale );
                			if ( material.side === BackSide ) uniforms.normalScale.value.negate();
                		}
                		if ( material.displacementMap ) {
                			uniforms.displacementMap.value = material.displacementMap;
                			uniforms.displacementScale.value = material.displacementScale;
                			uniforms.displacementBias.value = material.displacementBias;
                		}
                		if ( material.envMap ) {
                			uniforms.envMapIntensity.value = material.envMapIntensity;
                		}
                	}
                	function refreshUniformsPhysical( uniforms, material ) {
                		refreshUniformsStandard( uniforms, material );
                		uniforms.reflectivity.value = material.reflectivity;
                		uniforms.clearcoat.value = material.clearcoat;
                		uniforms.clearcoatRoughness.value = material.clearcoatRoughness;
                		if ( material.sheen ) uniforms.sheen.value.copy( material.sheen );
                		if ( material.clearcoatNormalMap ) {
                			uniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );
                			uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;
                			if ( material.side === BackSide ) {
                				uniforms.clearcoatNormalScale.value.negate();
                			}
                		}
                		uniforms.transparency.value = material.transparency;
                	}
                	function refreshUniformsMatcap( uniforms, material ) {
                		if ( material.matcap ) {
                			uniforms.matcap.value = material.matcap;
                		}
                		if ( material.bumpMap ) {
                			uniforms.bumpMap.value = material.bumpMap;
                			uniforms.bumpScale.value = material.bumpScale;
                			if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;
                		}
                		if ( material.normalMap ) {
                			uniforms.normalMap.value = material.normalMap;
                			uniforms.normalScale.value.copy( material.normalScale );
                			if ( material.side === BackSide ) uniforms.normalScale.value.negate();
                		}
                		if ( material.displacementMap ) {
                			uniforms.displacementMap.value = material.displacementMap;
                			uniforms.displacementScale.value = material.displacementScale;
                			uniforms.displacementBias.value = material.displacementBias;
                		}
                	}
                	function refreshUniformsDepth( uniforms, material ) {
                		if ( material.displacementMap ) {
                			uniforms.displacementMap.value = material.displacementMap;
                			uniforms.displacementScale.value = material.displacementScale;
                			uniforms.displacementBias.value = material.displacementBias;
                		}
                	}
                	function refreshUniformsDistance( uniforms, material ) {
                		if ( material.displacementMap ) {
                			uniforms.displacementMap.value = material.displacementMap;
                			uniforms.displacementScale.value = material.displacementScale;
                			uniforms.displacementBias.value = material.displacementBias;
                		}
                		uniforms.referencePosition.value.copy( material.referencePosition );
                		uniforms.nearDistance.value = material.nearDistance;
                		uniforms.farDistance.value = material.farDistance;
                	}
                	function refreshUniformsNormal( uniforms, material ) {
                		if ( material.bumpMap ) {
                			uniforms.bumpMap.value = material.bumpMap;
                			uniforms.bumpScale.value = material.bumpScale;
                			if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;
                		}
                		if ( material.normalMap ) {
                			uniforms.normalMap.value = material.normalMap;
                			uniforms.normalScale.value.copy( material.normalScale );
                			if ( material.side === BackSide ) uniforms.normalScale.value.negate();
                		}
                		if ( material.displacementMap ) {
                			uniforms.displacementMap.value = material.displacementMap;
                			uniforms.displacementScale.value = material.displacementScale;
                			uniforms.displacementBias.value = material.displacementBias;
                		}
                	}
                	function markUniformsLightsNeedsUpdate( uniforms, value ) {
                		uniforms.ambientLightColor.needsUpdate = value;
                		uniforms.lightProbe.needsUpdate = value;
                		uniforms.directionalLights.needsUpdate = value;
                		uniforms.pointLights.needsUpdate = value;
                		uniforms.spotLights.needsUpdate = value;
                		uniforms.rectAreaLights.needsUpdate = value;
                		uniforms.hemisphereLights.needsUpdate = value;
                	}
                	function materialNeedsLights( material ) {
                		return material.isMeshLambertMaterial || material.isMeshPhongMaterial ||
                			material.isMeshStandardMaterial || material.isShadowMaterial ||
                			( material.isShaderMaterial && material.lights === true );
                	}
                	this.setFramebuffer = function ( value ) {
                		if ( _framebuffer !== value && _currentRenderTarget === null ) _gl.bindFramebuffer( 36160, value );
                		_framebuffer = value;
                	};
                	this.getActiveCubeFace = function () {
                		return _currentActiveCubeFace;
                	};
                	this.getActiveMipmapLevel = function () {
                		return _currentActiveMipmapLevel;
                	};
                	this.getRenderTarget = function () {
                		return _currentRenderTarget;
                	};
                	this.setRenderTarget = function ( renderTarget, activeCubeFace, activeMipmapLevel ) {
                		_currentRenderTarget = renderTarget;
                		_currentActiveCubeFace = activeCubeFace;
                		_currentActiveMipmapLevel = activeMipmapLevel;
                		if ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {
                			textures.setupRenderTarget( renderTarget );
                		}
                		var framebuffer = _framebuffer;
                		var isCube = false;
                		if ( renderTarget ) {
                			var __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;
                			if ( renderTarget.isWebGLRenderTargetCube ) {
                				framebuffer = __webglFramebuffer[ activeCubeFace || 0 ];
                				isCube = true;
                			} else if ( renderTarget.isWebGLMultisampleRenderTarget ) {
                				framebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;
                			} else {
                				framebuffer = __webglFramebuffer;
                			}
                			_currentViewport.copy( renderTarget.viewport );
                			_currentScissor.copy( renderTarget.scissor );
                			_currentScissorTest = renderTarget.scissorTest;
                		} else {
                			_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();
                			_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();
                			_currentScissorTest = _scissorTest;
                		}
                		if ( _currentFramebuffer !== framebuffer ) {
                			_gl.bindFramebuffer( 36160, framebuffer );
                			_currentFramebuffer = framebuffer;
                		}
                		state.viewport( _currentViewport );
                		state.scissor( _currentScissor );
                		state.setScissorTest( _currentScissorTest );
                		if ( isCube ) {
                			var textureProperties = properties.get( renderTarget.texture );
                			_gl.framebufferTexture2D( 36160, 36064, 34069 + ( activeCubeFace || 0 ), textureProperties.__webglTexture, activeMipmapLevel || 0 );
                		}
                	};
                	this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {
                		if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {
                			console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
                			return;
                		}
                		var framebuffer = properties.get( renderTarget ).__webglFramebuffer;
                		if ( renderTarget.isWebGLRenderTargetCube && activeCubeFaceIndex !== undefined ) {
                			framebuffer = framebuffer[ activeCubeFaceIndex ];
                		}
                		if ( framebuffer ) {
                			var restore = false;
                			if ( framebuffer !== _currentFramebuffer ) {
                				_gl.bindFramebuffer( 36160, framebuffer );
                				restore = true;
                			}
                			try {
                				var texture = renderTarget.texture;
                				var textureFormat = texture.format;
                				var textureType = texture.type;
                				if ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {
                					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
                					return;
                				}
                				if ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) &&
                					! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) &&
                					! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {
                					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
                					return;
                				}
                				if ( _gl.checkFramebufferStatus( 36160 ) === 36053 ) {
                					if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {
                						_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );
                					}
                				} else {
                					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );
                				}
                			} finally {
                				if ( restore ) {
                					_gl.bindFramebuffer( 36160, _currentFramebuffer );
                				}
                			}
                		}
                	};
                	this.copyFramebufferToTexture = function ( position, texture, level ) {
                		if ( level === undefined ) level = 0;
                		var levelScale = Math.pow( 2, - level );
                		var width = Math.floor( texture.image.width * levelScale );
                		var height = Math.floor( texture.image.height * levelScale );
                		var glFormat = utils.convert( texture.format );
                		textures.setTexture2D( texture, 0 );
                		_gl.copyTexImage2D( 3553, level, glFormat, position.x, position.y, width, height, 0 );
                		state.unbindTexture();
                	};
                	this.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {
                		var width = srcTexture.image.width;
                		var height = srcTexture.image.height;
                		var glFormat = utils.convert( dstTexture.format );
                		var glType = utils.convert( dstTexture.type );
                		textures.setTexture2D( dstTexture, 0 );
                		if ( srcTexture.isDataTexture ) {
                			_gl.texSubImage2D( 3553, level || 0, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );
                		} else {
                			_gl.texSubImage2D( 3553, level || 0, position.x, position.y, glFormat, glType, srcTexture.image );
                		}
                		state.unbindTexture();
                	};
                	this.initTexture = function ( texture ) {
                		textures.setTexture2D( texture, 0 );
                		state.unbindTexture();
                	};
                	if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {
                		__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );
                	}
                }
                function FogExp2( color, density ) {
                	this.name = '';
                	this.color = new Color( color );
                	this.density = ( density !== undefined ) ? density : 0.00025;
                }
                Object.assign( FogExp2.prototype, {
                	isFogExp2: true,
                	clone: function () {
                		return new FogExp2( this.color, this.density );
                	},
                	toJSON: function (            ) {
                		return {
                			type: 'FogExp2',
                			color: this.color.getHex(),
                			density: this.density
                		};
                	}
                } );
                function Fog( color, near, far ) {
                	this.name = '';
                	this.color = new Color( color );
                	this.near = ( near !== undefined ) ? near : 1;
                	this.far = ( far !== undefined ) ? far : 1000;
                }
                Object.assign( Fog.prototype, {
                	isFog: true,
                	clone: function () {
                		return new Fog( this.color, this.near, this.far );
                	},
                	toJSON: function (            ) {
                		return {
                			type: 'Fog',
                			color: this.color.getHex(),
                			near: this.near,
                			far: this.far
                		};
                	}
                } );
                function InterleavedBuffer( array, stride ) {
                	this.array = array;
                	this.stride = stride;
                	this.count = array !== undefined ? array.length / stride : 0;
                	this.usage = StaticDrawUsage;
                	this.updateRange = { offset: 0, count: - 1 };
                	this.version = 0;
                }
                Object.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {
                	set: function ( value ) {
                		if ( value === true ) this.version ++;
                	}
                } );
                Object.assign( InterleavedBuffer.prototype, {
                	isInterleavedBuffer: true,
                	onUploadCallback: function () {},
                	setUsage: function ( value ) {
                		this.usage = value;
                		return this;
                	},
                	copy: function ( source ) {
                		this.array = new source.array.constructor( source.array );
                		this.count = source.count;
                		this.stride = source.stride;
                		this.usage = source.usage;
                		return this;
                	},
                	copyAt: function ( index1, attribute, index2 ) {
                		index1 *= this.stride;
                		index2 *= attribute.stride;
                		for ( var i = 0, l = this.stride; i < l; i ++ ) {
                			this.array[ index1 + i ] = attribute.array[ index2 + i ];
                		}
                		return this;
                	},
                	set: function ( value, offset ) {
                		if ( offset === undefined ) offset = 0;
                		this.array.set( value, offset );
                		return this;
                	},
                	clone: function () {
                		return new this.constructor().copy( this );
                	},
                	onUpload: function ( callback ) {
                		this.onUploadCallback = callback;
                		return this;
                	}
                } );
                function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {
                	this.data = interleavedBuffer;
                	this.itemSize = itemSize;
                	this.offset = offset;
                	this.normalized = normalized === true;
                }
                Object.defineProperties( InterleavedBufferAttribute.prototype, {
                	count: {
                		get: function () {
                			return this.data.count;
                		}
                	},
                	array: {
                		get: function () {
                			return this.data.array;
                		}
                	}
                } );
                Object.assign( InterleavedBufferAttribute.prototype, {
                	isInterleavedBufferAttribute: true,
                	setX: function ( index, x ) {
                		this.data.array[ index * this.data.stride + this.offset ] = x;
                		return this;
                	},
                	setY: function ( index, y ) {
                		this.data.array[ index * this.data.stride + this.offset + 1 ] = y;
                		return this;
                	},
                	setZ: function ( index, z ) {
                		this.data.array[ index * this.data.stride + this.offset + 2 ] = z;
                		return this;
                	},
                	setW: function ( index, w ) {
                		this.data.array[ index * this.data.stride + this.offset + 3 ] = w;
                		return this;
                	},
                	getX: function ( index ) {
                		return this.data.array[ index * this.data.stride + this.offset ];
                	},
                	getY: function ( index ) {
                		return this.data.array[ index * this.data.stride + this.offset + 1 ];
                	},
                	getZ: function ( index ) {
                		return this.data.array[ index * this.data.stride + this.offset + 2 ];
                	},
                	getW: function ( index ) {
                		return this.data.array[ index * this.data.stride + this.offset + 3 ];
                	},
                	setXY: function ( index, x, y ) {
                		index = index * this.data.stride + this.offset;
                		this.data.array[ index + 0 ] = x;
                		this.data.array[ index + 1 ] = y;
                		return this;
                	},
                	setXYZ: function ( index, x, y, z ) {
                		index = index * this.data.stride + this.offset;
                		this.data.array[ index + 0 ] = x;
                		this.data.array[ index + 1 ] = y;
                		this.data.array[ index + 2 ] = z;
                		return this;
                	},
                	setXYZW: function ( index, x, y, z, w ) {
                		index = index * this.data.stride + this.offset;
                		this.data.array[ index + 0 ] = x;
                		this.data.array[ index + 1 ] = y;
                		this.data.array[ index + 2 ] = z;
                		this.data.array[ index + 3 ] = w;
                		return this;
                	}
                } );
                function SpriteMaterial( parameters ) {
                	Material.call( this );
                	this.type = 'SpriteMaterial';
                	this.color = new Color( 0xffffff );
                	this.map = null;
                	this.alphaMap = null;
                	this.rotation = 0;
                	this.sizeAttenuation = true;
                	this.transparent = true;
                	this.setValues( parameters );
                }
                SpriteMaterial.prototype = Object.create( Material.prototype );
                SpriteMaterial.prototype.constructor = SpriteMaterial;
                SpriteMaterial.prototype.isSpriteMaterial = true;
                SpriteMaterial.prototype.copy = function ( source ) {
                	Material.prototype.copy.call( this, source );
                	this.color.copy( source.color );
                	this.map = source.map;
                	this.alphaMap = source.alphaMap;
                	this.rotation = source.rotation;
                	this.sizeAttenuation = source.sizeAttenuation;
                	return this;
                };
                var _geometry;
                var _intersectPoint = new Vector3();
                var _worldScale = new Vector3();
                var _mvPosition = new Vector3();
                var _alignedPosition = new Vector2();
                var _rotatedPosition = new Vector2();
                var _viewWorldMatrix = new Matrix4();
                var _vA$1 = new Vector3();
                var _vB$1 = new Vector3();
                var _vC$1 = new Vector3();
                var _uvA$1 = new Vector2();
                var _uvB$1 = new Vector2();
                var _uvC$1 = new Vector2();
                function Sprite( material ) {
                	Object3D.call( this );
                	this.type = 'Sprite';
                	if ( _geometry === undefined ) {
                		_geometry = new BufferGeometry();
                		var float32Array = new Float32Array( [
                			- 0.5, - 0.5, 0, 0, 0,
                			0.5, - 0.5, 0, 1, 0,
                			0.5, 0.5, 0, 1, 1,
                			- 0.5, 0.5, 0, 0, 1
                		] );
                		var interleavedBuffer = new InterleavedBuffer( float32Array, 5 );
                		_geometry.setIndex( [ 0, 1, 2,	0, 2, 3 ] );
                		_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );
                		_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );
                	}
                	this.geometry = _geometry;
                	this.material = ( material !== undefined ) ? material : new SpriteMaterial();
                	this.center = new Vector2( 0.5, 0.5 );
                }
                Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {
                	constructor: Sprite,
                	isSprite: true,
                	raycast: function ( raycaster, intersects ) {
                		if ( raycaster.camera === null ) {
                			console.error( 'THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.' );
                		}
                		_worldScale.setFromMatrixScale( this.matrixWorld );
                		_viewWorldMatrix.copy( raycaster.camera.matrixWorld );
                		this.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );
                		_mvPosition.setFromMatrixPosition( this.modelViewMatrix );
                		if ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {
                			_worldScale.multiplyScalar( - _mvPosition.z );
                		}
                		var rotation = this.material.rotation;
                		var sin, cos;
                		if ( rotation !== 0 ) {
                			cos = Math.cos( rotation );
                			sin = Math.sin( rotation );
                		}
                		var center = this.center;
                		transformVertex( _vA$1.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
                		transformVertex( _vB$1.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
                		transformVertex( _vC$1.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
                		_uvA$1.set( 0, 0 );
                		_uvB$1.set( 1, 0 );
                		_uvC$1.set( 1, 1 );
                		var intersect = raycaster.ray.intersectTriangle( _vA$1, _vB$1, _vC$1, false, _intersectPoint );
                		if ( intersect === null ) {
                			transformVertex( _vB$1.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
                			_uvB$1.set( 0, 1 );
                			intersect = raycaster.ray.intersectTriangle( _vA$1, _vC$1, _vB$1, false, _intersectPoint );
                			if ( intersect === null ) {
                				return;
                			}
                		}
                		var distance = raycaster.ray.origin.distanceTo( _intersectPoint );
                		if ( distance < raycaster.near || distance > raycaster.far ) return;
                		intersects.push( {
                			distance: distance,
                			point: _intersectPoint.clone(),
                			uv: Triangle.getUV( _intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() ),
                			face: null,
                			object: this
                		} );
                	},
                	clone: function () {
                		return new this.constructor( this.material ).copy( this );
                	},
                	copy: function ( source ) {
                		Object3D.prototype.copy.call( this, source );
                		if ( source.center !== undefined ) this.center.copy( source.center );
                		return this;
                	}
                } );
                function transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {
                	_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );
                	if ( sin !== undefined ) {
                		_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );
                		_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );
                	} else {
                		_rotatedPosition.copy( _alignedPosition );
                	}
                	vertexPosition.copy( mvPosition );
                	vertexPosition.x += _rotatedPosition.x;
                	vertexPosition.y += _rotatedPosition.y;
                	vertexPosition.applyMatrix4( _viewWorldMatrix );
                }
                var _v1$4 = new Vector3();
                var _v2$2 = new Vector3();
                function LOD() {
                	Object3D.call( this );
                	this.type = 'LOD';
                	Object.defineProperties( this, {
                		levels: {
                			enumerable: true,
                			value: []
                		}
                	} );
                	this.autoUpdate = true;
                }
                LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {
                	constructor: LOD,
                	isLOD: true,
                	copy: function ( source ) {
                		Object3D.prototype.copy.call( this, source, false );
                		var levels = source.levels;
                		for ( var i = 0, l = levels.length; i < l; i ++ ) {
                			var level = levels[ i ];
                			this.addLevel( level.object.clone(), level.distance );
                		}
                		this.autoUpdate = source.autoUpdate;
                		return this;
                	},
                	addLevel: function ( object, distance ) {
                		if ( distance === undefined ) distance = 0;
                		distance = Math.abs( distance );
                		var levels = this.levels;
                		for ( var l = 0; l < levels.length; l ++ ) {
                			if ( distance < levels[ l ].distance ) {
                				break;
                			}
                		}
                		levels.splice( l, 0, { distance: distance, object: object } );
                		this.add( object );
                		return this;
                	},
                	getObjectForDistance: function ( distance ) {
                		var levels = this.levels;
                		if ( levels.length > 0 ) {
                			for ( var i = 1, l = levels.length; i < l; i ++ ) {
                				if ( distance < levels[ i ].distance ) {
                					break;
                				}
                			}
                			return levels[ i - 1 ].object;
                		}
                		return null;
                	},
                	raycast: function ( raycaster, intersects ) {
                		var levels = this.levels;
                		if ( levels.length > 0 ) {
                			_v1$4.setFromMatrixPosition( this.matrixWorld );
                			var distance = raycaster.ray.origin.distanceTo( _v1$4 );
                			this.getObjectForDistance( distance ).raycast( raycaster, intersects );
                		}
                	},
                	update: function ( camera ) {
                		var levels = this.levels;
                		if ( levels.length > 1 ) {
                			_v1$4.setFromMatrixPosition( camera.matrixWorld );
                			_v2$2.setFromMatrixPosition( this.matrixWorld );
                			var distance = _v1$4.distanceTo( _v2$2 );
                			levels[ 0 ].object.visible = true;
                			for ( var i = 1, l = levels.length; i < l; i ++ ) {
                				if ( distance >= levels[ i ].distance ) {
                					levels[ i - 1 ].object.visible = false;
                					levels[ i ].object.visible = true;
                				} else {
                					break;
                				}
                			}
                			for ( ; i < l; i ++ ) {
                				levels[ i ].object.visible = false;
                			}
                		}
                	},
                	toJSON: function ( meta ) {
                		var data = Object3D.prototype.toJSON.call( this, meta );
                		if ( this.autoUpdate === false ) data.object.autoUpdate = false;
                		data.object.levels = [];
                		var levels = this.levels;
                		for ( var i = 0, l = levels.length; i < l; i ++ ) {
                			var level = levels[ i ];
                			data.object.levels.push( {
                				object: level.object.uuid,
                				distance: level.distance
                			} );
                		}
                		return data;
                	}
                } );
                function SkinnedMesh( geometry, material ) {
                	if ( geometry && geometry.isGeometry ) {
                		console.error( 'THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );
                	}
                	Mesh.call( this, geometry, material );
                	this.type = 'SkinnedMesh';
                	this.bindMode = 'attached';
                	this.bindMatrix = new Matrix4();
                	this.bindMatrixInverse = new Matrix4();
                }
                SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {
                	constructor: SkinnedMesh,
                	isSkinnedMesh: true,
                	bind: function ( skeleton, bindMatrix ) {
                		this.skeleton = skeleton;
                		if ( bindMatrix === undefined ) {
                			this.updateMatrixWorld( true );
                			this.skeleton.calculateInverses();
                			bindMatrix = this.matrixWorld;
                		}
                		this.bindMatrix.copy( bindMatrix );
                		this.bindMatrixInverse.getInverse( bindMatrix );
                	},
                	pose: function () {
                		this.skeleton.pose();
                	},
                	normalizeSkinWeights: function () {
                		var vector = new Vector4();
                		var skinWeight = this.geometry.attributes.skinWeight;
                		for ( var i = 0, l = skinWeight.count; i < l; i ++ ) {
                			vector.x = skinWeight.getX( i );
                			vector.y = skinWeight.getY( i );
                			vector.z = skinWeight.getZ( i );
                			vector.w = skinWeight.getW( i );
                			var scale = 1.0 / vector.manhattanLength();
                			if ( scale !== Infinity ) {
                				vector.multiplyScalar( scale );
                			} else {
                				vector.set( 1, 0, 0, 0 );
                			}
                			skinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );
                		}
                	},
                	updateMatrixWorld: function ( force ) {
                		Mesh.prototype.updateMatrixWorld.call( this, force );
                		if ( this.bindMode === 'attached' ) {
                			this.bindMatrixInverse.getInverse( this.matrixWorld );
                		} else if ( this.bindMode === 'detached' ) {
                			this.bindMatrixInverse.getInverse( this.bindMatrix );
                		} else {
                			console.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );
                		}
                	},
                	clone: function () {
                		return new this.constructor( this.geometry, this.material ).copy( this );
                	}
                } );
                var _offsetMatrix = new Matrix4();
                var _identityMatrix = new Matrix4();
                function Skeleton( bones, boneInverses ) {
                	bones = bones || [];
                	this.bones = bones.slice( 0 );
                	this.boneMatrices = new Float32Array( this.bones.length * 16 );
                	this.frame = - 1;
                	if ( boneInverses === undefined ) {
                		this.calculateInverses();
                	} else {
                		if ( this.bones.length === boneInverses.length ) {
                			this.boneInverses = boneInverses.slice( 0 );
                		} else {
                			console.warn( 'THREE.Skeleton boneInverses is the wrong length.' );
                			this.boneInverses = [];
                			for ( var i = 0, il = this.bones.length; i < il; i ++ ) {
                				this.boneInverses.push( new Matrix4() );
                			}
                		}
                	}
                }
                Object.assign( Skeleton.prototype, {
                	calculateInverses: function () {
                		this.boneInverses = [];
                		for ( var i = 0, il = this.bones.length; i < il; i ++ ) {
                			var inverse = new Matrix4();
                			if ( this.bones[ i ] ) {
                				inverse.getInverse( this.bones[ i ].matrixWorld );
                			}
                			this.boneInverses.push( inverse );
                		}
                	},
                	pose: function () {
                		var bone, i, il;
                		for ( i = 0, il = this.bones.length; i < il; i ++ ) {
                			bone = this.bones[ i ];
                			if ( bone ) {
                				bone.matrixWorld.getInverse( this.boneInverses[ i ] );
                			}
                		}
                		for ( i = 0, il = this.bones.length; i < il; i ++ ) {
                			bone = this.bones[ i ];
                			if ( bone ) {
                				if ( bone.parent && bone.parent.isBone ) {
                					bone.matrix.getInverse( bone.parent.matrixWorld );
                					bone.matrix.multiply( bone.matrixWorld );
                				} else {
                					bone.matrix.copy( bone.matrixWorld );
                				}
                				bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );
                			}
                		}
                	},
                	update: function () {
                		var bones = this.bones;
                		var boneInverses = this.boneInverses;
                		var boneMatrices = this.boneMatrices;
                		var boneTexture = this.boneTexture;
                		for ( var i = 0, il = bones.length; i < il; i ++ ) {
                			var matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;
                			_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );
                			_offsetMatrix.toArray( boneMatrices, i * 16 );
                		}
                		if ( boneTexture !== undefined ) {
                			boneTexture.needsUpdate = true;
                		}
                	},
                	clone: function () {
                		return new Skeleton( this.bones, this.boneInverses );
                	},
                	getBoneByName: function ( name ) {
                		for ( var i = 0, il = this.bones.length; i < il; i ++ ) {
                			var bone = this.bones[ i ];
                			if ( bone.name === name ) {
                				return bone;
                			}
                		}
                		return undefined;
                	}
                } );
                function Bone() {
                	Object3D.call( this );
                	this.type = 'Bone';
                }
                Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {
                	constructor: Bone,
                	isBone: true
                } );
                var _instanceLocalMatrix = new Matrix4();
                var _instanceWorldMatrix = new Matrix4();
                var _instanceIntersects = [];
                var _mesh = new Mesh();
                function InstancedMesh( geometry, material, count ) {
                	Mesh.call( this, geometry, material );
                	this.instanceMatrix = new BufferAttribute( new Float32Array( count * 16 ), 16 );
                	this.count = count;
                }
                InstancedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {
                	constructor: InstancedMesh,
                	isInstancedMesh: true,
                	getMatrixAt: function ( index, matrix ) {
                		matrix.fromArray( this.instanceMatrix.array, index * 16 );
                	},
                	raycast: function ( raycaster, intersects ) {
                		var matrixWorld = this.matrixWorld;
                		var raycastTimes = this.count;
                		_mesh.geometry = this.geometry;
                		_mesh.material = this.material;
                		if ( _mesh.material === undefined ) return;
                		for ( var instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {
                			this.getMatrixAt( instanceId, _instanceLocalMatrix );
                			_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );
                			_mesh.matrixWorld = _instanceWorldMatrix;
                			_mesh.raycast( raycaster, _instanceIntersects );
                			if ( _instanceIntersects.length > 0 ) {
                				_instanceIntersects[ 0 ].instanceId = instanceId;
                				_instanceIntersects[ 0 ].object = this;
                				intersects.push( _instanceIntersects[ 0 ] );
                				_instanceIntersects.length = 0;
                			}
                		}
                	},
                	setMatrixAt: function ( index, matrix ) {
                		matrix.toArray( this.instanceMatrix.array, index * 16 );
                	},
                	updateMorphTargets: function () {
                	}
                } );
                function LineBasicMaterial( parameters ) {
                	Material.call( this );
                	this.type = 'LineBasicMaterial';
                	this.color = new Color( 0xffffff );
                	this.linewidth = 1;
                	this.linecap = 'round';
                	this.linejoin = 'round';
                	this.setValues( parameters );
                }
                LineBasicMaterial.prototype = Object.create( Material.prototype );
                LineBasicMaterial.prototype.constructor = LineBasicMaterial;
                LineBasicMaterial.prototype.isLineBasicMaterial = true;
                LineBasicMaterial.prototype.copy = function ( source ) {
                	Material.prototype.copy.call( this, source );
                	this.color.copy( source.color );
                	this.linewidth = source.linewidth;
                	this.linecap = source.linecap;
                	this.linejoin = source.linejoin;
                	return this;
                };
                var _start = new Vector3();
                var _end = new Vector3();
                var _inverseMatrix$1 = new Matrix4();
                var _ray$1 = new Ray();
                var _sphere$2 = new Sphere();
                function Line( geometry, material, mode ) {
                	if ( mode === 1 ) {
                		console.error( 'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.' );
                	}
                	Object3D.call( this );
                	this.type = 'Line';
                	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
                	this.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );
                }
                Line.prototype = Object.assign( Object.create( Object3D.prototype ), {
                	constructor: Line,
                	isLine: true,
                	computeLineDistances: function () {
                		var geometry = this.geometry;
                		if ( geometry.isBufferGeometry ) {
                			if ( geometry.index === null ) {
                				var positionAttribute = geometry.attributes.position;
                				var lineDistances = [ 0 ];
                				for ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {
                					_start.fromBufferAttribute( positionAttribute, i - 1 );
                					_end.fromBufferAttribute( positionAttribute, i );
                					lineDistances[ i ] = lineDistances[ i - 1 ];
                					lineDistances[ i ] += _start.distanceTo( _end );
                				}
                				geometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );
                			} else {
                				console.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );
                			}
                		} else if ( geometry.isGeometry ) {
                			var vertices = geometry.vertices;
                			var lineDistances = geometry.lineDistances;
                			lineDistances[ 0 ] = 0;
                			for ( var i = 1, l = vertices.length; i < l; i ++ ) {
                				lineDistances[ i ] = lineDistances[ i - 1 ];
                				lineDistances[ i ] += vertices[ i - 1 ].distanceTo( vertices[ i ] );
                			}
                		}
                		return this;
                	},
                	raycast: function ( raycaster, intersects ) {
                		var precision = raycaster.linePrecision;
                		var geometry = this.geometry;
                		var matrixWorld = this.matrixWorld;
                		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
                		_sphere$2.copy( geometry.boundingSphere );
                		_sphere$2.applyMatrix4( matrixWorld );
                		_sphere$2.radius += precision;
                		if ( raycaster.ray.intersectsSphere( _sphere$2 ) === false ) return;
                		_inverseMatrix$1.getInverse( matrixWorld );
                		_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );
                		var localPrecision = precision / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
                		var localPrecisionSq = localPrecision * localPrecision;
                		var vStart = new Vector3();
                		var vEnd = new Vector3();
                		var interSegment = new Vector3();
                		var interRay = new Vector3();
                		var step = ( this && this.isLineSegments ) ? 2 : 1;
                		if ( geometry.isBufferGeometry ) {
                			var index = geometry.index;
                			var attributes = geometry.attributes;
                			var positions = attributes.position.array;
                			if ( index !== null ) {
                				var indices = index.array;
                				for ( var i = 0, l = indices.length - 1; i < l; i += step ) {
                					var a = indices[ i ];
                					var b = indices[ i + 1 ];
                					vStart.fromArray( positions, a * 3 );
                					vEnd.fromArray( positions, b * 3 );
                					var distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );
                					if ( distSq > localPrecisionSq ) continue;
                					interRay.applyMatrix4( this.matrixWorld );
                					var distance = raycaster.ray.origin.distanceTo( interRay );
                					if ( distance < raycaster.near || distance > raycaster.far ) continue;
                					intersects.push( {
                						distance: distance,
                						point: interSegment.clone().applyMatrix4( this.matrixWorld ),
                						index: i,
                						face: null,
                						faceIndex: null,
                						object: this
                					} );
                				}
                			} else {
                				for ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {
                					vStart.fromArray( positions, 3 * i );
                					vEnd.fromArray( positions, 3 * i + 3 );
                					var distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );
                					if ( distSq > localPrecisionSq ) continue;
                					interRay.applyMatrix4( this.matrixWorld );
                					var distance = raycaster.ray.origin.distanceTo( interRay );
                					if ( distance < raycaster.near || distance > raycaster.far ) continue;
                					intersects.push( {
                						distance: distance,
                						point: interSegment.clone().applyMatrix4( this.matrixWorld ),
                						index: i,
                						face: null,
                						faceIndex: null,
                						object: this
                					} );
                				}
                			}
                		} else if ( geometry.isGeometry ) {
                			var vertices = geometry.vertices;
                			var nbVertices = vertices.length;
                			for ( var i = 0; i < nbVertices - 1; i += step ) {
                				var distSq = _ray$1.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );
                				if ( distSq > localPrecisionSq ) continue;
                				interRay.applyMatrix4( this.matrixWorld );
                				var distance = raycaster.ray.origin.distanceTo( interRay );
                				if ( distance < raycaster.near || distance > raycaster.far ) continue;
                				intersects.push( {
                					distance: distance,
                					point: interSegment.clone().applyMatrix4( this.matrixWorld ),
                					index: i,
                					face: null,
                					faceIndex: null,
                					object: this
                				} );
                			}
                		}
                	},
                	clone: function () {
                		return new this.constructor( this.geometry, this.material ).copy( this );
                	}
                } );
                var _start$1 = new Vector3();
                var _end$1 = new Vector3();
                function LineSegments( geometry, material ) {
                	Line.call( this, geometry, material );
                	this.type = 'LineSegments';
                }
                LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {
                	constructor: LineSegments,
                	isLineSegments: true,
                	computeLineDistances: function () {
                		var geometry = this.geometry;
                		if ( geometry.isBufferGeometry ) {
                			if ( geometry.index === null ) {
                				var positionAttribute = geometry.attributes.position;
                				var lineDistances = [];
                				for ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {
                					_start$1.fromBufferAttribute( positionAttribute, i );
                					_end$1.fromBufferAttribute( positionAttribute, i + 1 );
                					lineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];
                					lineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );
                				}
                				geometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );
                			} else {
                				console.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );
                			}
                		} else if ( geometry.isGeometry ) {
                			var vertices = geometry.vertices;
                			var lineDistances = geometry.lineDistances;
                			for ( var i = 0, l = vertices.length; i < l; i += 2 ) {
                				_start$1.copy( vertices[ i ] );
                				_end$1.copy( vertices[ i + 1 ] );
                				lineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];
                				lineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );
                			}
                		}
                		return this;
                	}
                } );
                function LineLoop( geometry, material ) {
                	Line.call( this, geometry, material );
                	this.type = 'LineLoop';
                }
                LineLoop.prototype = Object.assign( Object.create( Line.prototype ), {
                	constructor: LineLoop,
                	isLineLoop: true,
                } );
                function PointsMaterial( parameters ) {
                	Material.call( this );
                	this.type = 'PointsMaterial';
                	this.color = new Color( 0xffffff );
                	this.map = null;
                	this.alphaMap = null;
                	this.size = 1;
                	this.sizeAttenuation = true;
                	this.morphTargets = false;
                	this.setValues( parameters );
                }
                PointsMaterial.prototype = Object.create( Material.prototype );
                PointsMaterial.prototype.constructor = PointsMaterial;
                PointsMaterial.prototype.isPointsMaterial = true;
                PointsMaterial.prototype.copy = function ( source ) {
                	Material.prototype.copy.call( this, source );
                	this.color.copy( source.color );
                	this.map = source.map;
                	this.alphaMap = source.alphaMap;
                	this.size = source.size;
                	this.sizeAttenuation = source.sizeAttenuation;
                	this.morphTargets = source.morphTargets;
                	return this;
                };
                var _inverseMatrix$2 = new Matrix4();
                var _ray$2 = new Ray();
                var _sphere$3 = new Sphere();
                var _position$1 = new Vector3();
                function Points( geometry, material ) {
                	Object3D.call( this );
                	this.type = 'Points';
                	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
                	this.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );
                	this.updateMorphTargets();
                }
                Points.prototype = Object.assign( Object.create( Object3D.prototype ), {
                	constructor: Points,
                	isPoints: true,
                	raycast: function ( raycaster, intersects ) {
                		var geometry = this.geometry;
                		var matrixWorld = this.matrixWorld;
                		var threshold = raycaster.params.Points.threshold;
                		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
                		_sphere$3.copy( geometry.boundingSphere );
                		_sphere$3.applyMatrix4( matrixWorld );
                		_sphere$3.radius += threshold;
                		if ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) return;
                		_inverseMatrix$2.getInverse( matrixWorld );
                		_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );
                		var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
                		var localThresholdSq = localThreshold * localThreshold;
                		if ( geometry.isBufferGeometry ) {
                			var index = geometry.index;
                			var attributes = geometry.attributes;
                			var positions = attributes.position.array;
                			if ( index !== null ) {
                				var indices = index.array;
                				for ( var i = 0, il = indices.length; i < il; i ++ ) {
                					var a = indices[ i ];
                					_position$1.fromArray( positions, a * 3 );
                					testPoint( _position$1, a, localThresholdSq, matrixWorld, raycaster, intersects, this );
                				}
                			} else {
                				for ( var i = 0, l = positions.length / 3; i < l; i ++ ) {
                					_position$1.fromArray( positions, i * 3 );
                					testPoint( _position$1, i, localThresholdSq, matrixWorld, raycaster, intersects, this );
                				}
                			}
                		} else {
                			var vertices = geometry.vertices;
                			for ( var i = 0, l = vertices.length; i < l; i ++ ) {
                				testPoint( vertices[ i ], i, localThresholdSq, matrixWorld, raycaster, intersects, this );
                			}
                		}
                	},
                	updateMorphTargets: function () {
                		var geometry = this.geometry;
                		var m, ml, name;
                		if ( geometry.isBufferGeometry ) {
                			var morphAttributes = geometry.morphAttributes;
                			var keys = Object.keys( morphAttributes );
                			if ( keys.length > 0 ) {
                				var morphAttribute = morphAttributes[ keys[ 0 ] ];
                				if ( morphAttribute !== undefined ) {
                					this.morphTargetInfluences = [];
                					this.morphTargetDictionary = {};
                					for ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {
                						name = morphAttribute[ m ].name || String( m );
                						this.morphTargetInfluences.push( 0 );
                						this.morphTargetDictionary[ name ] = m;
                					}
                				}
                			}
                		} else {
                			var morphTargets = geometry.morphTargets;
                			if ( morphTargets !== undefined && morphTargets.length > 0 ) {
                				console.error( 'THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );
                			}
                		}
                	},
                	clone: function () {
                		return new this.constructor( this.geometry, this.material ).copy( this );
                	}
                } );
                function testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {
                	var rayPointDistanceSq = _ray$2.distanceSqToPoint( point );
                	if ( rayPointDistanceSq < localThresholdSq ) {
                		var intersectPoint = new Vector3();
                		_ray$2.closestPointToPoint( point, intersectPoint );
                		intersectPoint.applyMatrix4( matrixWorld );
                		var distance = raycaster.ray.origin.distanceTo( intersectPoint );
                		if ( distance < raycaster.near || distance > raycaster.far ) return;
                		intersects.push( {
                			distance: distance,
                			distanceToRay: Math.sqrt( rayPointDistanceSq ),
                			point: intersectPoint,
                			index: index,
                			face: null,
                			object: object
                		} );
                	}
                }
                function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {
                	Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
                	this.format = format !== undefined ? format : RGBFormat;
                	this.minFilter = minFilter !== undefined ? minFilter : LinearFilter;
                	this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
                	this.generateMipmaps = false;
                }
                VideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {
                	constructor: VideoTexture,
                	isVideoTexture: true,
                	update: function () {
                		var video = this.image;
                		if ( video.readyState >= video.HAVE_CURRENT_DATA ) {
                			this.needsUpdate = true;
                		}
                	}
                } );
                function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {
                	Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );
                	this.image = { width: width, height: height };
                	this.mipmaps = mipmaps;
                	this.flipY = false;
                	this.generateMipmaps = false;
                }
                CompressedTexture.prototype = Object.create( Texture.prototype );
                CompressedTexture.prototype.constructor = CompressedTexture;
                CompressedTexture.prototype.isCompressedTexture = true;
                function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {
                	Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
                	this.needsUpdate = true;
                }
                CanvasTexture.prototype = Object.create( Texture.prototype );
                CanvasTexture.prototype.constructor = CanvasTexture;
                CanvasTexture.prototype.isCanvasTexture = true;
                function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {
                	format = format !== undefined ? format : DepthFormat;
                	if ( format !== DepthFormat && format !== DepthStencilFormat ) {
                		throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );
                	}
                	if ( type === undefined && format === DepthFormat ) type = UnsignedShortType;
                	if ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;
                	Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
                	this.image = { width: width, height: height };
                	this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
                	this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;
                	this.flipY = false;
                	this.generateMipmaps	= false;
                }
                DepthTexture.prototype = Object.create( Texture.prototype );
                DepthTexture.prototype.constructor = DepthTexture;
                DepthTexture.prototype.isDepthTexture = true;
                function WireframeGeometry( geometry ) {
                	BufferGeometry.call( this );
                	this.type = 'WireframeGeometry';
                	var vertices = [];
                	var i, j, l, o, ol;
                	var edge = [ 0, 0 ], edges = {}, e, edge1, edge2;
                	var key, keys = [ 'a', 'b', 'c' ];
                	var vertex;
                	if ( geometry && geometry.isGeometry ) {
                		var faces = geometry.faces;
                		for ( i = 0, l = faces.length; i < l; i ++ ) {
                			var face = faces[ i ];
                			for ( j = 0; j < 3; j ++ ) {
                				edge1 = face[ keys[ j ] ];
                				edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
                				edge[ 0 ] = Math.min( edge1, edge2 );
                				edge[ 1 ] = Math.max( edge1, edge2 );
                				key = edge[ 0 ] + ',' + edge[ 1 ];
                				if ( edges[ key ] === undefined ) {
                					edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };
                				}
                			}
                		}
                		for ( key in edges ) {
                			e = edges[ key ];
                			vertex = geometry.vertices[ e.index1 ];
                			vertices.push( vertex.x, vertex.y, vertex.z );
                			vertex = geometry.vertices[ e.index2 ];
                			vertices.push( vertex.x, vertex.y, vertex.z );
                		}
                	} else if ( geometry && geometry.isBufferGeometry ) {
                		var position, indices, groups;
                		var group, start, count;
                		var index1, index2;
                		vertex = new Vector3();
                		if ( geometry.index !== null ) {
                			position = geometry.attributes.position;
                			indices = geometry.index;
                			groups = geometry.groups;
                			if ( groups.length === 0 ) {
                				groups = [ { start: 0, count: indices.count, materialIndex: 0 } ];
                			}
                			for ( o = 0, ol = groups.length; o < ol; ++ o ) {
                				group = groups[ o ];
                				start = group.start;
                				count = group.count;
                				for ( i = start, l = ( start + count ); i < l; i += 3 ) {
                					for ( j = 0; j < 3; j ++ ) {
                						edge1 = indices.getX( i + j );
                						edge2 = indices.getX( i + ( j + 1 ) % 3 );
                						edge[ 0 ] = Math.min( edge1, edge2 );
                						edge[ 1 ] = Math.max( edge1, edge2 );
                						key = edge[ 0 ] + ',' + edge[ 1 ];
                						if ( edges[ key ] === undefined ) {
                							edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };
                						}
                					}
                				}
                			}
                			for ( key in edges ) {
                				e = edges[ key ];
                				vertex.fromBufferAttribute( position, e.index1 );
                				vertices.push( vertex.x, vertex.y, vertex.z );
                				vertex.fromBufferAttribute( position, e.index2 );
                				vertices.push( vertex.x, vertex.y, vertex.z );
                			}
                		} else {
                			position = geometry.attributes.position;
                			for ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {
                				for ( j = 0; j < 3; j ++ ) {
                					index1 = 3 * i + j;
                					vertex.fromBufferAttribute( position, index1 );
                					vertices.push( vertex.x, vertex.y, vertex.z );
                					index2 = 3 * i + ( ( j + 1 ) % 3 );
                					vertex.fromBufferAttribute( position, index2 );
                					vertices.push( vertex.x, vertex.y, vertex.z );
                				}
                			}
                		}
                	}
                	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
                }
                WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );
                WireframeGeometry.prototype.constructor = WireframeGeometry;
                function ParametricGeometry( func, slices, stacks ) {
                	Geometry.call( this );
                	this.type = 'ParametricGeometry';
                	this.parameters = {
                		func: func,
                		slices: slices,
                		stacks: stacks
                	};
                	this.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );
                	this.mergeVertices();
                }
                ParametricGeometry.prototype = Object.create( Geometry.prototype );
                ParametricGeometry.prototype.constructor = ParametricGeometry;
                function ParametricBufferGeometry( func, slices, stacks ) {
                	BufferGeometry.call( this );
                	this.type = 'ParametricBufferGeometry';
                	this.parameters = {
                		func: func,
                		slices: slices,
                		stacks: stacks
                	};
                	var indices = [];
                	var vertices = [];
                	var normals = [];
                	var uvs = [];
                	var EPS = 0.00001;
                	var normal = new Vector3();
                	var p0 = new Vector3(), p1 = new Vector3();
                	var pu = new Vector3(), pv = new Vector3();
                	var i, j;
                	if ( func.length < 3 ) {
                		console.error( 'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.' );
                	}
                	var sliceCount = slices + 1;
                	for ( i = 0; i <= stacks; i ++ ) {
                		var v = i / stacks;
                		for ( j = 0; j <= slices; j ++ ) {
                			var u = j / slices;
                			func( u, v, p0 );
                			vertices.push( p0.x, p0.y, p0.z );
                			if ( u - EPS >= 0 ) {
                				func( u - EPS, v, p1 );
                				pu.subVectors( p0, p1 );
                			} else {
                				func( u + EPS, v, p1 );
                				pu.subVectors( p1, p0 );
                			}
                			if ( v - EPS >= 0 ) {
                				func( u, v - EPS, p1 );
                				pv.subVectors( p0, p1 );
                			} else {
                				func( u, v + EPS, p1 );
                				pv.subVectors( p1, p0 );
                			}
                			normal.crossVectors( pu, pv ).normalize();
                			normals.push( normal.x, normal.y, normal.z );
                			uvs.push( u, v );
                		}
                	}
                	for ( i = 0; i < stacks; i ++ ) {
                		for ( j = 0; j < slices; j ++ ) {
                			var a = i * sliceCount + j;
                			var b = i * sliceCount + j + 1;
                			var c = ( i + 1 ) * sliceCount + j + 1;
                			var d = ( i + 1 ) * sliceCount + j;
                			indices.push( a, b, d );
                			indices.push( b, c, d );
                		}
                	}
                	this.setIndex( indices );
                	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
                	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
                	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
                }
                ParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
                ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;
                function PolyhedronGeometry( vertices, indices, radius, detail ) {
                	Geometry.call( this );
                	this.type = 'PolyhedronGeometry';
                	this.parameters = {
                		vertices: vertices,
                		indices: indices,
                		radius: radius,
                		detail: detail
                	};
                	this.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );
                	this.mergeVertices();
                }
                PolyhedronGeometry.prototype = Object.create( Geometry.prototype );
                PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;
                function PolyhedronBufferGeometry( vertices, indices, radius, detail ) {
                	BufferGeometry.call( this );
                	this.type = 'PolyhedronBufferGeometry';
                	this.parameters = {
                		vertices: vertices,
                		indices: indices,
                		radius: radius,
                		detail: detail
                	};
                	radius = radius || 1;
                	detail = detail || 0;
                	var vertexBuffer = [];
                	var uvBuffer = [];
                	subdivide( detail );
                	applyRadius( radius );
                	generateUVs();
                	this.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );
                	this.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );
                	this.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );
                	if ( detail === 0 ) {
                		this.computeVertexNormals();
                	} else {
                		this.normalizeNormals();
                	}
                	function subdivide( detail ) {
                		var a = new Vector3();
                		var b = new Vector3();
                		var c = new Vector3();
                		for ( var i = 0; i < indices.length; i += 3 ) {
                			getVertexByIndex( indices[ i + 0 ], a );
                			getVertexByIndex( indices[ i + 1 ], b );
                			getVertexByIndex( indices[ i + 2 ], c );
                			subdivideFace( a, b, c, detail );
                		}
                	}
                	function subdivideFace( a, b, c, detail ) {
                		var cols = Math.pow( 2, detail );
                		var v = [];
                		var i, j;
                		for ( i = 0; i <= cols; i ++ ) {
                			v[ i ] = [];
                			var aj = a.clone().lerp( c, i / cols );
                			var bj = b.clone().lerp( c, i / cols );
                			var rows = cols - i;
                			for ( j = 0; j <= rows; j ++ ) {
                				if ( j === 0 && i === cols ) {
                					v[ i ][ j ] = aj;
                				} else {
                					v[ i ][ j ] = aj.clone().lerp( bj, j / rows );
                				}
                			}
                		}
                		for ( i = 0; i < cols; i ++ ) {
                			for ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {
                				var k = Math.floor( j / 2 );
                				if ( j % 2 === 0 ) {
                					pushVertex( v[ i ][ k + 1 ] );
                					pushVertex( v[ i + 1 ][ k ] );
                					pushVertex( v[ i ][ k ] );
                				} else {
                					pushVertex( v[ i ][ k + 1 ] );
                					pushVertex( v[ i + 1 ][ k + 1 ] );
                					pushVertex( v[ i + 1 ][ k ] );
                				}
                			}
                		}
                	}
                	function applyRadius( radius ) {
                		var vertex = new Vector3();
                		for ( var i = 0; i < vertexBuffer.length; i += 3 ) {
                			vertex.x = vertexBuffer[ i + 0 ];
                			vertex.y = vertexBuffer[ i + 1 ];
                			vertex.z = vertexBuffer[ i + 2 ];
                			vertex.normalize().multiplyScalar( radius );
                			vertexBuffer[ i + 0 ] = vertex.x;
                			vertexBuffer[ i + 1 ] = vertex.y;
                			vertexBuffer[ i + 2 ] = vertex.z;
                		}
                	}
                	function generateUVs() {
                		var vertex = new Vector3();
                		for ( var i = 0; i < vertexBuffer.length; i += 3 ) {
                			vertex.x = vertexBuffer[ i + 0 ];
                			vertex.y = vertexBuffer[ i + 1 ];
                			vertex.z = vertexBuffer[ i + 2 ];
                			var u = azimuth( vertex ) / 2 / Math.PI + 0.5;
                			var v = inclination( vertex ) / Math.PI + 0.5;
                			uvBuffer.push( u, 1 - v );
                		}
                		correctUVs();
                		correctSeam();
                	}
                	function correctSeam() {
                		for ( var i = 0; i < uvBuffer.length; i += 6 ) {
                			var x0 = uvBuffer[ i + 0 ];
                			var x1 = uvBuffer[ i + 2 ];
                			var x2 = uvBuffer[ i + 4 ];
                			var max = Math.max( x0, x1, x2 );
                			var min = Math.min( x0, x1, x2 );
                			if ( max > 0.9 && min < 0.1 ) {
                				if ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;
                				if ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;
                				if ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;
                			}
                		}
                	}
                	function pushVertex( vertex ) {
                		vertexBuffer.push( vertex.x, vertex.y, vertex.z );
                	}
                	function getVertexByIndex( index, vertex ) {
                		var stride = index * 3;
                		vertex.x = vertices[ stride + 0 ];
                		vertex.y = vertices[ stride + 1 ];
                		vertex.z = vertices[ stride + 2 ];
                	}
                	function correctUVs() {
                		var a = new Vector3();
                		var b = new Vector3();
                		var c = new Vector3();
                		var centroid = new Vector3();
                		var uvA = new Vector2();
                		var uvB = new Vector2();
                		var uvC = new Vector2();
                		for ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {
                			a.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );
                			b.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );
                			c.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );
                			uvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );
                			uvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );
                			uvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );
                			centroid.copy( a ).add( b ).add( c ).divideScalar( 3 );
                			var azi = azimuth( centroid );
                			correctUV( uvA, j + 0, a, azi );
                			correctUV( uvB, j + 2, b, azi );
                			correctUV( uvC, j + 4, c, azi );
                		}
                	}
                	function correctUV( uv, stride, vector, azimuth ) {
                		if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {
                			uvBuffer[ stride ] = uv.x - 1;
                		}
                		if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {
                			uvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;
                		}
                	}
                	function azimuth( vector ) {
                		return Math.atan2( vector.z, - vector.x );
                	}
                	function inclination( vector ) {
                		return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );
                	}
                }
                PolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
                PolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;
                function TetrahedronGeometry( radius, detail ) {
                	Geometry.call( this );
                	this.type = 'TetrahedronGeometry';
                	this.parameters = {
                		radius: radius,
                		detail: detail
                	};
                	this.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );
                	this.mergeVertices();
                }
                TetrahedronGeometry.prototype = Object.create( Geometry.prototype );
                TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;
                function TetrahedronBufferGeometry( radius, detail ) {
                	var vertices = [
                		1, 1, 1, 	- 1, - 1, 1, 	- 1, 1, - 1, 	1, - 1, - 1
                	];
                	var indices = [
                		2, 1, 0, 	0, 3, 2,	1, 3, 0,	2, 3, 1
                	];
                	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );
                	this.type = 'TetrahedronBufferGeometry';
                	this.parameters = {
                		radius: radius,
                		detail: detail
                	};
                }
                TetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
                TetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;
                function OctahedronGeometry( radius, detail ) {
                	Geometry.call( this );
                	this.type = 'OctahedronGeometry';
                	this.parameters = {
                		radius: radius,
                		detail: detail
                	};
                	this.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );
                	this.mergeVertices();
                }
                OctahedronGeometry.prototype = Object.create( Geometry.prototype );
                OctahedronGeometry.prototype.constructor = OctahedronGeometry;
                function OctahedronBufferGeometry( radius, detail ) {
                	var vertices = [
                		1, 0, 0, 	- 1, 0, 0,	0, 1, 0,
                		0, - 1, 0, 	0, 0, 1,	0, 0, - 1
                	];
                	var indices = [
                		0, 2, 4,	0, 4, 3,	0, 3, 5,
                		0, 5, 2,	1, 2, 5,	1, 5, 3,
                		1, 3, 4,	1, 4, 2
                	];
                	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );
                	this.type = 'OctahedronBufferGeometry';
                	this.parameters = {
                		radius: radius,
                		detail: detail
                	};
                }
                OctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
                OctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;
                function IcosahedronGeometry( radius, detail ) {
                	Geometry.call( this );
                	this.type = 'IcosahedronGeometry';
                	this.parameters = {
                		radius: radius,
                		detail: detail
                	};
                	this.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );
                	this.mergeVertices();
                }
                IcosahedronGeometry.prototype = Object.create( Geometry.prototype );
                IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;
                function IcosahedronBufferGeometry( radius, detail ) {
                	var t = ( 1 + Math.sqrt( 5 ) ) / 2;
                	var vertices = [
                		- 1, t, 0, 	1, t, 0, 	- 1, - t, 0, 	1, - t, 0,
                		 0, - 1, t, 	0, 1, t,	0, - 1, - t, 	0, 1, - t,
                		 t, 0, - 1, 	t, 0, 1, 	- t, 0, - 1, 	- t, 0, 1
                	];
                	var indices = [
                		 0, 11, 5, 	0, 5, 1, 	0, 1, 7, 	0, 7, 10, 	0, 10, 11,
                		 1, 5, 9, 	5, 11, 4,	11, 10, 2,	10, 7, 6,	7, 1, 8,
                		 3, 9, 4, 	3, 4, 2,	3, 2, 6,	3, 6, 8,	3, 8, 9,
                		 4, 9, 5, 	2, 4, 11,	6, 2, 10,	8, 6, 7,	9, 8, 1
                	];
                	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );
                	this.type = 'IcosahedronBufferGeometry';
                	this.parameters = {
                		radius: radius,
                		detail: detail
                	};
                }
                IcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
                IcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;
                function DodecahedronGeometry( radius, detail ) {
                	Geometry.call( this );
                	this.type = 'DodecahedronGeometry';
                	this.parameters = {
                		radius: radius,
                		detail: detail
                	};
                	this.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );
                	this.mergeVertices();
                }
                DodecahedronGeometry.prototype = Object.create( Geometry.prototype );
                DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;
                function DodecahedronBufferGeometry( radius, detail ) {
                	var t = ( 1 + Math.sqrt( 5 ) ) / 2;
                	var r = 1 / t;
                	var vertices = [
                		- 1, - 1, - 1,	- 1, - 1, 1,
                		- 1, 1, - 1, - 1, 1, 1,
                		1, - 1, - 1, 1, - 1, 1,
                		1, 1, - 1, 1, 1, 1,
                		 0, - r, - t, 0, - r, t,
                		 0, r, - t, 0, r, t,
                		- r, - t, 0, - r, t, 0,
                		 r, - t, 0, r, t, 0,
                		- t, 0, - r, t, 0, - r,
                		- t, 0, r, t, 0, r
                	];
                	var indices = [
                		3, 11, 7, 	3, 7, 15, 	3, 15, 13,
                		7, 19, 17, 	7, 17, 6, 	7, 6, 15,
                		17, 4, 8, 	17, 8, 10, 	17, 10, 6,
                		8, 0, 16, 	8, 16, 2, 	8, 2, 10,
                		0, 12, 1, 	0, 1, 18, 	0, 18, 16,
                		6, 10, 2, 	6, 2, 13, 	6, 13, 15,
                		2, 16, 18, 	2, 18, 3, 	2, 3, 13,
                		18, 1, 9, 	18, 9, 11, 	18, 11, 3,
                		4, 14, 12, 	4, 12, 0, 	4, 0, 8,
                		11, 9, 5, 	11, 5, 19, 	11, 19, 7,
                		19, 5, 14, 	19, 14, 4, 	19, 4, 17,
                		1, 12, 14, 	1, 14, 5, 	1, 5, 9
                	];
                	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );
                	this.type = 'DodecahedronBufferGeometry';
                	this.parameters = {
                		radius: radius,
                		detail: detail
                	};
                }
                DodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
                DodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;
                function TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {
                	Geometry.call( this );
                	this.type = 'TubeGeometry';
                	this.parameters = {
                		path: path,
                		tubularSegments: tubularSegments,
                		radius: radius,
                		radialSegments: radialSegments,
                		closed: closed
                	};
                	if ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );
                	var bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );
                	this.tangents = bufferGeometry.tangents;
                	this.normals = bufferGeometry.normals;
                	this.binormals = bufferGeometry.binormals;
                	this.fromBufferGeometry( bufferGeometry );
                	this.mergeVertices();
                }
                TubeGeometry.prototype = Object.create( Geometry.prototype );
                TubeGeometry.prototype.constructor = TubeGeometry;
                function TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {
                	BufferGeometry.call( this );
                	this.type = 'TubeBufferGeometry';
                	this.parameters = {
                		path: path,
                		tubularSegments: tubularSegments,
                		radius: radius,
                		radialSegments: radialSegments,
                		closed: closed
                	};
                	tubularSegments = tubularSegments || 64;
                	radius = radius || 1;
                	radialSegments = radialSegments || 8;
                	closed = closed || false;
                	var frames = path.computeFrenetFrames( tubularSegments, closed );
                	this.tangents = frames.tangents;
                	this.normals = frames.normals;
                	this.binormals = frames.binormals;
                	var vertex = new Vector3();
                	var normal = new Vector3();
                	var uv = new Vector2();
                	var P = new Vector3();
                	var i, j;
                	var vertices = [];
                	var normals = [];
                	var uvs = [];
                	var indices = [];
                	generateBufferData();
                	this.setIndex( indices );
                	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
                	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
                	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
                	function generateBufferData() {
                		for ( i = 0; i < tubularSegments; i ++ ) {
                			generateSegment( i );
                		}
                		generateSegment( ( closed === false ) ? tubularSegments : 0 );
                		generateUVs();
                		generateIndices();
                	}
                	function generateSegment( i ) {
                		P = path.getPointAt( i / tubularSegments, P );
                		var N = frames.normals[ i ];
                		var B = frames.binormals[ i ];
                		for ( j = 0; j <= radialSegments; j ++ ) {
                			var v = j / radialSegments * Math.PI * 2;
                			var sin = Math.sin( v );
                			var cos = - Math.cos( v );
                			normal.x = ( cos * N.x + sin * B.x );
                			normal.y = ( cos * N.y + sin * B.y );
                			normal.z = ( cos * N.z + sin * B.z );
                			normal.normalize();
                			normals.push( normal.x, normal.y, normal.z );
                			vertex.x = P.x + radius * normal.x;
                			vertex.y = P.y + radius * normal.y;
                			vertex.z = P.z + radius * normal.z;
                			vertices.push( vertex.x, vertex.y, vertex.z );
                		}
                	}
                	function generateIndices() {
                		for ( j = 1; j <= tubularSegments; j ++ ) {
                			for ( i = 1; i <= radialSegments; i ++ ) {
                				var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
                				var b = ( radialSegments + 1 ) * j + ( i - 1 );
                				var c = ( radialSegments + 1 ) * j + i;
                				var d = ( radialSegments + 1 ) * ( j - 1 ) + i;
                				indices.push( a, b, d );
                				indices.push( b, c, d );
                			}
                		}
                	}
                	function generateUVs() {
                		for ( i = 0; i <= tubularSegments; i ++ ) {
                			for ( j = 0; j <= radialSegments; j ++ ) {
                				uv.x = i / tubularSegments;
                				uv.y = j / radialSegments;
                				uvs.push( uv.x, uv.y );
                			}
                		}
                	}
                }
                TubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
                TubeBufferGeometry.prototype.constructor = TubeBufferGeometry;
                TubeBufferGeometry.prototype.toJSON = function () {
                	var data = BufferGeometry.prototype.toJSON.call( this );
                	data.path = this.parameters.path.toJSON();
                	return data;
                };
                function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {
                	Geometry.call( this );
                	this.type = 'TorusKnotGeometry';
                	this.parameters = {
                		radius: radius,
                		tube: tube,
                		tubularSegments: tubularSegments,
                		radialSegments: radialSegments,
                		p: p,
                		q: q
                	};
                	if ( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );
                	this.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );
                	this.mergeVertices();
                }
                TorusKnotGeometry.prototype = Object.create( Geometry.prototype );
                TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;
                function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {
                	BufferGeometry.call( this );
                	this.type = 'TorusKnotBufferGeometry';
                	this.parameters = {
                		radius: radius,
                		tube: tube,
                		tubularSegments: tubularSegments,
                		radialSegments: radialSegments,
                		p: p,
                		q: q
                	};
                	radius = radius || 1;
                	tube = tube || 0.4;
                	tubularSegments = Math.floor( tubularSegments ) || 64;
                	radialSegments = Math.floor( radialSegments ) || 8;
                	p = p || 2;
                	q = q || 3;
                	var indices = [];
                	var vertices = [];
                	var normals = [];
                	var uvs = [];
                	var i, j;
                	var vertex = new Vector3();
                	var normal = new Vector3();
                	var P1 = new Vector3();
                	var P2 = new Vector3();
                	var B = new Vector3();
                	var T = new Vector3();
                	var N = new Vector3();
                	for ( i = 0; i <= tubularSegments; ++ i ) {
                		var u = i / tubularSegments * p * Math.PI * 2;
                		calculatePositionOnCurve( u, p, q, radius, P1 );
                		calculatePositionOnCurve( u + 0.01, p, q, radius, P2 );
                		T.subVectors( P2, P1 );
                		N.addVectors( P2, P1 );
                		B.crossVectors( T, N );
                		N.crossVectors( B, T );
                		B.normalize();
                		N.normalize();
                		for ( j = 0; j <= radialSegments; ++ j ) {
                			var v = j / radialSegments * Math.PI * 2;
                			var cx = - tube * Math.cos( v );
                			var cy = tube * Math.sin( v );
                			vertex.x = P1.x + ( cx * N.x + cy * B.x );
                			vertex.y = P1.y + ( cx * N.y + cy * B.y );
                			vertex.z = P1.z + ( cx * N.z + cy * B.z );
                			vertices.push( vertex.x, vertex.y, vertex.z );
                			normal.subVectors( vertex, P1 ).normalize();
                			normals.push( normal.x, normal.y, normal.z );
                			uvs.push( i / tubularSegments );
                			uvs.push( j / radialSegments );
                		}
                	}
                	for ( j = 1; j <= tubularSegments; j ++ ) {
                		for ( i = 1; i <= radialSegments; i ++ ) {
                			var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
                			var b = ( radialSegments + 1 ) * j + ( i - 1 );
                			var c = ( radialSegments + 1 ) * j + i;
                			var d = ( radialSegments + 1 ) * ( j - 1 ) + i;
                			indices.push( a, b, d );
                			indices.push( b, c, d );
                		}
                	}
                	this.setIndex( indices );
                	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
                	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
                	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
                	function calculatePositionOnCurve( u, p, q, radius, position ) {
                		var cu = Math.cos( u );
                		var su = Math.sin( u );
                		var quOverP = q / p * u;
                		var cs = Math.cos( quOverP );
                		position.x = radius * ( 2 + cs ) * 0.5 * cu;
                		position.y = radius * ( 2 + cs ) * su * 0.5;
                		position.z = radius * Math.sin( quOverP ) * 0.5;
                	}
                }
                TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
                TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;
                function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {
                	Geometry.call( this );
                	this.type = 'TorusGeometry';
                	this.parameters = {
                		radius: radius,
                		tube: tube,
                		radialSegments: radialSegments,
                		tubularSegments: tubularSegments,
                		arc: arc
                	};
                	this.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );
                	this.mergeVertices();
                }
                TorusGeometry.prototype = Object.create( Geometry.prototype );
                TorusGeometry.prototype.constructor = TorusGeometry;
                function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {
                	BufferGeometry.call( this );
                	this.type = 'TorusBufferGeometry';
                	this.parameters = {
                		radius: radius,
                		tube: tube,
                		radialSegments: radialSegments,
                		tubularSegments: tubularSegments,
                		arc: arc
                	};
                	radius = radius || 1;
                	tube = tube || 0.4;
                	radialSegments = Math.floor( radialSegments ) || 8;
                	tubularSegments = Math.floor( tubularSegments ) || 6;
                	arc = arc || Math.PI * 2;
                	var indices = [];
                	var vertices = [];
                	var normals = [];
                	var uvs = [];
                	var center = new Vector3();
                	var vertex = new Vector3();
                	var normal = new Vector3();
                	var j, i;
                	for ( j = 0; j <= radialSegments; j ++ ) {
                		for ( i = 0; i <= tubularSegments; i ++ ) {
                			var u = i / tubularSegments * arc;
                			var v = j / radialSegments * Math.PI * 2;
                			vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
                			vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
                			vertex.z = tube * Math.sin( v );
                			vertices.push( vertex.x, vertex.y, vertex.z );
                			center.x = radius * Math.cos( u );
                			center.y = radius * Math.sin( u );
                			normal.subVectors( vertex, center ).normalize();
                			normals.push( normal.x, normal.y, normal.z );
                			uvs.push( i / tubularSegments );
                			uvs.push( j / radialSegments );
                		}
                	}
                	for ( j = 1; j <= radialSegments; j ++ ) {
                		for ( i = 1; i <= tubularSegments; i ++ ) {
                			var a = ( tubularSegments + 1 ) * j + i - 1;
                			var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
                			var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
                			var d = ( tubularSegments + 1 ) * j + i;
                			indices.push( a, b, d );
                			indices.push( b, c, d );
                		}
                	}
                	this.setIndex( indices );
                	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
                	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
                	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
                }
                TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
                TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;
                var Earcut = {
                	triangulate: function ( data, holeIndices, dim ) {
                		dim = dim || 2;
                		var hasHoles = holeIndices && holeIndices.length,
                			outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,
                			outerNode = linkedList( data, 0, outerLen, dim, true ),
                			triangles = [];
                		if ( ! outerNode || outerNode.next === outerNode.prev ) return triangles;
                		var minX, minY, maxX, maxY, x, y, invSize;
                		if ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );
                		if ( data.length > 80 * dim ) {
                			minX = maxX = data[ 0 ];
                			minY = maxY = data[ 1 ];
                			for ( var i = dim; i < outerLen; i += dim ) {
                				x = data[ i ];
                				y = data[ i + 1 ];
                				if ( x < minX ) minX = x;
                				if ( y < minY ) minY = y;
                				if ( x > maxX ) maxX = x;
                				if ( y > maxY ) maxY = y;
                			}
                			invSize = Math.max( maxX - minX, maxY - minY );
                			invSize = invSize !== 0 ? 1 / invSize : 0;
                		}
                		earcutLinked( outerNode, triangles, dim, minX, minY, invSize );
                		return triangles;
                	}
                };
                function linkedList( data, start, end, dim, clockwise ) {
                	var i, last;
                	if ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {
                		for ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );
                	} else {
                		for ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );
                	}
                	if ( last && equals( last, last.next ) ) {
                		removeNode( last );
                		last = last.next;
                	}
                	return last;
                }
                function filterPoints( start, end ) {
                	if ( ! start ) return start;
                	if ( ! end ) end = start;
                	var p = start,
                		again;
                	do {
                		again = false;
                		if ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {
                			removeNode( p );
                			p = end = p.prev;
                			if ( p === p.next ) break;
                			again = true;
                		} else {
                			p = p.next;
                		}
                	} while ( again || p !== end );
                	return end;
                }
                function earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {
                	if ( ! ear ) return;
                	if ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );
                	var stop = ear,
                		prev, next;
                	while ( ear.prev !== ear.next ) {
                		prev = ear.prev;
                		next = ear.next;
                		if ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {
                			triangles.push( prev.i / dim );
                			triangles.push( ear.i / dim );
                			triangles.push( next.i / dim );
                			removeNode( ear );
                			ear = next.next;
                			stop = next.next;
                			continue;
                		}
                		ear = next;
                		if ( ear === stop ) {
                			if ( ! pass ) {
                				earcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );
                			} else if ( pass === 1 ) {
                				ear = cureLocalIntersections( ear, triangles, dim );
                				earcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );
                			} else if ( pass === 2 ) {
                				splitEarcut( ear, triangles, dim, minX, minY, invSize );
                			}
                			break;
                		}
                	}
                }
                function isEar( ear ) {
                	var a = ear.prev,
                		b = ear,
                		c = ear.next;
                	if ( area( a, b, c ) >= 0 ) return false;
                	var p = ear.next.next;
                	while ( p !== ear.prev ) {
                		if ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
                			area( p.prev, p, p.next ) >= 0 ) return false;
                		p = p.next;
                	}
                	return true;
                }
                function isEarHashed( ear, minX, minY, invSize ) {
                	var a = ear.prev,
                		b = ear,
                		c = ear.next;
                	if ( area( a, b, c ) >= 0 ) return false;
                	var minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),
                		minTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),
                		maxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),
                		maxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );
                	var minZ = zOrder( minTX, minTY, minX, minY, invSize ),
                		maxZ = zOrder( maxTX, maxTY, minX, minY, invSize );
                	var p = ear.prevZ,
                		n = ear.nextZ;
                	while ( p && p.z >= minZ && n && n.z <= maxZ ) {
                		if ( p !== ear.prev && p !== ear.next &&
                			pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
                			area( p.prev, p, p.next ) >= 0 ) return false;
                		p = p.prevZ;
                		if ( n !== ear.prev && n !== ear.next &&
                			pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&
                			area( n.prev, n, n.next ) >= 0 ) return false;
                		n = n.nextZ;
                	}
                	while ( p && p.z >= minZ ) {
                		if ( p !== ear.prev && p !== ear.next &&
                			pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
                			area( p.prev, p, p.next ) >= 0 ) return false;
                		p = p.prevZ;
                	}
                	while ( n && n.z <= maxZ ) {
                		if ( n !== ear.prev && n !== ear.next &&
                			pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&
                			area( n.prev, n, n.next ) >= 0 ) return false;
                		n = n.nextZ;
                	}
                	return true;
                }
                function cureLocalIntersections( start, triangles, dim ) {
                	var p = start;
                	do {
                		var a = p.prev,
                			b = p.next.next;
                		if ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {
                			triangles.push( a.i / dim );
                			triangles.push( p.i / dim );
                			triangles.push( b.i / dim );
                			removeNode( p );
                			removeNode( p.next );
                			p = start = b;
                		}
                		p = p.next;
                	} while ( p !== start );
                	return p;
                }
                function splitEarcut( start, triangles, dim, minX, minY, invSize ) {
                	var a = start;
                	do {
                		var b = a.next.next;
                		while ( b !== a.prev ) {
                			if ( a.i !== b.i && isValidDiagonal( a, b ) ) {
                				var c = splitPolygon( a, b );
                				a = filterPoints( a, a.next );
                				c = filterPoints( c, c.next );
                				earcutLinked( a, triangles, dim, minX, minY, invSize );
                				earcutLinked( c, triangles, dim, minX, minY, invSize );
                				return;
                			}
                			b = b.next;
                		}
                		a = a.next;
                	} while ( a !== start );
                }
                function eliminateHoles( data, holeIndices, outerNode, dim ) {
                	var queue = [],
                		i, len, start, end, list;
                	for ( i = 0, len = holeIndices.length; i < len; i ++ ) {
                		start = holeIndices[ i ] * dim;
                		end = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;
                		list = linkedList( data, start, end, dim, false );
                		if ( list === list.next ) list.steiner = true;
                		queue.push( getLeftmost( list ) );
                	}
                	queue.sort( compareX );
                	for ( i = 0; i < queue.length; i ++ ) {
                		eliminateHole( queue[ i ], outerNode );
                		outerNode = filterPoints( outerNode, outerNode.next );
                	}
                	return outerNode;
                }
                function compareX( a, b ) {
                	return a.x - b.x;
                }
                function eliminateHole( hole, outerNode ) {
                	outerNode = findHoleBridge( hole, outerNode );
                	if ( outerNode ) {
                		var b = splitPolygon( outerNode, hole );
                		filterPoints( b, b.next );
                	}
                }
                function findHoleBridge( hole, outerNode ) {
                	var p = outerNode,
                		hx = hole.x,
                		hy = hole.y,
                		qx = - Infinity,
                		m;
                	do {
                		if ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {
                			var x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );
                			if ( x <= hx && x > qx ) {
                				qx = x;
                				if ( x === hx ) {
                					if ( hy === p.y ) return p;
                					if ( hy === p.next.y ) return p.next;
                				}
                				m = p.x < p.next.x ? p : p.next;
                			}
                		}
                		p = p.next;
                	} while ( p !== outerNode );
                	if ( ! m ) return null;
                	if ( hx === qx ) return m.prev;
                	var stop = m,
                		mx = m.x,
                		my = m.y,
                		tanMin = Infinity,
                		tan;
                	p = m.next;
                	while ( p !== stop ) {
                		if ( hx >= p.x && p.x >= mx && hx !== p.x &&
                				pointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {
                			tan = Math.abs( hy - p.y ) / ( hx - p.x );
                			if ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {
                				m = p;
                				tanMin = tan;
                			}
                		}
                		p = p.next;
                	}
                	return m;
                }
                function indexCurve( start, minX, minY, invSize ) {
                	var p = start;
                	do {
                		if ( p.z === null ) p.z = zOrder( p.x, p.y, minX, minY, invSize );
                		p.prevZ = p.prev;
                		p.nextZ = p.next;
                		p = p.next;
                	} while ( p !== start );
                	p.prevZ.nextZ = null;
                	p.prevZ = null;
                	sortLinked( p );
                }
                function sortLinked( list ) {
                	var i, p, q, e, tail, numMerges, pSize, qSize,
                		inSize = 1;
                	do {
                		p = list;
                		list = null;
                		tail = null;
                		numMerges = 0;
                		while ( p ) {
                			numMerges ++;
                			q = p;
                			pSize = 0;
                			for ( i = 0; i < inSize; i ++ ) {
                				pSize ++;
                				q = q.nextZ;
                				if ( ! q ) break;
                			}
                			qSize = inSize;
                			while ( pSize > 0 || ( qSize > 0 && q ) ) {
                				if ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {
                					e = p;
                					p = p.nextZ;
                					pSize --;
                				} else {
                					e = q;
                					q = q.nextZ;
                					qSize --;
                				}
                				if ( tail ) tail.nextZ = e;
                				else list = e;
                				e.prevZ = tail;
                				tail = e;
                			}
                			p = q;
                		}
                		tail.nextZ = null;
                		inSize *= 2;
                	} while ( numMerges > 1 );
                	return list;
                }
                function zOrder( x, y, minX, minY, invSize ) {
                	x = 32767 * ( x - minX ) * invSize;
                	y = 32767 * ( y - minY ) * invSize;
                	x = ( x | ( x << 8 ) ) & 0x00FF00FF;
                	x = ( x | ( x << 4 ) ) & 0x0F0F0F0F;
                	x = ( x | ( x << 2 ) ) & 0x33333333;
                	x = ( x | ( x << 1 ) ) & 0x55555555;
                	y = ( y | ( y << 8 ) ) & 0x00FF00FF;
                	y = ( y | ( y << 4 ) ) & 0x0F0F0F0F;
                	y = ( y | ( y << 2 ) ) & 0x33333333;
                	y = ( y | ( y << 1 ) ) & 0x55555555;
                	return x | ( y << 1 );
                }
                function getLeftmost( start ) {
                	var p = start,
                		leftmost = start;
                	do {
                		if ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) leftmost = p;
                		p = p.next;
                	} while ( p !== start );
                	return leftmost;
                }
                function pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {
                	return ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&
                		   ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&
                		   ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;
                }
                function isValidDiagonal( a, b ) {
                	return a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&
                		   locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );
                }
                function area( p, q, r ) {
                	return ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );
                }
                function equals( p1, p2 ) {
                	return p1.x === p2.x && p1.y === p2.y;
                }
                function intersects( p1, q1, p2, q2 ) {
                	if ( ( equals( p1, p2 ) && equals( q1, q2 ) ) ||
                		( equals( p1, q2 ) && equals( p2, q1 ) ) ) return true;
                	return area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&
                		   area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;
                }
                function intersectsPolygon( a, b ) {
                	var p = a;
                	do {
                		if ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
                				intersects( p, p.next, a, b ) ) return true;
                		p = p.next;
                	} while ( p !== a );
                	return false;
                }
                function locallyInside( a, b ) {
                	return area( a.prev, a, a.next ) < 0 ?
                		area( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :
                		area( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;
                }
                function middleInside( a, b ) {
                	var p = a,
                		inside = false,
                		px = ( a.x + b.x ) / 2,
                		py = ( a.y + b.y ) / 2;
                	do {
                		if ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&
                				( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )
                			inside = ! inside;
                		p = p.next;
                	} while ( p !== a );
                	return inside;
                }
                function splitPolygon( a, b ) {
                	var a2 = new Node( a.i, a.x, a.y ),
                		b2 = new Node( b.i, b.x, b.y ),
                		an = a.next,
                		bp = b.prev;
                	a.next = b;
                	b.prev = a;
                	a2.next = an;
                	an.prev = a2;
                	b2.next = a2;
                	a2.prev = b2;
                	bp.next = b2;
                	b2.prev = bp;
                	return b2;
                }
                function insertNode( i, x, y, last ) {
                	var p = new Node( i, x, y );
                	if ( ! last ) {
                		p.prev = p;
                		p.next = p;
                	} else {
                		p.next = last.next;
                		p.prev = last;
                		last.next.prev = p;
                		last.next = p;
                	}
                	return p;
                }
                function removeNode( p ) {
                	p.next.prev = p.prev;
                	p.prev.next = p.next;
                	if ( p.prevZ ) p.prevZ.nextZ = p.nextZ;
                	if ( p.nextZ ) p.nextZ.prevZ = p.prevZ;
                }
                function Node( i, x, y ) {
                	this.i = i;
                	this.x = x;
                	this.y = y;
                	this.prev = null;
                	this.next = null;
                	this.z = null;
                	this.prevZ = null;
                	this.nextZ = null;
                	this.steiner = false;
                }
                function signedArea( data, start, end, dim ) {
                	var sum = 0;
                	for ( var i = start, j = end - dim; i < end; i += dim ) {
                		sum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );
                		j = i;
                	}
                	return sum;
                }
                var ShapeUtils = {
                	area: function ( contour ) {
                		var n = contour.length;
                		var a = 0.0;
                		for ( var p = n - 1, q = 0; q < n; p = q ++ ) {
                			a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;
                		}
                		return a * 0.5;
                	},
                	isClockWise: function ( pts ) {
                		return ShapeUtils.area( pts ) < 0;
                	},
                	triangulateShape: function ( contour, holes ) {
                		var vertices = [];
                		var holeIndices = [];
                		var faces = [];
                		removeDupEndPts( contour );
                		addContour( vertices, contour );
                		var holeIndex = contour.length;
                		holes.forEach( removeDupEndPts );
                		for ( var i = 0; i < holes.length; i ++ ) {
                			holeIndices.push( holeIndex );
                			holeIndex += holes[ i ].length;
                			addContour( vertices, holes[ i ] );
                		}
                		var triangles = Earcut.triangulate( vertices, holeIndices );
                		for ( var i = 0; i < triangles.length; i += 3 ) {
                			faces.push( triangles.slice( i, i + 3 ) );
                		}
                		return faces;
                	}
                };
                function removeDupEndPts( points ) {
                	var l = points.length;
                	if ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {
                		points.pop();
                	}
                }
                function addContour( vertices, contour ) {
                	for ( var i = 0; i < contour.length; i ++ ) {
                		vertices.push( contour[ i ].x );
                		vertices.push( contour[ i ].y );
                	}
                }
                function ExtrudeGeometry( shapes, options ) {
                	Geometry.call( this );
                	this.type = 'ExtrudeGeometry';
                	this.parameters = {
                		shapes: shapes,
                		options: options
                	};
                	this.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );
                	this.mergeVertices();
                }
                ExtrudeGeometry.prototype = Object.create( Geometry.prototype );
                ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;
                ExtrudeGeometry.prototype.toJSON = function () {
                	var data = Geometry.prototype.toJSON.call( this );
                	var shapes = this.parameters.shapes;
                	var options = this.parameters.options;
                	return toJSON( shapes, options, data );
                };
                function ExtrudeBufferGeometry( shapes, options ) {
                	BufferGeometry.call( this );
                	this.type = 'ExtrudeBufferGeometry';
                	this.parameters = {
                		shapes: shapes,
                		options: options
                	};
                	shapes = Array.isArray( shapes ) ? shapes : [ shapes ];
                	var scope = this;
                	var verticesArray = [];
                	var uvArray = [];
                	for ( var i = 0, l = shapes.length; i < l; i ++ ) {
                		var shape = shapes[ i ];
                		addShape( shape );
                	}
                	this.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );
                	this.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );
                	this.computeVertexNormals();
                	function addShape( shape ) {
                		var placeholder = [];
                		var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
                		var steps = options.steps !== undefined ? options.steps : 1;
                		var depth = options.depth !== undefined ? options.depth : 100;
                		var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;
                		var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;
                		var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;
                		var bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;
                		var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;
                		var extrudePath = options.extrudePath;
                		var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;
                		if ( options.amount !== undefined ) {
                			console.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );
                			depth = options.amount;
                		}
                		var extrudePts, extrudeByPath = false;
                		var splineTube, binormal, normal, position2;
                		if ( extrudePath ) {
                			extrudePts = extrudePath.getSpacedPoints( steps );
                			extrudeByPath = true;
                			bevelEnabled = false;
                			splineTube = extrudePath.computeFrenetFrames( steps, false );
                			binormal = new Vector3();
                			normal = new Vector3();
                			position2 = new Vector3();
                		}
                		if ( ! bevelEnabled ) {
                			bevelSegments = 0;
                			bevelThickness = 0;
                			bevelSize = 0;
                			bevelOffset = 0;
                		}
                		var ahole, h, hl;
                		var shapePoints = shape.extractPoints( curveSegments );
                		var vertices = shapePoints.shape;
                		var holes = shapePoints.holes;
                		var reverse = ! ShapeUtils.isClockWise( vertices );
                		if ( reverse ) {
                			vertices = vertices.reverse();
                			for ( h = 0, hl = holes.length; h < hl; h ++ ) {
                				ahole = holes[ h ];
                				if ( ShapeUtils.isClockWise( ahole ) ) {
                					holes[ h ] = ahole.reverse();
                				}
                			}
                		}
                		var faces = ShapeUtils.triangulateShape( vertices, holes );
                		var contour = vertices;
                		for ( h = 0, hl = holes.length; h < hl; h ++ ) {
                			ahole = holes[ h ];
                			vertices = vertices.concat( ahole );
                		}
                		function scalePt2( pt, vec, size ) {
                			if ( ! vec ) console.error( "THREE.ExtrudeGeometry: vec does not exist" );
                			return vec.clone().multiplyScalar( size ).add( pt );
                		}
                		var b, bs, t, z,
                			vert, vlen = vertices.length,
                			face, flen = faces.length;
                		function getBevelVec( inPt, inPrev, inNext ) {
                			var v_trans_x, v_trans_y, shrink_by;
                			var v_prev_x = inPt.x - inPrev.x,
                				v_prev_y = inPt.y - inPrev.y;
                			var v_next_x = inNext.x - inPt.x,
                				v_next_y = inNext.y - inPt.y;
                			var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );
                			var collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );
                			if ( Math.abs( collinear0 ) > Number.EPSILON ) {
                				var v_prev_len = Math.sqrt( v_prev_lensq );
                				var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );
                				var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
                				var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );
                				var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
                				var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );
                				var sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
                						( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /
                					( v_prev_x * v_next_y - v_prev_y * v_next_x );
                				v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
                				v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );
                				var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
                				if ( v_trans_lensq <= 2 ) {
                					return new Vector2( v_trans_x, v_trans_y );
                				} else {
                					shrink_by = Math.sqrt( v_trans_lensq / 2 );
                				}
                			} else {
                				var direction_eq = false;
                				if ( v_prev_x > Number.EPSILON ) {
                					if ( v_next_x > Number.EPSILON ) {
                						direction_eq = true;
                					}
                				} else {
                					if ( v_prev_x < - Number.EPSILON ) {
                						if ( v_next_x < - Number.EPSILON ) {
                							direction_eq = true;
                						}
                					} else {
                						if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {
                							direction_eq = true;
                						}
                					}
                				}
                				if ( direction_eq ) {
                					v_trans_x = - v_prev_y;
                					v_trans_y = v_prev_x;
                					shrink_by = Math.sqrt( v_prev_lensq );
                				} else {
                					v_trans_x = v_prev_x;
                					v_trans_y = v_prev_y;
                					shrink_by = Math.sqrt( v_prev_lensq / 2 );
                				}
                			}
                			return new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );
                		}
                		var contourMovements = [];
                		for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {
                			if ( j === il ) j = 0;
                			if ( k === il ) k = 0;
                			contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );
                		}
                		var holesMovements = [],
                			oneHoleMovements, verticesMovements = contourMovements.concat();
                		for ( h = 0, hl = holes.length; h < hl; h ++ ) {
                			ahole = holes[ h ];
                			oneHoleMovements = [];
                			for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {
                				if ( j === il ) j = 0;
                				if ( k === il ) k = 0;
                				oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );
                			}
                			holesMovements.push( oneHoleMovements );
                			verticesMovements = verticesMovements.concat( oneHoleMovements );
                		}
                		for ( b = 0; b < bevelSegments; b ++ ) {
                			t = b / bevelSegments;
                			z = bevelThickness * Math.cos( t * Math.PI / 2 );
                			bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;
                			for ( i = 0, il = contour.length; i < il; i ++ ) {
                				vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
                				v( vert.x, vert.y, - z );
                			}
                			for ( h = 0, hl = holes.length; h < hl; h ++ ) {
                				ahole = holes[ h ];
                				oneHoleMovements = holesMovements[ h ];
                				for ( i = 0, il = ahole.length; i < il; i ++ ) {
                					vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );
                					v( vert.x, vert.y, - z );
                				}
                			}
                		}
                		bs = bevelSize + bevelOffset;
                		for ( i = 0; i < vlen; i ++ ) {
                			vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];
                			if ( ! extrudeByPath ) {
                				v( vert.x, vert.y, 0 );
                			} else {
                				normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
                				binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );
                				position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );
                				v( position2.x, position2.y, position2.z );
                			}
                		}
                		var s;
                		for ( s = 1; s <= steps; s ++ ) {
                			for ( i = 0; i < vlen; i ++ ) {
                				vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];
                				if ( ! extrudeByPath ) {
                					v( vert.x, vert.y, depth / steps * s );
                				} else {
                					normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
                					binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );
                					position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );
                					v( position2.x, position2.y, position2.z );
                				}
                			}
                		}
                		for ( b = bevelSegments - 1; b >= 0; b -- ) {
                			t = b / bevelSegments;
                			z = bevelThickness * Math.cos( t * Math.PI / 2 );
                			bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;
                			for ( i = 0, il = contour.length; i < il; i ++ ) {
                				vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
                				v( vert.x, vert.y, depth + z );
                			}
                			for ( h = 0, hl = holes.length; h < hl; h ++ ) {
                				ahole = holes[ h ];
                				oneHoleMovements = holesMovements[ h ];
                				for ( i = 0, il = ahole.length; i < il; i ++ ) {
                					vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );
                					if ( ! extrudeByPath ) {
                						v( vert.x, vert.y, depth + z );
                					} else {
                						v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );
                					}
                				}
                			}
                		}
                		buildLidFaces();
                		buildSideFaces();
                		function buildLidFaces() {
                			var start = verticesArray.length / 3;
                			if ( bevelEnabled ) {
                				var layer = 0;
                				var offset = vlen * layer;
                				for ( i = 0; i < flen; i ++ ) {
                					face = faces[ i ];
                					f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );
                				}
                				layer = steps + bevelSegments * 2;
                				offset = vlen * layer;
                				for ( i = 0; i < flen; i ++ ) {
                					face = faces[ i ];
                					f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );
                				}
                			} else {
                				for ( i = 0; i < flen; i ++ ) {
                					face = faces[ i ];
                					f3( face[ 2 ], face[ 1 ], face[ 0 ] );
                				}
                				for ( i = 0; i < flen; i ++ ) {
                					face = faces[ i ];
                					f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );
                				}
                			}
                			scope.addGroup( start, verticesArray.length / 3 - start, 0 );
                		}
                		function buildSideFaces() {
                			var start = verticesArray.length / 3;
                			var layeroffset = 0;
                			sidewalls( contour, layeroffset );
                			layeroffset += contour.length;
                			for ( h = 0, hl = holes.length; h < hl; h ++ ) {
                				ahole = holes[ h ];
                				sidewalls( ahole, layeroffset );
                				layeroffset += ahole.length;
                			}
                			scope.addGroup( start, verticesArray.length / 3 - start, 1 );
                		}
                		function sidewalls( contour, layeroffset ) {
                			var j, k;
                			i = contour.length;
                			while ( -- i >= 0 ) {
                				j = i;
                				k = i - 1;
                				if ( k < 0 ) k = contour.length - 1;
                				var s = 0,
                					sl = steps + bevelSegments * 2;
                				for ( s = 0; s < sl; s ++ ) {
                					var slen1 = vlen * s;
                					var slen2 = vlen * ( s + 1 );
                					var a = layeroffset + j + slen1,
                						b = layeroffset + k + slen1,
                						c = layeroffset + k + slen2,
                						d = layeroffset + j + slen2;
                					f4( a, b, c, d );
                				}
                			}
                		}
                		function v( x, y, z ) {
                			placeholder.push( x );
                			placeholder.push( y );
                			placeholder.push( z );
                		}
                		function f3( a, b, c ) {
                			addVertex( a );
                			addVertex( b );
                			addVertex( c );
                			var nextIndex = verticesArray.length / 3;
                			var uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );
                			addUV( uvs[ 0 ] );
                			addUV( uvs[ 1 ] );
                			addUV( uvs[ 2 ] );
                		}
                		function f4( a, b, c, d ) {
                			addVertex( a );
                			addVertex( b );
                			addVertex( d );
                			addVertex( b );
                			addVertex( c );
                			addVertex( d );
                			var nextIndex = verticesArray.length / 3;
                			var uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );
                			addUV( uvs[ 0 ] );
                			addUV( uvs[ 1 ] );
                			addUV( uvs[ 3 ] );
                			addUV( uvs[ 1 ] );
                			addUV( uvs[ 2 ] );
                			addUV( uvs[ 3 ] );
                		}
                		function addVertex( index ) {
                			verticesArray.push( placeholder[ index * 3 + 0 ] );
                			verticesArray.push( placeholder[ index * 3 + 1 ] );
                			verticesArray.push( placeholder[ index * 3 + 2 ] );
                		}
                		function addUV( vector2 ) {
                			uvArray.push( vector2.x );
                			uvArray.push( vector2.y );
                		}
                	}
                }
                ExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
                ExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;
                ExtrudeBufferGeometry.prototype.toJSON = function () {
                	var data = BufferGeometry.prototype.toJSON.call( this );
                	var shapes = this.parameters.shapes;
                	var options = this.parameters.options;
                	return toJSON( shapes, options, data );
                };
                var WorldUVGenerator = {
                	generateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {
                		var a_x = vertices[ indexA * 3 ];
                		var a_y = vertices[ indexA * 3 + 1 ];
                		var b_x = vertices[ indexB * 3 ];
                		var b_y = vertices[ indexB * 3 + 1 ];
                		var c_x = vertices[ indexC * 3 ];
                		var c_y = vertices[ indexC * 3 + 1 ];
                		return [
                			new Vector2( a_x, a_y ),
                			new Vector2( b_x, b_y ),
                			new Vector2( c_x, c_y )
                		];
                	},
                	generateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {
                		var a_x = vertices[ indexA * 3 ];
                		var a_y = vertices[ indexA * 3 + 1 ];
                		var a_z = vertices[ indexA * 3 + 2 ];
                		var b_x = vertices[ indexB * 3 ];
                		var b_y = vertices[ indexB * 3 + 1 ];
                		var b_z = vertices[ indexB * 3 + 2 ];
                		var c_x = vertices[ indexC * 3 ];
                		var c_y = vertices[ indexC * 3 + 1 ];
                		var c_z = vertices[ indexC * 3 + 2 ];
                		var d_x = vertices[ indexD * 3 ];
                		var d_y = vertices[ indexD * 3 + 1 ];
                		var d_z = vertices[ indexD * 3 + 2 ];
                		if ( Math.abs( a_y - b_y ) < 0.01 ) {
                			return [
                				new Vector2( a_x, 1 - a_z ),
                				new Vector2( b_x, 1 - b_z ),
                				new Vector2( c_x, 1 - c_z ),
                				new Vector2( d_x, 1 - d_z )
                			];
                		} else {
                			return [
                				new Vector2( a_y, 1 - a_z ),
                				new Vector2( b_y, 1 - b_z ),
                				new Vector2( c_y, 1 - c_z ),
                				new Vector2( d_y, 1 - d_z )
                			];
                		}
                	}
                };
                function toJSON( shapes, options, data ) {
                	data.shapes = [];
                	if ( Array.isArray( shapes ) ) {
                		for ( var i = 0, l = shapes.length; i < l; i ++ ) {
                			var shape = shapes[ i ];
                			data.shapes.push( shape.uuid );
                		}
                	} else {
                		data.shapes.push( shapes.uuid );
                	}
                	if ( options.extrudePath !== undefined ) data.options.extrudePath = options.extrudePath.toJSON();
                	return data;
                }
                function TextGeometry( text, parameters ) {
                	Geometry.call( this );
                	this.type = 'TextGeometry';
                	this.parameters = {
                		text: text,
                		parameters: parameters
                	};
                	this.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );
                	this.mergeVertices();
                }
                TextGeometry.prototype = Object.create( Geometry.prototype );
                TextGeometry.prototype.constructor = TextGeometry;
                function TextBufferGeometry( text, parameters ) {
                	parameters = parameters || {};
                	var font = parameters.font;
                	if ( ! ( font && font.isFont ) ) {
                		console.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );
                		return new Geometry();
                	}
                	var shapes = font.generateShapes( text, parameters.size );
                	parameters.depth = parameters.height !== undefined ? parameters.height : 50;
                	if ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;
                	if ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;
                	if ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;
                	ExtrudeBufferGeometry.call( this, shapes, parameters );
                	this.type = 'TextBufferGeometry';
                }
                TextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );
                TextBufferGeometry.prototype.constructor = TextBufferGeometry;
                function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {
                	Geometry.call( this );
                	this.type = 'SphereGeometry';
                	this.parameters = {
                		radius: radius,
                		widthSegments: widthSegments,
                		heightSegments: heightSegments,
                		phiStart: phiStart,
                		phiLength: phiLength,
                		thetaStart: thetaStart,
                		thetaLength: thetaLength
                	};
                	this.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );
                	this.mergeVertices();
                }
                SphereGeometry.prototype = Object.create( Geometry.prototype );
                SphereGeometry.prototype.constructor = SphereGeometry;
                function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {
                	BufferGeometry.call( this );
                	this.type = 'SphereBufferGeometry';
                	this.parameters = {
                		radius: radius,
                		widthSegments: widthSegments,
                		heightSegments: heightSegments,
                		phiStart: phiStart,
                		phiLength: phiLength,
                		thetaStart: thetaStart,
                		thetaLength: thetaLength
                	};
                	radius = radius || 1;
                	widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
                	heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );
                	phiStart = phiStart !== undefined ? phiStart : 0;
                	phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;
                	thetaStart = thetaStart !== undefined ? thetaStart : 0;
                	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;
                	var thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );
                	var ix, iy;
                	var index = 0;
                	var grid = [];
                	var vertex = new Vector3();
                	var normal = new Vector3();
                	var indices = [];
                	var vertices = [];
                	var normals = [];
                	var uvs = [];
                	for ( iy = 0; iy <= heightSegments; iy ++ ) {
                		var verticesRow = [];
                		var v = iy / heightSegments;
                		var uOffset = 0;
                		if ( iy == 0 && thetaStart == 0 ) {
                			uOffset = 0.5 / widthSegments;
                		} else if ( iy == heightSegments && thetaEnd == Math.PI ) {
                			uOffset = - 0.5 / widthSegments;
                		}
                		for ( ix = 0; ix <= widthSegments; ix ++ ) {
                			var u = ix / widthSegments;
                			vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
                			vertex.y = radius * Math.cos( thetaStart + v * thetaLength );
                			vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
                			vertices.push( vertex.x, vertex.y, vertex.z );
                			normal.copy( vertex ).normalize();
                			normals.push( normal.x, normal.y, normal.z );
                			uvs.push( u + uOffset, 1 - v );
                			verticesRow.push( index ++ );
                		}
                		grid.push( verticesRow );
                	}
                	for ( iy = 0; iy < heightSegments; iy ++ ) {
                		for ( ix = 0; ix < widthSegments; ix ++ ) {
                			var a = grid[ iy ][ ix + 1 ];
                			var b = grid[ iy ][ ix ];
                			var c = grid[ iy + 1 ][ ix ];
                			var d = grid[ iy + 1 ][ ix + 1 ];
                			if ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );
                			if ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );
                		}
                	}
                	this.setIndex( indices );
                	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
                	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
                	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
                }
                SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
                SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;
                function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {
                	Geometry.call( this );
                	this.type = 'RingGeometry';
                	this.parameters = {
                		innerRadius: innerRadius,
                		outerRadius: outerRadius,
                		thetaSegments: thetaSegments,
                		phiSegments: phiSegments,
                		thetaStart: thetaStart,
                		thetaLength: thetaLength
                	};
                	this.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );
                	this.mergeVertices();
                }
                RingGeometry.prototype = Object.create( Geometry.prototype );
                RingGeometry.prototype.constructor = RingGeometry;
                function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {
                	BufferGeometry.call( this );
                	this.type = 'RingBufferGeometry';
                	this.parameters = {
                		innerRadius: innerRadius,
                		outerRadius: outerRadius,
                		thetaSegments: thetaSegments,
                		phiSegments: phiSegments,
                		thetaStart: thetaStart,
                		thetaLength: thetaLength
                	};
                	innerRadius = innerRadius || 0.5;
                	outerRadius = outerRadius || 1;
                	thetaStart = thetaStart !== undefined ? thetaStart : 0;
                	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;
                	thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
                	phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;
                	var indices = [];
                	var vertices = [];
                	var normals = [];
                	var uvs = [];
                	var segment;
                	var radius = innerRadius;
                	var radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
                	var vertex = new Vector3();
                	var uv = new Vector2();
                	var j, i;
                	for ( j = 0; j <= phiSegments; j ++ ) {
                		for ( i = 0; i <= thetaSegments; i ++ ) {
                			segment = thetaStart + i / thetaSegments * thetaLength;
                			vertex.x = radius * Math.cos( segment );
                			vertex.y = radius * Math.sin( segment );
                			vertices.push( vertex.x, vertex.y, vertex.z );
                			normals.push( 0, 0, 1 );
                			uv.x = ( vertex.x / outerRadius + 1 ) / 2;
                			uv.y = ( vertex.y / outerRadius + 1 ) / 2;
                			uvs.push( uv.x, uv.y );
                		}
                		radius += radiusStep;
                	}
                	for ( j = 0; j < phiSegments; j ++ ) {
                		var thetaSegmentLevel = j * ( thetaSegments + 1 );
                		for ( i = 0; i < thetaSegments; i ++ ) {
                			segment = i + thetaSegmentLevel;
                			var a = segment;
                			var b = segment + thetaSegments + 1;
                			var c = segment + thetaSegments + 2;
                			var d = segment + 1;
                			indices.push( a, b, d );
                			indices.push( b, c, d );
                		}
                	}
                	this.setIndex( indices );
                	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
                	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
                	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
                }
                RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
                RingBufferGeometry.prototype.constructor = RingBufferGeometry;
                function LatheGeometry( points, segments, phiStart, phiLength ) {
                	Geometry.call( this );
                	this.type = 'LatheGeometry';
                	this.parameters = {
                		points: points,
                		segments: segments,
                		phiStart: phiStart,
                		phiLength: phiLength
                	};
                	this.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );
                	this.mergeVertices();
                }
                LatheGeometry.prototype = Object.create( Geometry.prototype );
                LatheGeometry.prototype.constructor = LatheGeometry;
                function LatheBufferGeometry( points, segments, phiStart, phiLength ) {
                	BufferGeometry.call( this );
                	this.type = 'LatheBufferGeometry';
                	this.parameters = {
                		points: points,
                		segments: segments,
                		phiStart: phiStart,
                		phiLength: phiLength
                	};
                	segments = Math.floor( segments ) || 12;
                	phiStart = phiStart || 0;
                	phiLength = phiLength || Math.PI * 2;
                	phiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );
                	var indices = [];
                	var vertices = [];
                	var uvs = [];
                	var base;
                	var inverseSegments = 1.0 / segments;
                	var vertex = new Vector3();
                	var uv = new Vector2();
                	var i, j;
                	for ( i = 0; i <= segments; i ++ ) {
                		var phi = phiStart + i * inverseSegments * phiLength;
                		var sin = Math.sin( phi );
                		var cos = Math.cos( phi );
                		for ( j = 0; j <= ( points.length - 1 ); j ++ ) {
                			vertex.x = points[ j ].x * sin;
                			vertex.y = points[ j ].y;
                			vertex.z = points[ j ].x * cos;
                			vertices.push( vertex.x, vertex.y, vertex.z );
                			uv.x = i / segments;
                			uv.y = j / ( points.length - 1 );
                			uvs.push( uv.x, uv.y );
                		}
                	}
                	for ( i = 0; i < segments; i ++ ) {
                		for ( j = 0; j < ( points.length - 1 ); j ++ ) {
                			base = j + i * points.length;
                			var a = base;
                			var b = base + points.length;
                			var c = base + points.length + 1;
                			var d = base + 1;
                			indices.push( a, b, d );
                			indices.push( b, c, d );
                		}
                	}
                	this.setIndex( indices );
                	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
                	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
                	this.computeVertexNormals();
                	if ( phiLength === Math.PI * 2 ) {
                		var normals = this.attributes.normal.array;
                		var n1 = new Vector3();
                		var n2 = new Vector3();
                		var n = new Vector3();
                		base = segments * points.length * 3;
                		for ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {
                			n1.x = normals[ j + 0 ];
                			n1.y = normals[ j + 1 ];
                			n1.z = normals[ j + 2 ];
                			n2.x = normals[ base + j + 0 ];
                			n2.y = normals[ base + j + 1 ];
                			n2.z = normals[ base + j + 2 ];
                			n.addVectors( n1, n2 ).normalize();
                			normals[ j + 0 ] = normals[ base + j + 0 ] = n.x;
                			normals[ j + 1 ] = normals[ base + j + 1 ] = n.y;
                			normals[ j + 2 ] = normals[ base + j + 2 ] = n.z;
                		}
                	}
                }
                LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
                LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;
                function ShapeGeometry( shapes, curveSegments ) {
                	Geometry.call( this );
                	this.type = 'ShapeGeometry';
                	if ( typeof curveSegments === 'object' ) {
                		console.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );
                		curveSegments = curveSegments.curveSegments;
                	}
                	this.parameters = {
                		shapes: shapes,
                		curveSegments: curveSegments
                	};
                	this.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );
                	this.mergeVertices();
                }
                ShapeGeometry.prototype = Object.create( Geometry.prototype );
                ShapeGeometry.prototype.constructor = ShapeGeometry;
                ShapeGeometry.prototype.toJSON = function () {
                	var data = Geometry.prototype.toJSON.call( this );
                	var shapes = this.parameters.shapes;
                	return toJSON$1( shapes, data );
                };
                function ShapeBufferGeometry( shapes, curveSegments ) {
                	BufferGeometry.call( this );
                	this.type = 'ShapeBufferGeometry';
                	this.parameters = {
                		shapes: shapes,
                		curveSegments: curveSegments
                	};
                	curveSegments = curveSegments || 12;
                	var indices = [];
                	var vertices = [];
                	var normals = [];
                	var uvs = [];
                	var groupStart = 0;
                	var groupCount = 0;
                	if ( Array.isArray( shapes ) === false ) {
                		addShape( shapes );
                	} else {
                		for ( var i = 0; i < shapes.length; i ++ ) {
                			addShape( shapes[ i ] );
                			this.addGroup( groupStart, groupCount, i );
                			groupStart += groupCount;
                			groupCount = 0;
                		}
                	}
                	this.setIndex( indices );
                	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
                	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
                	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
                	function addShape( shape ) {
                		var i, l, shapeHole;
                		var indexOffset = vertices.length / 3;
                		var points = shape.extractPoints( curveSegments );
                		var shapeVertices = points.shape;
                		var shapeHoles = points.holes;
                		if ( ShapeUtils.isClockWise( shapeVertices ) === false ) {
                			shapeVertices = shapeVertices.reverse();
                		}
                		for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {
                			shapeHole = shapeHoles[ i ];
                			if ( ShapeUtils.isClockWise( shapeHole ) === true ) {
                				shapeHoles[ i ] = shapeHole.reverse();
                			}
                		}
                		var faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );
                		for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {
                			shapeHole = shapeHoles[ i ];
                			shapeVertices = shapeVertices.concat( shapeHole );
                		}
                		for ( i = 0, l = shapeVertices.length; i < l; i ++ ) {
                			var vertex = shapeVertices[ i ];
                			vertices.push( vertex.x, vertex.y, 0 );
                			normals.push( 0, 0, 1 );
                			uvs.push( vertex.x, vertex.y );
                		}
                		for ( i = 0, l = faces.length; i < l; i ++ ) {
                			var face = faces[ i ];
                			var a = face[ 0 ] + indexOffset;
                			var b = face[ 1 ] + indexOffset;
                			var c = face[ 2 ] + indexOffset;
                			indices.push( a, b, c );
                			groupCount += 3;
                		}
                	}
                }
                ShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
                ShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;
                ShapeBufferGeometry.prototype.toJSON = function () {
                	var data = BufferGeometry.prototype.toJSON.call( this );
                	var shapes = this.parameters.shapes;
                	return toJSON$1( shapes, data );
                };
                function toJSON$1( shapes, data ) {
                	data.shapes = [];
                	if ( Array.isArray( shapes ) ) {
                		for ( var i = 0, l = shapes.length; i < l; i ++ ) {
                			var shape = shapes[ i ];
                			data.shapes.push( shape.uuid );
                		}
                	} else {
                		data.shapes.push( shapes.uuid );
                	}
                	return data;
                }
                function EdgesGeometry( geometry, thresholdAngle ) {
                	BufferGeometry.call( this );
                	this.type = 'EdgesGeometry';
                	this.parameters = {
                		thresholdAngle: thresholdAngle
                	};
                	thresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;
                	var vertices = [];
                	var thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );
                	var edge = [ 0, 0 ], edges = {}, edge1, edge2;
                	var key, keys = [ 'a', 'b', 'c' ];
                	var geometry2;
                	if ( geometry.isBufferGeometry ) {
                		geometry2 = new Geometry();
                		geometry2.fromBufferGeometry( geometry );
                	} else {
                		geometry2 = geometry.clone();
                	}
                	geometry2.mergeVertices();
                	geometry2.computeFaceNormals();
                	var sourceVertices = geometry2.vertices;
                	var faces = geometry2.faces;
                	for ( var i = 0, l = faces.length; i < l; i ++ ) {
                		var face = faces[ i ];
                		for ( var j = 0; j < 3; j ++ ) {
                			edge1 = face[ keys[ j ] ];
                			edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
                			edge[ 0 ] = Math.min( edge1, edge2 );
                			edge[ 1 ] = Math.max( edge1, edge2 );
                			key = edge[ 0 ] + ',' + edge[ 1 ];
                			if ( edges[ key ] === undefined ) {
                				edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };
                			} else {
                				edges[ key ].face2 = i;
                			}
                		}
                	}
                	for ( key in edges ) {
                		var e = edges[ key ];
                		if ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {
                			var vertex = sourceVertices[ e.index1 ];
                			vertices.push( vertex.x, vertex.y, vertex.z );
                			vertex = sourceVertices[ e.index2 ];
                			vertices.push( vertex.x, vertex.y, vertex.z );
                		}
                	}
                	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
                }
                EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );
                EdgesGeometry.prototype.constructor = EdgesGeometry;
                function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
                	Geometry.call( this );
                	this.type = 'CylinderGeometry';
                	this.parameters = {
                		radiusTop: radiusTop,
                		radiusBottom: radiusBottom,
                		height: height,
                		radialSegments: radialSegments,
                		heightSegments: heightSegments,
                		openEnded: openEnded,
                		thetaStart: thetaStart,
                		thetaLength: thetaLength
                	};
                	this.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );
                	this.mergeVertices();
                }
                CylinderGeometry.prototype = Object.create( Geometry.prototype );
                CylinderGeometry.prototype.constructor = CylinderGeometry;
                function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
                	BufferGeometry.call( this );
                	this.type = 'CylinderBufferGeometry';
                	this.parameters = {
                		radiusTop: radiusTop,
                		radiusBottom: radiusBottom,
                		height: height,
                		radialSegments: radialSegments,
                		heightSegments: heightSegments,
                		openEnded: openEnded,
                		thetaStart: thetaStart,
                		thetaLength: thetaLength
                	};
                	var scope = this;
                	radiusTop = radiusTop !== undefined ? radiusTop : 1;
                	radiusBottom = radiusBottom !== undefined ? radiusBottom : 1;
                	height = height || 1;
                	radialSegments = Math.floor( radialSegments ) || 8;
                	heightSegments = Math.floor( heightSegments ) || 1;
                	openEnded = openEnded !== undefined ? openEnded : false;
                	thetaStart = thetaStart !== undefined ? thetaStart : 0.0;
                	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;
                	var indices = [];
                	var vertices = [];
                	var normals = [];
                	var uvs = [];
                	var index = 0;
                	var indexArray = [];
                	var halfHeight = height / 2;
                	var groupStart = 0;
                	generateTorso();
                	if ( openEnded === false ) {
                		if ( radiusTop > 0 ) generateCap( true );
                		if ( radiusBottom > 0 ) generateCap( false );
                	}
                	this.setIndex( indices );
                	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
                	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
                	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
                	function generateTorso() {
                		var x, y;
                		var normal = new Vector3();
                		var vertex = new Vector3();
                		var groupCount = 0;
                		var slope = ( radiusBottom - radiusTop ) / height;
                		for ( y = 0; y <= heightSegments; y ++ ) {
                			var indexRow = [];
                			var v = y / heightSegments;
                			var radius = v * ( radiusBottom - radiusTop ) + radiusTop;
                			for ( x = 0; x <= radialSegments; x ++ ) {
                				var u = x / radialSegments;
                				var theta = u * thetaLength + thetaStart;
                				var sinTheta = Math.sin( theta );
                				var cosTheta = Math.cos( theta );
                				vertex.x = radius * sinTheta;
                				vertex.y = - v * height + halfHeight;
                				vertex.z = radius * cosTheta;
                				vertices.push( vertex.x, vertex.y, vertex.z );
                				normal.set( sinTheta, slope, cosTheta ).normalize();
                				normals.push( normal.x, normal.y, normal.z );
                				uvs.push( u, 1 - v );
                				indexRow.push( index ++ );
                			}
                			indexArray.push( indexRow );
                		}
                		for ( x = 0; x < radialSegments; x ++ ) {
                			for ( y = 0; y < heightSegments; y ++ ) {
                				var a = indexArray[ y ][ x ];
                				var b = indexArray[ y + 1 ][ x ];
                				var c = indexArray[ y + 1 ][ x + 1 ];
                				var d = indexArray[ y ][ x + 1 ];
                				indices.push( a, b, d );
                				indices.push( b, c, d );
                				groupCount += 6;
                			}
                		}
                		scope.addGroup( groupStart, groupCount, 0 );
                		groupStart += groupCount;
                	}
                	function generateCap( top ) {
                		var x, centerIndexStart, centerIndexEnd;
                		var uv = new Vector2();
                		var vertex = new Vector3();
                		var groupCount = 0;
                		var radius = ( top === true ) ? radiusTop : radiusBottom;
                		var sign = ( top === true ) ? 1 : - 1;
                		centerIndexStart = index;
                		for ( x = 1; x <= radialSegments; x ++ ) {
                			vertices.push( 0, halfHeight * sign, 0 );
                			normals.push( 0, sign, 0 );
                			uvs.push( 0.5, 0.5 );
                			index ++;
                		}
                		centerIndexEnd = index;
                		for ( x = 0; x <= radialSegments; x ++ ) {
                			var u = x / radialSegments;
                			var theta = u * thetaLength + thetaStart;
                			var cosTheta = Math.cos( theta );
                			var sinTheta = Math.sin( theta );
                			vertex.x = radius * sinTheta;
                			vertex.y = halfHeight * sign;
                			vertex.z = radius * cosTheta;
                			vertices.push( vertex.x, vertex.y, vertex.z );
                			normals.push( 0, sign, 0 );
                			uv.x = ( cosTheta * 0.5 ) + 0.5;
                			uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
                			uvs.push( uv.x, uv.y );
                			index ++;
                		}
                		for ( x = 0; x < radialSegments; x ++ ) {
                			var c = centerIndexStart + x;
                			var i = centerIndexEnd + x;
                			if ( top === true ) {
                				indices.push( i, i + 1, c );
                			} else {
                				indices.push( i + 1, i, c );
                			}
                			groupCount += 3;
                		}
                		scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );
                		groupStart += groupCount;
                	}
                }
                CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
                CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;
                function ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
                	CylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );
                	this.type = 'ConeGeometry';
                	this.parameters = {
                		radius: radius,
                		height: height,
                		radialSegments: radialSegments,
                		heightSegments: heightSegments,
                		openEnded: openEnded,
                		thetaStart: thetaStart,
                		thetaLength: thetaLength
                	};
                }
                ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );
                ConeGeometry.prototype.constructor = ConeGeometry;
                function ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
                	CylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );
                	this.type = 'ConeBufferGeometry';
                	this.parameters = {
                		radius: radius,
                		height: height,
                		radialSegments: radialSegments,
                		heightSegments: heightSegments,
                		openEnded: openEnded,
                		thetaStart: thetaStart,
                		thetaLength: thetaLength
                	};
                }
                ConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );
                ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;
                function CircleGeometry( radius, segments, thetaStart, thetaLength ) {
                	Geometry.call( this );
                	this.type = 'CircleGeometry';
                	this.parameters = {
                		radius: radius,
                		segments: segments,
                		thetaStart: thetaStart,
                		thetaLength: thetaLength
                	};
                	this.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );
                	this.mergeVertices();
                }
                CircleGeometry.prototype = Object.create( Geometry.prototype );
                CircleGeometry.prototype.constructor = CircleGeometry;
                function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {
                	BufferGeometry.call( this );
                	this.type = 'CircleBufferGeometry';
                	this.parameters = {
                		radius: radius,
                		segments: segments,
                		thetaStart: thetaStart,
                		thetaLength: thetaLength
                	};
                	radius = radius || 1;
                	segments = segments !== undefined ? Math.max( 3, segments ) : 8;
                	thetaStart = thetaStart !== undefined ? thetaStart : 0;
                	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;
                	var indices = [];
                	var vertices = [];
                	var normals = [];
                	var uvs = [];
                	var i, s;
                	var vertex = new Vector3();
                	var uv = new Vector2();
                	vertices.push( 0, 0, 0 );
                	normals.push( 0, 0, 1 );
                	uvs.push( 0.5, 0.5 );
                	for ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {
                		var segment = thetaStart + s / segments * thetaLength;
                		vertex.x = radius * Math.cos( segment );
                		vertex.y = radius * Math.sin( segment );
                		vertices.push( vertex.x, vertex.y, vertex.z );
                		normals.push( 0, 0, 1 );
                		uv.x = ( vertices[ i ] / radius + 1 ) / 2;
                		uv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;
                		uvs.push( uv.x, uv.y );
                	}
                	for ( i = 1; i <= segments; i ++ ) {
                		indices.push( i, i + 1, 0 );
                	}
                	this.setIndex( indices );
                	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
                	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
                	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
                }
                CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
                CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;
                var Geometries =              Object.freeze({
                	__proto__: null,
                	WireframeGeometry: WireframeGeometry,
                	ParametricGeometry: ParametricGeometry,
                	ParametricBufferGeometry: ParametricBufferGeometry,
                	TetrahedronGeometry: TetrahedronGeometry,
                	TetrahedronBufferGeometry: TetrahedronBufferGeometry,
                	OctahedronGeometry: OctahedronGeometry,
                	OctahedronBufferGeometry: OctahedronBufferGeometry,
                	IcosahedronGeometry: IcosahedronGeometry,
                	IcosahedronBufferGeometry: IcosahedronBufferGeometry,
                	DodecahedronGeometry: DodecahedronGeometry,
                	DodecahedronBufferGeometry: DodecahedronBufferGeometry,
                	PolyhedronGeometry: PolyhedronGeometry,
                	PolyhedronBufferGeometry: PolyhedronBufferGeometry,
                	TubeGeometry: TubeGeometry,
                	TubeBufferGeometry: TubeBufferGeometry,
                	TorusKnotGeometry: TorusKnotGeometry,
                	TorusKnotBufferGeometry: TorusKnotBufferGeometry,
                	TorusGeometry: TorusGeometry,
                	TorusBufferGeometry: TorusBufferGeometry,
                	TextGeometry: TextGeometry,
                	TextBufferGeometry: TextBufferGeometry,
                	SphereGeometry: SphereGeometry,
                	SphereBufferGeometry: SphereBufferGeometry,
                	RingGeometry: RingGeometry,
                	RingBufferGeometry: RingBufferGeometry,
                	PlaneGeometry: PlaneGeometry,
                	PlaneBufferGeometry: PlaneBufferGeometry,
                	LatheGeometry: LatheGeometry,
                	LatheBufferGeometry: LatheBufferGeometry,
                	ShapeGeometry: ShapeGeometry,
                	ShapeBufferGeometry: ShapeBufferGeometry,
                	ExtrudeGeometry: ExtrudeGeometry,
                	ExtrudeBufferGeometry: ExtrudeBufferGeometry,
                	EdgesGeometry: EdgesGeometry,
                	ConeGeometry: ConeGeometry,
                	ConeBufferGeometry: ConeBufferGeometry,
                	CylinderGeometry: CylinderGeometry,
                	CylinderBufferGeometry: CylinderBufferGeometry,
                	CircleGeometry: CircleGeometry,
                	CircleBufferGeometry: CircleBufferGeometry,
                	BoxGeometry: BoxGeometry,
                	BoxBufferGeometry: BoxBufferGeometry
                });
                function ShadowMaterial( parameters ) {
                	Material.call( this );
                	this.type = 'ShadowMaterial';
                	this.color = new Color( 0x000000 );
                	this.transparent = true;
                	this.setValues( parameters );
                }
                ShadowMaterial.prototype = Object.create( Material.prototype );
                ShadowMaterial.prototype.constructor = ShadowMaterial;
                ShadowMaterial.prototype.isShadowMaterial = true;
                ShadowMaterial.prototype.copy = function ( source ) {
                	Material.prototype.copy.call( this, source );
                	this.color.copy( source.color );
                	return this;
                };
                function RawShaderMaterial( parameters ) {
                	ShaderMaterial.call( this, parameters );
                	this.type = 'RawShaderMaterial';
                }
                RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );
                RawShaderMaterial.prototype.constructor = RawShaderMaterial;
                RawShaderMaterial.prototype.isRawShaderMaterial = true;
                function MeshStandardMaterial( parameters ) {
                	Material.call( this );
                	this.defines = { 'STANDARD': '' };
                	this.type = 'MeshStandardMaterial';
                	this.color = new Color( 0xffffff );
                	this.roughness = 0.5;
                	this.metalness = 0.5;
                	this.map = null;
                	this.lightMap = null;
                	this.lightMapIntensity = 1.0;
                	this.aoMap = null;
                	this.aoMapIntensity = 1.0;
                	this.emissive = new Color( 0x000000 );
                	this.emissiveIntensity = 1.0;
                	this.emissiveMap = null;
                	this.bumpMap = null;
                	this.bumpScale = 1;
                	this.normalMap = null;
                	this.normalMapType = TangentSpaceNormalMap;
                	this.normalScale = new Vector2( 1, 1 );
                	this.displacementMap = null;
                	this.displacementScale = 1;
                	this.displacementBias = 0;
                	this.roughnessMap = null;
                	this.metalnessMap = null;
                	this.alphaMap = null;
                	this.envMap = null;
                	this.envMapIntensity = 1.0;
                	this.refractionRatio = 0.98;
                	this.wireframe = false;
                	this.wireframeLinewidth = 1;
                	this.wireframeLinecap = 'round';
                	this.wireframeLinejoin = 'round';
                	this.skinning = false;
                	this.morphTargets = false;
                	this.morphNormals = false;
                	this.setValues( parameters );
                }
                MeshStandardMaterial.prototype = Object.create( Material.prototype );
                MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;
                MeshStandardMaterial.prototype.isMeshStandardMaterial = true;
                MeshStandardMaterial.prototype.copy = function ( source ) {
                	Material.prototype.copy.call( this, source );
                	this.defines = { 'STANDARD': '' };
                	this.color.copy( source.color );
                	this.roughness = source.roughness;
                	this.metalness = source.metalness;
                	this.map = source.map;
                	this.lightMap = source.lightMap;
                	this.lightMapIntensity = source.lightMapIntensity;
                	this.aoMap = source.aoMap;
                	this.aoMapIntensity = source.aoMapIntensity;
                	this.emissive.copy( source.emissive );
                	this.emissiveMap = source.emissiveMap;
                	this.emissiveIntensity = source.emissiveIntensity;
                	this.bumpMap = source.bumpMap;
                	this.bumpScale = source.bumpScale;
                	this.normalMap = source.normalMap;
                	this.normalMapType = source.normalMapType;
                	this.normalScale.copy( source.normalScale );
                	this.displacementMap = source.displacementMap;
                	this.displacementScale = source.displacementScale;
                	this.displacementBias = source.displacementBias;
                	this.roughnessMap = source.roughnessMap;
                	this.metalnessMap = source.metalnessMap;
                	this.alphaMap = source.alphaMap;
                	this.envMap = source.envMap;
                	this.envMapIntensity = source.envMapIntensity;
                	this.refractionRatio = source.refractionRatio;
                	this.wireframe = source.wireframe;
                	this.wireframeLinewidth = source.wireframeLinewidth;
                	this.wireframeLinecap = source.wireframeLinecap;
                	this.wireframeLinejoin = source.wireframeLinejoin;
                	this.skinning = source.skinning;
                	this.morphTargets = source.morphTargets;
                	this.morphNormals = source.morphNormals;
                	return this;
                };
                function MeshPhysicalMaterial( parameters ) {
                	MeshStandardMaterial.call( this );
                	this.defines = {
                		'STANDARD': '',
                		'PHYSICAL': ''
                	};
                	this.type = 'MeshPhysicalMaterial';
                	this.reflectivity = 0.5;
                	this.clearcoat = 0.0;
                	this.clearcoatRoughness = 0.0;
                	this.sheen = null;
                	this.clearcoatNormalScale = new Vector2( 1, 1 );
                	this.clearcoatNormalMap = null;
                	this.transparency = 0.0;
                	this.setValues( parameters );
                }
                MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );
                MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;
                MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;
                MeshPhysicalMaterial.prototype.copy = function ( source ) {
                	MeshStandardMaterial.prototype.copy.call( this, source );
                	this.defines = {
                		'STANDARD': '',
                		'PHYSICAL': ''
                	};
                	this.reflectivity = source.reflectivity;
                	this.clearcoat = source.clearcoat;
                	this.clearcoatRoughness = source.clearcoatRoughness;
                	if ( source.sheen ) this.sheen = ( this.sheen || new Color() ).copy( source.sheen );
                	else this.sheen = null;
                	this.clearcoatNormalMap = source.clearcoatNormalMap;
                	this.clearcoatNormalScale.copy( source.clearcoatNormalScale );
                	this.transparency = source.transparency;
                	return this;
                };
                function MeshPhongMaterial( parameters ) {
                	Material.call( this );
                	this.type = 'MeshPhongMaterial';
                	this.color = new Color( 0xffffff );
                	this.specular = new Color( 0x111111 );
                	this.shininess = 30;
                	this.map = null;
                	this.lightMap = null;
                	this.lightMapIntensity = 1.0;
                	this.aoMap = null;
                	this.aoMapIntensity = 1.0;
                	this.emissive = new Color( 0x000000 );
                	this.emissiveIntensity = 1.0;
                	this.emissiveMap = null;
                	this.bumpMap = null;
                	this.bumpScale = 1;
                	this.normalMap = null;
                	this.normalMapType = TangentSpaceNormalMap;
                	this.normalScale = new Vector2( 1, 1 );
                	this.displacementMap = null;
                	this.displacementScale = 1;
                	this.displacementBias = 0;
                	this.specularMap = null;
                	this.alphaMap = null;
                	this.envMap = null;
                	this.combine = MultiplyOperation;
                	this.reflectivity = 1;
                	this.refractionRatio = 0.98;
                	this.wireframe = false;
                	this.wireframeLinewidth = 1;
                	this.wireframeLinecap = 'round';
                	this.wireframeLinejoin = 'round';
                	this.skinning = false;
                	this.morphTargets = false;
                	this.morphNormals = false;
                	this.setValues( parameters );
                }
                MeshPhongMaterial.prototype = Object.create( Material.prototype );
                MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;
                MeshPhongMaterial.prototype.isMeshPhongMaterial = true;
                MeshPhongMaterial.prototype.copy = function ( source ) {
                	Material.prototype.copy.call( this, source );
                	this.color.copy( source.color );
                	this.specular.copy( source.specular );
                	this.shininess = source.shininess;
                	this.map = source.map;
                	this.lightMap = source.lightMap;
                	this.lightMapIntensity = source.lightMapIntensity;
                	this.aoMap = source.aoMap;
                	this.aoMapIntensity = source.aoMapIntensity;
                	this.emissive.copy( source.emissive );
                	this.emissiveMap = source.emissiveMap;
                	this.emissiveIntensity = source.emissiveIntensity;
                	this.bumpMap = source.bumpMap;
                	this.bumpScale = source.bumpScale;
                	this.normalMap = source.normalMap;
                	this.normalMapType = source.normalMapType;
                	this.normalScale.copy( source.normalScale );
                	this.displacementMap = source.displacementMap;
                	this.displacementScale = source.displacementScale;
                	this.displacementBias = source.displacementBias;
                	this.specularMap = source.specularMap;
                	this.alphaMap = source.alphaMap;
                	this.envMap = source.envMap;
                	this.combine = source.combine;
                	this.reflectivity = source.reflectivity;
                	this.refractionRatio = source.refractionRatio;
                	this.wireframe = source.wireframe;
                	this.wireframeLinewidth = source.wireframeLinewidth;
                	this.wireframeLinecap = source.wireframeLinecap;
                	this.wireframeLinejoin = source.wireframeLinejoin;
                	this.skinning = source.skinning;
                	this.morphTargets = source.morphTargets;
                	this.morphNormals = source.morphNormals;
                	return this;
                };
                function MeshToonMaterial( parameters ) {
                	MeshPhongMaterial.call( this );
                	this.defines = { 'TOON': '' };
                	this.type = 'MeshToonMaterial';
                	this.gradientMap = null;
                	this.setValues( parameters );
                }
                MeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );
                MeshToonMaterial.prototype.constructor = MeshToonMaterial;
                MeshToonMaterial.prototype.isMeshToonMaterial = true;
                MeshToonMaterial.prototype.copy = function ( source ) {
                	MeshPhongMaterial.prototype.copy.call( this, source );
                	this.gradientMap = source.gradientMap;
                	return this;
                };
                function MeshNormalMaterial( parameters ) {
                	Material.call( this );
                	this.type = 'MeshNormalMaterial';
                	this.bumpMap = null;
                	this.bumpScale = 1;
                	this.normalMap = null;
                	this.normalMapType = TangentSpaceNormalMap;
                	this.normalScale = new Vector2( 1, 1 );
                	this.displacementMap = null;
                	this.displacementScale = 1;
                	this.displacementBias = 0;
                	this.wireframe = false;
                	this.wireframeLinewidth = 1;
                	this.fog = false;
                	this.skinning = false;
                	this.morphTargets = false;
                	this.morphNormals = false;
                	this.setValues( parameters );
                }
                MeshNormalMaterial.prototype = Object.create( Material.prototype );
                MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;
                MeshNormalMaterial.prototype.isMeshNormalMaterial = true;
                MeshNormalMaterial.prototype.copy = function ( source ) {
                	Material.prototype.copy.call( this, source );
                	this.bumpMap = source.bumpMap;
                	this.bumpScale = source.bumpScale;
                	this.normalMap = source.normalMap;
                	this.normalMapType = source.normalMapType;
                	this.normalScale.copy( source.normalScale );
                	this.displacementMap = source.displacementMap;
                	this.displacementScale = source.displacementScale;
                	this.displacementBias = source.displacementBias;
                	this.wireframe = source.wireframe;
                	this.wireframeLinewidth = source.wireframeLinewidth;
                	this.skinning = source.skinning;
                	this.morphTargets = source.morphTargets;
                	this.morphNormals = source.morphNormals;
                	return this;
                };
                function MeshLambertMaterial( parameters ) {
                	Material.call( this );
                	this.type = 'MeshLambertMaterial';
                	this.color = new Color( 0xffffff );
                	this.map = null;
                	this.lightMap = null;
                	this.lightMapIntensity = 1.0;
                	this.aoMap = null;
                	this.aoMapIntensity = 1.0;
                	this.emissive = new Color( 0x000000 );
                	this.emissiveIntensity = 1.0;
                	this.emissiveMap = null;
                	this.specularMap = null;
                	this.alphaMap = null;
                	this.envMap = null;
                	this.combine = MultiplyOperation;
                	this.reflectivity = 1;
                	this.refractionRatio = 0.98;
                	this.wireframe = false;
                	this.wireframeLinewidth = 1;
                	this.wireframeLinecap = 'round';
                	this.wireframeLinejoin = 'round';
                	this.skinning = false;
                	this.morphTargets = false;
                	this.morphNormals = false;
                	this.setValues( parameters );
                }
                MeshLambertMaterial.prototype = Object.create( Material.prototype );
                MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;
                MeshLambertMaterial.prototype.isMeshLambertMaterial = true;
                MeshLambertMaterial.prototype.copy = function ( source ) {
                	Material.prototype.copy.call( this, source );
                	this.color.copy( source.color );
                	this.map = source.map;
                	this.lightMap = source.lightMap;
                	this.lightMapIntensity = source.lightMapIntensity;
                	this.aoMap = source.aoMap;
                	this.aoMapIntensity = source.aoMapIntensity;
                	this.emissive.copy( source.emissive );
                	this.emissiveMap = source.emissiveMap;
                	this.emissiveIntensity = source.emissiveIntensity;
                	this.specularMap = source.specularMap;
                	this.alphaMap = source.alphaMap;
                	this.envMap = source.envMap;
                	this.combine = source.combine;
                	this.reflectivity = source.reflectivity;
                	this.refractionRatio = source.refractionRatio;
                	this.wireframe = source.wireframe;
                	this.wireframeLinewidth = source.wireframeLinewidth;
                	this.wireframeLinecap = source.wireframeLinecap;
                	this.wireframeLinejoin = source.wireframeLinejoin;
                	this.skinning = source.skinning;
                	this.morphTargets = source.morphTargets;
                	this.morphNormals = source.morphNormals;
                	return this;
                };
                function MeshMatcapMaterial( parameters ) {
                	Material.call( this );
                	this.defines = { 'MATCAP': '' };
                	this.type = 'MeshMatcapMaterial';
                	this.color = new Color( 0xffffff );
                	this.matcap = null;
                	this.map = null;
                	this.bumpMap = null;
                	this.bumpScale = 1;
                	this.normalMap = null;
                	this.normalMapType = TangentSpaceNormalMap;
                	this.normalScale = new Vector2( 1, 1 );
                	this.displacementMap = null;
                	this.displacementScale = 1;
                	this.displacementBias = 0;
                	this.alphaMap = null;
                	this.skinning = false;
                	this.morphTargets = false;
                	this.morphNormals = false;
                	this.setValues( parameters );
                }
                MeshMatcapMaterial.prototype = Object.create( Material.prototype );
                MeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;
                MeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;
                MeshMatcapMaterial.prototype.copy = function ( source ) {
                	Material.prototype.copy.call( this, source );
                	this.defines = { 'MATCAP': '' };
                	this.color.copy( source.color );
                	this.matcap = source.matcap;
                	this.map = source.map;
                	this.bumpMap = source.bumpMap;
                	this.bumpScale = source.bumpScale;
                	this.normalMap = source.normalMap;
                	this.normalMapType = source.normalMapType;
                	this.normalScale.copy( source.normalScale );
                	this.displacementMap = source.displacementMap;
                	this.displacementScale = source.displacementScale;
                	this.displacementBias = source.displacementBias;
                	this.alphaMap = source.alphaMap;
                	this.skinning = source.skinning;
                	this.morphTargets = source.morphTargets;
                	this.morphNormals = source.morphNormals;
                	return this;
                };
                function LineDashedMaterial( parameters ) {
                	LineBasicMaterial.call( this );
                	this.type = 'LineDashedMaterial';
                	this.scale = 1;
                	this.dashSize = 3;
                	this.gapSize = 1;
                	this.setValues( parameters );
                }
                LineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );
                LineDashedMaterial.prototype.constructor = LineDashedMaterial;
                LineDashedMaterial.prototype.isLineDashedMaterial = true;
                LineDashedMaterial.prototype.copy = function ( source ) {
                	LineBasicMaterial.prototype.copy.call( this, source );
                	this.scale = source.scale;
                	this.dashSize = source.dashSize;
                	this.gapSize = source.gapSize;
                	return this;
                };
                var Materials =              Object.freeze({
                	__proto__: null,
                	ShadowMaterial: ShadowMaterial,
                	SpriteMaterial: SpriteMaterial,
                	RawShaderMaterial: RawShaderMaterial,
                	ShaderMaterial: ShaderMaterial,
                	PointsMaterial: PointsMaterial,
                	MeshPhysicalMaterial: MeshPhysicalMaterial,
                	MeshStandardMaterial: MeshStandardMaterial,
                	MeshPhongMaterial: MeshPhongMaterial,
                	MeshToonMaterial: MeshToonMaterial,
                	MeshNormalMaterial: MeshNormalMaterial,
                	MeshLambertMaterial: MeshLambertMaterial,
                	MeshDepthMaterial: MeshDepthMaterial,
                	MeshDistanceMaterial: MeshDistanceMaterial,
                	MeshBasicMaterial: MeshBasicMaterial,
                	MeshMatcapMaterial: MeshMatcapMaterial,
                	LineDashedMaterial: LineDashedMaterial,
                	LineBasicMaterial: LineBasicMaterial,
                	Material: Material
                });
                var AnimationUtils = {
                	arraySlice: function ( array, from, to ) {
                		if ( AnimationUtils.isTypedArray( array ) ) {
                			return new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );
                		}
                		return array.slice( from, to );
                	},
                	convertArray: function ( array, type, forceClone ) {
                		if ( ! array ||
                			! forceClone && array.constructor === type ) return array;
                		if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {
                			return new type( array );
                		}
                		return Array.prototype.slice.call( array );
                	},
                	isTypedArray: function ( object ) {
                		return ArrayBuffer.isView( object ) &&
                			! ( object instanceof DataView );
                	},
                	getKeyframeOrder: function ( times ) {
                		function compareTime( i, j ) {
                			return times[ i ] - times[ j ];
                		}
                		var n = times.length;
                		var result = new Array( n );
                		for ( var i = 0; i !== n; ++ i ) result[ i ] = i;
                		result.sort( compareTime );
                		return result;
                	},
                	sortedArray: function ( values, stride, order ) {
                		var nValues = values.length;
                		var result = new values.constructor( nValues );
                		for ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {
                			var srcOffset = order[ i ] * stride;
                			for ( var j = 0; j !== stride; ++ j ) {
                				result[ dstOffset ++ ] = values[ srcOffset + j ];
                			}
                		}
                		return result;
                	},
                	flattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {
                		var i = 1, key = jsonKeys[ 0 ];
                		while ( key !== undefined && key[ valuePropertyName ] === undefined ) {
                			key = jsonKeys[ i ++ ];
                		}
                		if ( key === undefined ) return;
                		var value = key[ valuePropertyName ];
                		if ( value === undefined ) return;
                		if ( Array.isArray( value ) ) {
                			do {
                				value = key[ valuePropertyName ];
                				if ( value !== undefined ) {
                					times.push( key.time );
                					values.push.apply( values, value );
                				}
                				key = jsonKeys[ i ++ ];
                			} while ( key !== undefined );
                		} else if ( value.toArray !== undefined ) {
                			do {
                				value = key[ valuePropertyName ];
                				if ( value !== undefined ) {
                					times.push( key.time );
                					value.toArray( values, values.length );
                				}
                				key = jsonKeys[ i ++ ];
                			} while ( key !== undefined );
                		} else {
                			do {
                				value = key[ valuePropertyName ];
                				if ( value !== undefined ) {
                					times.push( key.time );
                					values.push( value );
                				}
                				key = jsonKeys[ i ++ ];
                			} while ( key !== undefined );
                		}
                	},
                	subclip: function ( sourceClip, name, startFrame, endFrame, fps ) {
                		fps = fps || 30;
                		var clip = sourceClip.clone();
                		clip.name = name;
                		var tracks = [];
                		for ( var i = 0; i < clip.tracks.length; ++ i ) {
                			var track = clip.tracks[ i ];
                			var valueSize = track.getValueSize();
                			var times = [];
                			var values = [];
                			for ( var j = 0; j < track.times.length; ++ j ) {
                				var frame = track.times[ j ] * fps;
                				if ( frame < startFrame || frame >= endFrame ) continue;
                				times.push( track.times[ j ] );
                				for ( var k = 0; k < valueSize; ++ k ) {
                					values.push( track.values[ j * valueSize + k ] );
                				}
                			}
                			if ( times.length === 0 ) continue;
                			track.times = AnimationUtils.convertArray( times, track.times.constructor );
                			track.values = AnimationUtils.convertArray( values, track.values.constructor );
                			tracks.push( track );
                		}
                		clip.tracks = tracks;
                		var minStartTime = Infinity;
                		for ( var i = 0; i < clip.tracks.length; ++ i ) {
                			if ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {
                				minStartTime = clip.tracks[ i ].times[ 0 ];
                			}
                		}
                		for ( var i = 0; i < clip.tracks.length; ++ i ) {
                			clip.tracks[ i ].shift( - 1 * minStartTime );
                		}
                		clip.resetDuration();
                		return clip;
                	}
                };
                function Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
                	this.parameterPositions = parameterPositions;
                	this._cachedIndex = 0;
                	this.resultBuffer = resultBuffer !== undefined ?
                		resultBuffer : new sampleValues.constructor( sampleSize );
                	this.sampleValues = sampleValues;
                	this.valueSize = sampleSize;
                }
                Object.assign( Interpolant.prototype, {
                	evaluate: function ( t ) {
                		var pp = this.parameterPositions,
                			i1 = this._cachedIndex,
                			t1 = pp[ i1 ],
                			t0 = pp[ i1 - 1 ];
                		validate_interval: {
                			seek: {
                				var right;
                				linear_scan: {
                					forward_scan: if ( ! ( t < t1 ) ) {
                						for ( var giveUpAt = i1 + 2; ; ) {
                							if ( t1 === undefined ) {
                								if ( t < t0 ) break forward_scan;
                								i1 = pp.length;
                								this._cachedIndex = i1;
                								return this.afterEnd_( i1 - 1, t, t0 );
                							}
                							if ( i1 === giveUpAt ) break;
                							t0 = t1;
                							t1 = pp[ ++ i1 ];
                							if ( t < t1 ) {
                								break seek;
                							}
                						}
                						right = pp.length;
                						break linear_scan;
                					}
                					if ( ! ( t >= t0 ) ) {
                						var t1global = pp[ 1 ];
                						if ( t < t1global ) {
                							i1 = 2;
                							t0 = t1global;
                						}
                						for ( var giveUpAt = i1 - 2; ; ) {
                							if ( t0 === undefined ) {
                								this._cachedIndex = 0;
                								return this.beforeStart_( 0, t, t1 );
                							}
                							if ( i1 === giveUpAt ) break;
                							t1 = t0;
                							t0 = pp[ -- i1 - 1 ];
                							if ( t >= t0 ) {
                								break seek;
                							}
                						}
                						right = i1;
                						i1 = 0;
                						break linear_scan;
                					}
                					break validate_interval;
                				}
                				while ( i1 < right ) {
                					var mid = ( i1 + right ) >>> 1;
                					if ( t < pp[ mid ] ) {
                						right = mid;
                					} else {
                						i1 = mid + 1;
                					}
                				}
                				t1 = pp[ i1 ];
                				t0 = pp[ i1 - 1 ];
                				if ( t0 === undefined ) {
                					this._cachedIndex = 0;
                					return this.beforeStart_( 0, t, t1 );
                				}
                				if ( t1 === undefined ) {
                					i1 = pp.length;
                					this._cachedIndex = i1;
                					return this.afterEnd_( i1 - 1, t0, t );
                				}
                			}
                			this._cachedIndex = i1;
                			this.intervalChanged_( i1, t0, t1 );
                		}
                		return this.interpolate_( i1, t0, t, t1 );
                	},
                	settings: null,
                	DefaultSettings_: {},
                	getSettings_: function () {
                		return this.settings || this.DefaultSettings_;
                	},
                	copySampleValue_: function ( index ) {
                		var result = this.resultBuffer,
                			values = this.sampleValues,
                			stride = this.valueSize,
                			offset = index * stride;
                		for ( var i = 0; i !== stride; ++ i ) {
                			result[ i ] = values[ offset + i ];
                		}
                		return result;
                	},
                	interpolate_: function (                     ) {
                		throw new Error( 'call to abstract method' );
                	},
                	intervalChanged_: function (                  ) {
                	}
                } );
                Object.assign( Interpolant.prototype, {
                	beforeStart_: Interpolant.prototype.copySampleValue_,
                	afterEnd_: Interpolant.prototype.copySampleValue_,
                } );
                function CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
                	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );
                	this._weightPrev = - 0;
                	this._offsetPrev = - 0;
                	this._weightNext = - 0;
                	this._offsetNext = - 0;
                }
                CubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {
                	constructor: CubicInterpolant,
                	DefaultSettings_: {
                		endingStart: ZeroCurvatureEnding,
                		endingEnd: ZeroCurvatureEnding
                	},
                	intervalChanged_: function ( i1, t0, t1 ) {
                		var pp = this.parameterPositions,
                			iPrev = i1 - 2,
                			iNext = i1 + 1,
                			tPrev = pp[ iPrev ],
                			tNext = pp[ iNext ];
                		if ( tPrev === undefined ) {
                			switch ( this.getSettings_().endingStart ) {
                				case ZeroSlopeEnding:
                					iPrev = i1;
                					tPrev = 2 * t0 - t1;
                					break;
                				case WrapAroundEnding:
                					iPrev = pp.length - 2;
                					tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];
                					break;
                				default:
                					iPrev = i1;
                					tPrev = t1;
                			}
                		}
                		if ( tNext === undefined ) {
                			switch ( this.getSettings_().endingEnd ) {
                				case ZeroSlopeEnding:
                					iNext = i1;
                					tNext = 2 * t1 - t0;
                					break;
                				case WrapAroundEnding:
                					iNext = 1;
                					tNext = t1 + pp[ 1 ] - pp[ 0 ];
                					break;
                				default:
                					iNext = i1 - 1;
                					tNext = t0;
                			}
                		}
                		var halfDt = ( t1 - t0 ) * 0.5,
                			stride = this.valueSize;
                		this._weightPrev = halfDt / ( t0 - tPrev );
                		this._weightNext = halfDt / ( tNext - t1 );
                		this._offsetPrev = iPrev * stride;
                		this._offsetNext = iNext * stride;
                	},
                	interpolate_: function ( i1, t0, t, t1 ) {
                		var result = this.resultBuffer,
                			values = this.sampleValues,
                			stride = this.valueSize,
                			o1 = i1 * stride,		o0 = o1 - stride,
                			oP = this._offsetPrev, 	oN = this._offsetNext,
                			wP = this._weightPrev,	wN = this._weightNext,
                			p = ( t - t0 ) / ( t1 - t0 ),
                			pp = p * p,
                			ppp = pp * p;
                		var sP = - wP * ppp + 2 * wP * pp - wP * p;
                		var s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;
                		var s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;
                		var sN = wN * ppp - wN * pp;
                		for ( var i = 0; i !== stride; ++ i ) {
                			result[ i ] =
                					sP * values[ oP + i ] +
                					s0 * values[ o0 + i ] +
                					s1 * values[ o1 + i ] +
                					sN * values[ oN + i ];
                		}
                		return result;
                	}
                } );
                function LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
                	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );
                }
                LinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {
                	constructor: LinearInterpolant,
                	interpolate_: function ( i1, t0, t, t1 ) {
                		var result = this.resultBuffer,
                			values = this.sampleValues,
                			stride = this.valueSize,
                			offset1 = i1 * stride,
                			offset0 = offset1 - stride,
                			weight1 = ( t - t0 ) / ( t1 - t0 ),
                			weight0 = 1 - weight1;
                		for ( var i = 0; i !== stride; ++ i ) {
                			result[ i ] =
                					values[ offset0 + i ] * weight0 +
                					values[ offset1 + i ] * weight1;
                		}
                		return result;
                	}
                } );
                function DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
                	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );
                }
                DiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {
                	constructor: DiscreteInterpolant,
                	interpolate_: function ( i1                  ) {
                		return this.copySampleValue_( i1 - 1 );
                	}
                } );
                function KeyframeTrack( name, times, values, interpolation ) {
                	if ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );
                	if ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );
                	this.name = name;
                	this.times = AnimationUtils.convertArray( times, this.TimeBufferType );
                	this.values = AnimationUtils.convertArray( values, this.ValueBufferType );
                	this.setInterpolation( interpolation || this.DefaultInterpolation );
                }
                Object.assign( KeyframeTrack, {
                	toJSON: function ( track ) {
                		var trackType = track.constructor;
                		var json;
                		if ( trackType.toJSON !== undefined ) {
                			json = trackType.toJSON( track );
                		} else {
                			json = {
                				'name': track.name,
                				'times': AnimationUtils.convertArray( track.times, Array ),
                				'values': AnimationUtils.convertArray( track.values, Array )
                			};
                			var interpolation = track.getInterpolation();
                			if ( interpolation !== track.DefaultInterpolation ) {
                				json.interpolation = interpolation;
                			}
                		}
                		json.type = track.ValueTypeName;
                		return json;
                	}
                } );
                Object.assign( KeyframeTrack.prototype, {
                	constructor: KeyframeTrack,
                	TimeBufferType: Float32Array,
                	ValueBufferType: Float32Array,
                	DefaultInterpolation: InterpolateLinear,
                	InterpolantFactoryMethodDiscrete: function ( result ) {
                		return new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );
                	},
                	InterpolantFactoryMethodLinear: function ( result ) {
                		return new LinearInterpolant( this.times, this.values, this.getValueSize(), result );
                	},
                	InterpolantFactoryMethodSmooth: function ( result ) {
                		return new CubicInterpolant( this.times, this.values, this.getValueSize(), result );
                	},
                	setInterpolation: function ( interpolation ) {
                		var factoryMethod;
                		switch ( interpolation ) {
                			case InterpolateDiscrete:
                				factoryMethod = this.InterpolantFactoryMethodDiscrete;
                				break;
                			case InterpolateLinear:
                				factoryMethod = this.InterpolantFactoryMethodLinear;
                				break;
                			case InterpolateSmooth:
                				factoryMethod = this.InterpolantFactoryMethodSmooth;
                				break;
                		}
                		if ( factoryMethod === undefined ) {
                			var message = "unsupported interpolation for " +
                				this.ValueTypeName + " keyframe track named " + this.name;
                			if ( this.createInterpolant === undefined ) {
                				if ( interpolation !== this.DefaultInterpolation ) {
                					this.setInterpolation( this.DefaultInterpolation );
                				} else {
                					throw new Error( message );
                				}
                			}
                			console.warn( 'THREE.KeyframeTrack:', message );
                			return this;
                		}
                		this.createInterpolant = factoryMethod;
                		return this;
                	},
                	getInterpolation: function () {
                		switch ( this.createInterpolant ) {
                			case this.InterpolantFactoryMethodDiscrete:
                				return InterpolateDiscrete;
                			case this.InterpolantFactoryMethodLinear:
                				return InterpolateLinear;
                			case this.InterpolantFactoryMethodSmooth:
                				return InterpolateSmooth;
                		}
                	},
                	getValueSize: function () {
                		return this.values.length / this.times.length;
                	},
                	shift: function ( timeOffset ) {
                		if ( timeOffset !== 0.0 ) {
                			var times = this.times;
                			for ( var i = 0, n = times.length; i !== n; ++ i ) {
                				times[ i ] += timeOffset;
                			}
                		}
                		return this;
                	},
                	scale: function ( timeScale ) {
                		if ( timeScale !== 1.0 ) {
                			var times = this.times;
                			for ( var i = 0, n = times.length; i !== n; ++ i ) {
                				times[ i ] *= timeScale;
                			}
                		}
                		return this;
                	},
                	trim: function ( startTime, endTime ) {
                		var times = this.times,
                			nKeys = times.length,
                			from = 0,
                			to = nKeys - 1;
                		while ( from !== nKeys && times[ from ] < startTime ) {
                			++ from;
                		}
                		while ( to !== - 1 && times[ to ] > endTime ) {
                			-- to;
                		}
                		++ to;
                		if ( from !== 0 || to !== nKeys ) {
                			if ( from >= to ) to = Math.max( to, 1 ), from = to - 1;
                			var stride = this.getValueSize();
                			this.times = AnimationUtils.arraySlice( times, from, to );
                			this.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );
                		}
                		return this;
                	},
                	validate: function () {
                		var valid = true;
                		var valueSize = this.getValueSize();
                		if ( valueSize - Math.floor( valueSize ) !== 0 ) {
                			console.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );
                			valid = false;
                		}
                		var times = this.times,
                			values = this.values,
                			nKeys = times.length;
                		if ( nKeys === 0 ) {
                			console.error( 'THREE.KeyframeTrack: Track is empty.', this );
                			valid = false;
                		}
                		var prevTime = null;
                		for ( var i = 0; i !== nKeys; i ++ ) {
                			var currTime = times[ i ];
                			if ( typeof currTime === 'number' && isNaN( currTime ) ) {
                				console.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );
                				valid = false;
                				break;
                			}
                			if ( prevTime !== null && prevTime > currTime ) {
                				console.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );
                				valid = false;
                				break;
                			}
                			prevTime = currTime;
                		}
                		if ( values !== undefined ) {
                			if ( AnimationUtils.isTypedArray( values ) ) {
                				for ( var i = 0, n = values.length; i !== n; ++ i ) {
                					var value = values[ i ];
                					if ( isNaN( value ) ) {
                						console.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );
                						valid = false;
                						break;
                					}
                				}
                			}
                		}
                		return valid;
                	},
                	optimize: function () {
                		var times = this.times,
                			values = this.values,
                			stride = this.getValueSize(),
                			smoothInterpolation = this.getInterpolation() === InterpolateSmooth,
                			writeIndex = 1,
                			lastIndex = times.length - 1;
                		for ( var i = 1; i < lastIndex; ++ i ) {
                			var keep = false;
                			var time = times[ i ];
                			var timeNext = times[ i + 1 ];
                			if ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {
                				if ( ! smoothInterpolation ) {
                					var offset = i * stride,
                						offsetP = offset - stride,
                						offsetN = offset + stride;
                					for ( var j = 0; j !== stride; ++ j ) {
                						var value = values[ offset + j ];
                						if ( value !== values[ offsetP + j ] ||
                							value !== values[ offsetN + j ] ) {
                							keep = true;
                							break;
                						}
                					}
                				} else {
                					keep = true;
                				}
                			}
                			if ( keep ) {
                				if ( i !== writeIndex ) {
                					times[ writeIndex ] = times[ i ];
                					var readOffset = i * stride,
                						writeOffset = writeIndex * stride;
                					for ( var j = 0; j !== stride; ++ j ) {
                						values[ writeOffset + j ] = values[ readOffset + j ];
                					}
                				}
                				++ writeIndex;
                			}
                		}
                		if ( lastIndex > 0 ) {
                			times[ writeIndex ] = times[ lastIndex ];
                			for ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {
                				values[ writeOffset + j ] = values[ readOffset + j ];
                			}
                			++ writeIndex;
                		}
                		if ( writeIndex !== times.length ) {
                			this.times = AnimationUtils.arraySlice( times, 0, writeIndex );
                			this.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );
                		}
                		return this;
                	},
                	clone: function () {
                		var times = AnimationUtils.arraySlice( this.times, 0 );
                		var values = AnimationUtils.arraySlice( this.values, 0 );
                		var TypedKeyframeTrack = this.constructor;
                		var track = new TypedKeyframeTrack( this.name, times, values );
                		track.createInterpolant = this.createInterpolant;
                		return track;
                	}
                } );
                function BooleanKeyframeTrack( name, times, values ) {
                	KeyframeTrack.call( this, name, times, values );
                }
                BooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {
                	constructor: BooleanKeyframeTrack,
                	ValueTypeName: 'bool',
                	ValueBufferType: Array,
                	DefaultInterpolation: InterpolateDiscrete,
                	InterpolantFactoryMethodLinear: undefined,
                	InterpolantFactoryMethodSmooth: undefined
                } );
                function ColorKeyframeTrack( name, times, values, interpolation ) {
                	KeyframeTrack.call( this, name, times, values, interpolation );
                }
                ColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {
                	constructor: ColorKeyframeTrack,
                	ValueTypeName: 'color'
                } );
                function NumberKeyframeTrack( name, times, values, interpolation ) {
                	KeyframeTrack.call( this, name, times, values, interpolation );
                }
                NumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {
                	constructor: NumberKeyframeTrack,
                	ValueTypeName: 'number'
                } );
                function QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
                	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );
                }
                QuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {
                	constructor: QuaternionLinearInterpolant,
                	interpolate_: function ( i1, t0, t, t1 ) {
                		var result = this.resultBuffer,
                			values = this.sampleValues,
                			stride = this.valueSize,
                			offset = i1 * stride,
                			alpha = ( t - t0 ) / ( t1 - t0 );
                		for ( var end = offset + stride; offset !== end; offset += 4 ) {
                			Quaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );
                		}
                		return result;
                	}
                } );
                function QuaternionKeyframeTrack( name, times, values, interpolation ) {
                	KeyframeTrack.call( this, name, times, values, interpolation );
                }
                QuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {
                	constructor: QuaternionKeyframeTrack,
                	ValueTypeName: 'quaternion',
                	DefaultInterpolation: InterpolateLinear,
                	InterpolantFactoryMethodLinear: function ( result ) {
                		return new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );
                	},
                	InterpolantFactoryMethodSmooth: undefined
                } );
                function StringKeyframeTrack( name, times, values, interpolation ) {
                	KeyframeTrack.call( this, name, times, values, interpolation );
                }
                StringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {
                	constructor: StringKeyframeTrack,
                	ValueTypeName: 'string',
                	ValueBufferType: Array,
                	DefaultInterpolation: InterpolateDiscrete,
                	InterpolantFactoryMethodLinear: undefined,
                	InterpolantFactoryMethodSmooth: undefined
                } );
                function VectorKeyframeTrack( name, times, values, interpolation ) {
                	KeyframeTrack.call( this, name, times, values, interpolation );
                }
                VectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {
                	constructor: VectorKeyframeTrack,
                	ValueTypeName: 'vector'
                } );
                function AnimationClip( name, duration, tracks ) {
                	this.name = name;
                	this.tracks = tracks;
                	this.duration = ( duration !== undefined ) ? duration : - 1;
                	this.uuid = _Math.generateUUID();
                	if ( this.duration < 0 ) {
                		this.resetDuration();
                	}
                }
                function getTrackTypeForValueTypeName( typeName ) {
                	switch ( typeName.toLowerCase() ) {
                		case 'scalar':
                		case 'double':
                		case 'float':
                		case 'number':
                		case 'integer':
                			return NumberKeyframeTrack;
                		case 'vector':
                		case 'vector2':
                		case 'vector3':
                		case 'vector4':
                			return VectorKeyframeTrack;
                		case 'color':
                			return ColorKeyframeTrack;
                		case 'quaternion':
                			return QuaternionKeyframeTrack;
                		case 'bool':
                		case 'boolean':
                			return BooleanKeyframeTrack;
                		case 'string':
                			return StringKeyframeTrack;
                	}
                	throw new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );
                }
                function parseKeyframeTrack( json ) {
                	if ( json.type === undefined ) {
                		throw new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );
                	}
                	var trackType = getTrackTypeForValueTypeName( json.type );
                	if ( json.times === undefined ) {
                		var times = [], values = [];
                		AnimationUtils.flattenJSON( json.keys, times, values, 'value' );
                		json.times = times;
                		json.values = values;
                	}
                	if ( trackType.parse !== undefined ) {
                		return trackType.parse( json );
                	} else {
                		return new trackType( json.name, json.times, json.values, json.interpolation );
                	}
                }
                Object.assign( AnimationClip, {
                	parse: function ( json ) {
                		var tracks = [],
                			jsonTracks = json.tracks,
                			frameTime = 1.0 / ( json.fps || 1.0 );
                		for ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {
                			tracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );
                		}
                		return new AnimationClip( json.name, json.duration, tracks );
                	},
                	toJSON: function ( clip ) {
                		var tracks = [],
                			clipTracks = clip.tracks;
                		var json = {
                			'name': clip.name,
                			'duration': clip.duration,
                			'tracks': tracks,
                			'uuid': clip.uuid
                		};
                		for ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {
                			tracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );
                		}
                		return json;
                	},
                	CreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {
                		var numMorphTargets = morphTargetSequence.length;
                		var tracks = [];
                		for ( var i = 0; i < numMorphTargets; i ++ ) {
                			var times = [];
                			var values = [];
                			times.push(
                				( i + numMorphTargets - 1 ) % numMorphTargets,
                				i,
                				( i + 1 ) % numMorphTargets );
                			values.push( 0, 1, 0 );
                			var order = AnimationUtils.getKeyframeOrder( times );
                			times = AnimationUtils.sortedArray( times, 1, order );
                			values = AnimationUtils.sortedArray( values, 1, order );
                			if ( ! noLoop && times[ 0 ] === 0 ) {
                				times.push( numMorphTargets );
                				values.push( values[ 0 ] );
                			}
                			tracks.push(
                				new NumberKeyframeTrack(
                					'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
                					times, values
                				).scale( 1.0 / fps ) );
                		}
                		return new AnimationClip( name, - 1, tracks );
                	},
                	findByName: function ( objectOrClipArray, name ) {
                		var clipArray = objectOrClipArray;
                		if ( ! Array.isArray( objectOrClipArray ) ) {
                			var o = objectOrClipArray;
                			clipArray = o.geometry && o.geometry.animations || o.animations;
                		}
                		for ( var i = 0; i < clipArray.length; i ++ ) {
                			if ( clipArray[ i ].name === name ) {
                				return clipArray[ i ];
                			}
                		}
                		return null;
                	},
                	CreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {
                		var animationToMorphTargets = {};
                		var pattern = /^([\w-]*?)([\d]+)$/;
                		for ( var i = 0, il = morphTargets.length; i < il; i ++ ) {
                			var morphTarget = morphTargets[ i ];
                			var parts = morphTarget.name.match( pattern );
                			if ( parts && parts.length > 1 ) {
                				var name = parts[ 1 ];
                				var animationMorphTargets = animationToMorphTargets[ name ];
                				if ( ! animationMorphTargets ) {
                					animationToMorphTargets[ name ] = animationMorphTargets = [];
                				}
                				animationMorphTargets.push( morphTarget );
                			}
                		}
                		var clips = [];
                		for ( var name in animationToMorphTargets ) {
                			clips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );
                		}
                		return clips;
                	},
                	parseAnimation: function ( animation, bones ) {
                		if ( ! animation ) {
                			console.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );
                			return null;
                		}
                		var addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {
                			if ( animationKeys.length !== 0 ) {
                				var times = [];
                				var values = [];
                				AnimationUtils.flattenJSON( animationKeys, times, values, propertyName );
                				if ( times.length !== 0 ) {
                					destTracks.push( new trackType( trackName, times, values ) );
                				}
                			}
                		};
                		var tracks = [];
                		var clipName = animation.name || 'default';
                		var duration = animation.length || - 1;
                		var fps = animation.fps || 30;
                		var hierarchyTracks = animation.hierarchy || [];
                		for ( var h = 0; h < hierarchyTracks.length; h ++ ) {
                			var animationKeys = hierarchyTracks[ h ].keys;
                			if ( ! animationKeys || animationKeys.length === 0 ) continue;
                			if ( animationKeys[ 0 ].morphTargets ) {
                				var morphTargetNames = {};
                				for ( var k = 0; k < animationKeys.length; k ++ ) {
                					if ( animationKeys[ k ].morphTargets ) {
                						for ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {
                							morphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;
                						}
                					}
                				}
                				for ( var morphTargetName in morphTargetNames ) {
                					var times = [];
                					var values = [];
                					for ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {
                						var animationKey = animationKeys[ k ];
                						times.push( animationKey.time );
                						values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );
                					}
                					tracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );
                				}
                				duration = morphTargetNames.length * ( fps || 1.0 );
                			} else {
                				var boneName = '.bones[' + bones[ h ].name + ']';
                				addNonemptyTrack(
                					VectorKeyframeTrack, boneName + '.position',
                					animationKeys, 'pos', tracks );
                				addNonemptyTrack(
                					QuaternionKeyframeTrack, boneName + '.quaternion',
                					animationKeys, 'rot', tracks );
                				addNonemptyTrack(
                					VectorKeyframeTrack, boneName + '.scale',
                					animationKeys, 'scl', tracks );
                			}
                		}
                		if ( tracks.length === 0 ) {
                			return null;
                		}
                		var clip = new AnimationClip( clipName, duration, tracks );
                		return clip;
                	}
                } );
                Object.assign( AnimationClip.prototype, {
                	resetDuration: function () {
                		var tracks = this.tracks, duration = 0;
                		for ( var i = 0, n = tracks.length; i !== n; ++ i ) {
                			var track = this.tracks[ i ];
                			duration = Math.max( duration, track.times[ track.times.length - 1 ] );
                		}
                		this.duration = duration;
                		return this;
                	},
                	trim: function () {
                		for ( var i = 0; i < this.tracks.length; i ++ ) {
                			this.tracks[ i ].trim( 0, this.duration );
                		}
                		return this;
                	},
                	validate: function () {
                		var valid = true;
                		for ( var i = 0; i < this.tracks.length; i ++ ) {
                			valid = valid && this.tracks[ i ].validate();
                		}
                		return valid;
                	},
                	optimize: function () {
                		for ( var i = 0; i < this.tracks.length; i ++ ) {
                			this.tracks[ i ].optimize();
                		}
                		return this;
                	},
                	clone: function () {
                		var tracks = [];
                		for ( var i = 0; i < this.tracks.length; i ++ ) {
                			tracks.push( this.tracks[ i ].clone() );
                		}
                		return new AnimationClip( this.name, this.duration, tracks );
                	}
                } );
                var Cache = {
                	enabled: false,
                	files: {},
                	add: function ( key, file ) {
                		if ( this.enabled === false ) return;
                		this.files[ key ] = file;
                	},
                	get: function ( key ) {
                		if ( this.enabled === false ) return;
                		return this.files[ key ];
                	},
                	remove: function ( key ) {
                		delete this.files[ key ];
                	},
                	clear: function () {
                		this.files = {};
                	}
                };
                function LoadingManager( onLoad, onProgress, onError ) {
                	var scope = this;
                	var isLoading = false;
                	var itemsLoaded = 0;
                	var itemsTotal = 0;
                	var urlModifier = undefined;
                	var handlers = [];
                	this.onStart = undefined;
                	this.onLoad = onLoad;
                	this.onProgress = onProgress;
                	this.onError = onError;
                	this.itemStart = function ( url ) {
                		itemsTotal ++;
                		if ( isLoading === false ) {
                			if ( scope.onStart !== undefined ) {
                				scope.onStart( url, itemsLoaded, itemsTotal );
                			}
                		}
                		isLoading = true;
                	};
                	this.itemEnd = function ( url ) {
                		itemsLoaded ++;
                		if ( scope.onProgress !== undefined ) {
                			scope.onProgress( url, itemsLoaded, itemsTotal );
                		}
                		if ( itemsLoaded === itemsTotal ) {
                			isLoading = false;
                			if ( scope.onLoad !== undefined ) {
                				scope.onLoad();
                			}
                		}
                	};
                	this.itemError = function ( url ) {
                		if ( scope.onError !== undefined ) {
                			scope.onError( url );
                		}
                	};
                	this.resolveURL = function ( url ) {
                		if ( urlModifier ) {
                			return urlModifier( url );
                		}
                		return url;
                	};
                	this.setURLModifier = function ( transform ) {
                		urlModifier = transform;
                		return this;
                	};
                	this.addHandler = function ( regex, loader ) {
                		handlers.push( regex, loader );
                		return this;
                	};
                	this.removeHandler = function ( regex ) {
                		var index = handlers.indexOf( regex );
                		if ( index !== - 1 ) {
                			handlers.splice( index, 2 );
                		}
                		return this;
                	};
                	this.getHandler = function ( file ) {
                		for ( var i = 0, l = handlers.length; i < l; i += 2 ) {
                			var regex = handlers[ i ];
                			var loader = handlers[ i + 1 ];
                			if ( regex.global ) regex.lastIndex = 0;
                			if ( regex.test( file ) ) {
                				return loader;
                			}
                		}
                		return null;
                	};
                }
                var DefaultLoadingManager = new LoadingManager();
                function Loader( manager ) {
                	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
                	this.crossOrigin = 'anonymous';
                	this.path = '';
                	this.resourcePath = '';
                }
                Object.assign( Loader.prototype, {
                	load: function (                                        ) {},
                	parse: function (            ) {},
                	setCrossOrigin: function ( crossOrigin ) {
                		this.crossOrigin = crossOrigin;
                		return this;
                	},
                	setPath: function ( path ) {
                		this.path = path;
                		return this;
                	},
                	setResourcePath: function ( resourcePath ) {
                		this.resourcePath = resourcePath;
                		return this;
                	}
                } );
                var loading = {};
                function FileLoader( manager ) {
                	Loader.call( this, manager );
                }
                FileLoader.prototype = Object.assign( Object.create( Loader.prototype ), {
                	constructor: FileLoader,
                	load: function ( url, onLoad, onProgress, onError ) {
                		if ( url === undefined ) url = '';
                		if ( this.path !== undefined ) url = this.path + url;
                		url = this.manager.resolveURL( url );
                		var scope = this;
                		var cached = Cache.get( url );
                		if ( cached !== undefined ) {
                			scope.manager.itemStart( url );
                			setTimeout( function () {
                				if ( onLoad ) onLoad( cached );
                				scope.manager.itemEnd( url );
                			}, 0 );
                			return cached;
                		}
                		if ( loading[ url ] !== undefined ) {
                			loading[ url ].push( {
                				onLoad: onLoad,
                				onProgress: onProgress,
                				onError: onError
                			} );
                			return;
                		}
                		var dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
                		var dataUriRegexResult = url.match( dataUriRegex );
                		if ( dataUriRegexResult ) {
                			var mimeType = dataUriRegexResult[ 1 ];
                			var isBase64 = !! dataUriRegexResult[ 2 ];
                			var data = dataUriRegexResult[ 3 ];
                			data = decodeURIComponent( data );
                			if ( isBase64 ) data = atob( data );
                			try {
                				var response;
                				var responseType = ( this.responseType || '' ).toLowerCase();
                				switch ( responseType ) {
                					case 'arraybuffer':
                					case 'blob':
                						var view = new Uint8Array( data.length );
                						for ( var i = 0; i < data.length; i ++ ) {
                							view[ i ] = data.charCodeAt( i );
                						}
                						if ( responseType === 'blob' ) {
                							response = new Blob( [ view.buffer ], { type: mimeType } );
                						} else {
                							response = view.buffer;
                						}
                						break;
                					case 'document':
                						var parser = new DOMParser();
                						response = parser.parseFromString( data, mimeType );
                						break;
                					case 'json':
                						response = JSON.parse( data );
                						break;
                					default:
                						response = data;
                						break;
                				}
                				setTimeout( function () {
                					if ( onLoad ) onLoad( response );
                					scope.manager.itemEnd( url );
                				}, 0 );
                			} catch ( error ) {
                				setTimeout( function () {
                					if ( onError ) onError( error );
                					scope.manager.itemError( url );
                					scope.manager.itemEnd( url );
                				}, 0 );
                			}
                		} else {
                			loading[ url ] = [];
                			loading[ url ].push( {
                				onLoad: onLoad,
                				onProgress: onProgress,
                				onError: onError
                			} );
                			var request = new XMLHttpRequest();
                			request.open( 'GET', url, true );
                			request.addEventListener( 'load', function ( event ) {
                				var response = this.response;
                				var callbacks = loading[ url ];
                				delete loading[ url ];
                				if ( this.status === 200 || this.status === 0 ) {
                					if ( this.status === 0 ) console.warn( 'THREE.FileLoader: HTTP Status 0 received.' );
                					Cache.add( url, response );
                					for ( var i = 0, il = callbacks.length; i < il; i ++ ) {
                						var callback = callbacks[ i ];
                						if ( callback.onLoad ) callback.onLoad( response );
                					}
                					scope.manager.itemEnd( url );
                				} else {
                					for ( var i = 0, il = callbacks.length; i < il; i ++ ) {
                						var callback = callbacks[ i ];
                						if ( callback.onError ) callback.onError( event );
                					}
                					scope.manager.itemError( url );
                					scope.manager.itemEnd( url );
                				}
                			}, false );
                			request.addEventListener( 'progress', function ( event ) {
                				var callbacks = loading[ url ];
                				for ( var i = 0, il = callbacks.length; i < il; i ++ ) {
                					var callback = callbacks[ i ];
                					if ( callback.onProgress ) callback.onProgress( event );
                				}
                			}, false );
                			request.addEventListener( 'error', function ( event ) {
                				var callbacks = loading[ url ];
                				delete loading[ url ];
                				for ( var i = 0, il = callbacks.length; i < il; i ++ ) {
                					var callback = callbacks[ i ];
                					if ( callback.onError ) callback.onError( event );
                				}
                				scope.manager.itemError( url );
                				scope.manager.itemEnd( url );
                			}, false );
                			request.addEventListener( 'abort', function ( event ) {
                				var callbacks = loading[ url ];
                				delete loading[ url ];
                				for ( var i = 0, il = callbacks.length; i < il; i ++ ) {
                					var callback = callbacks[ i ];
                					if ( callback.onError ) callback.onError( event );
                				}
                				scope.manager.itemError( url );
                				scope.manager.itemEnd( url );
                			}, false );
                			if ( this.responseType !== undefined ) request.responseType = this.responseType;
                			if ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;
                			if ( request.overrideMimeType ) request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' );
                			for ( var header in this.requestHeader ) {
                				request.setRequestHeader( header, this.requestHeader[ header ] );
                			}
                			request.send( null );
                		}
                		scope.manager.itemStart( url );
                		return request;
                	},
                	setResponseType: function ( value ) {
                		this.responseType = value;
                		return this;
                	},
                	setWithCredentials: function ( value ) {
                		this.withCredentials = value;
                		return this;
                	},
                	setMimeType: function ( value ) {
                		this.mimeType = value;
                		return this;
                	},
                	setRequestHeader: function ( value ) {
                		this.requestHeader = value;
                		return this;
                	}
                } );
                function AnimationLoader( manager ) {
                	Loader.call( this, manager );
                }
                AnimationLoader.prototype = Object.assign( Object.create( Loader.prototype ), {
                	constructor: AnimationLoader,
                	load: function ( url, onLoad, onProgress, onError ) {
                		var scope = this;
                		var loader = new FileLoader( scope.manager );
                		loader.setPath( scope.path );
                		loader.load( url, function ( text ) {
                			onLoad( scope.parse( JSON.parse( text ) ) );
                		}, onProgress, onError );
                	},
                	parse: function ( json ) {
                		var animations = [];
                		for ( var i = 0; i < json.length; i ++ ) {
                			var clip = AnimationClip.parse( json[ i ] );
                			animations.push( clip );
                		}
                		return animations;
                	}
                } );
                function CompressedTextureLoader( manager ) {
                	Loader.call( this, manager );
                }
                CompressedTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {
                	constructor: CompressedTextureLoader,
                	load: function ( url, onLoad, onProgress, onError ) {
                		var scope = this;
                		var images = [];
                		var texture = new CompressedTexture();
                		texture.image = images;
                		var loader = new FileLoader( this.manager );
                		loader.setPath( this.path );
                		loader.setResponseType( 'arraybuffer' );
                		function loadTexture( i ) {
                			loader.load( url[ i ], function ( buffer ) {
                				var texDatas = scope.parse( buffer, true );
                				images[ i ] = {
                					width: texDatas.width,
                					height: texDatas.height,
                					format: texDatas.format,
                					mipmaps: texDatas.mipmaps
                				};
                				loaded += 1;
                				if ( loaded === 6 ) {
                					if ( texDatas.mipmapCount === 1 )
                						texture.minFilter = LinearFilter;
                					texture.format = texDatas.format;
                					texture.needsUpdate = true;
                					if ( onLoad ) onLoad( texture );
                				}
                			}, onProgress, onError );
                		}
                		if ( Array.isArray( url ) ) {
                			var loaded = 0;
                			for ( var i = 0, il = url.length; i < il; ++ i ) {
                				loadTexture( i );
                			}
                		} else {
                			loader.load( url, function ( buffer ) {
                				var texDatas = scope.parse( buffer, true );
                				if ( texDatas.isCubemap ) {
                					var faces = texDatas.mipmaps.length / texDatas.mipmapCount;
                					for ( var f = 0; f < faces; f ++ ) {
                						images[ f ] = { mipmaps: [] };
                						for ( var i = 0; i < texDatas.mipmapCount; i ++ ) {
                							images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
                							images[ f ].format = texDatas.format;
                							images[ f ].width = texDatas.width;
                							images[ f ].height = texDatas.height;
                						}
                					}
                				} else {
                					texture.image.width = texDatas.width;
                					texture.image.height = texDatas.height;
                					texture.mipmaps = texDatas.mipmaps;
                				}
                				if ( texDatas.mipmapCount === 1 ) {
                					texture.minFilter = LinearFilter;
                				}
                				texture.format = texDatas.format;
                				texture.needsUpdate = true;
                				if ( onLoad ) onLoad( texture );
                			}, onProgress, onError );
                		}
                		return texture;
                	}
                } );
                function DataTextureLoader( manager ) {
                	Loader.call( this, manager );
                }
                DataTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {
                	constructor: DataTextureLoader,
                	load: function ( url, onLoad, onProgress, onError ) {
                		var scope = this;
                		var texture = new DataTexture();
                		var loader = new FileLoader( this.manager );
                		loader.setResponseType( 'arraybuffer' );
                		loader.setPath( this.path );
                		loader.load( url, function ( buffer ) {
                			var texData = scope.parse( buffer );
                			if ( ! texData ) return;
                			if ( texData.image !== undefined ) {
                				texture.image = texData.image;
                			} else if ( texData.data !== undefined ) {
                				texture.image.width = texData.width;
                				texture.image.height = texData.height;
                				texture.image.data = texData.data;
                			}
                			texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;
                			texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;
                			texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;
                			texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;
                			texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;
                			if ( texData.format !== undefined ) {
                				texture.format = texData.format;
                			}
                			if ( texData.type !== undefined ) {
                				texture.type = texData.type;
                			}
                			if ( texData.mipmaps !== undefined ) {
                				texture.mipmaps = texData.mipmaps;
                				texture.minFilter = LinearMipmapLinearFilter;
                			}
                			if ( texData.mipmapCount === 1 ) {
                				texture.minFilter = LinearFilter;
                			}
                			texture.needsUpdate = true;
                			if ( onLoad ) onLoad( texture, texData );
                		}, onProgress, onError );
                		return texture;
                	}
                } );
                function ImageLoader( manager ) {
                	Loader.call( this, manager );
                }
                ImageLoader.prototype = Object.assign( Object.create( Loader.prototype ), {
                	constructor: ImageLoader,
                	load: function ( url, onLoad, onProgress, onError ) {
                		if ( this.path !== undefined ) url = this.path + url;
                		url = this.manager.resolveURL( url );
                		var scope = this;
                		var cached = Cache.get( url );
                		if ( cached !== undefined ) {
                			scope.manager.itemStart( url );
                			setTimeout( function () {
                				if ( onLoad ) onLoad( cached );
                				scope.manager.itemEnd( url );
                			}, 0 );
                			return cached;
                		}
                		var image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );
                		function onImageLoad() {
                			image.removeEventListener( 'load', onImageLoad, false );
                			image.removeEventListener( 'error', onImageError, false );
                			Cache.add( url, this );
                			if ( onLoad ) onLoad( this );
                			scope.manager.itemEnd( url );
                		}
                		function onImageError( event ) {
                			image.removeEventListener( 'load', onImageLoad, false );
                			image.removeEventListener( 'error', onImageError, false );
                			if ( onError ) onError( event );
                			scope.manager.itemError( url );
                			scope.manager.itemEnd( url );
                		}
                		image.addEventListener( 'load', onImageLoad, false );
                		image.addEventListener( 'error', onImageError, false );
                		if ( url.substr( 0, 5 ) !== 'data:' ) {
                			if ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;
                		}
                		scope.manager.itemStart( url );
                		image.src = url;
                		return image;
                	}
                } );
                function CubeTextureLoader( manager ) {
                	Loader.call( this, manager );
                }
                CubeTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {
                	constructor: CubeTextureLoader,
                	load: function ( urls, onLoad, onProgress, onError ) {
                		var texture = new CubeTexture();
                		var loader = new ImageLoader( this.manager );
                		loader.setCrossOrigin( this.crossOrigin );
                		loader.setPath( this.path );
                		var loaded = 0;
                		function loadTexture( i ) {
                			loader.load( urls[ i ], function ( image ) {
                				texture.images[ i ] = image;
                				loaded ++;
                				if ( loaded === 6 ) {
                					texture.needsUpdate = true;
                					if ( onLoad ) onLoad( texture );
                				}
                			}, undefined, onError );
                		}
                		for ( var i = 0; i < urls.length; ++ i ) {
                			loadTexture( i );
                		}
                		return texture;
                	}
                } );
                function TextureLoader( manager ) {
                	Loader.call( this, manager );
                }
                TextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {
                	constructor: TextureLoader,
                	load: function ( url, onLoad, onProgress, onError ) {
                		var texture = new Texture();
                		var loader = new ImageLoader( this.manager );
                		loader.setCrossOrigin( this.crossOrigin );
                		loader.setPath( this.path );
                		loader.load( url, function ( image ) {
                			texture.image = image;
                			var isJPEG = url.search( /\.jpe?g($|\?)/i ) > 0 || url.search( /^data\:image\/jpeg/ ) === 0;
                			texture.format = isJPEG ? RGBFormat : RGBAFormat;
                			texture.needsUpdate = true;
                			if ( onLoad !== undefined ) {
                				onLoad( texture );
                			}
                		}, onProgress, onError );
                		return texture;
                	}
                } );
                function Curve() {
                	this.type = 'Curve';
                	this.arcLengthDivisions = 200;
                }
                Object.assign( Curve.prototype, {
                	getPoint: function (                         ) {
                		console.warn( 'THREE.Curve: .getPoint() not implemented.' );
                		return null;
                	},
                	getPointAt: function ( u, optionalTarget ) {
                		var t = this.getUtoTmapping( u );
                		return this.getPoint( t, optionalTarget );
                	},
                	getPoints: function ( divisions ) {
                		if ( divisions === undefined ) divisions = 5;
                		var points = [];
                		for ( var d = 0; d <= divisions; d ++ ) {
                			points.push( this.getPoint( d / divisions ) );
                		}
                		return points;
                	},
                	getSpacedPoints: function ( divisions ) {
                		if ( divisions === undefined ) divisions = 5;
                		var points = [];
                		for ( var d = 0; d <= divisions; d ++ ) {
                			points.push( this.getPointAt( d / divisions ) );
                		}
                		return points;
                	},
                	getLength: function () {
                		var lengths = this.getLengths();
                		return lengths[ lengths.length - 1 ];
                	},
                	getLengths: function ( divisions ) {
                		if ( divisions === undefined ) divisions = this.arcLengthDivisions;
                		if ( this.cacheArcLengths &&
                			( this.cacheArcLengths.length === divisions + 1 ) &&
                			! this.needsUpdate ) {
                			return this.cacheArcLengths;
                		}
                		this.needsUpdate = false;
                		var cache = [];
                		var current, last = this.getPoint( 0 );
                		var p, sum = 0;
                		cache.push( 0 );
                		for ( p = 1; p <= divisions; p ++ ) {
                			current = this.getPoint( p / divisions );
                			sum += current.distanceTo( last );
                			cache.push( sum );
                			last = current;
                		}
                		this.cacheArcLengths = cache;
                		return cache;
                	},
                	updateArcLengths: function () {
                		this.needsUpdate = true;
                		this.getLengths();
                	},
                	getUtoTmapping: function ( u, distance ) {
                		var arcLengths = this.getLengths();
                		var i = 0, il = arcLengths.length;
                		var targetArcLength;
                		if ( distance ) {
                			targetArcLength = distance;
                		} else {
                			targetArcLength = u * arcLengths[ il - 1 ];
                		}
                		var low = 0, high = il - 1, comparison;
                		while ( low <= high ) {
                			i = Math.floor( low + ( high - low ) / 2 );
                			comparison = arcLengths[ i ] - targetArcLength;
                			if ( comparison < 0 ) {
                				low = i + 1;
                			} else if ( comparison > 0 ) {
                				high = i - 1;
                			} else {
                				high = i;
                				break;
                			}
                		}
                		i = high;
                		if ( arcLengths[ i ] === targetArcLength ) {
                			return i / ( il - 1 );
                		}
                		var lengthBefore = arcLengths[ i ];
                		var lengthAfter = arcLengths[ i + 1 ];
                		var segmentLength = lengthAfter - lengthBefore;
                		var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;
                		var t = ( i + segmentFraction ) / ( il - 1 );
                		return t;
                	},
                	getTangent: function ( t ) {
                		var delta = 0.0001;
                		var t1 = t - delta;
                		var t2 = t + delta;
                		if ( t1 < 0 ) t1 = 0;
                		if ( t2 > 1 ) t2 = 1;
                		var pt1 = this.getPoint( t1 );
                		var pt2 = this.getPoint( t2 );
                		var vec = pt2.clone().sub( pt1 );
                		return vec.normalize();
                	},
                	getTangentAt: function ( u ) {
                		var t = this.getUtoTmapping( u );
                		return this.getTangent( t );
                	},
                	computeFrenetFrames: function ( segments, closed ) {
                		var normal = new Vector3();
                		var tangents = [];
                		var normals = [];
                		var binormals = [];
                		var vec = new Vector3();
                		var mat = new Matrix4();
                		var i, u, theta;
                		for ( i = 0; i <= segments; i ++ ) {
                			u = i / segments;
                			tangents[ i ] = this.getTangentAt( u );
                			tangents[ i ].normalize();
                		}
                		normals[ 0 ] = new Vector3();
                		binormals[ 0 ] = new Vector3();
                		var min = Number.MAX_VALUE;
                		var tx = Math.abs( tangents[ 0 ].x );
                		var ty = Math.abs( tangents[ 0 ].y );
                		var tz = Math.abs( tangents[ 0 ].z );
                		if ( tx <= min ) {
                			min = tx;
                			normal.set( 1, 0, 0 );
                		}
                		if ( ty <= min ) {
                			min = ty;
                			normal.set( 0, 1, 0 );
                		}
                		if ( tz <= min ) {
                			normal.set( 0, 0, 1 );
                		}
                		vec.crossVectors( tangents[ 0 ], normal ).normalize();
                		normals[ 0 ].crossVectors( tangents[ 0 ], vec );
                		binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );
                		for ( i = 1; i <= segments; i ++ ) {
                			normals[ i ] = normals[ i - 1 ].clone();
                			binormals[ i ] = binormals[ i - 1 ].clone();
                			vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );
                			if ( vec.length() > Number.EPSILON ) {
                				vec.normalize();
                				theta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) );
                				normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );
                			}
                			binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );
                		}
                		if ( closed === true ) {
                			theta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
                			theta /= segments;
                			if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {
                				theta = - theta;
                			}
                			for ( i = 1; i <= segments; i ++ ) {
                				normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
                				binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );
                			}
                		}
                		return {
                			tangents: tangents,
                			normals: normals,
                			binormals: binormals
                		};
                	},
                	clone: function () {
                		return new this.constructor().copy( this );
                	},
                	copy: function ( source ) {
                		this.arcLengthDivisions = source.arcLengthDivisions;
                		return this;
                	},
                	toJSON: function () {
                		var data = {
                			metadata: {
                				version: 4.5,
                				type: 'Curve',
                				generator: 'Curve.toJSON'
                			}
                		};
                		data.arcLengthDivisions = this.arcLengthDivisions;
                		data.type = this.type;
                		return data;
                	},
                	fromJSON: function ( json ) {
                		this.arcLengthDivisions = json.arcLengthDivisions;
                		return this;
                	}
                } );
                function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {
                	Curve.call( this );
                	this.type = 'EllipseCurve';
                	this.aX = aX || 0;
                	this.aY = aY || 0;
                	this.xRadius = xRadius || 1;
                	this.yRadius = yRadius || 1;
                	this.aStartAngle = aStartAngle || 0;
                	this.aEndAngle = aEndAngle || 2 * Math.PI;
                	this.aClockwise = aClockwise || false;
                	this.aRotation = aRotation || 0;
                }
                EllipseCurve.prototype = Object.create( Curve.prototype );
                EllipseCurve.prototype.constructor = EllipseCurve;
                EllipseCurve.prototype.isEllipseCurve = true;
                EllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {
                	var point = optionalTarget || new Vector2();
                	var twoPi = Math.PI * 2;
                	var deltaAngle = this.aEndAngle - this.aStartAngle;
                	var samePoints = Math.abs( deltaAngle ) < Number.EPSILON;
                	while ( deltaAngle < 0 ) deltaAngle += twoPi;
                	while ( deltaAngle > twoPi ) deltaAngle -= twoPi;
                	if ( deltaAngle < Number.EPSILON ) {
                		if ( samePoints ) {
                			deltaAngle = 0;
                		} else {
                			deltaAngle = twoPi;
                		}
                	}
                	if ( this.aClockwise === true && ! samePoints ) {
                		if ( deltaAngle === twoPi ) {
                			deltaAngle = - twoPi;
                		} else {
                			deltaAngle = deltaAngle - twoPi;
                		}
                	}
                	var angle = this.aStartAngle + t * deltaAngle;
                	var x = this.aX + this.xRadius * Math.cos( angle );
                	var y = this.aY + this.yRadius * Math.sin( angle );
                	if ( this.aRotation !== 0 ) {
                		var cos = Math.cos( this.aRotation );
                		var sin = Math.sin( this.aRotation );
                		var tx = x - this.aX;
                		var ty = y - this.aY;
                		x = tx * cos - ty * sin + this.aX;
                		y = tx * sin + ty * cos + this.aY;
                	}
                	return point.set( x, y );
                };
                EllipseCurve.prototype.copy = function ( source ) {
                	Curve.prototype.copy.call( this, source );
                	this.aX = source.aX;
                	this.aY = source.aY;
                	this.xRadius = source.xRadius;
                	this.yRadius = source.yRadius;
                	this.aStartAngle = source.aStartAngle;
                	this.aEndAngle = source.aEndAngle;
                	this.aClockwise = source.aClockwise;
                	this.aRotation = source.aRotation;
                	return this;
                };
                EllipseCurve.prototype.toJSON = function () {
                	var data = Curve.prototype.toJSON.call( this );
                	data.aX = this.aX;
                	data.aY = this.aY;
                	data.xRadius = this.xRadius;
                	data.yRadius = this.yRadius;
                	data.aStartAngle = this.aStartAngle;
                	data.aEndAngle = this.aEndAngle;
                	data.aClockwise = this.aClockwise;
                	data.aRotation = this.aRotation;
                	return data;
                };
                EllipseCurve.prototype.fromJSON = function ( json ) {
                	Curve.prototype.fromJSON.call( this, json );
                	this.aX = json.aX;
                	this.aY = json.aY;
                	this.xRadius = json.xRadius;
                	this.yRadius = json.yRadius;
                	this.aStartAngle = json.aStartAngle;
                	this.aEndAngle = json.aEndAngle;
                	this.aClockwise = json.aClockwise;
                	this.aRotation = json.aRotation;
                	return this;
                };
                function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {
                	EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );
                	this.type = 'ArcCurve';
                }
                ArcCurve.prototype = Object.create( EllipseCurve.prototype );
                ArcCurve.prototype.constructor = ArcCurve;
                ArcCurve.prototype.isArcCurve = true;
                function CubicPoly() {
                	var c0 = 0, c1 = 0, c2 = 0, c3 = 0;
                	function init( x0, x1, t0, t1 ) {
                		c0 = x0;
                		c1 = t0;
                		c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
                		c3 = 2 * x0 - 2 * x1 + t0 + t1;
                	}
                	return {
                		initCatmullRom: function ( x0, x1, x2, x3, tension ) {
                			init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );
                		},
                		initNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {
                			var t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
                			var t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;
                			t1 *= dt1;
                			t2 *= dt1;
                			init( x1, x2, t1, t2 );
                		},
                		calc: function ( t ) {
                			var t2 = t * t;
                			var t3 = t2 * t;
                			return c0 + c1 * t + c2 * t2 + c3 * t3;
                		}
                	};
                }
                var tmp = new Vector3();
                var px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();
                function CatmullRomCurve3( points, closed, curveType, tension ) {
                	Curve.call( this );
                	this.type = 'CatmullRomCurve3';
                	this.points = points || [];
                	this.closed = closed || false;
                	this.curveType = curveType || 'centripetal';
                	this.tension = tension || 0.5;
                }
                CatmullRomCurve3.prototype = Object.create( Curve.prototype );
                CatmullRomCurve3.prototype.constructor = CatmullRomCurve3;
                CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;
                CatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {
                	var point = optionalTarget || new Vector3();
                	var points = this.points;
                	var l = points.length;
                	var p = ( l - ( this.closed ? 0 : 1 ) ) * t;
                	var intPoint = Math.floor( p );
                	var weight = p - intPoint;
                	if ( this.closed ) {
                		intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;
                	} else if ( weight === 0 && intPoint === l - 1 ) {
                		intPoint = l - 2;
                		weight = 1;
                	}
                	var p0, p1, p2, p3;
                	if ( this.closed || intPoint > 0 ) {
                		p0 = points[ ( intPoint - 1 ) % l ];
                	} else {
                		tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
                		p0 = tmp;
                	}
                	p1 = points[ intPoint % l ];
                	p2 = points[ ( intPoint + 1 ) % l ];
                	if ( this.closed || intPoint + 2 < l ) {
                		p3 = points[ ( intPoint + 2 ) % l ];
                	} else {
                		tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
                		p3 = tmp;
                	}
                	if ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {
                		var pow = this.curveType === 'chordal' ? 0.5 : 0.25;
                		var dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
                		var dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
                		var dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );
                		if ( dt1 < 1e-4 ) dt1 = 1.0;
                		if ( dt0 < 1e-4 ) dt0 = dt1;
                		if ( dt2 < 1e-4 ) dt2 = dt1;
                		px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
                		py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
                		pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );
                	} else if ( this.curveType === 'catmullrom' ) {
                		px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );
                		py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );
                		pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );
                	}
                	point.set(
                		px.calc( weight ),
                		py.calc( weight ),
                		pz.calc( weight )
                	);
                	return point;
                };
                CatmullRomCurve3.prototype.copy = function ( source ) {
                	Curve.prototype.copy.call( this, source );
                	this.points = [];
                	for ( var i = 0, l = source.points.length; i < l; i ++ ) {
                		var point = source.points[ i ];
                		this.points.push( point.clone() );
                	}
                	this.closed = source.closed;
                	this.curveType = source.curveType;
                	this.tension = source.tension;
                	return this;
                };
                CatmullRomCurve3.prototype.toJSON = function () {
                	var data = Curve.prototype.toJSON.call( this );
                	data.points = [];
                	for ( var i = 0, l = this.points.length; i < l; i ++ ) {
                		var point = this.points[ i ];
                		data.points.push( point.toArray() );
                	}
                	data.closed = this.closed;
                	data.curveType = this.curveType;
                	data.tension = this.tension;
                	return data;
                };
                CatmullRomCurve3.prototype.fromJSON = function ( json ) {
                	Curve.prototype.fromJSON.call( this, json );
                	this.points = [];
                	for ( var i = 0, l = json.points.length; i < l; i ++ ) {
                		var point = json.points[ i ];
                		this.points.push( new Vector3().fromArray( point ) );
                	}
                	this.closed = json.closed;
                	this.curveType = json.curveType;
                	this.tension = json.tension;
                	return this;
                };
                function CatmullRom( t, p0, p1, p2, p3 ) {
                	var v0 = ( p2 - p0 ) * 0.5;
                	var v1 = ( p3 - p1 ) * 0.5;
                	var t2 = t * t;
                	var t3 = t * t2;
                	return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;
                }
                function QuadraticBezierP0( t, p ) {
                	var k = 1 - t;
                	return k * k * p;
                }
                function QuadraticBezierP1( t, p ) {
                	return 2 * ( 1 - t ) * t * p;
                }
                function QuadraticBezierP2( t, p ) {
                	return t * t * p;
                }
                function QuadraticBezier( t, p0, p1, p2 ) {
                	return QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +
                		QuadraticBezierP2( t, p2 );
                }
                function CubicBezierP0( t, p ) {
                	var k = 1 - t;
                	return k * k * k * p;
                }
                function CubicBezierP1( t, p ) {
                	var k = 1 - t;
                	return 3 * k * k * t * p;
                }
                function CubicBezierP2( t, p ) {
                	return 3 * ( 1 - t ) * t * t * p;
                }
                function CubicBezierP3( t, p ) {
                	return t * t * t * p;
                }
                function CubicBezier( t, p0, p1, p2, p3 ) {
                	return CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +
                		CubicBezierP3( t, p3 );
                }
                function CubicBezierCurve( v0, v1, v2, v3 ) {
                	Curve.call( this );
                	this.type = 'CubicBezierCurve';
                	this.v0 = v0 || new Vector2();
                	this.v1 = v1 || new Vector2();
                	this.v2 = v2 || new Vector2();
                	this.v3 = v3 || new Vector2();
                }
                CubicBezierCurve.prototype = Object.create( Curve.prototype );
                CubicBezierCurve.prototype.constructor = CubicBezierCurve;
                CubicBezierCurve.prototype.isCubicBezierCurve = true;
                CubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {
                	var point = optionalTarget || new Vector2();
                	var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
                	point.set(
                		CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
                		CubicBezier( t, v0.y, v1.y, v2.y, v3.y )
                	);
                	return point;
                };
                CubicBezierCurve.prototype.copy = function ( source ) {
                	Curve.prototype.copy.call( this, source );
                	this.v0.copy( source.v0 );
                	this.v1.copy( source.v1 );
                	this.v2.copy( source.v2 );
                	this.v3.copy( source.v3 );
                	return this;
                };
                CubicBezierCurve.prototype.toJSON = function () {
                	var data = Curve.prototype.toJSON.call( this );
                	data.v0 = this.v0.toArray();
                	data.v1 = this.v1.toArray();
                	data.v2 = this.v2.toArray();
                	data.v3 = this.v3.toArray();
                	return data;
                };
                CubicBezierCurve.prototype.fromJSON = function ( json ) {
                	Curve.prototype.fromJSON.call( this, json );
                	this.v0.fromArray( json.v0 );
                	this.v1.fromArray( json.v1 );
                	this.v2.fromArray( json.v2 );
                	this.v3.fromArray( json.v3 );
                	return this;
                };
                function CubicBezierCurve3( v0, v1, v2, v3 ) {
                	Curve.call( this );
                	this.type = 'CubicBezierCurve3';
                	this.v0 = v0 || new Vector3();
                	this.v1 = v1 || new Vector3();
                	this.v2 = v2 || new Vector3();
                	this.v3 = v3 || new Vector3();
                }
                CubicBezierCurve3.prototype = Object.create( Curve.prototype );
                CubicBezierCurve3.prototype.constructor = CubicBezierCurve3;
                CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;
                CubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {
                	var point = optionalTarget || new Vector3();
                	var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
                	point.set(
                		CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
                		CubicBezier( t, v0.y, v1.y, v2.y, v3.y ),
                		CubicBezier( t, v0.z, v1.z, v2.z, v3.z )
                	);
                	return point;
                };
                CubicBezierCurve3.prototype.copy = function ( source ) {
                	Curve.prototype.copy.call( this, source );
                	this.v0.copy( source.v0 );
                	this.v1.copy( source.v1 );
                	this.v2.copy( source.v2 );
                	this.v3.copy( source.v3 );
                	return this;
                };
                CubicBezierCurve3.prototype.toJSON = function () {
                	var data = Curve.prototype.toJSON.call( this );
                	data.v0 = this.v0.toArray();
                	data.v1 = this.v1.toArray();
                	data.v2 = this.v2.toArray();
                	data.v3 = this.v3.toArray();
                	return data;
                };
                CubicBezierCurve3.prototype.fromJSON = function ( json ) {
                	Curve.prototype.fromJSON.call( this, json );
                	this.v0.fromArray( json.v0 );
                	this.v1.fromArray( json.v1 );
                	this.v2.fromArray( json.v2 );
                	this.v3.fromArray( json.v3 );
                	return this;
                };
                function LineCurve( v1, v2 ) {
                	Curve.call( this );
                	this.type = 'LineCurve';
                	this.v1 = v1 || new Vector2();
                	this.v2 = v2 || new Vector2();
                }
                LineCurve.prototype = Object.create( Curve.prototype );
                LineCurve.prototype.constructor = LineCurve;
                LineCurve.prototype.isLineCurve = true;
                LineCurve.prototype.getPoint = function ( t, optionalTarget ) {
                	var point = optionalTarget || new Vector2();
                	if ( t === 1 ) {
                		point.copy( this.v2 );
                	} else {
                		point.copy( this.v2 ).sub( this.v1 );
                		point.multiplyScalar( t ).add( this.v1 );
                	}
                	return point;
                };
                LineCurve.prototype.getPointAt = function ( u, optionalTarget ) {
                	return this.getPoint( u, optionalTarget );
                };
                LineCurve.prototype.getTangent = function (         ) {
                	var tangent = this.v2.clone().sub( this.v1 );
                	return tangent.normalize();
                };
                LineCurve.prototype.copy = function ( source ) {
                	Curve.prototype.copy.call( this, source );
                	this.v1.copy( source.v1 );
                	this.v2.copy( source.v2 );
                	return this;
                };
                LineCurve.prototype.toJSON = function () {
                	var data = Curve.prototype.toJSON.call( this );
                	data.v1 = this.v1.toArray();
                	data.v2 = this.v2.toArray();
                	return data;
                };
                LineCurve.prototype.fromJSON = function ( json ) {
                	Curve.prototype.fromJSON.call( this, json );
                	this.v1.fromArray( json.v1 );
                	this.v2.fromArray( json.v2 );
                	return this;
                };
                function LineCurve3( v1, v2 ) {
                	Curve.call( this );
                	this.type = 'LineCurve3';
                	this.v1 = v1 || new Vector3();
                	this.v2 = v2 || new Vector3();
                }
                LineCurve3.prototype = Object.create( Curve.prototype );
                LineCurve3.prototype.constructor = LineCurve3;
                LineCurve3.prototype.isLineCurve3 = true;
                LineCurve3.prototype.getPoint = function ( t, optionalTarget ) {
                	var point = optionalTarget || new Vector3();
                	if ( t === 1 ) {
                		point.copy( this.v2 );
                	} else {
                		point.copy( this.v2 ).sub( this.v1 );
                		point.multiplyScalar( t ).add( this.v1 );
                	}
                	return point;
                };
                LineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {
                	return this.getPoint( u, optionalTarget );
                };
                LineCurve3.prototype.copy = function ( source ) {
                	Curve.prototype.copy.call( this, source );
                	this.v1.copy( source.v1 );
                	this.v2.copy( source.v2 );
                	return this;
                };
                LineCurve3.prototype.toJSON = function () {
                	var data = Curve.prototype.toJSON.call( this );
                	data.v1 = this.v1.toArray();
                	data.v2 = this.v2.toArray();
                	return data;
                };
                LineCurve3.prototype.fromJSON = function ( json ) {
                	Curve.prototype.fromJSON.call( this, json );
                	this.v1.fromArray( json.v1 );
                	this.v2.fromArray( json.v2 );
                	return this;
                };
                function QuadraticBezierCurve( v0, v1, v2 ) {
                	Curve.call( this );
                	this.type = 'QuadraticBezierCurve';
                	this.v0 = v0 || new Vector2();
                	this.v1 = v1 || new Vector2();
                	this.v2 = v2 || new Vector2();
                }
                QuadraticBezierCurve.prototype = Object.create( Curve.prototype );
                QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;
                QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;
                QuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {
                	var point = optionalTarget || new Vector2();
                	var v0 = this.v0, v1 = this.v1, v2 = this.v2;
                	point.set(
                		QuadraticBezier( t, v0.x, v1.x, v2.x ),
                		QuadraticBezier( t, v0.y, v1.y, v2.y )
                	);
                	return point;
                };
                QuadraticBezierCurve.prototype.copy = function ( source ) {
                	Curve.prototype.copy.call( this, source );
                	this.v0.copy( source.v0 );
                	this.v1.copy( source.v1 );
                	this.v2.copy( source.v2 );
                	return this;
                };
                QuadraticBezierCurve.prototype.toJSON = function () {
                	var data = Curve.prototype.toJSON.call( this );
                	data.v0 = this.v0.toArray();
                	data.v1 = this.v1.toArray();
                	data.v2 = this.v2.toArray();
                	return data;
                };
                QuadraticBezierCurve.prototype.fromJSON = function ( json ) {
                	Curve.prototype.fromJSON.call( this, json );
                	this.v0.fromArray( json.v0 );
                	this.v1.fromArray( json.v1 );
                	this.v2.fromArray( json.v2 );
                	return this;
                };
                function QuadraticBezierCurve3( v0, v1, v2 ) {
                	Curve.call( this );
                	this.type = 'QuadraticBezierCurve3';
                	this.v0 = v0 || new Vector3();
                	this.v1 = v1 || new Vector3();
                	this.v2 = v2 || new Vector3();
                }
                QuadraticBezierCurve3.prototype = Object.create( Curve.prototype );
                QuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;
                QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;
                QuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {
                	var point = optionalTarget || new Vector3();
                	var v0 = this.v0, v1 = this.v1, v2 = this.v2;
                	point.set(
                		QuadraticBezier( t, v0.x, v1.x, v2.x ),
                		QuadraticBezier( t, v0.y, v1.y, v2.y ),
                		QuadraticBezier( t, v0.z, v1.z, v2.z )
                	);
                	return point;
                };
                QuadraticBezierCurve3.prototype.copy = function ( source ) {
                	Curve.prototype.copy.call( this, source );
                	this.v0.copy( source.v0 );
                	this.v1.copy( source.v1 );
                	this.v2.copy( source.v2 );
                	return this;
                };
                QuadraticBezierCurve3.prototype.toJSON = function () {
                	var data = Curve.prototype.toJSON.call( this );
                	data.v0 = this.v0.toArray();
                	data.v1 = this.v1.toArray();
                	data.v2 = this.v2.toArray();
                	return data;
                };
                QuadraticBezierCurve3.prototype.fromJSON = function ( json ) {
                	Curve.prototype.fromJSON.call( this, json );
                	this.v0.fromArray( json.v0 );
                	this.v1.fromArray( json.v1 );
                	this.v2.fromArray( json.v2 );
                	return this;
                };
                function SplineCurve( points                        ) {
                	Curve.call( this );
                	this.type = 'SplineCurve';
                	this.points = points || [];
                }
                SplineCurve.prototype = Object.create( Curve.prototype );
                SplineCurve.prototype.constructor = SplineCurve;
                SplineCurve.prototype.isSplineCurve = true;
                SplineCurve.prototype.getPoint = function ( t, optionalTarget ) {
                	var point = optionalTarget || new Vector2();
                	var points = this.points;
                	var p = ( points.length - 1 ) * t;
                	var intPoint = Math.floor( p );
                	var weight = p - intPoint;
                	var p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
                	var p1 = points[ intPoint ];
                	var p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
                	var p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];
                	point.set(
                		CatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),
                		CatmullRom( weight, p0.y, p1.y, p2.y, p3.y )
                	);
                	return point;
                };
                SplineCurve.prototype.copy = function ( source ) {
                	Curve.prototype.copy.call( this, source );
                	this.points = [];
                	for ( var i = 0, l = source.points.length; i < l; i ++ ) {
                		var point = source.points[ i ];
                		this.points.push( point.clone() );
                	}
                	return this;
                };
                SplineCurve.prototype.toJSON = function () {
                	var data = Curve.prototype.toJSON.call( this );
                	data.points = [];
                	for ( var i = 0, l = this.points.length; i < l; i ++ ) {
                		var point = this.points[ i ];
                		data.points.push( point.toArray() );
                	}
                	return data;
                };
                SplineCurve.prototype.fromJSON = function ( json ) {
                	Curve.prototype.fromJSON.call( this, json );
                	this.points = [];
                	for ( var i = 0, l = json.points.length; i < l; i ++ ) {
                		var point = json.points[ i ];
                		this.points.push( new Vector2().fromArray( point ) );
                	}
                	return this;
                };
                var Curves =              Object.freeze({
                	__proto__: null,
                	ArcCurve: ArcCurve,
                	CatmullRomCurve3: CatmullRomCurve3,
                	CubicBezierCurve: CubicBezierCurve,
                	CubicBezierCurve3: CubicBezierCurve3,
                	EllipseCurve: EllipseCurve,
                	LineCurve: LineCurve,
                	LineCurve3: LineCurve3,
                	QuadraticBezierCurve: QuadraticBezierCurve,
                	QuadraticBezierCurve3: QuadraticBezierCurve3,
                	SplineCurve: SplineCurve
                });
                function CurvePath() {
                	Curve.call( this );
                	this.type = 'CurvePath';
                	this.curves = [];
                	this.autoClose = false;
                }
                CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {
                	constructor: CurvePath,
                	add: function ( curve ) {
                		this.curves.push( curve );
                	},
                	closePath: function () {
                		var startPoint = this.curves[ 0 ].getPoint( 0 );
                		var endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );
                		if ( ! startPoint.equals( endPoint ) ) {
                			this.curves.push( new LineCurve( endPoint, startPoint ) );
                		}
                	},
                	getPoint: function ( t ) {
                		var d = t * this.getLength();
                		var curveLengths = this.getCurveLengths();
                		var i = 0;
                		while ( i < curveLengths.length ) {
                			if ( curveLengths[ i ] >= d ) {
                				var diff = curveLengths[ i ] - d;
                				var curve = this.curves[ i ];
                				var segmentLength = curve.getLength();
                				var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
                				return curve.getPointAt( u );
                			}
                			i ++;
                		}
                		return null;
                	},
                	getLength: function () {
                		var lens = this.getCurveLengths();
                		return lens[ lens.length - 1 ];
                	},
                	updateArcLengths: function () {
                		this.needsUpdate = true;
                		this.cacheLengths = null;
                		this.getCurveLengths();
                	},
                	getCurveLengths: function () {
                		if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {
                			return this.cacheLengths;
                		}
                		var lengths = [], sums = 0;
                		for ( var i = 0, l = this.curves.length; i < l; i ++ ) {
                			sums += this.curves[ i ].getLength();
                			lengths.push( sums );
                		}
                		this.cacheLengths = lengths;
                		return lengths;
                	},
                	getSpacedPoints: function ( divisions ) {
                		if ( divisions === undefined ) divisions = 40;
                		var points = [];
                		for ( var i = 0; i <= divisions; i ++ ) {
                			points.push( this.getPoint( i / divisions ) );
                		}
                		if ( this.autoClose ) {
                			points.push( points[ 0 ] );
                		}
                		return points;
                	},
                	getPoints: function ( divisions ) {
                		divisions = divisions || 12;
                		var points = [], last;
                		for ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {
                			var curve = curves[ i ];
                			var resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2
                				: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1
                					: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length
                						: divisions;
                			var pts = curve.getPoints( resolution );
                			for ( var j = 0; j < pts.length; j ++ ) {
                				var point = pts[ j ];
                				if ( last && last.equals( point ) ) continue;
                				points.push( point );
                				last = point;
                			}
                		}
                		if ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {
                			points.push( points[ 0 ] );
                		}
                		return points;
                	},
                	copy: function ( source ) {
                		Curve.prototype.copy.call( this, source );
                		this.curves = [];
                		for ( var i = 0, l = source.curves.length; i < l; i ++ ) {
                			var curve = source.curves[ i ];
                			this.curves.push( curve.clone() );
                		}
                		this.autoClose = source.autoClose;
                		return this;
                	},
                	toJSON: function () {
                		var data = Curve.prototype.toJSON.call( this );
                		data.autoClose = this.autoClose;
                		data.curves = [];
                		for ( var i = 0, l = this.curves.length; i < l; i ++ ) {
                			var curve = this.curves[ i ];
                			data.curves.push( curve.toJSON() );
                		}
                		return data;
                	},
                	fromJSON: function ( json ) {
                		Curve.prototype.fromJSON.call( this, json );
                		this.autoClose = json.autoClose;
                		this.curves = [];
                		for ( var i = 0, l = json.curves.length; i < l; i ++ ) {
                			var curve = json.curves[ i ];
                			this.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );
                		}
                		return this;
                	}
                } );
                function Path( points ) {
                	CurvePath.call( this );
                	this.type = 'Path';
                	this.currentPoint = new Vector2();
                	if ( points ) {
                		this.setFromPoints( points );
                	}
                }
                Path.prototype = Object.assign( Object.create( CurvePath.prototype ), {
                	constructor: Path,
                	setFromPoints: function ( points ) {
                		this.moveTo( points[ 0 ].x, points[ 0 ].y );
                		for ( var i = 1, l = points.length; i < l; i ++ ) {
                			this.lineTo( points[ i ].x, points[ i ].y );
                		}
                		return this;
                	},
                	moveTo: function ( x, y ) {
                		this.currentPoint.set( x, y );
                		return this;
                	},
                	lineTo: function ( x, y ) {
                		var curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );
                		this.curves.push( curve );
                		this.currentPoint.set( x, y );
                		return this;
                	},
                	quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {
                		var curve = new QuadraticBezierCurve(
                			this.currentPoint.clone(),
                			new Vector2( aCPx, aCPy ),
                			new Vector2( aX, aY )
                		);
                		this.curves.push( curve );
                		this.currentPoint.set( aX, aY );
                		return this;
                	},
                	bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {
                		var curve = new CubicBezierCurve(
                			this.currentPoint.clone(),
                			new Vector2( aCP1x, aCP1y ),
                			new Vector2( aCP2x, aCP2y ),
                			new Vector2( aX, aY )
                		);
                		this.curves.push( curve );
                		this.currentPoint.set( aX, aY );
                		return this;
                	},
                	splineThru: function ( pts                     ) {
                		var npts = [ this.currentPoint.clone() ].concat( pts );
                		var curve = new SplineCurve( npts );
                		this.curves.push( curve );
                		this.currentPoint.copy( pts[ pts.length - 1 ] );
                		return this;
                	},
                	arc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {
                		var x0 = this.currentPoint.x;
                		var y0 = this.currentPoint.y;
                		this.absarc( aX + x0, aY + y0, aRadius,
                			aStartAngle, aEndAngle, aClockwise );
                		return this;
                	},
                	absarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {
                		this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );
                		return this;
                	},
                	ellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {
                		var x0 = this.currentPoint.x;
                		var y0 = this.currentPoint.y;
                		this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );
                		return this;
                	},
                	absellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {
                		var curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );
                		if ( this.curves.length > 0 ) {
                			var firstPoint = curve.getPoint( 0 );
                			if ( ! firstPoint.equals( this.currentPoint ) ) {
                				this.lineTo( firstPoint.x, firstPoint.y );
                			}
                		}
                		this.curves.push( curve );
                		var lastPoint = curve.getPoint( 1 );
                		this.currentPoint.copy( lastPoint );
                		return this;
                	},
                	copy: function ( source ) {
                		CurvePath.prototype.copy.call( this, source );
                		this.currentPoint.copy( source.currentPoint );
                		return this;
                	},
                	toJSON: function () {
                		var data = CurvePath.prototype.toJSON.call( this );
                		data.currentPoint = this.currentPoint.toArray();
                		return data;
                	},
                	fromJSON: function ( json ) {
                		CurvePath.prototype.fromJSON.call( this, json );
                		this.currentPoint.fromArray( json.currentPoint );
                		return this;
                	}
                } );
                function Shape( points ) {
                	Path.call( this, points );
                	this.uuid = _Math.generateUUID();
                	this.type = 'Shape';
                	this.holes = [];
                }
                Shape.prototype = Object.assign( Object.create( Path.prototype ), {
                	constructor: Shape,
                	getPointsHoles: function ( divisions ) {
                		var holesPts = [];
                		for ( var i = 0, l = this.holes.length; i < l; i ++ ) {
                			holesPts[ i ] = this.holes[ i ].getPoints( divisions );
                		}
                		return holesPts;
                	},
                	extractPoints: function ( divisions ) {
                		return {
                			shape: this.getPoints( divisions ),
                			holes: this.getPointsHoles( divisions )
                		};
                	},
                	copy: function ( source ) {
                		Path.prototype.copy.call( this, source );
                		this.holes = [];
                		for ( var i = 0, l = source.holes.length; i < l; i ++ ) {
                			var hole = source.holes[ i ];
                			this.holes.push( hole.clone() );
                		}
                		return this;
                	},
                	toJSON: function () {
                		var data = Path.prototype.toJSON.call( this );
                		data.uuid = this.uuid;
                		data.holes = [];
                		for ( var i = 0, l = this.holes.length; i < l; i ++ ) {
                			var hole = this.holes[ i ];
                			data.holes.push( hole.toJSON() );
                		}
                		return data;
                	},
                	fromJSON: function ( json ) {
                		Path.prototype.fromJSON.call( this, json );
                		this.uuid = json.uuid;
                		this.holes = [];
                		for ( var i = 0, l = json.holes.length; i < l; i ++ ) {
                			var hole = json.holes[ i ];
                			this.holes.push( new Path().fromJSON( hole ) );
                		}
                		return this;
                	}
                } );
                function Light( color, intensity ) {
                	Object3D.call( this );
                	this.type = 'Light';
                	this.color = new Color( color );
                	this.intensity = intensity !== undefined ? intensity : 1;
                	this.receiveShadow = undefined;
                }
                Light.prototype = Object.assign( Object.create( Object3D.prototype ), {
                	constructor: Light,
                	isLight: true,
                	copy: function ( source ) {
                		Object3D.prototype.copy.call( this, source );
                		this.color.copy( source.color );
                		this.intensity = source.intensity;
                		return this;
                	},
                	toJSON: function ( meta ) {
                		var data = Object3D.prototype.toJSON.call( this, meta );
                		data.object.color = this.color.getHex();
                		data.object.intensity = this.intensity;
                		if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();
                		if ( this.distance !== undefined ) data.object.distance = this.distance;
                		if ( this.angle !== undefined ) data.object.angle = this.angle;
                		if ( this.decay !== undefined ) data.object.decay = this.decay;
                		if ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;
                		if ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();
                		return data;
                	}
                } );
                function HemisphereLight( skyColor, groundColor, intensity ) {
                	Light.call( this, skyColor, intensity );
                	this.type = 'HemisphereLight';
                	this.castShadow = undefined;
                	this.position.copy( Object3D.DefaultUp );
                	this.updateMatrix();
                	this.groundColor = new Color( groundColor );
                }
                HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {
                	constructor: HemisphereLight,
                	isHemisphereLight: true,
                	copy: function ( source ) {
                		Light.prototype.copy.call( this, source );
                		this.groundColor.copy( source.groundColor );
                		return this;
                	}
                } );
                function LightShadow( camera ) {
                	this.camera = camera;
                	this.bias = 0;
                	this.radius = 1;
                	this.mapSize = new Vector2( 512, 512 );
                	this.map = null;
                	this.mapPass = null;
                	this.matrix = new Matrix4();
                	this._frustum = new Frustum();
                	this._frameExtents = new Vector2( 1, 1 );
                	this._viewportCount = 1;
                	this._viewports = [
                		new Vector4( 0, 0, 1, 1 )
                	];
                }
                Object.assign( LightShadow.prototype, {
                	_projScreenMatrix: new Matrix4(),
                	_lightPositionWorld: new Vector3(),
                	_lookTarget: new Vector3(),
                	getViewportCount: function () {
                		return this._viewportCount;
                	},
                	getFrustum: function () {
                		return this._frustum;
                	},
                	updateMatrices: function ( light ) {
                		var shadowCamera = this.camera,
                			shadowMatrix = this.matrix,
                			projScreenMatrix = this._projScreenMatrix,
                			lookTarget = this._lookTarget,
                			lightPositionWorld = this._lightPositionWorld;
                		lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
                		shadowCamera.position.copy( lightPositionWorld );
                		lookTarget.setFromMatrixPosition( light.target.matrixWorld );
                		shadowCamera.lookAt( lookTarget );
                		shadowCamera.updateMatrixWorld();
                		projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
                		this._frustum.setFromMatrix( projScreenMatrix );
                		shadowMatrix.set(
                			0.5, 0.0, 0.0, 0.5,
                			0.0, 0.5, 0.0, 0.5,
                			0.0, 0.0, 0.5, 0.5,
                			0.0, 0.0, 0.0, 1.0
                		);
                		shadowMatrix.multiply( shadowCamera.projectionMatrix );
                		shadowMatrix.multiply( shadowCamera.matrixWorldInverse );
                	},
                	getViewport: function ( viewportIndex ) {
                		return this._viewports[ viewportIndex ];
                	},
                	getFrameExtents: function () {
                		return this._frameExtents;
                	},
                	copy: function ( source ) {
                		this.camera = source.camera.clone();
                		this.bias = source.bias;
                		this.radius = source.radius;
                		this.mapSize.copy( source.mapSize );
                		return this;
                	},
                	clone: function () {
                		return new this.constructor().copy( this );
                	},
                	toJSON: function () {
                		var object = {};
                		if ( this.bias !== 0 ) object.bias = this.bias;
                		if ( this.radius !== 1 ) object.radius = this.radius;
                		if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();
                		object.camera = this.camera.toJSON( false ).object;
                		delete object.camera.matrix;
                		return object;
                	}
                } );
                function SpotLightShadow() {
                	LightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );
                }
                SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {
                	constructor: SpotLightShadow,
                	isSpotLightShadow: true,
                	updateMatrices: function ( light ) {
                		var camera = this.camera;
                		var fov = _Math.RAD2DEG * 2 * light.angle;
                		var aspect = this.mapSize.width / this.mapSize.height;
                		var far = light.distance || camera.far;
                		if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {
                			camera.fov = fov;
                			camera.aspect = aspect;
                			camera.far = far;
                			camera.updateProjectionMatrix();
                		}
                		LightShadow.prototype.updateMatrices.call( this, light );
                	}
                } );
                function SpotLight( color, intensity, distance, angle, penumbra, decay ) {
                	Light.call( this, color, intensity );
                	this.type = 'SpotLight';
                	this.position.copy( Object3D.DefaultUp );
                	this.updateMatrix();
                	this.target = new Object3D();
                	Object.defineProperty( this, 'power', {
                		get: function () {
                			return this.intensity * Math.PI;
                		},
                		set: function ( power ) {
                			this.intensity = power / Math.PI;
                		}
                	} );
                	this.distance = ( distance !== undefined ) ? distance : 0;
                	this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
                	this.penumbra = ( penumbra !== undefined ) ? penumbra : 0;
                	this.decay = ( decay !== undefined ) ? decay : 1;
                	this.shadow = new SpotLightShadow();
                }
                SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {
                	constructor: SpotLight,
                	isSpotLight: true,
                	copy: function ( source ) {
                		Light.prototype.copy.call( this, source );
                		this.distance = source.distance;
                		this.angle = source.angle;
                		this.penumbra = source.penumbra;
                		this.decay = source.decay;
                		this.target = source.target.clone();
                		this.shadow = source.shadow.clone();
                		return this;
                	}
                } );
                function PointLightShadow() {
                	LightShadow.call( this, new PerspectiveCamera( 90, 1, 0.5, 500 ) );
                	this._frameExtents = new Vector2( 4, 2 );
                	this._viewportCount = 6;
                	this._viewports = [
                		new Vector4( 2, 1, 1, 1 ),
                		new Vector4( 0, 1, 1, 1 ),
                		new Vector4( 3, 1, 1, 1 ),
                		new Vector4( 1, 1, 1, 1 ),
                		new Vector4( 3, 0, 1, 1 ),
                		new Vector4( 1, 0, 1, 1 )
                	];
                	this._cubeDirections = [
                		new Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),
                		new Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )
                	];
                	this._cubeUps = [
                		new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),
                		new Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),	new Vector3( 0, 0, - 1 )
                	];
                }
                PointLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {
                	constructor: PointLightShadow,
                	isPointLightShadow: true,
                	updateMatrices: function ( light, viewportIndex ) {
                		if ( viewportIndex === undefined ) viewportIndex = 0;
                		var camera = this.camera,
                			shadowMatrix = this.matrix,
                			lightPositionWorld = this._lightPositionWorld,
                			lookTarget = this._lookTarget,
                			projScreenMatrix = this._projScreenMatrix;
                		lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
                		camera.position.copy( lightPositionWorld );
                		lookTarget.copy( camera.position );
                		lookTarget.add( this._cubeDirections[ viewportIndex ] );
                		camera.up.copy( this._cubeUps[ viewportIndex ] );
                		camera.lookAt( lookTarget );
                		camera.updateMatrixWorld();
                		shadowMatrix.makeTranslation( - lightPositionWorld.x, - lightPositionWorld.y, - lightPositionWorld.z );
                		projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
                		this._frustum.setFromMatrix( projScreenMatrix );
                	}
                } );
                function PointLight( color, intensity, distance, decay ) {
                	Light.call( this, color, intensity );
                	this.type = 'PointLight';
                	Object.defineProperty( this, 'power', {
                		get: function () {
                			return this.intensity * 4 * Math.PI;
                		},
                		set: function ( power ) {
                			this.intensity = power / ( 4 * Math.PI );
                		}
                	} );
                	this.distance = ( distance !== undefined ) ? distance : 0;
                	this.decay = ( decay !== undefined ) ? decay : 1;
                	this.shadow = new PointLightShadow();
                }
                PointLight.prototype = Object.assign( Object.create( Light.prototype ), {
                	constructor: PointLight,
                	isPointLight: true,
                	copy: function ( source ) {
                		Light.prototype.copy.call( this, source );
                		this.distance = source.distance;
                		this.decay = source.decay;
                		this.shadow = source.shadow.clone();
                		return this;
                	}
                } );
                function OrthographicCamera( left, right, top, bottom, near, far ) {
                	Camera.call( this );
                	this.type = 'OrthographicCamera';
                	this.zoom = 1;
                	this.view = null;
                	this.left = ( left !== undefined ) ? left : - 1;
                	this.right = ( right !== undefined ) ? right : 1;
                	this.top = ( top !== undefined ) ? top : 1;
                	this.bottom = ( bottom !== undefined ) ? bottom : - 1;
                	this.near = ( near !== undefined ) ? near : 0.1;
                	this.far = ( far !== undefined ) ? far : 2000;
                	this.updateProjectionMatrix();
                }
                OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {
                	constructor: OrthographicCamera,
                	isOrthographicCamera: true,
                	copy: function ( source, recursive ) {
                		Camera.prototype.copy.call( this, source, recursive );
                		this.left = source.left;
                		this.right = source.right;
                		this.top = source.top;
                		this.bottom = source.bottom;
                		this.near = source.near;
                		this.far = source.far;
                		this.zoom = source.zoom;
                		this.view = source.view === null ? null : Object.assign( {}, source.view );
                		return this;
                	},
                	setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {
                		if ( this.view === null ) {
                			this.view = {
                				enabled: true,
                				fullWidth: 1,
                				fullHeight: 1,
                				offsetX: 0,
                				offsetY: 0,
                				width: 1,
                				height: 1
                			};
                		}
                		this.view.enabled = true;
                		this.view.fullWidth = fullWidth;
                		this.view.fullHeight = fullHeight;
                		this.view.offsetX = x;
                		this.view.offsetY = y;
                		this.view.width = width;
                		this.view.height = height;
                		this.updateProjectionMatrix();
                	},
                	clearViewOffset: function () {
                		if ( this.view !== null ) {
                			this.view.enabled = false;
                		}
                		this.updateProjectionMatrix();
                	},
                	updateProjectionMatrix: function () {
                		var dx = ( this.right - this.left ) / ( 2 * this.zoom );
                		var dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
                		var cx = ( this.right + this.left ) / 2;
                		var cy = ( this.top + this.bottom ) / 2;
                		var left = cx - dx;
                		var right = cx + dx;
                		var top = cy + dy;
                		var bottom = cy - dy;
                		if ( this.view !== null && this.view.enabled ) {
                			var zoomW = this.zoom / ( this.view.width / this.view.fullWidth );
                			var zoomH = this.zoom / ( this.view.height / this.view.fullHeight );
                			var scaleW = ( this.right - this.left ) / this.view.width;
                			var scaleH = ( this.top - this.bottom ) / this.view.height;
                			left += scaleW * ( this.view.offsetX / zoomW );
                			right = left + scaleW * ( this.view.width / zoomW );
                			top -= scaleH * ( this.view.offsetY / zoomH );
                			bottom = top - scaleH * ( this.view.height / zoomH );
                		}
                		this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );
                		this.projectionMatrixInverse.getInverse( this.projectionMatrix );
                	},
                	toJSON: function ( meta ) {
                		var data = Object3D.prototype.toJSON.call( this, meta );
                		data.object.zoom = this.zoom;
                		data.object.left = this.left;
                		data.object.right = this.right;
                		data.object.top = this.top;
                		data.object.bottom = this.bottom;
                		data.object.near = this.near;
                		data.object.far = this.far;
                		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );
                		return data;
                	}
                } );
                function DirectionalLightShadow() {
                	LightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );
                }
                DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {
                	constructor: DirectionalLightShadow,
                	isDirectionalLightShadow: true,
                	updateMatrices: function ( light ) {
                		LightShadow.prototype.updateMatrices.call( this, light );
                	}
                } );
                function DirectionalLight( color, intensity ) {
                	Light.call( this, color, intensity );
                	this.type = 'DirectionalLight';
                	this.position.copy( Object3D.DefaultUp );
                	this.updateMatrix();
                	this.target = new Object3D();
                	this.shadow = new DirectionalLightShadow();
                }
                DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {
                	constructor: DirectionalLight,
                	isDirectionalLight: true,
                	copy: function ( source ) {
                		Light.prototype.copy.call( this, source );
                		this.target = source.target.clone();
                		this.shadow = source.shadow.clone();
                		return this;
                	}
                } );
                function AmbientLight( color, intensity ) {
                	Light.call( this, color, intensity );
                	this.type = 'AmbientLight';
                	this.castShadow = undefined;
                }
                AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {
                	constructor: AmbientLight,
                	isAmbientLight: true
                } );
                function RectAreaLight( color, intensity, width, height ) {
                	Light.call( this, color, intensity );
                	this.type = 'RectAreaLight';
                	this.width = ( width !== undefined ) ? width : 10;
                	this.height = ( height !== undefined ) ? height : 10;
                }
                RectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {
                	constructor: RectAreaLight,
                	isRectAreaLight: true,
                	copy: function ( source ) {
                		Light.prototype.copy.call( this, source );
                		this.width = source.width;
                		this.height = source.height;
                		return this;
                	},
                	toJSON: function ( meta ) {
                		var data = Light.prototype.toJSON.call( this, meta );
                		data.object.width = this.width;
                		data.object.height = this.height;
                		return data;
                	}
                } );
                function MaterialLoader( manager ) {
                	Loader.call( this, manager );
                	this.textures = {};
                }
                MaterialLoader.prototype = Object.assign( Object.create( Loader.prototype ), {
                	constructor: MaterialLoader,
                	load: function ( url, onLoad, onProgress, onError ) {
                		var scope = this;
                		var loader = new FileLoader( scope.manager );
                		loader.setPath( scope.path );
                		loader.load( url, function ( text ) {
                			onLoad( scope.parse( JSON.parse( text ) ) );
                		}, onProgress, onError );
                	},
                	parse: function ( json ) {
                		var textures = this.textures;
                		function getTexture( name ) {
                			if ( textures[ name ] === undefined ) {
                				console.warn( 'THREE.MaterialLoader: Undefined texture', name );
                			}
                			return textures[ name ];
                		}
                		var material = new Materials[ json.type ]();
                		if ( json.uuid !== undefined ) material.uuid = json.uuid;
                		if ( json.name !== undefined ) material.name = json.name;
                		if ( json.color !== undefined ) material.color.setHex( json.color );
                		if ( json.roughness !== undefined ) material.roughness = json.roughness;
                		if ( json.metalness !== undefined ) material.metalness = json.metalness;
                		if ( json.sheen !== undefined ) material.sheen = new Color().setHex( json.sheen );
                		if ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );
                		if ( json.specular !== undefined ) material.specular.setHex( json.specular );
                		if ( json.shininess !== undefined ) material.shininess = json.shininess;
                		if ( json.clearcoat !== undefined ) material.clearcoat = json.clearcoat;
                		if ( json.clearcoatRoughness !== undefined ) material.clearcoatRoughness = json.clearcoatRoughness;
                		if ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;
                		if ( json.fog !== undefined ) material.fog = json.fog;
                		if ( json.flatShading !== undefined ) material.flatShading = json.flatShading;
                		if ( json.blending !== undefined ) material.blending = json.blending;
                		if ( json.combine !== undefined ) material.combine = json.combine;
                		if ( json.side !== undefined ) material.side = json.side;
                		if ( json.opacity !== undefined ) material.opacity = json.opacity;
                		if ( json.transparent !== undefined ) material.transparent = json.transparent;
                		if ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;
                		if ( json.depthTest !== undefined ) material.depthTest = json.depthTest;
                		if ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;
                		if ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;
                		if ( json.stencilWrite !== undefined ) material.stencilWrite = json.stencilWrite;
                		if ( json.stencilWriteMask !== undefined ) material.stencilWriteMask = json.stencilWriteMask;
                		if ( json.stencilFunc !== undefined ) material.stencilFunc = json.stencilFunc;
                		if ( json.stencilRef !== undefined ) material.stencilRef = json.stencilRef;
                		if ( json.stencilFuncMask !== undefined ) material.stencilFuncMask = json.stencilFuncMask;
                		if ( json.stencilFail !== undefined ) material.stencilFail = json.stencilFail;
                		if ( json.stencilZFail !== undefined ) material.stencilZFail = json.stencilZFail;
                		if ( json.stencilZPass !== undefined ) material.stencilZPass = json.stencilZPass;
                		if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;
                		if ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;
                		if ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;
                		if ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;
                		if ( json.rotation !== undefined ) material.rotation = json.rotation;
                		if ( json.linewidth !== 1 ) material.linewidth = json.linewidth;
                		if ( json.dashSize !== undefined ) material.dashSize = json.dashSize;
                		if ( json.gapSize !== undefined ) material.gapSize = json.gapSize;
                		if ( json.scale !== undefined ) material.scale = json.scale;
                		if ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;
                		if ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;
                		if ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;
                		if ( json.skinning !== undefined ) material.skinning = json.skinning;
                		if ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;
                		if ( json.morphNormals !== undefined ) material.morphNormals = json.morphNormals;
                		if ( json.dithering !== undefined ) material.dithering = json.dithering;
                		if ( json.visible !== undefined ) material.visible = json.visible;
                		if ( json.toneMapped !== undefined ) material.toneMapped = json.toneMapped;
                		if ( json.userData !== undefined ) material.userData = json.userData;
                		if ( json.uniforms !== undefined ) {
                			for ( var name in json.uniforms ) {
                				var uniform = json.uniforms[ name ];
                				material.uniforms[ name ] = {};
                				switch ( uniform.type ) {
                					case 't':
                						material.uniforms[ name ].value = getTexture( uniform.value );
                						break;
                					case 'c':
                						material.uniforms[ name ].value = new Color().setHex( uniform.value );
                						break;
                					case 'v2':
                						material.uniforms[ name ].value = new Vector2().fromArray( uniform.value );
                						break;
                					case 'v3':
                						material.uniforms[ name ].value = new Vector3().fromArray( uniform.value );
                						break;
                					case 'v4':
                						material.uniforms[ name ].value = new Vector4().fromArray( uniform.value );
                						break;
                					case 'm3':
                						material.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );
                					case 'm4':
                						material.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );
                						break;
                					default:
                						material.uniforms[ name ].value = uniform.value;
                				}
                			}
                		}
                		if ( json.defines !== undefined ) material.defines = json.defines;
                		if ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;
                		if ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;
                		if ( json.extensions !== undefined ) {
                			for ( var key in json.extensions ) {
                				material.extensions[ key ] = json.extensions[ key ];
                			}
                		}
                		if ( json.shading !== undefined ) material.flatShading = json.shading === 1;
                		if ( json.size !== undefined ) material.size = json.size;
                		if ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;
                		if ( json.map !== undefined ) material.map = getTexture( json.map );
                		if ( json.matcap !== undefined ) material.matcap = getTexture( json.matcap );
                		if ( json.alphaMap !== undefined ) {
                			material.alphaMap = getTexture( json.alphaMap );
                			material.transparent = true;
                		}
                		if ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );
                		if ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;
                		if ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );
                		if ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;
                		if ( json.normalScale !== undefined ) {
                			var normalScale = json.normalScale;
                			if ( Array.isArray( normalScale ) === false ) {
                				normalScale = [ normalScale, normalScale ];
                			}
                			material.normalScale = new Vector2().fromArray( normalScale );
                		}
                		if ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );
                		if ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;
                		if ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;
                		if ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );
                		if ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );
                		if ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );
                		if ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;
                		if ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );
                		if ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );
                		if ( json.envMapIntensity !== undefined ) material.envMapIntensity = json.envMapIntensity;
                		if ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;
                		if ( json.refractionRatio !== undefined ) material.refractionRatio = json.refractionRatio;
                		if ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );
                		if ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;
                		if ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );
                		if ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;
                		if ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );
                		if ( json.clearcoatNormalMap !== undefined ) material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap );
                		if ( json.clearcoatNormalScale !== undefined ) material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale );
                		return material;
                	},
                	setTextures: function ( value ) {
                		this.textures = value;
                		return this;
                	}
                } );
                var LoaderUtils = {
                	decodeText: function ( array ) {
                		if ( typeof TextDecoder !== 'undefined' ) {
                			return new TextDecoder().decode( array );
                		}
                		var s = '';
                		for ( var i = 0, il = array.length; i < il; i ++ ) {
                			s += String.fromCharCode( array[ i ] );
                		}
                		try {
                			return decodeURIComponent( escape( s ) );
                		} catch ( e ) {
                			return s;
                		}
                	},
                	extractUrlBase: function ( url ) {
                		var index = url.lastIndexOf( '/' );
                		if ( index === - 1 ) return './';
                		return url.substr( 0, index + 1 );
                	}
                };
                function InstancedBufferGeometry() {
                	BufferGeometry.call( this );
                	this.type = 'InstancedBufferGeometry';
                	this.maxInstancedCount = undefined;
                }
                InstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {
                	constructor: InstancedBufferGeometry,
                	isInstancedBufferGeometry: true,
                	copy: function ( source ) {
                		BufferGeometry.prototype.copy.call( this, source );
                		this.maxInstancedCount = source.maxInstancedCount;
                		return this;
                	},
                	clone: function () {
                		return new this.constructor().copy( this );
                	},
                	toJSON: function () {
                		var data = BufferGeometry.prototype.toJSON.call( this );
                		data.maxInstancedCount = this.maxInstancedCount;
                		data.isInstancedBufferGeometry = true;
                		return data;
                	}
                } );
                function InstancedBufferAttribute( array, itemSize, normalized, meshPerAttribute ) {
                	if ( typeof ( normalized ) === 'number' ) {
                		meshPerAttribute = normalized;
                		normalized = false;
                		console.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );
                	}
                	BufferAttribute.call( this, array, itemSize, normalized );
                	this.meshPerAttribute = meshPerAttribute || 1;
                }
                InstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {
                	constructor: InstancedBufferAttribute,
                	isInstancedBufferAttribute: true,
                	copy: function ( source ) {
                		BufferAttribute.prototype.copy.call( this, source );
                		this.meshPerAttribute = source.meshPerAttribute;
                		return this;
                	},
                	toJSON: function ()	{
                		var data = BufferAttribute.prototype.toJSON.call( this );
                		data.meshPerAttribute = this.meshPerAttribute;
                		data.isInstancedBufferAttribute = true;
                		return data;
                	}
                } );
                function BufferGeometryLoader( manager ) {
                	Loader.call( this, manager );
                }
                BufferGeometryLoader.prototype = Object.assign( Object.create( Loader.prototype ), {
                	constructor: BufferGeometryLoader,
                	load: function ( url, onLoad, onProgress, onError ) {
                		var scope = this;
                		var loader = new FileLoader( scope.manager );
                		loader.setPath( scope.path );
                		loader.load( url, function ( text ) {
                			onLoad( scope.parse( JSON.parse( text ) ) );
                		}, onProgress, onError );
                	},
                	parse: function ( json ) {
                		var geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();
                		var index = json.data.index;
                		if ( index !== undefined ) {
                			var typedArray = new TYPED_ARRAYS[ index.type ]( index.array );
                			geometry.setIndex( new BufferAttribute( typedArray, 1 ) );
                		}
                		var attributes = json.data.attributes;
                		for ( var key in attributes ) {
                			var attribute = attributes[ key ];
                			var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );
                			var bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;
                			var bufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );
                			if ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;
                			geometry.setAttribute( key, bufferAttribute );
                		}
                		var morphAttributes = json.data.morphAttributes;
                		if ( morphAttributes ) {
                			for ( var key in morphAttributes ) {
                				var attributeArray = morphAttributes[ key ];
                				var array = [];
                				for ( var i = 0, il = attributeArray.length; i < il; i ++ ) {
                					var attribute = attributeArray[ i ];
                					var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );
                					var bufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );
                					if ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;
                					array.push( bufferAttribute );
                				}
                				geometry.morphAttributes[ key ] = array;
                			}
                		}
                		var morphTargetsRelative = json.data.morphTargetsRelative;
                		if ( morphTargetsRelative ) {
                			geometry.morphTargetsRelative = true;
                		}
                		var groups = json.data.groups || json.data.drawcalls || json.data.offsets;
                		if ( groups !== undefined ) {
                			for ( var i = 0, n = groups.length; i !== n; ++ i ) {
                				var group = groups[ i ];
                				geometry.addGroup( group.start, group.count, group.materialIndex );
                			}
                		}
                		var boundingSphere = json.data.boundingSphere;
                		if ( boundingSphere !== undefined ) {
                			var center = new Vector3();
                			if ( boundingSphere.center !== undefined ) {
                				center.fromArray( boundingSphere.center );
                			}
                			geometry.boundingSphere = new Sphere( center, boundingSphere.radius );
                		}
                		if ( json.name ) geometry.name = json.name;
                		if ( json.userData ) geometry.userData = json.userData;
                		return geometry;
                	}
                } );
                var TYPED_ARRAYS = {
                	Int8Array: Int8Array,
                	Uint8Array: Uint8Array,
                	Uint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,
                	Int16Array: Int16Array,
                	Uint16Array: Uint16Array,
                	Int32Array: Int32Array,
                	Uint32Array: Uint32Array,
                	Float32Array: Float32Array,
                	Float64Array: Float64Array
                };
                function ObjectLoader( manager ) {
                	Loader.call( this, manager );
                }
                ObjectLoader.prototype = Object.assign( Object.create( Loader.prototype ), {
                	constructor: ObjectLoader,
                	load: function ( url, onLoad, onProgress, onError ) {
                		var scope = this;
                		var path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;
                		this.resourcePath = this.resourcePath || path;
                		var loader = new FileLoader( scope.manager );
                		loader.setPath( this.path );
                		loader.load( url, function ( text ) {
                			var json = null;
                			try {
                				json = JSON.parse( text );
                			} catch ( error ) {
                				if ( onError !== undefined ) onError( error );
                				console.error( 'THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message );
                				return;
                			}
                			var metadata = json.metadata;
                			if ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {
                				console.error( 'THREE.ObjectLoader: Can\'t load ' + url );
                				return;
                			}
                			scope.parse( json, onLoad );
                		}, onProgress, onError );
                	},
                	parse: function ( json, onLoad ) {
                		var shapes = this.parseShape( json.shapes );
                		var geometries = this.parseGeometries( json.geometries, shapes );
                		var images = this.parseImages( json.images, function () {
                			if ( onLoad !== undefined ) onLoad( object );
                		} );
                		var textures = this.parseTextures( json.textures, images );
                		var materials = this.parseMaterials( json.materials, textures );
                		var object = this.parseObject( json.object, geometries, materials );
                		if ( json.animations ) {
                			object.animations = this.parseAnimations( json.animations );
                		}
                		if ( json.images === undefined || json.images.length === 0 ) {
                			if ( onLoad !== undefined ) onLoad( object );
                		}
                		return object;
                	},
                	parseShape: function ( json ) {
                		var shapes = {};
                		if ( json !== undefined ) {
                			for ( var i = 0, l = json.length; i < l; i ++ ) {
                				var shape = new Shape().fromJSON( json[ i ] );
                				shapes[ shape.uuid ] = shape;
                			}
                		}
                		return shapes;
                	},
                	parseGeometries: function ( json, shapes ) {
                		var geometries = {};
                		if ( json !== undefined ) {
                			var bufferGeometryLoader = new BufferGeometryLoader();
                			for ( var i = 0, l = json.length; i < l; i ++ ) {
                				var geometry;
                				var data = json[ i ];
                				switch ( data.type ) {
                					case 'PlaneGeometry':
                					case 'PlaneBufferGeometry':
                						geometry = new Geometries[ data.type ](
                							data.width,
                							data.height,
                							data.widthSegments,
                							data.heightSegments
                						);
                						break;
                					case 'BoxGeometry':
                					case 'BoxBufferGeometry':
                					case 'CubeGeometry':
                						geometry = new Geometries[ data.type ](
                							data.width,
                							data.height,
                							data.depth,
                							data.widthSegments,
                							data.heightSegments,
                							data.depthSegments
                						);
                						break;
                					case 'CircleGeometry':
                					case 'CircleBufferGeometry':
                						geometry = new Geometries[ data.type ](
                							data.radius,
                							data.segments,
                							data.thetaStart,
                							data.thetaLength
                						);
                						break;
                					case 'CylinderGeometry':
                					case 'CylinderBufferGeometry':
                						geometry = new Geometries[ data.type ](
                							data.radiusTop,
                							data.radiusBottom,
                							data.height,
                							data.radialSegments,
                							data.heightSegments,
                							data.openEnded,
                							data.thetaStart,
                							data.thetaLength
                						);
                						break;
                					case 'ConeGeometry':
                					case 'ConeBufferGeometry':
                						geometry = new Geometries[ data.type ](
                							data.radius,
                							data.height,
                							data.radialSegments,
                							data.heightSegments,
                							data.openEnded,
                							data.thetaStart,
                							data.thetaLength
                						);
                						break;
                					case 'SphereGeometry':
                					case 'SphereBufferGeometry':
                						geometry = new Geometries[ data.type ](
                							data.radius,
                							data.widthSegments,
                							data.heightSegments,
                							data.phiStart,
                							data.phiLength,
                							data.thetaStart,
                							data.thetaLength
                						);
                						break;
                					case 'DodecahedronGeometry':
                					case 'DodecahedronBufferGeometry':
                					case 'IcosahedronGeometry':
                					case 'IcosahedronBufferGeometry':
                					case 'OctahedronGeometry':
                					case 'OctahedronBufferGeometry':
                					case 'TetrahedronGeometry':
                					case 'TetrahedronBufferGeometry':
                						geometry = new Geometries[ data.type ](
                							data.radius,
                							data.detail
                						);
                						break;
                					case 'RingGeometry':
                					case 'RingBufferGeometry':
                						geometry = new Geometries[ data.type ](
                							data.innerRadius,
                							data.outerRadius,
                							data.thetaSegments,
                							data.phiSegments,
                							data.thetaStart,
                							data.thetaLength
                						);
                						break;
                					case 'TorusGeometry':
                					case 'TorusBufferGeometry':
                						geometry = new Geometries[ data.type ](
                							data.radius,
                							data.tube,
                							data.radialSegments,
                							data.tubularSegments,
                							data.arc
                						);
                						break;
                					case 'TorusKnotGeometry':
                					case 'TorusKnotBufferGeometry':
                						geometry = new Geometries[ data.type ](
                							data.radius,
                							data.tube,
                							data.tubularSegments,
                							data.radialSegments,
                							data.p,
                							data.q
                						);
                						break;
                					case 'TubeGeometry':
                					case 'TubeBufferGeometry':
                						geometry = new Geometries[ data.type ](
                							new Curves[ data.path.type ]().fromJSON( data.path ),
                							data.tubularSegments,
                							data.radius,
                							data.radialSegments,
                							data.closed
                						);
                						break;
                					case 'LatheGeometry':
                					case 'LatheBufferGeometry':
                						geometry = new Geometries[ data.type ](
                							data.points,
                							data.segments,
                							data.phiStart,
                							data.phiLength
                						);
                						break;
                					case 'PolyhedronGeometry':
                					case 'PolyhedronBufferGeometry':
                						geometry = new Geometries[ data.type ](
                							data.vertices,
                							data.indices,
                							data.radius,
                							data.details
                						);
                						break;
                					case 'ShapeGeometry':
                					case 'ShapeBufferGeometry':
                						var geometryShapes = [];
                						for ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {
                							var shape = shapes[ data.shapes[ j ] ];
                							geometryShapes.push( shape );
                						}
                						geometry = new Geometries[ data.type ](
                							geometryShapes,
                							data.curveSegments
                						);
                						break;
                					case 'ExtrudeGeometry':
                					case 'ExtrudeBufferGeometry':
                						var geometryShapes = [];
                						for ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {
                							var shape = shapes[ data.shapes[ j ] ];
                							geometryShapes.push( shape );
                						}
                						var extrudePath = data.options.extrudePath;
                						if ( extrudePath !== undefined ) {
                							data.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );
                						}
                						geometry = new Geometries[ data.type ](
                							geometryShapes,
                							data.options
                						);
                						break;
                					case 'BufferGeometry':
                					case 'InstancedBufferGeometry':
                						geometry = bufferGeometryLoader.parse( data );
                						break;
                					case 'Geometry':
                						if ( 'THREE' in window && 'LegacyJSONLoader' in THREE ) {
                							var geometryLoader = new THREE.LegacyJSONLoader();
                							geometry = geometryLoader.parse( data, this.resourcePath ).geometry;
                						} else {
                							console.error( 'THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type "Geometry".' );
                						}
                						break;
                					default:
                						console.warn( 'THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"' );
                						continue;
                				}
                				geometry.uuid = data.uuid;
                				if ( data.name !== undefined ) geometry.name = data.name;
                				if ( geometry.isBufferGeometry === true && data.userData !== undefined ) geometry.userData = data.userData;
                				geometries[ data.uuid ] = geometry;
                			}
                		}
                		return geometries;
                	},
                	parseMaterials: function ( json, textures ) {
                		var cache = {};
                		var materials = {};
                		if ( json !== undefined ) {
                			var loader = new MaterialLoader();
                			loader.setTextures( textures );
                			for ( var i = 0, l = json.length; i < l; i ++ ) {
                				var data = json[ i ];
                				if ( data.type === 'MultiMaterial' ) {
                					var array = [];
                					for ( var j = 0; j < data.materials.length; j ++ ) {
                						var material = data.materials[ j ];
                						if ( cache[ material.uuid ] === undefined ) {
                							cache[ material.uuid ] = loader.parse( material );
                						}
                						array.push( cache[ material.uuid ] );
                					}
                					materials[ data.uuid ] = array;
                				} else {
                					if ( cache[ data.uuid ] === undefined ) {
                						cache[ data.uuid ] = loader.parse( data );
                					}
                					materials[ data.uuid ] = cache[ data.uuid ];
                				}
                			}
                		}
                		return materials;
                	},
                	parseAnimations: function ( json ) {
                		var animations = [];
                		for ( var i = 0; i < json.length; i ++ ) {
                			var data = json[ i ];
                			var clip = AnimationClip.parse( data );
                			if ( data.uuid !== undefined ) clip.uuid = data.uuid;
                			animations.push( clip );
                		}
                		return animations;
                	},
                	parseImages: function ( json, onLoad ) {
                		var scope = this;
                		var images = {};
                		function loadImage( url ) {
                			scope.manager.itemStart( url );
                			return loader.load( url, function () {
                				scope.manager.itemEnd( url );
                			}, undefined, function () {
                				scope.manager.itemError( url );
                				scope.manager.itemEnd( url );
                			} );
                		}
                		if ( json !== undefined && json.length > 0 ) {
                			var manager = new LoadingManager( onLoad );
                			var loader = new ImageLoader( manager );
                			loader.setCrossOrigin( this.crossOrigin );
                			for ( var i = 0, il = json.length; i < il; i ++ ) {
                				var image = json[ i ];
                				var url = image.url;
                				if ( Array.isArray( url ) ) {
                					images[ image.uuid ] = [];
                					for ( var j = 0, jl = url.length; j < jl; j ++ ) {
                						var currentUrl = url[ j ];
                						var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( currentUrl ) ? currentUrl : scope.resourcePath + currentUrl;
                						images[ image.uuid ].push( loadImage( path ) );
                					}
                				} else {
                					var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( image.url ) ? image.url : scope.resourcePath + image.url;
                					images[ image.uuid ] = loadImage( path );
                				}
                			}
                		}
                		return images;
                	},
                	parseTextures: function ( json, images ) {
                		function parseConstant( value, type ) {
                			if ( typeof value === 'number' ) return value;
                			console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );
                			return type[ value ];
                		}
                		var textures = {};
                		if ( json !== undefined ) {
                			for ( var i = 0, l = json.length; i < l; i ++ ) {
                				var data = json[ i ];
                				if ( data.image === undefined ) {
                					console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );
                				}
                				if ( images[ data.image ] === undefined ) {
                					console.warn( 'THREE.ObjectLoader: Undefined image', data.image );
                				}
                				var texture;
                				if ( Array.isArray( images[ data.image ] ) ) {
                					texture = new CubeTexture( images[ data.image ] );
                				} else {
                					texture = new Texture( images[ data.image ] );
                				}
                				texture.needsUpdate = true;
                				texture.uuid = data.uuid;
                				if ( data.name !== undefined ) texture.name = data.name;
                				if ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );
                				if ( data.offset !== undefined ) texture.offset.fromArray( data.offset );
                				if ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );
                				if ( data.center !== undefined ) texture.center.fromArray( data.center );
                				if ( data.rotation !== undefined ) texture.rotation = data.rotation;
                				if ( data.wrap !== undefined ) {
                					texture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );
                					texture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );
                				}
                				if ( data.format !== undefined ) texture.format = data.format;
                				if ( data.type !== undefined ) texture.type = data.type;
                				if ( data.encoding !== undefined ) texture.encoding = data.encoding;
                				if ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );
                				if ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );
                				if ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;
                				if ( data.flipY !== undefined ) texture.flipY = data.flipY;
                				if ( data.premultiplyAlpha !== undefined ) texture.premultiplyAlpha = data.premultiplyAlpha;
                				if ( data.unpackAlignment !== undefined ) texture.unpackAlignment = data.unpackAlignment;
                				textures[ data.uuid ] = texture;
                			}
                		}
                		return textures;
                	},
                	parseObject: function ( data, geometries, materials ) {
                		var object;
                		function getGeometry( name ) {
                			if ( geometries[ name ] === undefined ) {
                				console.warn( 'THREE.ObjectLoader: Undefined geometry', name );
                			}
                			return geometries[ name ];
                		}
                		function getMaterial( name ) {
                			if ( name === undefined ) return undefined;
                			if ( Array.isArray( name ) ) {
                				var array = [];
                				for ( var i = 0, l = name.length; i < l; i ++ ) {
                					var uuid = name[ i ];
                					if ( materials[ uuid ] === undefined ) {
                						console.warn( 'THREE.ObjectLoader: Undefined material', uuid );
                					}
                					array.push( materials[ uuid ] );
                				}
                				return array;
                			}
                			if ( materials[ name ] === undefined ) {
                				console.warn( 'THREE.ObjectLoader: Undefined material', name );
                			}
                			return materials[ name ];
                		}
                		switch ( data.type ) {
                			case 'Scene':
                				object = new Scene();
                				if ( data.background !== undefined ) {
                					if ( Number.isInteger( data.background ) ) {
                						object.background = new Color( data.background );
                					}
                				}
                				if ( data.fog !== undefined ) {
                					if ( data.fog.type === 'Fog' ) {
                						object.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );
                					} else if ( data.fog.type === 'FogExp2' ) {
                						object.fog = new FogExp2( data.fog.color, data.fog.density );
                					}
                				}
                				break;
                			case 'PerspectiveCamera':
                				object = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );
                				if ( data.focus !== undefined ) object.focus = data.focus;
                				if ( data.zoom !== undefined ) object.zoom = data.zoom;
                				if ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;
                				if ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;
                				if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );
                				break;
                			case 'OrthographicCamera':
                				object = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );
                				if ( data.zoom !== undefined ) object.zoom = data.zoom;
                				if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );
                				break;
                			case 'AmbientLight':
                				object = new AmbientLight( data.color, data.intensity );
                				break;
                			case 'DirectionalLight':
                				object = new DirectionalLight( data.color, data.intensity );
                				break;
                			case 'PointLight':
                				object = new PointLight( data.color, data.intensity, data.distance, data.decay );
                				break;
                			case 'RectAreaLight':
                				object = new RectAreaLight( data.color, data.intensity, data.width, data.height );
                				break;
                			case 'SpotLight':
                				object = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );
                				break;
                			case 'HemisphereLight':
                				object = new HemisphereLight( data.color, data.groundColor, data.intensity );
                				break;
                			case 'SkinnedMesh':
                				console.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );
                			case 'Mesh':
                				var geometry = getGeometry( data.geometry );
                				var material = getMaterial( data.material );
                				if ( geometry.bones && geometry.bones.length > 0 ) {
                					object = new SkinnedMesh( geometry, material );
                				} else {
                					object = new Mesh( geometry, material );
                				}
                				break;
                			case 'InstancedMesh':
                				var geometry = getGeometry( data.geometry );
                				var material = getMaterial( data.material );
                				var count = data.count;
                				var instanceMatrix = data.instanceMatrix;
                				object = new InstancedMesh( geometry, material, count );
                				object.instanceMatrix = new BufferAttribute( new Float32Array( instanceMatrix.array ), 16 );
                				break;
                			case 'LOD':
                				object = new LOD();
                				break;
                			case 'Line':
                				object = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );
                				break;
                			case 'LineLoop':
                				object = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );
                				break;
                			case 'LineSegments':
                				object = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );
                				break;
                			case 'PointCloud':
                			case 'Points':
                				object = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );
                				break;
                			case 'Sprite':
                				object = new Sprite( getMaterial( data.material ) );
                				break;
                			case 'Group':
                				object = new Group();
                				break;
                			default:
                				object = new Object3D();
                		}
                		object.uuid = data.uuid;
                		if ( data.name !== undefined ) object.name = data.name;
                		if ( data.matrix !== undefined ) {
                			object.matrix.fromArray( data.matrix );
                			if ( data.matrixAutoUpdate !== undefined ) object.matrixAutoUpdate = data.matrixAutoUpdate;
                			if ( object.matrixAutoUpdate ) object.matrix.decompose( object.position, object.quaternion, object.scale );
                		} else {
                			if ( data.position !== undefined ) object.position.fromArray( data.position );
                			if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
                			if ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );
                			if ( data.scale !== undefined ) object.scale.fromArray( data.scale );
                		}
                		if ( data.castShadow !== undefined ) object.castShadow = data.castShadow;
                		if ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;
                		if ( data.shadow ) {
                			if ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;
                			if ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;
                			if ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );
                			if ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );
                		}
                		if ( data.visible !== undefined ) object.visible = data.visible;
                		if ( data.frustumCulled !== undefined ) object.frustumCulled = data.frustumCulled;
                		if ( data.renderOrder !== undefined ) object.renderOrder = data.renderOrder;
                		if ( data.userData !== undefined ) object.userData = data.userData;
                		if ( data.layers !== undefined ) object.layers.mask = data.layers;
                		if ( data.drawMode !== undefined ) object.setDrawMode( data.drawMode );
                		if ( data.children !== undefined ) {
                			var children = data.children;
                			for ( var i = 0; i < children.length; i ++ ) {
                				object.add( this.parseObject( children[ i ], geometries, materials ) );
                			}
                		}
                		if ( data.type === 'LOD' ) {
                			if ( data.autoUpdate !== undefined ) object.autoUpdate = data.autoUpdate;
                			var levels = data.levels;
                			for ( var l = 0; l < levels.length; l ++ ) {
                				var level = levels[ l ];
                				var child = object.getObjectByProperty( 'uuid', level.object );
                				if ( child !== undefined ) {
                					object.addLevel( child, level.distance );
                				}
                			}
                		}
                		return object;
                	}
                } );
                var TEXTURE_MAPPING = {
                	UVMapping: UVMapping,
                	CubeReflectionMapping: CubeReflectionMapping,
                	CubeRefractionMapping: CubeRefractionMapping,
                	EquirectangularReflectionMapping: EquirectangularReflectionMapping,
                	EquirectangularRefractionMapping: EquirectangularRefractionMapping,
                	SphericalReflectionMapping: SphericalReflectionMapping,
                	CubeUVReflectionMapping: CubeUVReflectionMapping,
                	CubeUVRefractionMapping: CubeUVRefractionMapping
                };
                var TEXTURE_WRAPPING = {
                	RepeatWrapping: RepeatWrapping,
                	ClampToEdgeWrapping: ClampToEdgeWrapping,
                	MirroredRepeatWrapping: MirroredRepeatWrapping
                };
                var TEXTURE_FILTER = {
                	NearestFilter: NearestFilter,
                	NearestMipmapNearestFilter: NearestMipmapNearestFilter,
                	NearestMipmapLinearFilter: NearestMipmapLinearFilter,
                	LinearFilter: LinearFilter,
                	LinearMipmapNearestFilter: LinearMipmapNearestFilter,
                	LinearMipmapLinearFilter: LinearMipmapLinearFilter
                };
                function ImageBitmapLoader( manager ) {
                	if ( typeof createImageBitmap === 'undefined' ) {
                		console.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );
                	}
                	if ( typeof fetch === 'undefined' ) {
                		console.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );
                	}
                	Loader.call( this, manager );
                	this.options = undefined;
                }
                ImageBitmapLoader.prototype = Object.assign( Object.create( Loader.prototype ), {
                	constructor: ImageBitmapLoader,
                	setOptions: function setOptions( options ) {
                		this.options = options;
                		return this;
                	},
                	load: function ( url, onLoad, onProgress, onError ) {
                		if ( url === undefined ) url = '';
                		if ( this.path !== undefined ) url = this.path + url;
                		url = this.manager.resolveURL( url );
                		var scope = this;
                		var cached = Cache.get( url );
                		if ( cached !== undefined ) {
                			scope.manager.itemStart( url );
                			setTimeout( function () {
                				if ( onLoad ) onLoad( cached );
                				scope.manager.itemEnd( url );
                			}, 0 );
                			return cached;
                		}
                		fetch( url ).then( function ( res ) {
                			return res.blob();
                		} ).then( function ( blob ) {
                			if ( scope.options === undefined ) {
                				return createImageBitmap( blob );
                			} else {
                				return createImageBitmap( blob, scope.options );
                			}
                		} ).then( function ( imageBitmap ) {
                			Cache.add( url, imageBitmap );
                			if ( onLoad ) onLoad( imageBitmap );
                			scope.manager.itemEnd( url );
                		} ).catch( function ( e ) {
                			if ( onError ) onError( e );
                			scope.manager.itemError( url );
                			scope.manager.itemEnd( url );
                		} );
                		scope.manager.itemStart( url );
                	}
                } );
                function ShapePath() {
                	this.type = 'ShapePath';
                	this.color = new Color();
                	this.subPaths = [];
                	this.currentPath = null;
                }
                Object.assign( ShapePath.prototype, {
                	moveTo: function ( x, y ) {
                		this.currentPath = new Path();
                		this.subPaths.push( this.currentPath );
                		this.currentPath.moveTo( x, y );
                		return this;
                	},
                	lineTo: function ( x, y ) {
                		this.currentPath.lineTo( x, y );
                		return this;
                	},
                	quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {
                		this.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );
                		return this;
                	},
                	bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {
                		this.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );
                		return this;
                	},
                	splineThru: function ( pts ) {
                		this.currentPath.splineThru( pts );
                		return this;
                	},
                	toShapes: function ( isCCW, noHoles ) {
                		function toShapesNoHoles( inSubpaths ) {
                			var shapes = [];
                			for ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {
                				var tmpPath = inSubpaths[ i ];
                				var tmpShape = new Shape();
                				tmpShape.curves = tmpPath.curves;
                				shapes.push( tmpShape );
                			}
                			return shapes;
                		}
                		function isPointInsidePolygon( inPt, inPolygon ) {
                			var polyLen = inPolygon.length;
                			var inside = false;
                			for ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {
                				var edgeLowPt = inPolygon[ p ];
                				var edgeHighPt = inPolygon[ q ];
                				var edgeDx = edgeHighPt.x - edgeLowPt.x;
                				var edgeDy = edgeHighPt.y - edgeLowPt.y;
                				if ( Math.abs( edgeDy ) > Number.EPSILON ) {
                					if ( edgeDy < 0 ) {
                						edgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;
                						edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;
                					}
                					if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		continue;
                					if ( inPt.y === edgeLowPt.y ) {
                						if ( inPt.x === edgeLowPt.x )		return	true;
                					} else {
                						var perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
                						if ( perpEdge === 0 )				return	true;
                						if ( perpEdge < 0 ) 				continue;
                						inside = ! inside;
                					}
                				} else {
                					if ( inPt.y !== edgeLowPt.y ) 		continue;
                					if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
                						 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		return	true;
                				}
                			}
                			return	inside;
                		}
                		var isClockWise = ShapeUtils.isClockWise;
                		var subPaths = this.subPaths;
                		if ( subPaths.length === 0 ) return [];
                		if ( noHoles === true )	return	toShapesNoHoles( subPaths );
                		var solid, tmpPath, tmpShape, shapes = [];
                		if ( subPaths.length === 1 ) {
                			tmpPath = subPaths[ 0 ];
                			tmpShape = new Shape();
                			tmpShape.curves = tmpPath.curves;
                			shapes.push( tmpShape );
                			return shapes;
                		}
                		var holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
                		holesFirst = isCCW ? ! holesFirst : holesFirst;
                		var betterShapeHoles = [];
                		var newShapes = [];
                		var newShapeHoles = [];
                		var mainIdx = 0;
                		var tmpPoints;
                		newShapes[ mainIdx ] = undefined;
                		newShapeHoles[ mainIdx ] = [];
                		for ( var i = 0, l = subPaths.length; i < l; i ++ ) {
                			tmpPath = subPaths[ i ];
                			tmpPoints = tmpPath.getPoints();
                			solid = isClockWise( tmpPoints );
                			solid = isCCW ? ! solid : solid;
                			if ( solid ) {
                				if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	mainIdx ++;
                				newShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };
                				newShapes[ mainIdx ].s.curves = tmpPath.curves;
                				if ( holesFirst )	mainIdx ++;
                				newShapeHoles[ mainIdx ] = [];
                			} else {
                				newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );
                			}
                		}
                		if ( ! newShapes[ 0 ] )	return	toShapesNoHoles( subPaths );
                		if ( newShapes.length > 1 ) {
                			var ambiguous = false;
                			var toChange = [];
                			for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {
                				betterShapeHoles[ sIdx ] = [];
                			}
                			for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {
                				var sho = newShapeHoles[ sIdx ];
                				for ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {
                					var ho = sho[ hIdx ];
                					var hole_unassigned = true;
                					for ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {
                						if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {
                							if ( sIdx !== s2Idx )	toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );
                							if ( hole_unassigned ) {
                								hole_unassigned = false;
                								betterShapeHoles[ s2Idx ].push( ho );
                							} else {
                								ambiguous = true;
                							}
                						}
                					}
                					if ( hole_unassigned ) {
                						betterShapeHoles[ sIdx ].push( ho );
                					}
                				}
                			}
                			if ( toChange.length > 0 ) {
                				if ( ! ambiguous )	newShapeHoles = betterShapeHoles;
                			}
                		}
                		var tmpHoles;
                		for ( var i = 0, il = newShapes.length; i < il; i ++ ) {
                			tmpShape = newShapes[ i ].s;
                			shapes.push( tmpShape );
                			tmpHoles = newShapeHoles[ i ];
                			for ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {
                				tmpShape.holes.push( tmpHoles[ j ].h );
                			}
                		}
                		return shapes;
                	}
                } );
                function Font( data ) {
                	this.type = 'Font';
                	this.data = data;
                }
                Object.assign( Font.prototype, {
                	isFont: true,
                	generateShapes: function ( text, size ) {
                		if ( size === undefined ) size = 100;
                		var shapes = [];
                		var paths = createPaths( text, size, this.data );
                		for ( var p = 0, pl = paths.length; p < pl; p ++ ) {
                			Array.prototype.push.apply( shapes, paths[ p ].toShapes() );
                		}
                		return shapes;
                	}
                } );
                function createPaths( text, size, data ) {
                	var chars = Array.from ? Array.from( text ) : String( text ).split( '' );
                	var scale = size / data.resolution;
                	var line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;
                	var paths = [];
                	var offsetX = 0, offsetY = 0;
                	for ( var i = 0; i < chars.length; i ++ ) {
                		var char = chars[ i ];
                		if ( char === '\n' ) {
                			offsetX = 0;
                			offsetY -= line_height;
                		} else {
                			var ret = createPath( char, scale, offsetX, offsetY, data );
                			offsetX += ret.offsetX;
                			paths.push( ret.path );
                		}
                	}
                	return paths;
                }
                function createPath( char, scale, offsetX, offsetY, data ) {
                	var glyph = data.glyphs[ char ] || data.glyphs[ '?' ];
                	if ( ! glyph ) {
                		console.error( 'THREE.Font: character "' + char + '" does not exists in font family ' + data.familyName + '.' );
                		return;
                	}
                	var path = new ShapePath();
                	var x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;
                	if ( glyph.o ) {
                		var outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );
                		for ( var i = 0, l = outline.length; i < l; ) {
                			var action = outline[ i ++ ];
                			switch ( action ) {
                				case 'm':
                					x = outline[ i ++ ] * scale + offsetX;
                					y = outline[ i ++ ] * scale + offsetY;
                					path.moveTo( x, y );
                					break;
                				case 'l':
                					x = outline[ i ++ ] * scale + offsetX;
                					y = outline[ i ++ ] * scale + offsetY;
                					path.lineTo( x, y );
                					break;
                				case 'q':
                					cpx = outline[ i ++ ] * scale + offsetX;
                					cpy = outline[ i ++ ] * scale + offsetY;
                					cpx1 = outline[ i ++ ] * scale + offsetX;
                					cpy1 = outline[ i ++ ] * scale + offsetY;
                					path.quadraticCurveTo( cpx1, cpy1, cpx, cpy );
                					break;
                				case 'b':
                					cpx = outline[ i ++ ] * scale + offsetX;
                					cpy = outline[ i ++ ] * scale + offsetY;
                					cpx1 = outline[ i ++ ] * scale + offsetX;
                					cpy1 = outline[ i ++ ] * scale + offsetY;
                					cpx2 = outline[ i ++ ] * scale + offsetX;
                					cpy2 = outline[ i ++ ] * scale + offsetY;
                					path.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );
                					break;
                			}
                		}
                	}
                	return { offsetX: glyph.ha * scale, path: path };
                }
                function FontLoader( manager ) {
                	Loader.call( this, manager );
                }
                FontLoader.prototype = Object.assign( Object.create( Loader.prototype ), {
                	constructor: FontLoader,
                	load: function ( url, onLoad, onProgress, onError ) {
                		var scope = this;
                		var loader = new FileLoader( this.manager );
                		loader.setPath( this.path );
                		loader.load( url, function ( text ) {
                			var json;
                			try {
                				json = JSON.parse( text );
                			} catch ( e ) {
                				console.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );
                				json = JSON.parse( text.substring( 65, text.length - 2 ) );
                			}
                			var font = scope.parse( json );
                			if ( onLoad ) onLoad( font );
                		}, onProgress, onError );
                	},
                	parse: function ( json ) {
                		return new Font( json );
                	}
                } );
                var _context;
                var AudioContext = {
                	getContext: function () {
                		if ( _context === undefined ) {
                			_context = new ( window.AudioContext || window.webkitAudioContext )();
                		}
                		return _context;
                	},
                	setContext: function ( value ) {
                		_context = value;
                	}
                };
                function AudioLoader( manager ) {
                	Loader.call( this, manager );
                }
                AudioLoader.prototype = Object.assign( Object.create( Loader.prototype ), {
                	constructor: AudioLoader,
                	load: function ( url, onLoad, onProgress, onError ) {
                		var loader = new FileLoader( this.manager );
                		loader.setResponseType( 'arraybuffer' );
                		loader.setPath( this.path );
                		loader.load( url, function ( buffer ) {
                			var bufferCopy = buffer.slice( 0 );
                			var context = AudioContext.getContext();
                			context.decodeAudioData( bufferCopy, function ( audioBuffer ) {
                				onLoad( audioBuffer );
                			} );
                		}, onProgress, onError );
                	}
                } );
                function SphericalHarmonics3() {
                	this.coefficients = [];
                	for ( var i = 0; i < 9; i ++ ) {
                		this.coefficients.push( new Vector3() );
                	}
                }
                Object.assign( SphericalHarmonics3.prototype, {
                	isSphericalHarmonics3: true,
                	set: function ( coefficients ) {
                		for ( var i = 0; i < 9; i ++ ) {
                			this.coefficients[ i ].copy( coefficients[ i ] );
                		}
                		return this;
                	},
                	zero: function () {
                		for ( var i = 0; i < 9; i ++ ) {
                			this.coefficients[ i ].set( 0, 0, 0 );
                		}
                		return this;
                	},
                	getAt: function ( normal, target ) {
                		var x = normal.x, y = normal.y, z = normal.z;
                		var coeff = this.coefficients;
                		target.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );
                		target.addScale( coeff[ 1 ], 0.488603 * y );
                		target.addScale( coeff[ 2 ], 0.488603 * z );
                		target.addScale( coeff[ 3 ], 0.488603 * x );
                		target.addScale( coeff[ 4 ], 1.092548 * ( x * y ) );
                		target.addScale( coeff[ 5 ], 1.092548 * ( y * z ) );
                		target.addScale( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );
                		target.addScale( coeff[ 7 ], 1.092548 * ( x * z ) );
                		target.addScale( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );
                		return target;
                	},
                	getIrradianceAt: function ( normal, target ) {
                		var x = normal.x, y = normal.y, z = normal.z;
                		var coeff = this.coefficients;
                		target.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 );
                		target.addScale( coeff[ 1 ], 2.0 * 0.511664 * y );
                		target.addScale( coeff[ 2 ], 2.0 * 0.511664 * z );
                		target.addScale( coeff[ 3 ], 2.0 * 0.511664 * x );
                		target.addScale( coeff[ 4 ], 2.0 * 0.429043 * x * y );
                		target.addScale( coeff[ 5 ], 2.0 * 0.429043 * y * z );
                		target.addScale( coeff[ 6 ], 0.743125 * z * z - 0.247708 );
                		target.addScale( coeff[ 7 ], 2.0 * 0.429043 * x * z );
                		target.addScale( coeff[ 8 ], 0.429043 * ( x * x - y * y ) );
                		return target;
                	},
                	add: function ( sh ) {
                		for ( var i = 0; i < 9; i ++ ) {
                			this.coefficients[ i ].add( sh.coefficients[ i ] );
                		}
                		return this;
                	},
                	scale: function ( s ) {
                		for ( var i = 0; i < 9; i ++ ) {
                			this.coefficients[ i ].multiplyScalar( s );
                		}
                		return this;
                	},
                	lerp: function ( sh, alpha ) {
                		for ( var i = 0; i < 9; i ++ ) {
                			this.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );
                		}
                		return this;
                	},
                	equals: function ( sh ) {
                		for ( var i = 0; i < 9; i ++ ) {
                			if ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {
                				return false;
                			}
                		}
                		return true;
                	},
                	copy: function ( sh ) {
                		return this.set( sh.coefficients );
                	},
                	clone: function () {
                		return new this.constructor().copy( this );
                	},
                	fromArray: function ( array, offset ) {
                		if ( offset === undefined ) offset = 0;
                		var coefficients = this.coefficients;
                		for ( var i = 0; i < 9; i ++ ) {
                			coefficients[ i ].fromArray( array, offset + ( i * 3 ) );
                		}
                		return this;
                	},
                	toArray: function ( array, offset ) {
                		if ( array === undefined ) array = [];
                		if ( offset === undefined ) offset = 0;
                		var coefficients = this.coefficients;
                		for ( var i = 0; i < 9; i ++ ) {
                			coefficients[ i ].toArray( array, offset + ( i * 3 ) );
                		}
                		return array;
                	}
                } );
                Object.assign( SphericalHarmonics3, {
                	getBasisAt: function ( normal, shBasis ) {
                		var x = normal.x, y = normal.y, z = normal.z;
                		shBasis[ 0 ] = 0.282095;
                		shBasis[ 1 ] = 0.488603 * y;
                		shBasis[ 2 ] = 0.488603 * z;
                		shBasis[ 3 ] = 0.488603 * x;
                		shBasis[ 4 ] = 1.092548 * x * y;
                		shBasis[ 5 ] = 1.092548 * y * z;
                		shBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );
                		shBasis[ 7 ] = 1.092548 * x * z;
                		shBasis[ 8 ] = 0.546274 * ( x * x - y * y );
                	}
                } );
                function LightProbe( sh, intensity ) {
                	Light.call( this, undefined, intensity );
                	this.sh = ( sh !== undefined ) ? sh : new SphericalHarmonics3();
                }
                LightProbe.prototype = Object.assign( Object.create( Light.prototype ), {
                	constructor: LightProbe,
                	isLightProbe: true,
                	copy: function ( source ) {
                		Light.prototype.copy.call( this, source );
                		this.sh.copy( source.sh );
                		this.intensity = source.intensity;
                		return this;
                	},
                	toJSON: function ( meta ) {
                		var data = Light.prototype.toJSON.call( this, meta );
                		return data;
                	}
                } );
                function HemisphereLightProbe( skyColor, groundColor, intensity ) {
                	LightProbe.call( this, undefined, intensity );
                	var color1 = new Color().set( skyColor );
                	var color2 = new Color().set( groundColor );
                	var sky = new Vector3( color1.r, color1.g, color1.b );
                	var ground = new Vector3( color2.r, color2.g, color2.b );
                	var c0 = Math.sqrt( Math.PI );
                	var c1 = c0 * Math.sqrt( 0.75 );
                	this.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );
                	this.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );
                }
                HemisphereLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {
                	constructor: HemisphereLightProbe,
                	isHemisphereLightProbe: true,
                	copy: function ( source ) {
                		LightProbe.prototype.copy.call( this, source );
                		return this;
                	},
                	toJSON: function ( meta ) {
                		var data = LightProbe.prototype.toJSON.call( this, meta );
                		return data;
                	}
                } );
                function AmbientLightProbe( color, intensity ) {
                	LightProbe.call( this, undefined, intensity );
                	var color1 = new Color().set( color );
                	this.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );
                }
                AmbientLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {
                	constructor: AmbientLightProbe,
                	isAmbientLightProbe: true,
                	copy: function ( source ) {
                		LightProbe.prototype.copy.call( this, source );
                		return this;
                	},
                	toJSON: function ( meta ) {
                		var data = LightProbe.prototype.toJSON.call( this, meta );
                		return data;
                	}
                } );
                var _eyeRight = new Matrix4();
                var _eyeLeft = new Matrix4();
                function StereoCamera() {
                	this.type = 'StereoCamera';
                	this.aspect = 1;
                	this.eyeSep = 0.064;
                	this.cameraL = new PerspectiveCamera();
                	this.cameraL.layers.enable( 1 );
                	this.cameraL.matrixAutoUpdate = false;
                	this.cameraR = new PerspectiveCamera();
                	this.cameraR.layers.enable( 2 );
                	this.cameraR.matrixAutoUpdate = false;
                	this._cache = {
                		focus: null,
                		fov: null,
                		aspect: null,
                		near: null,
                		far: null,
                		zoom: null,
                		eyeSep: null
                	};
                }
                Object.assign( StereoCamera.prototype, {
                	update: function ( camera ) {
                		var cache = this._cache;
                		var needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||
                			cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||
                			cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;
                		if ( needsUpdate ) {
                			cache.focus = camera.focus;
                			cache.fov = camera.fov;
                			cache.aspect = camera.aspect * this.aspect;
                			cache.near = camera.near;
                			cache.far = camera.far;
                			cache.zoom = camera.zoom;
                			cache.eyeSep = this.eyeSep;
                			var projectionMatrix = camera.projectionMatrix.clone();
                			var eyeSepHalf = cache.eyeSep / 2;
                			var eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;
                			var ymax = ( cache.near * Math.tan( _Math.DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;
                			var xmin, xmax;
                			_eyeLeft.elements[ 12 ] = - eyeSepHalf;
                			_eyeRight.elements[ 12 ] = eyeSepHalf;
                			xmin = - ymax * cache.aspect + eyeSepOnProjection;
                			xmax = ymax * cache.aspect + eyeSepOnProjection;
                			projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );
                			projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );
                			this.cameraL.projectionMatrix.copy( projectionMatrix );
                			xmin = - ymax * cache.aspect - eyeSepOnProjection;
                			xmax = ymax * cache.aspect - eyeSepOnProjection;
                			projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );
                			projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );
                			this.cameraR.projectionMatrix.copy( projectionMatrix );
                		}
                		this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );
                		this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );
                	}
                } );
                function Clock( autoStart ) {
                	this.autoStart = ( autoStart !== undefined ) ? autoStart : true;
                	this.startTime = 0;
                	this.oldTime = 0;
                	this.elapsedTime = 0;
                	this.running = false;
                }
                Object.assign( Clock.prototype, {
                	start: function () {
                		this.startTime = ( typeof performance === 'undefined' ? Date : performance ).now();
                		this.oldTime = this.startTime;
                		this.elapsedTime = 0;
                		this.running = true;
                	},
                	stop: function () {
                		this.getElapsedTime();
                		this.running = false;
                		this.autoStart = false;
                	},
                	getElapsedTime: function () {
                		this.getDelta();
                		return this.elapsedTime;
                	},
                	getDelta: function () {
                		var diff = 0;
                		if ( this.autoStart && ! this.running ) {
                			this.start();
                			return 0;
                		}
                		if ( this.running ) {
                			var newTime = ( typeof performance === 'undefined' ? Date : performance ).now();
                			diff = ( newTime - this.oldTime ) / 1000;
                			this.oldTime = newTime;
                			this.elapsedTime += diff;
                		}
                		return diff;
                	}
                } );
                var _position$2 = new Vector3();
                var _quaternion$3 = new Quaternion();
                var _scale$1 = new Vector3();
                var _orientation = new Vector3();
                function AudioListener() {
                	Object3D.call( this );
                	this.type = 'AudioListener';
                	this.context = AudioContext.getContext();
                	this.gain = this.context.createGain();
                	this.gain.connect( this.context.destination );
                	this.filter = null;
                	this.timeDelta = 0;
                	this._clock = new Clock();
                }
                AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {
                	constructor: AudioListener,
                	getInput: function () {
                		return this.gain;
                	},
                	removeFilter: function ( ) {
                		if ( this.filter !== null ) {
                			this.gain.disconnect( this.filter );
                			this.filter.disconnect( this.context.destination );
                			this.gain.connect( this.context.destination );
                			this.filter = null;
                		}
                		return this;
                	},
                	getFilter: function () {
                		return this.filter;
                	},
                	setFilter: function ( value ) {
                		if ( this.filter !== null ) {
                			this.gain.disconnect( this.filter );
                			this.filter.disconnect( this.context.destination );
                		} else {
                			this.gain.disconnect( this.context.destination );
                		}
                		this.filter = value;
                		this.gain.connect( this.filter );
                		this.filter.connect( this.context.destination );
                		return this;
                	},
                	getMasterVolume: function () {
                		return this.gain.gain.value;
                	},
                	setMasterVolume: function ( value ) {
                		this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );
                		return this;
                	},
                	updateMatrixWorld: function ( force ) {
                		Object3D.prototype.updateMatrixWorld.call( this, force );
                		var listener = this.context.listener;
                		var up = this.up;
                		this.timeDelta = this._clock.getDelta();
                		this.matrixWorld.decompose( _position$2, _quaternion$3, _scale$1 );
                		_orientation.set( 0, 0, - 1 ).applyQuaternion( _quaternion$3 );
                		if ( listener.positionX ) {
                			var endTime = this.context.currentTime + this.timeDelta;
                			listener.positionX.linearRampToValueAtTime( _position$2.x, endTime );
                			listener.positionY.linearRampToValueAtTime( _position$2.y, endTime );
                			listener.positionZ.linearRampToValueAtTime( _position$2.z, endTime );
                			listener.forwardX.linearRampToValueAtTime( _orientation.x, endTime );
                			listener.forwardY.linearRampToValueAtTime( _orientation.y, endTime );
                			listener.forwardZ.linearRampToValueAtTime( _orientation.z, endTime );
                			listener.upX.linearRampToValueAtTime( up.x, endTime );
                			listener.upY.linearRampToValueAtTime( up.y, endTime );
                			listener.upZ.linearRampToValueAtTime( up.z, endTime );
                		} else {
                			listener.setPosition( _position$2.x, _position$2.y, _position$2.z );
                			listener.setOrientation( _orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z );
                		}
                	}
                } );
                function Audio( listener ) {
                	Object3D.call( this );
                	this.type = 'Audio';
                	this.listener = listener;
                	this.context = listener.context;
                	this.gain = this.context.createGain();
                	this.gain.connect( listener.getInput() );
                	this.autoplay = false;
                	this.buffer = null;
                	this.detune = 0;
                	this.loop = false;
                	this.loopStart = 0;
                	this.loopEnd = 0;
                	this.offset = 0;
                	this.duration = undefined;
                	this.playbackRate = 1;
                	this.isPlaying = false;
                	this.hasPlaybackControl = true;
                	this.sourceType = 'empty';
                	this._startedAt = 0;
                	this._pausedAt = 0;
                	this.filters = [];
                }
                Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {
                	constructor: Audio,
                	getOutput: function () {
                		return this.gain;
                	},
                	setNodeSource: function ( audioNode ) {
                		this.hasPlaybackControl = false;
                		this.sourceType = 'audioNode';
                		this.source = audioNode;
                		this.connect();
                		return this;
                	},
                	setMediaElementSource: function ( mediaElement ) {
                		this.hasPlaybackControl = false;
                		this.sourceType = 'mediaNode';
                		this.source = this.context.createMediaElementSource( mediaElement );
                		this.connect();
                		return this;
                	},
                	setMediaStreamSource: function ( mediaStream ) {
                		this.hasPlaybackControl = false;
                		this.sourceType = 'mediaStreamNode';
                		this.source = this.context.createMediaStreamSource( mediaStream );
                		this.connect();
                		return this;
                	},
                	setBuffer: function ( audioBuffer ) {
                		this.buffer = audioBuffer;
                		this.sourceType = 'buffer';
                		if ( this.autoplay ) this.play();
                		return this;
                	},
                	play: function ( delay ) {
                		if ( delay === undefined ) delay = 0;
                		if ( this.isPlaying === true ) {
                			console.warn( 'THREE.Audio: Audio is already playing.' );
                			return;
                		}
                		if ( this.hasPlaybackControl === false ) {
                			console.warn( 'THREE.Audio: this Audio has no playback control.' );
                			return;
                		}
                		this._startedAt = this.context.currentTime + delay;
                		var source = this.context.createBufferSource();
                		source.buffer = this.buffer;
                		source.loop = this.loop;
                		source.loopStart = this.loopStart;
                		source.loopEnd = this.loopEnd;
                		source.onended = this.onEnded.bind( this );
                		source.start( this._startedAt, this._pausedAt + this.offset, this.duration );
                		this.isPlaying = true;
                		this.source = source;
                		this.setDetune( this.detune );
                		this.setPlaybackRate( this.playbackRate );
                		return this.connect();
                	},
                	pause: function () {
                		if ( this.hasPlaybackControl === false ) {
                			console.warn( 'THREE.Audio: this Audio has no playback control.' );
                			return;
                		}
                		if ( this.isPlaying === true ) {
                			this._pausedAt = ( this.context.currentTime - this._startedAt ) * this.playbackRate;
                			this.source.stop();
                			this.source.onended = null;
                			this.isPlaying = false;
                		}
                		return this;
                	},
                	stop: function () {
                		if ( this.hasPlaybackControl === false ) {
                			console.warn( 'THREE.Audio: this Audio has no playback control.' );
                			return;
                		}
                		this._pausedAt = 0;
                		this.source.stop();
                		this.source.onended = null;
                		this.isPlaying = false;
                		return this;
                	},
                	connect: function () {
                		if ( this.filters.length > 0 ) {
                			this.source.connect( this.filters[ 0 ] );
                			for ( var i = 1, l = this.filters.length; i < l; i ++ ) {
                				this.filters[ i - 1 ].connect( this.filters[ i ] );
                			}
                			this.filters[ this.filters.length - 1 ].connect( this.getOutput() );
                		} else {
                			this.source.connect( this.getOutput() );
                		}
                		return this;
                	},
                	disconnect: function () {
                		if ( this.filters.length > 0 ) {
                			this.source.disconnect( this.filters[ 0 ] );
                			for ( var i = 1, l = this.filters.length; i < l; i ++ ) {
                				this.filters[ i - 1 ].disconnect( this.filters[ i ] );
                			}
                			this.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );
                		} else {
                			this.source.disconnect( this.getOutput() );
                		}
                		return this;
                	},
                	getFilters: function () {
                		return this.filters;
                	},
                	setFilters: function ( value ) {
                		if ( ! value ) value = [];
                		if ( this.isPlaying === true ) {
                			this.disconnect();
                			this.filters = value;
                			this.connect();
                		} else {
                			this.filters = value;
                		}
                		return this;
                	},
                	setDetune: function ( value ) {
                		this.detune = value;
                		if ( this.source.detune === undefined ) return;
                		if ( this.isPlaying === true ) {
                			this.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );
                		}
                		return this;
                	},
                	getDetune: function () {
                		return this.detune;
                	},
                	getFilter: function () {
                		return this.getFilters()[ 0 ];
                	},
                	setFilter: function ( filter ) {
                		return this.setFilters( filter ? [ filter ] : [] );
                	},
                	setPlaybackRate: function ( value ) {
                		if ( this.hasPlaybackControl === false ) {
                			console.warn( 'THREE.Audio: this Audio has no playback control.' );
                			return;
                		}
                		this.playbackRate = value;
                		if ( this.isPlaying === true ) {
                			this.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );
                		}
                		return this;
                	},
                	getPlaybackRate: function () {
                		return this.playbackRate;
                	},
                	onEnded: function () {
                		this.isPlaying = false;
                	},
                	getLoop: function () {
                		if ( this.hasPlaybackControl === false ) {
                			console.warn( 'THREE.Audio: this Audio has no playback control.' );
                			return false;
                		}
                		return this.loop;
                	},
                	setLoop: function ( value ) {
                		if ( this.hasPlaybackControl === false ) {
                			console.warn( 'THREE.Audio: this Audio has no playback control.' );
                			return;
                		}
                		this.loop = value;
                		if ( this.isPlaying === true ) {
                			this.source.loop = this.loop;
                		}
                		return this;
                	},
                	setLoopStart: function ( value ) {
                		this.loopStart = value;
                		return this;
                	},
                	setLoopEnd: function ( value ) {
                		this.loopEnd = value;
                		return this;
                	},
                	getVolume: function () {
                		return this.gain.gain.value;
                	},
                	setVolume: function ( value ) {
                		this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );
                		return this;
                	}
                } );
                var _position$3 = new Vector3();
                var _quaternion$4 = new Quaternion();
                var _scale$2 = new Vector3();
                var _orientation$1 = new Vector3();
                function PositionalAudio( listener ) {
                	Audio.call( this, listener );
                	this.panner = this.context.createPanner();
                	this.panner.panningModel = 'HRTF';
                	this.panner.connect( this.gain );
                }
                PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {
                	constructor: PositionalAudio,
                	getOutput: function () {
                		return this.panner;
                	},
                	getRefDistance: function () {
                		return this.panner.refDistance;
                	},
                	setRefDistance: function ( value ) {
                		this.panner.refDistance = value;
                		return this;
                	},
                	getRolloffFactor: function () {
                		return this.panner.rolloffFactor;
                	},
                	setRolloffFactor: function ( value ) {
                		this.panner.rolloffFactor = value;
                		return this;
                	},
                	getDistanceModel: function () {
                		return this.panner.distanceModel;
                	},
                	setDistanceModel: function ( value ) {
                		this.panner.distanceModel = value;
                		return this;
                	},
                	getMaxDistance: function () {
                		return this.panner.maxDistance;
                	},
                	setMaxDistance: function ( value ) {
                		this.panner.maxDistance = value;
                		return this;
                	},
                	setDirectionalCone: function ( coneInnerAngle, coneOuterAngle, coneOuterGain ) {
                		this.panner.coneInnerAngle = coneInnerAngle;
                		this.panner.coneOuterAngle = coneOuterAngle;
                		this.panner.coneOuterGain = coneOuterGain;
                		return this;
                	},
                	updateMatrixWorld: function ( force ) {
                		Object3D.prototype.updateMatrixWorld.call( this, force );
                		if ( this.hasPlaybackControl === true && this.isPlaying === false ) return;
                		this.matrixWorld.decompose( _position$3, _quaternion$4, _scale$2 );
                		_orientation$1.set( 0, 0, 1 ).applyQuaternion( _quaternion$4 );
                		var panner = this.panner;
                		if ( panner.positionX ) {
                			var endTime = this.context.currentTime + this.listener.timeDelta;
                			panner.positionX.linearRampToValueAtTime( _position$3.x, endTime );
                			panner.positionY.linearRampToValueAtTime( _position$3.y, endTime );
                			panner.positionZ.linearRampToValueAtTime( _position$3.z, endTime );
                			panner.orientationX.linearRampToValueAtTime( _orientation$1.x, endTime );
                			panner.orientationY.linearRampToValueAtTime( _orientation$1.y, endTime );
                			panner.orientationZ.linearRampToValueAtTime( _orientation$1.z, endTime );
                		} else {
                			panner.setPosition( _position$3.x, _position$3.y, _position$3.z );
                			panner.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z );
                		}
                	}
                } );
                function AudioAnalyser( audio, fftSize ) {
                	this.analyser = audio.context.createAnalyser();
                	this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;
                	this.data = new Uint8Array( this.analyser.frequencyBinCount );
                	audio.getOutput().connect( this.analyser );
                }
                Object.assign( AudioAnalyser.prototype, {
                	getFrequencyData: function () {
                		this.analyser.getByteFrequencyData( this.data );
                		return this.data;
                	},
                	getAverageFrequency: function () {
                		var value = 0, data = this.getFrequencyData();
                		for ( var i = 0; i < data.length; i ++ ) {
                			value += data[ i ];
                		}
                		return value / data.length;
                	}
                } );
                function PropertyMixer( binding, typeName, valueSize ) {
                	this.binding = binding;
                	this.valueSize = valueSize;
                	var bufferType = Float64Array,
                		mixFunction;
                	switch ( typeName ) {
                		case 'quaternion':
                			mixFunction = this._slerp;
                			break;
                		case 'string':
                		case 'bool':
                			bufferType = Array;
                			mixFunction = this._select;
                			break;
                		default:
                			mixFunction = this._lerp;
                	}
                	this.buffer = new bufferType( valueSize * 4 );
                	this._mixBufferRegion = mixFunction;
                	this.cumulativeWeight = 0;
                	this.useCount = 0;
                	this.referenceCount = 0;
                }
                Object.assign( PropertyMixer.prototype, {
                	accumulate: function ( accuIndex, weight ) {
                		var buffer = this.buffer,
                			stride = this.valueSize,
                			offset = accuIndex * stride + stride,
                			currentWeight = this.cumulativeWeight;
                		if ( currentWeight === 0 ) {
                			for ( var i = 0; i !== stride; ++ i ) {
                				buffer[ offset + i ] = buffer[ i ];
                			}
                			currentWeight = weight;
                		} else {
                			currentWeight += weight;
                			var mix = weight / currentWeight;
                			this._mixBufferRegion( buffer, offset, 0, mix, stride );
                		}
                		this.cumulativeWeight = currentWeight;
                	},
                	apply: function ( accuIndex ) {
                		var stride = this.valueSize,
                			buffer = this.buffer,
                			offset = accuIndex * stride + stride,
                			weight = this.cumulativeWeight,
                			binding = this.binding;
                		this.cumulativeWeight = 0;
                		if ( weight < 1 ) {
                			var originalValueOffset = stride * 3;
                			this._mixBufferRegion(
                				buffer, offset, originalValueOffset, 1 - weight, stride );
                		}
                		for ( var i = stride, e = stride + stride; i !== e; ++ i ) {
                			if ( buffer[ i ] !== buffer[ i + stride ] ) {
                				binding.setValue( buffer, offset );
                				break;
                			}
                		}
                	},
                	saveOriginalState: function () {
                		var binding = this.binding;
                		var buffer = this.buffer,
                			stride = this.valueSize,
                			originalValueOffset = stride * 3;
                		binding.getValue( buffer, originalValueOffset );
                		for ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {
                			buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];
                		}
                		this.cumulativeWeight = 0;
                	},
                	restoreOriginalState: function () {
                		var originalValueOffset = this.valueSize * 3;
                		this.binding.setValue( this.buffer, originalValueOffset );
                	},
                	_select: function ( buffer, dstOffset, srcOffset, t, stride ) {
                		if ( t >= 0.5 ) {
                			for ( var i = 0; i !== stride; ++ i ) {
                				buffer[ dstOffset + i ] = buffer[ srcOffset + i ];
                			}
                		}
                	},
                	_slerp: function ( buffer, dstOffset, srcOffset, t ) {
                		Quaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );
                	},
                	_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {
                		var s = 1 - t;
                		for ( var i = 0; i !== stride; ++ i ) {
                			var j = dstOffset + i;
                			buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;
                		}
                	}
                } );
                var _RESERVED_CHARS_RE = '\\[\\]\\.:\\/';
                var _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );
                var _wordChar = '[^' + _RESERVED_CHARS_RE + ']';
                var _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\.', '' ) + ']';
                var _directoryRe = /((?:WC+[\/:])*)/.source.replace( 'WC', _wordChar );
                var _nodeRe = /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );
                var _objectRe = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace( 'WC', _wordChar );
                var _propertyRe = /\.(WC+)(?:\[(.+)\])?/.source.replace( 'WC', _wordChar );
                var _trackRe = new RegExp( ''
                	+ '^'
                	+ _directoryRe
                	+ _nodeRe
                	+ _objectRe
                	+ _propertyRe
                	+ '$'
                );
                var _supportedObjectNames = [ 'material', 'materials', 'bones' ];
                function Composite( targetGroup, path, optionalParsedPath ) {
                	var parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );
                	this._targetGroup = targetGroup;
                	this._bindings = targetGroup.subscribe_( path, parsedPath );
                }
                Object.assign( Composite.prototype, {
                	getValue: function ( array, offset ) {
                		this.bind();
                		var firstValidIndex = this._targetGroup.nCachedObjects_,
                			binding = this._bindings[ firstValidIndex ];
                		if ( binding !== undefined ) binding.getValue( array, offset );
                	},
                	setValue: function ( array, offset ) {
                		var bindings = this._bindings;
                		for ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {
                			bindings[ i ].setValue( array, offset );
                		}
                	},
                	bind: function () {
                		var bindings = this._bindings;
                		for ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {
                			bindings[ i ].bind();
                		}
                	},
                	unbind: function () {
                		var bindings = this._bindings;
                		for ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {
                			bindings[ i ].unbind();
                		}
                	}
                } );
                function PropertyBinding( rootNode, path, parsedPath ) {
                	this.path = path;
                	this.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );
                	this.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;
                	this.rootNode = rootNode;
                }
                Object.assign( PropertyBinding, {
                	Composite: Composite,
                	create: function ( root, path, parsedPath ) {
                		if ( ! ( root && root.isAnimationObjectGroup ) ) {
                			return new PropertyBinding( root, path, parsedPath );
                		} else {
                			return new PropertyBinding.Composite( root, path, parsedPath );
                		}
                	},
                	sanitizeNodeName: function ( name ) {
                		return name.replace( /\s/g, '_' ).replace( _reservedRe, '' );
                	},
                	parseTrackName: function ( trackName ) {
                		var matches = _trackRe.exec( trackName );
                		if ( ! matches ) {
                			throw new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );
                		}
                		var results = {
                			nodeName: matches[ 2 ],
                			objectName: matches[ 3 ],
                			objectIndex: matches[ 4 ],
                			propertyName: matches[ 5 ],
                			propertyIndex: matches[ 6 ]
                		};
                		var lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );
                		if ( lastDot !== undefined && lastDot !== - 1 ) {
                			var objectName = results.nodeName.substring( lastDot + 1 );
                			if ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {
                				results.nodeName = results.nodeName.substring( 0, lastDot );
                				results.objectName = objectName;
                			}
                		}
                		if ( results.propertyName === null || results.propertyName.length === 0 ) {
                			throw new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );
                		}
                		return results;
                	},
                	findNode: function ( root, nodeName ) {
                		if ( ! nodeName || nodeName === "" || nodeName === "root" || nodeName === "." || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {
                			return root;
                		}
                		if ( root.skeleton ) {
                			var bone = root.skeleton.getBoneByName( nodeName );
                			if ( bone !== undefined ) {
                				return bone;
                			}
                		}
                		if ( root.children ) {
                			var searchNodeSubtree = function ( children ) {
                				for ( var i = 0; i < children.length; i ++ ) {
                					var childNode = children[ i ];
                					if ( childNode.name === nodeName || childNode.uuid === nodeName ) {
                						return childNode;
                					}
                					var result = searchNodeSubtree( childNode.children );
                					if ( result ) return result;
                				}
                				return null;
                			};
                			var subTreeNode = searchNodeSubtree( root.children );
                			if ( subTreeNode ) {
                				return subTreeNode;
                			}
                		}
                		return null;
                	}
                } );
                Object.assign( PropertyBinding.prototype, {
                	_getValue_unavailable: function () {},
                	_setValue_unavailable: function () {},
                	BindingType: {
                		Direct: 0,
                		EntireArray: 1,
                		ArrayElement: 2,
                		HasFromToArray: 3
                	},
                	Versioning: {
                		None: 0,
                		NeedsUpdate: 1,
                		MatrixWorldNeedsUpdate: 2
                	},
                	GetterByBindingType: [
                		function getValue_direct( buffer, offset ) {
                			buffer[ offset ] = this.node[ this.propertyName ];
                		},
                		function getValue_array( buffer, offset ) {
                			var source = this.resolvedProperty;
                			for ( var i = 0, n = source.length; i !== n; ++ i ) {
                				buffer[ offset ++ ] = source[ i ];
                			}
                		},
                		function getValue_arrayElement( buffer, offset ) {
                			buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];
                		},
                		function getValue_toArray( buffer, offset ) {
                			this.resolvedProperty.toArray( buffer, offset );
                		}
                	],
                	SetterByBindingTypeAndVersioning: [
                		[
                			function setValue_direct( buffer, offset ) {
                				this.targetObject[ this.propertyName ] = buffer[ offset ];
                			},
                			function setValue_direct_setNeedsUpdate( buffer, offset ) {
                				this.targetObject[ this.propertyName ] = buffer[ offset ];
                				this.targetObject.needsUpdate = true;
                			},
                			function setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {
                				this.targetObject[ this.propertyName ] = buffer[ offset ];
                				this.targetObject.matrixWorldNeedsUpdate = true;
                			}
                		], [
                			function setValue_array( buffer, offset ) {
                				var dest = this.resolvedProperty;
                				for ( var i = 0, n = dest.length; i !== n; ++ i ) {
                					dest[ i ] = buffer[ offset ++ ];
                				}
                			},
                			function setValue_array_setNeedsUpdate( buffer, offset ) {
                				var dest = this.resolvedProperty;
                				for ( var i = 0, n = dest.length; i !== n; ++ i ) {
                					dest[ i ] = buffer[ offset ++ ];
                				}
                				this.targetObject.needsUpdate = true;
                			},
                			function setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {
                				var dest = this.resolvedProperty;
                				for ( var i = 0, n = dest.length; i !== n; ++ i ) {
                					dest[ i ] = buffer[ offset ++ ];
                				}
                				this.targetObject.matrixWorldNeedsUpdate = true;
                			}
                		], [
                			function setValue_arrayElement( buffer, offset ) {
                				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
                			},
                			function setValue_arrayElement_setNeedsUpdate( buffer, offset ) {
                				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
                				this.targetObject.needsUpdate = true;
                			},
                			function setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {
                				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
                				this.targetObject.matrixWorldNeedsUpdate = true;
                			}
                		], [
                			function setValue_fromArray( buffer, offset ) {
                				this.resolvedProperty.fromArray( buffer, offset );
                			},
                			function setValue_fromArray_setNeedsUpdate( buffer, offset ) {
                				this.resolvedProperty.fromArray( buffer, offset );
                				this.targetObject.needsUpdate = true;
                			},
                			function setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {
                				this.resolvedProperty.fromArray( buffer, offset );
                				this.targetObject.matrixWorldNeedsUpdate = true;
                			}
                		]
                	],
                	getValue: function getValue_unbound( targetArray, offset ) {
                		this.bind();
                		this.getValue( targetArray, offset );
                	},
                	setValue: function getValue_unbound( sourceArray, offset ) {
                		this.bind();
                		this.setValue( sourceArray, offset );
                	},
                	bind: function () {
                		var targetObject = this.node,
                			parsedPath = this.parsedPath,
                			objectName = parsedPath.objectName,
                			propertyName = parsedPath.propertyName,
                			propertyIndex = parsedPath.propertyIndex;
                		if ( ! targetObject ) {
                			targetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;
                			this.node = targetObject;
                		}
                		this.getValue = this._getValue_unavailable;
                		this.setValue = this._setValue_unavailable;
                		if ( ! targetObject ) {
                			console.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.' );
                			return;
                		}
                		if ( objectName ) {
                			var objectIndex = parsedPath.objectIndex;
                			switch ( objectName ) {
                				case 'materials':
                					if ( ! targetObject.material ) {
                						console.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );
                						return;
                					}
                					if ( ! targetObject.material.materials ) {
                						console.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );
                						return;
                					}
                					targetObject = targetObject.material.materials;
                					break;
                				case 'bones':
                					if ( ! targetObject.skeleton ) {
                						console.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );
                						return;
                					}
                					targetObject = targetObject.skeleton.bones;
                					for ( var i = 0; i < targetObject.length; i ++ ) {
                						if ( targetObject[ i ].name === objectIndex ) {
                							objectIndex = i;
                							break;
                						}
                					}
                					break;
                				default:
                					if ( targetObject[ objectName ] === undefined ) {
                						console.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );
                						return;
                					}
                					targetObject = targetObject[ objectName ];
                			}
                			if ( objectIndex !== undefined ) {
                				if ( targetObject[ objectIndex ] === undefined ) {
                					console.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );
                					return;
                				}
                				targetObject = targetObject[ objectIndex ];
                			}
                		}
                		var nodeProperty = targetObject[ propertyName ];
                		if ( nodeProperty === undefined ) {
                			var nodeName = parsedPath.nodeName;
                			console.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +
                				'.' + propertyName + ' but it wasn\'t found.', targetObject );
                			return;
                		}
                		var versioning = this.Versioning.None;
                		this.targetObject = targetObject;
                		if ( targetObject.needsUpdate !== undefined ) {
                			versioning = this.Versioning.NeedsUpdate;
                		} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) {
                			versioning = this.Versioning.MatrixWorldNeedsUpdate;
                		}
                		var bindingType = this.BindingType.Direct;
                		if ( propertyIndex !== undefined ) {
                			if ( propertyName === "morphTargetInfluences" ) {
                				if ( ! targetObject.geometry ) {
                					console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );
                					return;
                				}
                				if ( targetObject.geometry.isBufferGeometry ) {
                					if ( ! targetObject.geometry.morphAttributes ) {
                						console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );
                						return;
                					}
                					for ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {
                						if ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {
                							propertyIndex = i;
                							break;
                						}
                					}
                				} else {
                					if ( ! targetObject.geometry.morphTargets ) {
                						console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );
                						return;
                					}
                					for ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {
                						if ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {
                							propertyIndex = i;
                							break;
                						}
                					}
                				}
                			}
                			bindingType = this.BindingType.ArrayElement;
                			this.resolvedProperty = nodeProperty;
                			this.propertyIndex = propertyIndex;
                		} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {
                			bindingType = this.BindingType.HasFromToArray;
                			this.resolvedProperty = nodeProperty;
                		} else if ( Array.isArray( nodeProperty ) ) {
                			bindingType = this.BindingType.EntireArray;
                			this.resolvedProperty = nodeProperty;
                		} else {
                			this.propertyName = propertyName;
                		}
                		this.getValue = this.GetterByBindingType[ bindingType ];
                		this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];
                	},
                	unbind: function () {
                		this.node = null;
                		this.getValue = this._getValue_unbound;
                		this.setValue = this._setValue_unbound;
                	}
                } );
                Object.assign( PropertyBinding.prototype, {
                	_getValue_unbound: PropertyBinding.prototype.getValue,
                	_setValue_unbound: PropertyBinding.prototype.setValue,
                } );
                function AnimationObjectGroup() {
                	this.uuid = _Math.generateUUID();
                	this._objects = Array.prototype.slice.call( arguments );
                	this.nCachedObjects_ = 0;
                	var indices = {};
                	this._indicesByUUID = indices;
                	for ( var i = 0, n = arguments.length; i !== n; ++ i ) {
                		indices[ arguments[ i ].uuid ] = i;
                	}
                	this._paths = [];
                	this._parsedPaths = [];
                	this._bindings = [];
                	this._bindingsIndicesByPath = {};
                	var scope = this;
                	this.stats = {
                		objects: {
                			get total() {
                				return scope._objects.length;
                			},
                			get inUse() {
                				return this.total - scope.nCachedObjects_;
                			}
                		},
                		get bindingsPerObject() {
                			return scope._bindings.length;
                		}
                	};
                }
                Object.assign( AnimationObjectGroup.prototype, {
                	isAnimationObjectGroup: true,
                	add: function () {
                		var objects = this._objects,
                			nObjects = objects.length,
                			nCachedObjects = this.nCachedObjects_,
                			indicesByUUID = this._indicesByUUID,
                			paths = this._paths,
                			parsedPaths = this._parsedPaths,
                			bindings = this._bindings,
                			nBindings = bindings.length,
                			knownObject = undefined;
                		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {
                			var object = arguments[ i ],
                				uuid = object.uuid,
                				index = indicesByUUID[ uuid ];
                			if ( index === undefined ) {
                				index = nObjects ++;
                				indicesByUUID[ uuid ] = index;
                				objects.push( object );
                				for ( var j = 0, m = nBindings; j !== m; ++ j ) {
                					bindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );
                				}
                			} else if ( index < nCachedObjects ) {
                				knownObject = objects[ index ];
                				var firstActiveIndex = -- nCachedObjects,
                					lastCachedObject = objects[ firstActiveIndex ];
                				indicesByUUID[ lastCachedObject.uuid ] = index;
                				objects[ index ] = lastCachedObject;
                				indicesByUUID[ uuid ] = firstActiveIndex;
                				objects[ firstActiveIndex ] = object;
                				for ( var j = 0, m = nBindings; j !== m; ++ j ) {
                					var bindingsForPath = bindings[ j ],
                						lastCached = bindingsForPath[ firstActiveIndex ],
                						binding = bindingsForPath[ index ];
                					bindingsForPath[ index ] = lastCached;
                					if ( binding === undefined ) {
                						binding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );
                					}
                					bindingsForPath[ firstActiveIndex ] = binding;
                				}
                			} else if ( objects[ index ] !== knownObject ) {
                				console.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +
                					'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );
                			}
                		}
                		this.nCachedObjects_ = nCachedObjects;
                	},
                	remove: function () {
                		var objects = this._objects,
                			nCachedObjects = this.nCachedObjects_,
                			indicesByUUID = this._indicesByUUID,
                			bindings = this._bindings,
                			nBindings = bindings.length;
                		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {
                			var object = arguments[ i ],
                				uuid = object.uuid,
                				index = indicesByUUID[ uuid ];
                			if ( index !== undefined && index >= nCachedObjects ) {
                				var lastCachedIndex = nCachedObjects ++,
                					firstActiveObject = objects[ lastCachedIndex ];
                				indicesByUUID[ firstActiveObject.uuid ] = index;
                				objects[ index ] = firstActiveObject;
                				indicesByUUID[ uuid ] = lastCachedIndex;
                				objects[ lastCachedIndex ] = object;
                				for ( var j = 0, m = nBindings; j !== m; ++ j ) {
                					var bindingsForPath = bindings[ j ],
                						firstActive = bindingsForPath[ lastCachedIndex ],
                						binding = bindingsForPath[ index ];
                					bindingsForPath[ index ] = firstActive;
                					bindingsForPath[ lastCachedIndex ] = binding;
                				}
                			}
                		}
                		this.nCachedObjects_ = nCachedObjects;
                	},
                	uncache: function () {
                		var objects = this._objects,
                			nObjects = objects.length,
                			nCachedObjects = this.nCachedObjects_,
                			indicesByUUID = this._indicesByUUID,
                			bindings = this._bindings,
                			nBindings = bindings.length;
                		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {
                			var object = arguments[ i ],
                				uuid = object.uuid,
                				index = indicesByUUID[ uuid ];
                			if ( index !== undefined ) {
                				delete indicesByUUID[ uuid ];
                				if ( index < nCachedObjects ) {
                					var firstActiveIndex = -- nCachedObjects,
                						lastCachedObject = objects[ firstActiveIndex ],
                						lastIndex = -- nObjects,
                						lastObject = objects[ lastIndex ];
                					indicesByUUID[ lastCachedObject.uuid ] = index;
                					objects[ index ] = lastCachedObject;
                					indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
                					objects[ firstActiveIndex ] = lastObject;
                					objects.pop();
                					for ( var j = 0, m = nBindings; j !== m; ++ j ) {
                						var bindingsForPath = bindings[ j ],
                							lastCached = bindingsForPath[ firstActiveIndex ],
                							last = bindingsForPath[ lastIndex ];
                						bindingsForPath[ index ] = lastCached;
                						bindingsForPath[ firstActiveIndex ] = last;
                						bindingsForPath.pop();
                					}
                				} else {
                					var lastIndex = -- nObjects,
                						lastObject = objects[ lastIndex ];
                					indicesByUUID[ lastObject.uuid ] = index;
                					objects[ index ] = lastObject;
                					objects.pop();
                					for ( var j = 0, m = nBindings; j !== m; ++ j ) {
                						var bindingsForPath = bindings[ j ];
                						bindingsForPath[ index ] = bindingsForPath[ lastIndex ];
                						bindingsForPath.pop();
                					}
                				}
                			}
                		}
                		this.nCachedObjects_ = nCachedObjects;
                	},
                	subscribe_: function ( path, parsedPath ) {
                		var indicesByPath = this._bindingsIndicesByPath,
                			index = indicesByPath[ path ],
                			bindings = this._bindings;
                		if ( index !== undefined ) return bindings[ index ];
                		var paths = this._paths,
                			parsedPaths = this._parsedPaths,
                			objects = this._objects,
                			nObjects = objects.length,
                			nCachedObjects = this.nCachedObjects_,
                			bindingsForPath = new Array( nObjects );
                		index = bindings.length;
                		indicesByPath[ path ] = index;
                		paths.push( path );
                		parsedPaths.push( parsedPath );
                		bindings.push( bindingsForPath );
                		for ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {
                			var object = objects[ i ];
                			bindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );
                		}
                		return bindingsForPath;
                	},
                	unsubscribe_: function ( path ) {
                		var indicesByPath = this._bindingsIndicesByPath,
                			index = indicesByPath[ path ];
                		if ( index !== undefined ) {
                			var paths = this._paths,
                				parsedPaths = this._parsedPaths,
                				bindings = this._bindings,
                				lastBindingsIndex = bindings.length - 1,
                				lastBindings = bindings[ lastBindingsIndex ],
                				lastBindingsPath = path[ lastBindingsIndex ];
                			indicesByPath[ lastBindingsPath ] = index;
                			bindings[ index ] = lastBindings;
                			bindings.pop();
                			parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
                			parsedPaths.pop();
                			paths[ index ] = paths[ lastBindingsIndex ];
                			paths.pop();
                		}
                	}
                } );
                function AnimationAction( mixer, clip, localRoot ) {
                	this._mixer = mixer;
                	this._clip = clip;
                	this._localRoot = localRoot || null;
                	var tracks = clip.tracks,
                		nTracks = tracks.length,
                		interpolants = new Array( nTracks );
                	var interpolantSettings = {
                		endingStart: ZeroCurvatureEnding,
                		endingEnd: ZeroCurvatureEnding
                	};
                	for ( var i = 0; i !== nTracks; ++ i ) {
                		var interpolant = tracks[ i ].createInterpolant( null );
                		interpolants[ i ] = interpolant;
                		interpolant.settings = interpolantSettings;
                	}
                	this._interpolantSettings = interpolantSettings;
                	this._interpolants = interpolants;
                	this._propertyBindings = new Array( nTracks );
                	this._cacheIndex = null;
                	this._byClipCacheIndex = null;
                	this._timeScaleInterpolant = null;
                	this._weightInterpolant = null;
                	this.loop = LoopRepeat;
                	this._loopCount = - 1;
                	this._startTime = null;
                	this.time = 0;
                	this.timeScale = 1;
                	this._effectiveTimeScale = 1;
                	this.weight = 1;
                	this._effectiveWeight = 1;
                	this.repetitions = Infinity;
                	this.paused = false;
                	this.enabled = true;
                	this.clampWhenFinished = false;
                	this.zeroSlopeAtStart = true;
                	this.zeroSlopeAtEnd = true;
                }
                Object.assign( AnimationAction.prototype, {
                	play: function () {
                		this._mixer._activateAction( this );
                		return this;
                	},
                	stop: function () {
                		this._mixer._deactivateAction( this );
                		return this.reset();
                	},
                	reset: function () {
                		this.paused = false;
                		this.enabled = true;
                		this.time = 0;
                		this._loopCount = - 1;
                		this._startTime = null;
                		return this.stopFading().stopWarping();
                	},
                	isRunning: function () {
                		return this.enabled && ! this.paused && this.timeScale !== 0 &&
                			this._startTime === null && this._mixer._isActiveAction( this );
                	},
                	isScheduled: function () {
                		return this._mixer._isActiveAction( this );
                	},
                	startAt: function ( time ) {
                		this._startTime = time;
                		return this;
                	},
                	setLoop: function ( mode, repetitions ) {
                		this.loop = mode;
                		this.repetitions = repetitions;
                		return this;
                	},
                	setEffectiveWeight: function ( weight ) {
                		this.weight = weight;
                		this._effectiveWeight = this.enabled ? weight : 0;
                		return this.stopFading();
                	},
                	getEffectiveWeight: function () {
                		return this._effectiveWeight;
                	},
                	fadeIn: function ( duration ) {
                		return this._scheduleFading( duration, 0, 1 );
                	},
                	fadeOut: function ( duration ) {
                		return this._scheduleFading( duration, 1, 0 );
                	},
                	crossFadeFrom: function ( fadeOutAction, duration, warp ) {
                		fadeOutAction.fadeOut( duration );
                		this.fadeIn( duration );
                		if ( warp ) {
                			var fadeInDuration = this._clip.duration,
                				fadeOutDuration = fadeOutAction._clip.duration,
                				startEndRatio = fadeOutDuration / fadeInDuration,
                				endStartRatio = fadeInDuration / fadeOutDuration;
                			fadeOutAction.warp( 1.0, startEndRatio, duration );
                			this.warp( endStartRatio, 1.0, duration );
                		}
                		return this;
                	},
                	crossFadeTo: function ( fadeInAction, duration, warp ) {
                		return fadeInAction.crossFadeFrom( this, duration, warp );
                	},
                	stopFading: function () {
                		var weightInterpolant = this._weightInterpolant;
                		if ( weightInterpolant !== null ) {
                			this._weightInterpolant = null;
                			this._mixer._takeBackControlInterpolant( weightInterpolant );
                		}
                		return this;
                	},
                	setEffectiveTimeScale: function ( timeScale ) {
                		this.timeScale = timeScale;
                		this._effectiveTimeScale = this.paused ? 0 : timeScale;
                		return this.stopWarping();
                	},
                	getEffectiveTimeScale: function () {
                		return this._effectiveTimeScale;
                	},
                	setDuration: function ( duration ) {
                		this.timeScale = this._clip.duration / duration;
                		return this.stopWarping();
                	},
                	syncWith: function ( action ) {
                		this.time = action.time;
                		this.timeScale = action.timeScale;
                		return this.stopWarping();
                	},
                	halt: function ( duration ) {
                		return this.warp( this._effectiveTimeScale, 0, duration );
                	},
                	warp: function ( startTimeScale, endTimeScale, duration ) {
                		var mixer = this._mixer, now = mixer.time,
                			interpolant = this._timeScaleInterpolant,
                			timeScale = this.timeScale;
                		if ( interpolant === null ) {
                			interpolant = mixer._lendControlInterpolant();
                			this._timeScaleInterpolant = interpolant;
                		}
                		var times = interpolant.parameterPositions,
                			values = interpolant.sampleValues;
                		times[ 0 ] = now;
                		times[ 1 ] = now + duration;
                		values[ 0 ] = startTimeScale / timeScale;
                		values[ 1 ] = endTimeScale / timeScale;
                		return this;
                	},
                	stopWarping: function () {
                		var timeScaleInterpolant = this._timeScaleInterpolant;
                		if ( timeScaleInterpolant !== null ) {
                			this._timeScaleInterpolant = null;
                			this._mixer._takeBackControlInterpolant( timeScaleInterpolant );
                		}
                		return this;
                	},
                	getMixer: function () {
                		return this._mixer;
                	},
                	getClip: function () {
                		return this._clip;
                	},
                	getRoot: function () {
                		return this._localRoot || this._mixer._root;
                	},
                	_update: function ( time, deltaTime, timeDirection, accuIndex ) {
                		if ( ! this.enabled ) {
                			this._updateWeight( time );
                			return;
                		}
                		var startTime = this._startTime;
                		if ( startTime !== null ) {
                			var timeRunning = ( time - startTime ) * timeDirection;
                			if ( timeRunning < 0 || timeDirection === 0 ) {
                				return;
                			}
                			this._startTime = null;
                			deltaTime = timeDirection * timeRunning;
                		}
                		deltaTime *= this._updateTimeScale( time );
                		var clipTime = this._updateTime( deltaTime );
                		var weight = this._updateWeight( time );
                		if ( weight > 0 ) {
                			var interpolants = this._interpolants;
                			var propertyMixers = this._propertyBindings;
                			for ( var j = 0, m = interpolants.length; j !== m; ++ j ) {
                				interpolants[ j ].evaluate( clipTime );
                				propertyMixers[ j ].accumulate( accuIndex, weight );
                			}
                		}
                	},
                	_updateWeight: function ( time ) {
                		var weight = 0;
                		if ( this.enabled ) {
                			weight = this.weight;
                			var interpolant = this._weightInterpolant;
                			if ( interpolant !== null ) {
                				var interpolantValue = interpolant.evaluate( time )[ 0 ];
                				weight *= interpolantValue;
                				if ( time > interpolant.parameterPositions[ 1 ] ) {
                					this.stopFading();
                					if ( interpolantValue === 0 ) {
                						this.enabled = false;
                					}
                				}
                			}
                		}
                		this._effectiveWeight = weight;
                		return weight;
                	},
                	_updateTimeScale: function ( time ) {
                		var timeScale = 0;
                		if ( ! this.paused ) {
                			timeScale = this.timeScale;
                			var interpolant = this._timeScaleInterpolant;
                			if ( interpolant !== null ) {
                				var interpolantValue = interpolant.evaluate( time )[ 0 ];
                				timeScale *= interpolantValue;
                				if ( time > interpolant.parameterPositions[ 1 ] ) {
                					this.stopWarping();
                					if ( timeScale === 0 ) {
                						this.paused = true;
                					} else {
                						this.timeScale = timeScale;
                					}
                				}
                			}
                		}
                		this._effectiveTimeScale = timeScale;
                		return timeScale;
                	},
                	_updateTime: function ( deltaTime ) {
                		var time = this.time + deltaTime;
                		var duration = this._clip.duration;
                		var loop = this.loop;
                		var loopCount = this._loopCount;
                		var pingPong = ( loop === LoopPingPong );
                		if ( deltaTime === 0 ) {
                			if ( loopCount === - 1 ) return time;
                			return ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;
                		}
                		if ( loop === LoopOnce ) {
                			if ( loopCount === - 1 ) {
                				this._loopCount = 0;
                				this._setEndings( true, true, false );
                			}
                			handle_stop: {
                				if ( time >= duration ) {
                					time = duration;
                				} else if ( time < 0 ) {
                					time = 0;
                				} else {
                					this.time = time;
                					break handle_stop;
                				}
                				if ( this.clampWhenFinished ) this.paused = true;
                				else this.enabled = false;
                				this.time = time;
                				this._mixer.dispatchEvent( {
                					type: 'finished', action: this,
                					direction: deltaTime < 0 ? - 1 : 1
                				} );
                			}
                		} else {
                			if ( loopCount === - 1 ) {
                				if ( deltaTime >= 0 ) {
                					loopCount = 0;
                					this._setEndings( true, this.repetitions === 0, pingPong );
                				} else {
                					this._setEndings( this.repetitions === 0, true, pingPong );
                				}
                			}
                			if ( time >= duration || time < 0 ) {
                				var loopDelta = Math.floor( time / duration );
                				time -= duration * loopDelta;
                				loopCount += Math.abs( loopDelta );
                				var pending = this.repetitions - loopCount;
                				if ( pending <= 0 ) {
                					if ( this.clampWhenFinished ) this.paused = true;
                					else this.enabled = false;
                					time = deltaTime > 0 ? duration : 0;
                					this.time = time;
                					this._mixer.dispatchEvent( {
                						type: 'finished', action: this,
                						direction: deltaTime > 0 ? 1 : - 1
                					} );
                				} else {
                					if ( pending === 1 ) {
                						var atStart = deltaTime < 0;
                						this._setEndings( atStart, ! atStart, pingPong );
                					} else {
                						this._setEndings( false, false, pingPong );
                					}
                					this._loopCount = loopCount;
                					this.time = time;
                					this._mixer.dispatchEvent( {
                						type: 'loop', action: this, loopDelta: loopDelta
                					} );
                				}
                			} else {
                				this.time = time;
                			}
                			if ( pingPong && ( loopCount & 1 ) === 1 ) {
                				return duration - time;
                			}
                		}
                		return time;
                	},
                	_setEndings: function ( atStart, atEnd, pingPong ) {
                		var settings = this._interpolantSettings;
                		if ( pingPong ) {
                			settings.endingStart = ZeroSlopeEnding;
                			settings.endingEnd = ZeroSlopeEnding;
                		} else {
                			if ( atStart ) {
                				settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;
                			} else {
                				settings.endingStart = WrapAroundEnding;
                			}
                			if ( atEnd ) {
                				settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;
                			} else {
                				settings.endingEnd 	 = WrapAroundEnding;
                			}
                		}
                	},
                	_scheduleFading: function ( duration, weightNow, weightThen ) {
                		var mixer = this._mixer, now = mixer.time,
                			interpolant = this._weightInterpolant;
                		if ( interpolant === null ) {
                			interpolant = mixer._lendControlInterpolant();
                			this._weightInterpolant = interpolant;
                		}
                		var times = interpolant.parameterPositions,
                			values = interpolant.sampleValues;
                		times[ 0 ] = now;
                		values[ 0 ] = weightNow;
                		times[ 1 ] = now + duration;
                		values[ 1 ] = weightThen;
                		return this;
                	}
                } );
                function AnimationMixer( root ) {
                	this._root = root;
                	this._initMemoryManager();
                	this._accuIndex = 0;
                	this.time = 0;
                	this.timeScale = 1.0;
                }
                AnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {
                	constructor: AnimationMixer,
                	_bindAction: function ( action, prototypeAction ) {
                		var root = action._localRoot || this._root,
                			tracks = action._clip.tracks,
                			nTracks = tracks.length,
                			bindings = action._propertyBindings,
                			interpolants = action._interpolants,
                			rootUuid = root.uuid,
                			bindingsByRoot = this._bindingsByRootAndName,
                			bindingsByName = bindingsByRoot[ rootUuid ];
                		if ( bindingsByName === undefined ) {
                			bindingsByName = {};
                			bindingsByRoot[ rootUuid ] = bindingsByName;
                		}
                		for ( var i = 0; i !== nTracks; ++ i ) {
                			var track = tracks[ i ],
                				trackName = track.name,
                				binding = bindingsByName[ trackName ];
                			if ( binding !== undefined ) {
                				bindings[ i ] = binding;
                			} else {
                				binding = bindings[ i ];
                				if ( binding !== undefined ) {
                					if ( binding._cacheIndex === null ) {
                						++ binding.referenceCount;
                						this._addInactiveBinding( binding, rootUuid, trackName );
                					}
                					continue;
                				}
                				var path = prototypeAction && prototypeAction.
                					_propertyBindings[ i ].binding.parsedPath;
                				binding = new PropertyMixer(
                					PropertyBinding.create( root, trackName, path ),
                					track.ValueTypeName, track.getValueSize() );
                				++ binding.referenceCount;
                				this._addInactiveBinding( binding, rootUuid, trackName );
                				bindings[ i ] = binding;
                			}
                			interpolants[ i ].resultBuffer = binding.buffer;
                		}
                	},
                	_activateAction: function ( action ) {
                		if ( ! this._isActiveAction( action ) ) {
                			if ( action._cacheIndex === null ) {
                				var rootUuid = ( action._localRoot || this._root ).uuid,
                					clipUuid = action._clip.uuid,
                					actionsForClip = this._actionsByClip[ clipUuid ];
                				this._bindAction( action,
                					actionsForClip && actionsForClip.knownActions[ 0 ] );
                				this._addInactiveAction( action, clipUuid, rootUuid );
                			}
                			var bindings = action._propertyBindings;
                			for ( var i = 0, n = bindings.length; i !== n; ++ i ) {
                				var binding = bindings[ i ];
                				if ( binding.useCount ++ === 0 ) {
                					this._lendBinding( binding );
                					binding.saveOriginalState();
                				}
                			}
                			this._lendAction( action );
                		}
                	},
                	_deactivateAction: function ( action ) {
                		if ( this._isActiveAction( action ) ) {
                			var bindings = action._propertyBindings;
                			for ( var i = 0, n = bindings.length; i !== n; ++ i ) {
                				var binding = bindings[ i ];
                				if ( -- binding.useCount === 0 ) {
                					binding.restoreOriginalState();
                					this._takeBackBinding( binding );
                				}
                			}
                			this._takeBackAction( action );
                		}
                	},
                	_initMemoryManager: function () {
                		this._actions = [];
                		this._nActiveActions = 0;
                		this._actionsByClip = {};
                		this._bindings = [];
                		this._nActiveBindings = 0;
                		this._bindingsByRootAndName = {};
                		this._controlInterpolants = [];
                		this._nActiveControlInterpolants = 0;
                		var scope = this;
                		this.stats = {
                			actions: {
                				get total() {
                					return scope._actions.length;
                				},
                				get inUse() {
                					return scope._nActiveActions;
                				}
                			},
                			bindings: {
                				get total() {
                					return scope._bindings.length;
                				},
                				get inUse() {
                					return scope._nActiveBindings;
                				}
                			},
                			controlInterpolants: {
                				get total() {
                					return scope._controlInterpolants.length;
                				},
                				get inUse() {
                					return scope._nActiveControlInterpolants;
                				}
                			}
                		};
                	},
                	_isActiveAction: function ( action ) {
                		var index = action._cacheIndex;
                		return index !== null && index < this._nActiveActions;
                	},
                	_addInactiveAction: function ( action, clipUuid, rootUuid ) {
                		var actions = this._actions,
                			actionsByClip = this._actionsByClip,
                			actionsForClip = actionsByClip[ clipUuid ];
                		if ( actionsForClip === undefined ) {
                			actionsForClip = {
                				knownActions: [ action ],
                				actionByRoot: {}
                			};
                			action._byClipCacheIndex = 0;
                			actionsByClip[ clipUuid ] = actionsForClip;
                		} else {
                			var knownActions = actionsForClip.knownActions;
                			action._byClipCacheIndex = knownActions.length;
                			knownActions.push( action );
                		}
                		action._cacheIndex = actions.length;
                		actions.push( action );
                		actionsForClip.actionByRoot[ rootUuid ] = action;
                	},
                	_removeInactiveAction: function ( action ) {
                		var actions = this._actions,
                			lastInactiveAction = actions[ actions.length - 1 ],
                			cacheIndex = action._cacheIndex;
                		lastInactiveAction._cacheIndex = cacheIndex;
                		actions[ cacheIndex ] = lastInactiveAction;
                		actions.pop();
                		action._cacheIndex = null;
                		var clipUuid = action._clip.uuid,
                			actionsByClip = this._actionsByClip,
                			actionsForClip = actionsByClip[ clipUuid ],
                			knownActionsForClip = actionsForClip.knownActions,
                			lastKnownAction =
                				knownActionsForClip[ knownActionsForClip.length - 1 ],
                			byClipCacheIndex = action._byClipCacheIndex;
                		lastKnownAction._byClipCacheIndex = byClipCacheIndex;
                		knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
                		knownActionsForClip.pop();
                		action._byClipCacheIndex = null;
                		var actionByRoot = actionsForClip.actionByRoot,
                			rootUuid = ( action._localRoot || this._root ).uuid;
                		delete actionByRoot[ rootUuid ];
                		if ( knownActionsForClip.length === 0 ) {
                			delete actionsByClip[ clipUuid ];
                		}
                		this._removeInactiveBindingsForAction( action );
                	},
                	_removeInactiveBindingsForAction: function ( action ) {
                		var bindings = action._propertyBindings;
                		for ( var i = 0, n = bindings.length; i !== n; ++ i ) {
                			var binding = bindings[ i ];
                			if ( -- binding.referenceCount === 0 ) {
                				this._removeInactiveBinding( binding );
                			}
                		}
                	},
                	_lendAction: function ( action ) {
                		var actions = this._actions,
                			prevIndex = action._cacheIndex,
                			lastActiveIndex = this._nActiveActions ++,
                			firstInactiveAction = actions[ lastActiveIndex ];
                		action._cacheIndex = lastActiveIndex;
                		actions[ lastActiveIndex ] = action;
                		firstInactiveAction._cacheIndex = prevIndex;
                		actions[ prevIndex ] = firstInactiveAction;
                	},
                	_takeBackAction: function ( action ) {
                		var actions = this._actions,
                			prevIndex = action._cacheIndex,
                			firstInactiveIndex = -- this._nActiveActions,
                			lastActiveAction = actions[ firstInactiveIndex ];
                		action._cacheIndex = firstInactiveIndex;
                		actions[ firstInactiveIndex ] = action;
                		lastActiveAction._cacheIndex = prevIndex;
                		actions[ prevIndex ] = lastActiveAction;
                	},
                	_addInactiveBinding: function ( binding, rootUuid, trackName ) {
                		var bindingsByRoot = this._bindingsByRootAndName,
                			bindingByName = bindingsByRoot[ rootUuid ],
                			bindings = this._bindings;
                		if ( bindingByName === undefined ) {
                			bindingByName = {};
                			bindingsByRoot[ rootUuid ] = bindingByName;
                		}
                		bindingByName[ trackName ] = binding;
                		binding._cacheIndex = bindings.length;
                		bindings.push( binding );
                	},
                	_removeInactiveBinding: function ( binding ) {
                		var bindings = this._bindings,
                			propBinding = binding.binding,
                			rootUuid = propBinding.rootNode.uuid,
                			trackName = propBinding.path,
                			bindingsByRoot = this._bindingsByRootAndName,
                			bindingByName = bindingsByRoot[ rootUuid ],
                			lastInactiveBinding = bindings[ bindings.length - 1 ],
                			cacheIndex = binding._cacheIndex;
                		lastInactiveBinding._cacheIndex = cacheIndex;
                		bindings[ cacheIndex ] = lastInactiveBinding;
                		bindings.pop();
                		delete bindingByName[ trackName ];
                		if ( Object.keys( bindingByName ).length === 0 ) {
                			delete bindingsByRoot[ rootUuid ];
                		}
                	},
                	_lendBinding: function ( binding ) {
                		var bindings = this._bindings,
                			prevIndex = binding._cacheIndex,
                			lastActiveIndex = this._nActiveBindings ++,
                			firstInactiveBinding = bindings[ lastActiveIndex ];
                		binding._cacheIndex = lastActiveIndex;
                		bindings[ lastActiveIndex ] = binding;
                		firstInactiveBinding._cacheIndex = prevIndex;
                		bindings[ prevIndex ] = firstInactiveBinding;
                	},
                	_takeBackBinding: function ( binding ) {
                		var bindings = this._bindings,
                			prevIndex = binding._cacheIndex,
                			firstInactiveIndex = -- this._nActiveBindings,
                			lastActiveBinding = bindings[ firstInactiveIndex ];
                		binding._cacheIndex = firstInactiveIndex;
                		bindings[ firstInactiveIndex ] = binding;
                		lastActiveBinding._cacheIndex = prevIndex;
                		bindings[ prevIndex ] = lastActiveBinding;
                	},
                	_lendControlInterpolant: function () {
                		var interpolants = this._controlInterpolants,
                			lastActiveIndex = this._nActiveControlInterpolants ++,
                			interpolant = interpolants[ lastActiveIndex ];
                		if ( interpolant === undefined ) {
                			interpolant = new LinearInterpolant(
                				new Float32Array( 2 ), new Float32Array( 2 ),
                				1, this._controlInterpolantsResultBuffer );
                			interpolant.__cacheIndex = lastActiveIndex;
                			interpolants[ lastActiveIndex ] = interpolant;
                		}
                		return interpolant;
                	},
                	_takeBackControlInterpolant: function ( interpolant ) {
                		var interpolants = this._controlInterpolants,
                			prevIndex = interpolant.__cacheIndex,
                			firstInactiveIndex = -- this._nActiveControlInterpolants,
                			lastActiveInterpolant = interpolants[ firstInactiveIndex ];
                		interpolant.__cacheIndex = firstInactiveIndex;
                		interpolants[ firstInactiveIndex ] = interpolant;
                		lastActiveInterpolant.__cacheIndex = prevIndex;
                		interpolants[ prevIndex ] = lastActiveInterpolant;
                	},
                	_controlInterpolantsResultBuffer: new Float32Array( 1 ),
                	clipAction: function ( clip, optionalRoot ) {
                		var root = optionalRoot || this._root,
                			rootUuid = root.uuid,
                			clipObject = typeof clip === 'string' ?
                				AnimationClip.findByName( root, clip ) : clip,
                			clipUuid = clipObject !== null ? clipObject.uuid : clip,
                			actionsForClip = this._actionsByClip[ clipUuid ],
                			prototypeAction = null;
                		if ( actionsForClip !== undefined ) {
                			var existingAction =
                					actionsForClip.actionByRoot[ rootUuid ];
                			if ( existingAction !== undefined ) {
                				return existingAction;
                			}
                			prototypeAction = actionsForClip.knownActions[ 0 ];
                			if ( clipObject === null )
                				clipObject = prototypeAction._clip;
                		}
                		if ( clipObject === null ) return null;
                		var newAction = new AnimationAction( this, clipObject, optionalRoot );
                		this._bindAction( newAction, prototypeAction );
                		this._addInactiveAction( newAction, clipUuid, rootUuid );
                		return newAction;
                	},
                	existingAction: function ( clip, optionalRoot ) {
                		var root = optionalRoot || this._root,
                			rootUuid = root.uuid,
                			clipObject = typeof clip === 'string' ?
                				AnimationClip.findByName( root, clip ) : clip,
                			clipUuid = clipObject ? clipObject.uuid : clip,
                			actionsForClip = this._actionsByClip[ clipUuid ];
                		if ( actionsForClip !== undefined ) {
                			return actionsForClip.actionByRoot[ rootUuid ] || null;
                		}
                		return null;
                	},
                	stopAllAction: function () {
                		var actions = this._actions,
                			nActions = this._nActiveActions,
                			bindings = this._bindings,
                			nBindings = this._nActiveBindings;
                		this._nActiveActions = 0;
                		this._nActiveBindings = 0;
                		for ( var i = 0; i !== nActions; ++ i ) {
                			actions[ i ].reset();
                		}
                		for ( var i = 0; i !== nBindings; ++ i ) {
                			bindings[ i ].useCount = 0;
                		}
                		return this;
                	},
                	update: function ( deltaTime ) {
                		deltaTime *= this.timeScale;
                		var actions = this._actions,
                			nActions = this._nActiveActions,
                			time = this.time += deltaTime,
                			timeDirection = Math.sign( deltaTime ),
                			accuIndex = this._accuIndex ^= 1;
                		for ( var i = 0; i !== nActions; ++ i ) {
                			var action = actions[ i ];
                			action._update( time, deltaTime, timeDirection, accuIndex );
                		}
                		var bindings = this._bindings,
                			nBindings = this._nActiveBindings;
                		for ( var i = 0; i !== nBindings; ++ i ) {
                			bindings[ i ].apply( accuIndex );
                		}
                		return this;
                	},
                	setTime: function ( timeInSeconds ) {
                		this.time = 0;
                		for ( var i = 0; i < this._actions.length; i ++ ) {
                			this._actions[ i ].time = 0;
                		}
                		return this.update( timeInSeconds );
                	},
                	getRoot: function () {
                		return this._root;
                	},
                	uncacheClip: function ( clip ) {
                		var actions = this._actions,
                			clipUuid = clip.uuid,
                			actionsByClip = this._actionsByClip,
                			actionsForClip = actionsByClip[ clipUuid ];
                		if ( actionsForClip !== undefined ) {
                			var actionsToRemove = actionsForClip.knownActions;
                			for ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {
                				var action = actionsToRemove[ i ];
                				this._deactivateAction( action );
                				var cacheIndex = action._cacheIndex,
                					lastInactiveAction = actions[ actions.length - 1 ];
                				action._cacheIndex = null;
                				action._byClipCacheIndex = null;
                				lastInactiveAction._cacheIndex = cacheIndex;
                				actions[ cacheIndex ] = lastInactiveAction;
                				actions.pop();
                				this._removeInactiveBindingsForAction( action );
                			}
                			delete actionsByClip[ clipUuid ];
                		}
                	},
                	uncacheRoot: function ( root ) {
                		var rootUuid = root.uuid,
                			actionsByClip = this._actionsByClip;
                		for ( var clipUuid in actionsByClip ) {
                			var actionByRoot = actionsByClip[ clipUuid ].actionByRoot,
                				action = actionByRoot[ rootUuid ];
                			if ( action !== undefined ) {
                				this._deactivateAction( action );
                				this._removeInactiveAction( action );
                			}
                		}
                		var bindingsByRoot = this._bindingsByRootAndName,
                			bindingByName = bindingsByRoot[ rootUuid ];
                		if ( bindingByName !== undefined ) {
                			for ( var trackName in bindingByName ) {
                				var binding = bindingByName[ trackName ];
                				binding.restoreOriginalState();
                				this._removeInactiveBinding( binding );
                			}
                		}
                	},
                	uncacheAction: function ( clip, optionalRoot ) {
                		var action = this.existingAction( clip, optionalRoot );
                		if ( action !== null ) {
                			this._deactivateAction( action );
                			this._removeInactiveAction( action );
                		}
                	}
                } );
                function Uniform( value ) {
                	if ( typeof value === 'string' ) {
                		console.warn( 'THREE.Uniform: Type parameter is no longer needed.' );
                		value = arguments[ 1 ];
                	}
                	this.value = value;
                }
                Uniform.prototype.clone = function () {
                	return new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );
                };
                function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {
                	InterleavedBuffer.call( this, array, stride );
                	this.meshPerAttribute = meshPerAttribute || 1;
                }
                InstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {
                	constructor: InstancedInterleavedBuffer,
                	isInstancedInterleavedBuffer: true,
                	copy: function ( source ) {
                		InterleavedBuffer.prototype.copy.call( this, source );
                		this.meshPerAttribute = source.meshPerAttribute;
                		return this;
                	}
                } );
                function Raycaster( origin, direction, near, far ) {
                	this.ray = new Ray( origin, direction );
                	this.near = near || 0;
                	this.far = far || Infinity;
                	this.camera = null;
                	this.params = {
                		Mesh: {},
                		Line: {},
                		LOD: {},
                		Points: { threshold: 1 },
                		Sprite: {}
                	};
                	Object.defineProperties( this.params, {
                		PointCloud: {
                			get: function () {
                				console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );
                				return this.Points;
                			}
                		}
                	} );
                }
                function ascSort( a, b ) {
                	return a.distance - b.distance;
                }
                function intersectObject( object, raycaster, intersects, recursive ) {
                	if ( object.visible === false ) return;
                	object.raycast( raycaster, intersects );
                	if ( recursive === true ) {
                		var children = object.children;
                		for ( var i = 0, l = children.length; i < l; i ++ ) {
                			intersectObject( children[ i ], raycaster, intersects, true );
                		}
                	}
                }
                Object.assign( Raycaster.prototype, {
                	linePrecision: 1,
                	set: function ( origin, direction ) {
                		this.ray.set( origin, direction );
                	},
                	setFromCamera: function ( coords, camera ) {
                		if ( ( camera && camera.isPerspectiveCamera ) ) {
                			this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
                			this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();
                			this.camera = camera;
                		} else if ( ( camera && camera.isOrthographicCamera ) ) {
                			this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera );
                			this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );
                			this.camera = camera;
                		} else {
                			console.error( 'THREE.Raycaster: Unsupported camera type.' );
                		}
                	},
                	intersectObject: function ( object, recursive, optionalTarget ) {
                		var intersects = optionalTarget || [];
                		intersectObject( object, this, intersects, recursive );
                		intersects.sort( ascSort );
                		return intersects;
                	},
                	intersectObjects: function ( objects, recursive, optionalTarget ) {
                		var intersects = optionalTarget || [];
                		if ( Array.isArray( objects ) === false ) {
                			console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
                			return intersects;
                		}
                		for ( var i = 0, l = objects.length; i < l; i ++ ) {
                			intersectObject( objects[ i ], this, intersects, recursive );
                		}
                		intersects.sort( ascSort );
                		return intersects;
                	}
                } );
                function Spherical( radius, phi, theta ) {
                	this.radius = ( radius !== undefined ) ? radius : 1.0;
                	this.phi = ( phi !== undefined ) ? phi : 0;
                	this.theta = ( theta !== undefined ) ? theta : 0;
                	return this;
                }
                Object.assign( Spherical.prototype, {
                	set: function ( radius, phi, theta ) {
                		this.radius = radius;
                		this.phi = phi;
                		this.theta = theta;
                		return this;
                	},
                	clone: function () {
                		return new this.constructor().copy( this );
                	},
                	copy: function ( other ) {
                		this.radius = other.radius;
                		this.phi = other.phi;
                		this.theta = other.theta;
                		return this;
                	},
                	makeSafe: function () {
                		var EPS = 0.000001;
                		this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );
                		return this;
                	},
                	setFromVector3: function ( v ) {
                		return this.setFromCartesianCoords( v.x, v.y, v.z );
                	},
                	setFromCartesianCoords: function ( x, y, z ) {
                		this.radius = Math.sqrt( x * x + y * y + z * z );
                		if ( this.radius === 0 ) {
                			this.theta = 0;
                			this.phi = 0;
                		} else {
                			this.theta = Math.atan2( x, z );
                			this.phi = Math.acos( _Math.clamp( y / this.radius, - 1, 1 ) );
                		}
                		return this;
                	}
                } );
                function Cylindrical( radius, theta, y ) {
                	this.radius = ( radius !== undefined ) ? radius : 1.0;
                	this.theta = ( theta !== undefined ) ? theta : 0;
                	this.y = ( y !== undefined ) ? y : 0;
                	return this;
                }
                Object.assign( Cylindrical.prototype, {
                	set: function ( radius, theta, y ) {
                		this.radius = radius;
                		this.theta = theta;
                		this.y = y;
                		return this;
                	},
                	clone: function () {
                		return new this.constructor().copy( this );
                	},
                	copy: function ( other ) {
                		this.radius = other.radius;
                		this.theta = other.theta;
                		this.y = other.y;
                		return this;
                	},
                	setFromVector3: function ( v ) {
                		return this.setFromCartesianCoords( v.x, v.y, v.z );
                	},
                	setFromCartesianCoords: function ( x, y, z ) {
                		this.radius = Math.sqrt( x * x + z * z );
                		this.theta = Math.atan2( x, z );
                		this.y = y;
                		return this;
                	}
                } );
                var _vector$6 = new Vector2();
                function Box2( min, max ) {
                	this.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );
                	this.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );
                }
                Object.assign( Box2.prototype, {
                	set: function ( min, max ) {
                		this.min.copy( min );
                		this.max.copy( max );
                		return this;
                	},
                	setFromPoints: function ( points ) {
                		this.makeEmpty();
                		for ( var i = 0, il = points.length; i < il; i ++ ) {
                			this.expandByPoint( points[ i ] );
                		}
                		return this;
                	},
                	setFromCenterAndSize: function ( center, size ) {
                		var halfSize = _vector$6.copy( size ).multiplyScalar( 0.5 );
                		this.min.copy( center ).sub( halfSize );
                		this.max.copy( center ).add( halfSize );
                		return this;
                	},
                	clone: function () {
                		return new this.constructor().copy( this );
                	},
                	copy: function ( box ) {
                		this.min.copy( box.min );
                		this.max.copy( box.max );
                		return this;
                	},
                	makeEmpty: function () {
                		this.min.x = this.min.y = + Infinity;
                		this.max.x = this.max.y = - Infinity;
                		return this;
                	},
                	isEmpty: function () {
                		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );
                	},
                	getCenter: function ( target ) {
                		if ( target === undefined ) {
                			console.warn( 'THREE.Box2: .getCenter() target is now required' );
                			target = new Vector2();
                		}
                		return this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );
                	},
                	getSize: function ( target ) {
                		if ( target === undefined ) {
                			console.warn( 'THREE.Box2: .getSize() target is now required' );
                			target = new Vector2();
                		}
                		return this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );
                	},
                	expandByPoint: function ( point ) {
                		this.min.min( point );
                		this.max.max( point );
                		return this;
                	},
                	expandByVector: function ( vector ) {
                		this.min.sub( vector );
                		this.max.add( vector );
                		return this;
                	},
                	expandByScalar: function ( scalar ) {
                		this.min.addScalar( - scalar );
                		this.max.addScalar( scalar );
                		return this;
                	},
                	containsPoint: function ( point ) {
                		return point.x < this.min.x || point.x > this.max.x ||
                			point.y < this.min.y || point.y > this.max.y ? false : true;
                	},
                	containsBox: function ( box ) {
                		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
                			this.min.y <= box.min.y && box.max.y <= this.max.y;
                	},
                	getParameter: function ( point, target ) {
                		if ( target === undefined ) {
                			console.warn( 'THREE.Box2: .getParameter() target is now required' );
                			target = new Vector2();
                		}
                		return target.set(
                			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
                			( point.y - this.min.y ) / ( this.max.y - this.min.y )
                		);
                	},
                	intersectsBox: function ( box ) {
                		return box.max.x < this.min.x || box.min.x > this.max.x ||
                			box.max.y < this.min.y || box.min.y > this.max.y ? false : true;
                	},
                	clampPoint: function ( point, target ) {
                		if ( target === undefined ) {
                			console.warn( 'THREE.Box2: .clampPoint() target is now required' );
                			target = new Vector2();
                		}
                		return target.copy( point ).clamp( this.min, this.max );
                	},
                	distanceToPoint: function ( point ) {
                		var clampedPoint = _vector$6.copy( point ).clamp( this.min, this.max );
                		return clampedPoint.sub( point ).length();
                	},
                	intersect: function ( box ) {
                		this.min.max( box.min );
                		this.max.min( box.max );
                		return this;
                	},
                	union: function ( box ) {
                		this.min.min( box.min );
                		this.max.max( box.max );
                		return this;
                	},
                	translate: function ( offset ) {
                		this.min.add( offset );
                		this.max.add( offset );
                		return this;
                	},
                	equals: function ( box ) {
                		return box.min.equals( this.min ) && box.max.equals( this.max );
                	}
                } );
                var _startP = new Vector3();
                var _startEnd = new Vector3();
                function Line3( start, end ) {
                	this.start = ( start !== undefined ) ? start : new Vector3();
                	this.end = ( end !== undefined ) ? end : new Vector3();
                }
                Object.assign( Line3.prototype, {
                	set: function ( start, end ) {
                		this.start.copy( start );
                		this.end.copy( end );
                		return this;
                	},
                	clone: function () {
                		return new this.constructor().copy( this );
                	},
                	copy: function ( line ) {
                		this.start.copy( line.start );
                		this.end.copy( line.end );
                		return this;
                	},
                	getCenter: function ( target ) {
                		if ( target === undefined ) {
                			console.warn( 'THREE.Line3: .getCenter() target is now required' );
                			target = new Vector3();
                		}
                		return target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );
                	},
                	delta: function ( target ) {
                		if ( target === undefined ) {
                			console.warn( 'THREE.Line3: .delta() target is now required' );
                			target = new Vector3();
                		}
                		return target.subVectors( this.end, this.start );
                	},
                	distanceSq: function () {
                		return this.start.distanceToSquared( this.end );
                	},
                	distance: function () {
                		return this.start.distanceTo( this.end );
                	},
                	at: function ( t, target ) {
                		if ( target === undefined ) {
                			console.warn( 'THREE.Line3: .at() target is now required' );
                			target = new Vector3();
                		}
                		return this.delta( target ).multiplyScalar( t ).add( this.start );
                	},
                	closestPointToPointParameter: function ( point, clampToLine ) {
                		_startP.subVectors( point, this.start );
                		_startEnd.subVectors( this.end, this.start );
                		var startEnd2 = _startEnd.dot( _startEnd );
                		var startEnd_startP = _startEnd.dot( _startP );
                		var t = startEnd_startP / startEnd2;
                		if ( clampToLine ) {
                			t = _Math.clamp( t, 0, 1 );
                		}
                		return t;
                	},
                	closestPointToPoint: function ( point, clampToLine, target ) {
                		var t = this.closestPointToPointParameter( point, clampToLine );
                		if ( target === undefined ) {
                			console.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );
                			target = new Vector3();
                		}
                		return this.delta( target ).multiplyScalar( t ).add( this.start );
                	},
                	applyMatrix4: function ( matrix ) {
                		this.start.applyMatrix4( matrix );
                		this.end.applyMatrix4( matrix );
                		return this;
                	},
                	equals: function ( line ) {
                		return line.start.equals( this.start ) && line.end.equals( this.end );
                	}
                } );
                function ImmediateRenderObject( material ) {
                	Object3D.call( this );
                	this.material = material;
                	this.render = function (                      ) {};
                }
                ImmediateRenderObject.prototype = Object.create( Object3D.prototype );
                ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;
                ImmediateRenderObject.prototype.isImmediateRenderObject = true;
                var _v1$5 = new Vector3();
                var _v2$3 = new Vector3();
                var _normalMatrix$1 = new Matrix3();
                var _keys = [ 'a', 'b', 'c' ];
                function VertexNormalsHelper( object, size, hex, linewidth ) {
                	this.object = object;
                	this.size = ( size !== undefined ) ? size : 1;
                	var color = ( hex !== undefined ) ? hex : 0xff0000;
                	var width = ( linewidth !== undefined ) ? linewidth : 1;
                	var nNormals = 0;
                	var objGeometry = this.object.geometry;
                	if ( objGeometry && objGeometry.isGeometry ) {
                		nNormals = objGeometry.faces.length * 3;
                	} else if ( objGeometry && objGeometry.isBufferGeometry ) {
                		nNormals = objGeometry.attributes.normal.count;
                	}
                	var geometry = new BufferGeometry();
                	var positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );
                	geometry.setAttribute( 'position', positions );
                	LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );
                	this.matrixAutoUpdate = false;
                	this.update();
                }
                VertexNormalsHelper.prototype = Object.create( LineSegments.prototype );
                VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;
                VertexNormalsHelper.prototype.update = function () {
                	this.object.updateMatrixWorld( true );
                	_normalMatrix$1.getNormalMatrix( this.object.matrixWorld );
                	var matrixWorld = this.object.matrixWorld;
                	var position = this.geometry.attributes.position;
                	var objGeometry = this.object.geometry;
                	if ( objGeometry && objGeometry.isGeometry ) {
                		var vertices = objGeometry.vertices;
                		var faces = objGeometry.faces;
                		var idx = 0;
                		for ( var i = 0, l = faces.length; i < l; i ++ ) {
                			var face = faces[ i ];
                			for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {
                				var vertex = vertices[ face[ _keys[ j ] ] ];
                				var normal = face.vertexNormals[ j ];
                				_v1$5.copy( vertex ).applyMatrix4( matrixWorld );
                				_v2$3.copy( normal ).applyMatrix3( _normalMatrix$1 ).normalize().multiplyScalar( this.size ).add( _v1$5 );
                				position.setXYZ( idx, _v1$5.x, _v1$5.y, _v1$5.z );
                				idx = idx + 1;
                				position.setXYZ( idx, _v2$3.x, _v2$3.y, _v2$3.z );
                				idx = idx + 1;
                			}
                		}
                	} else if ( objGeometry && objGeometry.isBufferGeometry ) {
                		var objPos = objGeometry.attributes.position;
                		var objNorm = objGeometry.attributes.normal;
                		var idx = 0;
                		for ( var j = 0, jl = objPos.count; j < jl; j ++ ) {
                			_v1$5.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );
                			_v2$3.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );
                			_v2$3.applyMatrix3( _normalMatrix$1 ).normalize().multiplyScalar( this.size ).add( _v1$5 );
                			position.setXYZ( idx, _v1$5.x, _v1$5.y, _v1$5.z );
                			idx = idx + 1;
                			position.setXYZ( idx, _v2$3.x, _v2$3.y, _v2$3.z );
                			idx = idx + 1;
                		}
                	}
                	position.needsUpdate = true;
                };
                var _vector$7 = new Vector3();
                function SpotLightHelper( light, color ) {
                	Object3D.call( this );
                	this.light = light;
                	this.light.updateMatrixWorld();
                	this.matrix = light.matrixWorld;
                	this.matrixAutoUpdate = false;
                	this.color = color;
                	var geometry = new BufferGeometry();
                	var positions = [
                		0, 0, 0, 	0, 0, 1,
                		0, 0, 0, 	1, 0, 1,
                		0, 0, 0,	- 1, 0, 1,
                		0, 0, 0, 	0, 1, 1,
                		0, 0, 0, 	0, - 1, 1
                	];
                	for ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {
                		var p1 = ( i / l ) * Math.PI * 2;
                		var p2 = ( j / l ) * Math.PI * 2;
                		positions.push(
                			Math.cos( p1 ), Math.sin( p1 ), 1,
                			Math.cos( p2 ), Math.sin( p2 ), 1
                		);
                	}
                	geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
                	var material = new LineBasicMaterial( { fog: false } );
                	this.cone = new LineSegments( geometry, material );
                	this.add( this.cone );
                	this.update();
                }
                SpotLightHelper.prototype = Object.create( Object3D.prototype );
                SpotLightHelper.prototype.constructor = SpotLightHelper;
                SpotLightHelper.prototype.dispose = function () {
                	this.cone.geometry.dispose();
                	this.cone.material.dispose();
                };
                SpotLightHelper.prototype.update = function () {
                	this.light.updateMatrixWorld();
                	var coneLength = this.light.distance ? this.light.distance : 1000;
                	var coneWidth = coneLength * Math.tan( this.light.angle );
                	this.cone.scale.set( coneWidth, coneWidth, coneLength );
                	_vector$7.setFromMatrixPosition( this.light.target.matrixWorld );
                	this.cone.lookAt( _vector$7 );
                	if ( this.color !== undefined ) {
                		this.cone.material.color.set( this.color );
                	} else {
                		this.cone.material.color.copy( this.light.color );
                	}
                };
                var _vector$8 = new Vector3();
                var _boneMatrix = new Matrix4();
                var _matrixWorldInv = new Matrix4();
                function getBoneList( object ) {
                	var boneList = [];
                	if ( object && object.isBone ) {
                		boneList.push( object );
                	}
                	for ( var i = 0; i < object.children.length; i ++ ) {
                		boneList.push.apply( boneList, getBoneList( object.children[ i ] ) );
                	}
                	return boneList;
                }
                function SkeletonHelper( object ) {
                	var bones = getBoneList( object );
                	var geometry = new BufferGeometry();
                	var vertices = [];
                	var colors = [];
                	var color1 = new Color( 0, 0, 1 );
                	var color2 = new Color( 0, 1, 0 );
                	for ( var i = 0; i < bones.length; i ++ ) {
                		var bone = bones[ i ];
                		if ( bone.parent && bone.parent.isBone ) {
                			vertices.push( 0, 0, 0 );
                			vertices.push( 0, 0, 0 );
                			colors.push( color1.r, color1.g, color1.b );
                			colors.push( color2.r, color2.g, color2.b );
                		}
                	}
                	geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
                	geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
                	var material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );
                	LineSegments.call( this, geometry, material );
                	this.root = object;
                	this.bones = bones;
                	this.matrix = object.matrixWorld;
                	this.matrixAutoUpdate = false;
                }
                SkeletonHelper.prototype = Object.create( LineSegments.prototype );
                SkeletonHelper.prototype.constructor = SkeletonHelper;
                SkeletonHelper.prototype.updateMatrixWorld = function ( force ) {
                	var bones = this.bones;
                	var geometry = this.geometry;
                	var position = geometry.getAttribute( 'position' );
                	_matrixWorldInv.getInverse( this.root.matrixWorld );
                	for ( var i = 0, j = 0; i < bones.length; i ++ ) {
                		var bone = bones[ i ];
                		if ( bone.parent && bone.parent.isBone ) {
                			_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );
                			_vector$8.setFromMatrixPosition( _boneMatrix );
                			position.setXYZ( j, _vector$8.x, _vector$8.y, _vector$8.z );
                			_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );
                			_vector$8.setFromMatrixPosition( _boneMatrix );
                			position.setXYZ( j + 1, _vector$8.x, _vector$8.y, _vector$8.z );
                			j += 2;
                		}
                	}
                	geometry.getAttribute( 'position' ).needsUpdate = true;
                	Object3D.prototype.updateMatrixWorld.call( this, force );
                };
                function PointLightHelper( light, sphereSize, color ) {
                	this.light = light;
                	this.light.updateMatrixWorld();
                	this.color = color;
                	var geometry = new SphereBufferGeometry( sphereSize, 4, 2 );
                	var material = new MeshBasicMaterial( { wireframe: true, fog: false } );
                	Mesh.call( this, geometry, material );
                	this.matrix = this.light.matrixWorld;
                	this.matrixAutoUpdate = false;
                	this.update();
                }
                PointLightHelper.prototype = Object.create( Mesh.prototype );
                PointLightHelper.prototype.constructor = PointLightHelper;
                PointLightHelper.prototype.dispose = function () {
                	this.geometry.dispose();
                	this.material.dispose();
                };
                PointLightHelper.prototype.update = function () {
                	if ( this.color !== undefined ) {
                		this.material.color.set( this.color );
                	} else {
                		this.material.color.copy( this.light.color );
                	}
                };
                function RectAreaLightHelper( light, color ) {
                	this.type = 'RectAreaLightHelper';
                	this.light = light;
                	this.color = color;
                	var positions = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, - 1, 0, 1, 1, 0 ];
                	var geometry = new BufferGeometry();
                	geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
                	geometry.computeBoundingSphere();
                	var material = new LineBasicMaterial( { fog: false } );
                	Line.call( this, geometry, material );
                	var positions2 = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, 1, 0, - 1, - 1, 0, 1, - 1, 0 ];
                	var geometry2 = new BufferGeometry();
                	geometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );
                	geometry2.computeBoundingSphere();
                	this.add( new Mesh( geometry2, new MeshBasicMaterial( { side: BackSide, fog: false } ) ) );
                	this.update();
                }
                RectAreaLightHelper.prototype = Object.create( Line.prototype );
                RectAreaLightHelper.prototype.constructor = RectAreaLightHelper;
                RectAreaLightHelper.prototype.update = function () {
                	this.scale.set( 0.5 * this.light.width, 0.5 * this.light.height, 1 );
                	if ( this.color !== undefined ) {
                		this.material.color.set( this.color );
                		this.children[ 0 ].material.color.set( this.color );
                	} else {
                		this.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );
                		var c = this.material.color;
                		var max = Math.max( c.r, c.g, c.b );
                		if ( max > 1 ) c.multiplyScalar( 1 / max );
                		this.children[ 0 ].material.color.copy( this.material.color );
                	}
                };
                RectAreaLightHelper.prototype.dispose = function () {
                	this.geometry.dispose();
                	this.material.dispose();
                	this.children[ 0 ].geometry.dispose();
                	this.children[ 0 ].material.dispose();
                };
                var _vector$9 = new Vector3();
                var _color1 = new Color();
                var _color2 = new Color();
                function HemisphereLightHelper( light, size, color ) {
                	Object3D.call( this );
                	this.light = light;
                	this.light.updateMatrixWorld();
                	this.matrix = light.matrixWorld;
                	this.matrixAutoUpdate = false;
                	this.color = color;
                	var geometry = new OctahedronBufferGeometry( size );
                	geometry.rotateY( Math.PI * 0.5 );
                	this.material = new MeshBasicMaterial( { wireframe: true, fog: false } );
                	if ( this.color === undefined ) this.material.vertexColors = VertexColors;
                	var position = geometry.getAttribute( 'position' );
                	var colors = new Float32Array( position.count * 3 );
                	geometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );
                	this.add( new Mesh( geometry, this.material ) );
                	this.update();
                }
                HemisphereLightHelper.prototype = Object.create( Object3D.prototype );
                HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;
                HemisphereLightHelper.prototype.dispose = function () {
                	this.children[ 0 ].geometry.dispose();
                	this.children[ 0 ].material.dispose();
                };
                HemisphereLightHelper.prototype.update = function () {
                	var mesh = this.children[ 0 ];
                	if ( this.color !== undefined ) {
                		this.material.color.set( this.color );
                	} else {
                		var colors = mesh.geometry.getAttribute( 'color' );
                		_color1.copy( this.light.color );
                		_color2.copy( this.light.groundColor );
                		for ( var i = 0, l = colors.count; i < l; i ++ ) {
                			var color = ( i < ( l / 2 ) ) ? _color1 : _color2;
                			colors.setXYZ( i, color.r, color.g, color.b );
                		}
                		colors.needsUpdate = true;
                	}
                	mesh.lookAt( _vector$9.setFromMatrixPosition( this.light.matrixWorld ).negate() );
                };
                function LightProbeHelper( lightProbe, size ) {
                	this.lightProbe = lightProbe;
                	this.size = size;
                	var defines = {};
                	defines[ 'GAMMA_OUTPUT' ] = "";
                	var material = new ShaderMaterial( {
                		defines: defines,
                		uniforms: {
                			sh: { value: this.lightProbe.sh.coefficients },
                			intensity: { value: this.lightProbe.intensity }
                		},
                		vertexShader: [
                			'varying vec3 vNormal;',
                			'void main() {',
                			'	vNormal = normalize( normalMatrix * normal );',
                			'	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
                			'}',
                		].join( '\n' ),
                		fragmentShader: [
                			'#define RECIPROCAL_PI 0.318309886',
                			'vec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {',
                			'	// matrix is assumed to be orthogonal',
                			'	return normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );',
                			'}',
                			'vec3 linearToOutput( in vec3 a ) {',
                			'	#ifdef GAMMA_OUTPUT',
                			'		return pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );',
                			'	#else',
                			'		return a;',
                			'	#endif',
                			'}',
                			'// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf',
                			'vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {',
                			'	// normal is assumed to have unit length',
                			'	float x = normal.x, y = normal.y, z = normal.z;',
                			'	// band 0',
                			'	vec3 result = shCoefficients[ 0 ] * 0.886227;',
                			'	// band 1',
                			'	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;',
                			'	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;',
                			'	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;',
                			'	// band 2',
                			'	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;',
                			'	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;',
                			'	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );',
                			'	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;',
                			'	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );',
                			'	return result;',
                			'}',
                			'uniform vec3 sh[ 9 ]; // sh coefficients',
                			'uniform float intensity; // light probe intensity',
                			'varying vec3 vNormal;',
                			'void main() {',
                			'	vec3 normal = normalize( vNormal );',
                			'	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );',
                			'	vec3 irradiance = shGetIrradianceAt( worldNormal, sh );',
                			'	vec3 outgoingLight = RECIPROCAL_PI * irradiance * intensity;',
                			'	outgoingLight = linearToOutput( outgoingLight );',
                			'	gl_FragColor = vec4( outgoingLight, 1.0 );',
                			'}'
                		].join( '\n' )
                	} );
                	var geometry = new SphereBufferGeometry( 1, 32, 16 );
                	Mesh.call( this, geometry, material );
                	this.onBeforeRender();
                }
                LightProbeHelper.prototype = Object.create( Mesh.prototype );
                LightProbeHelper.prototype.constructor = LightProbeHelper;
                LightProbeHelper.prototype.dispose = function () {
                	this.geometry.dispose();
                	this.material.dispose();
                };
                LightProbeHelper.prototype.onBeforeRender = function () {
                	this.position.copy( this.lightProbe.position );
                	this.scale.set( 1, 1, 1 ).multiplyScalar( this.size );
                	this.material.uniforms.intensity.value = this.lightProbe.intensity;
                };
                function GridHelper( size, divisions, color1, color2 ) {
                	size = size || 10;
                	divisions = divisions || 10;
                	color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
                	color2 = new Color( color2 !== undefined ? color2 : 0x888888 );
                	var center = divisions / 2;
                	var step = size / divisions;
                	var halfSize = size / 2;
                	var vertices = [], colors = [];
                	for ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {
                		vertices.push( - halfSize, 0, k, halfSize, 0, k );
                		vertices.push( k, 0, - halfSize, k, 0, halfSize );
                		var color = i === center ? color1 : color2;
                		color.toArray( colors, j ); j += 3;
                		color.toArray( colors, j ); j += 3;
                		color.toArray( colors, j ); j += 3;
                		color.toArray( colors, j ); j += 3;
                	}
                	var geometry = new BufferGeometry();
                	geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
                	geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
                	var material = new LineBasicMaterial( { vertexColors: VertexColors } );
                	LineSegments.call( this, geometry, material );
                }
                GridHelper.prototype = Object.assign( Object.create( LineSegments.prototype ), {
                	constructor: GridHelper,
                	copy: function ( source ) {
                		LineSegments.prototype.copy.call( this, source );
                		this.geometry.copy( source.geometry );
                		this.material.copy( source.material );
                		return this;
                	},
                	clone: function () {
                		return new this.constructor().copy( this );
                	}
                } );
                function PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {
                	radius = radius || 10;
                	radials = radials || 16;
                	circles = circles || 8;
                	divisions = divisions || 64;
                	color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
                	color2 = new Color( color2 !== undefined ? color2 : 0x888888 );
                	var vertices = [];
                	var colors = [];
                	var x, z;
                	var v, i, j, r, color;
                	for ( i = 0; i <= radials; i ++ ) {
                		v = ( i / radials ) * ( Math.PI * 2 );
                		x = Math.sin( v ) * radius;
                		z = Math.cos( v ) * radius;
                		vertices.push( 0, 0, 0 );
                		vertices.push( x, 0, z );
                		color = ( i & 1 ) ? color1 : color2;
                		colors.push( color.r, color.g, color.b );
                		colors.push( color.r, color.g, color.b );
                	}
                	for ( i = 0; i <= circles; i ++ ) {
                		color = ( i & 1 ) ? color1 : color2;
                		r = radius - ( radius / circles * i );
                		for ( j = 0; j < divisions; j ++ ) {
                			v = ( j / divisions ) * ( Math.PI * 2 );
                			x = Math.sin( v ) * r;
                			z = Math.cos( v ) * r;
                			vertices.push( x, 0, z );
                			colors.push( color.r, color.g, color.b );
                			v = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );
                			x = Math.sin( v ) * r;
                			z = Math.cos( v ) * r;
                			vertices.push( x, 0, z );
                			colors.push( color.r, color.g, color.b );
                		}
                	}
                	var geometry = new BufferGeometry();
                	geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
                	geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
                	var material = new LineBasicMaterial( { vertexColors: VertexColors } );
                	LineSegments.call( this, geometry, material );
                }
                PolarGridHelper.prototype = Object.create( LineSegments.prototype );
                PolarGridHelper.prototype.constructor = PolarGridHelper;
                function PositionalAudioHelper( audio, range, divisionsInnerAngle, divisionsOuterAngle ) {
                	this.audio = audio;
                	this.range = range || 1;
                	this.divisionsInnerAngle = divisionsInnerAngle || 16;
                	this.divisionsOuterAngle = divisionsOuterAngle || 2;
                	var geometry = new BufferGeometry();
                	var divisions = this.divisionsInnerAngle + this.divisionsOuterAngle * 2;
                	var positions = new Float32Array( ( divisions * 3 + 3 ) * 3 );
                	geometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );
                	var materialInnerAngle = new LineBasicMaterial( { color: 0x00ff00 } );
                	var materialOuterAngle = new LineBasicMaterial( { color: 0xffff00 } );
                	Line.call( this, geometry, [ materialOuterAngle, materialInnerAngle ] );
                	this.update();
                }
                PositionalAudioHelper.prototype = Object.create( Line.prototype );
                PositionalAudioHelper.prototype.constructor = PositionalAudioHelper;
                PositionalAudioHelper.prototype.update = function () {
                	var audio = this.audio;
                	var range = this.range;
                	var divisionsInnerAngle = this.divisionsInnerAngle;
                	var divisionsOuterAngle = this.divisionsOuterAngle;
                	var coneInnerAngle = _Math.degToRad( audio.panner.coneInnerAngle );
                	var coneOuterAngle = _Math.degToRad( audio.panner.coneOuterAngle );
                	var halfConeInnerAngle = coneInnerAngle / 2;
                	var halfConeOuterAngle = coneOuterAngle / 2;
                	var start = 0;
                	var count = 0;
                	var i, stride;
                	var geometry = this.geometry;
                	var positionAttribute = geometry.attributes.position;
                	geometry.clearGroups();
                	function generateSegment( from, to, divisions, materialIndex ) {
                		var step = ( to - from ) / divisions;
                		positionAttribute.setXYZ( start, 0, 0, 0 );
                		count ++;
                		for ( i = from; i < to; i += step ) {
                			stride = start + count;
                			positionAttribute.setXYZ( stride, Math.sin( i ) * range, 0, Math.cos( i ) * range );
                			positionAttribute.setXYZ( stride + 1, Math.sin( Math.min( i + step, to ) ) * range, 0, Math.cos( Math.min( i + step, to ) ) * range );
                			positionAttribute.setXYZ( stride + 2, 0, 0, 0 );
                			count += 3;
                		}
                		geometry.addGroup( start, count, materialIndex );
                		start += count;
                		count = 0;
                	}
                	generateSegment( - halfConeOuterAngle, - halfConeInnerAngle, divisionsOuterAngle, 0 );
                	generateSegment( - halfConeInnerAngle, halfConeInnerAngle, divisionsInnerAngle, 1 );
                	generateSegment( halfConeInnerAngle, halfConeOuterAngle, divisionsOuterAngle, 0 );
                	positionAttribute.needsUpdate = true;
                	if ( coneInnerAngle === coneOuterAngle ) this.material[ 0 ].visible = false;
                };
                PositionalAudioHelper.prototype.dispose = function () {
                	this.geometry.dispose();
                	this.material[ 0 ].dispose();
                	this.material[ 1 ].dispose();
                };
                var _v1$6 = new Vector3();
                var _v2$4 = new Vector3();
                var _normalMatrix$2 = new Matrix3();
                function FaceNormalsHelper( object, size, hex, linewidth ) {
                	this.object = object;
                	this.size = ( size !== undefined ) ? size : 1;
                	var color = ( hex !== undefined ) ? hex : 0xffff00;
                	var width = ( linewidth !== undefined ) ? linewidth : 1;
                	var nNormals = 0;
                	var objGeometry = this.object.geometry;
                	if ( objGeometry && objGeometry.isGeometry ) {
                		nNormals = objGeometry.faces.length;
                	} else {
                		console.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );
                	}
                	var geometry = new BufferGeometry();
                	var positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );
                	geometry.setAttribute( 'position', positions );
                	LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );
                	this.matrixAutoUpdate = false;
                	this.update();
                }
                FaceNormalsHelper.prototype = Object.create( LineSegments.prototype );
                FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;
                FaceNormalsHelper.prototype.update = function () {
                	this.object.updateMatrixWorld( true );
                	_normalMatrix$2.getNormalMatrix( this.object.matrixWorld );
                	var matrixWorld = this.object.matrixWorld;
                	var position = this.geometry.attributes.position;
                	var objGeometry = this.object.geometry;
                	var vertices = objGeometry.vertices;
                	var faces = objGeometry.faces;
                	var idx = 0;
                	for ( var i = 0, l = faces.length; i < l; i ++ ) {
                		var face = faces[ i ];
                		var normal = face.normal;
                		_v1$6.copy( vertices[ face.a ] )
                			.add( vertices[ face.b ] )
                			.add( vertices[ face.c ] )
                			.divideScalar( 3 )
                			.applyMatrix4( matrixWorld );
                		_v2$4.copy( normal ).applyMatrix3( _normalMatrix$2 ).normalize().multiplyScalar( this.size ).add( _v1$6 );
                		position.setXYZ( idx, _v1$6.x, _v1$6.y, _v1$6.z );
                		idx = idx + 1;
                		position.setXYZ( idx, _v2$4.x, _v2$4.y, _v2$4.z );
                		idx = idx + 1;
                	}
                	position.needsUpdate = true;
                };
                var _v1$7 = new Vector3();
                var _v2$5 = new Vector3();
                var _v3$1 = new Vector3();
                function DirectionalLightHelper( light, size, color ) {
                	Object3D.call( this );
                	this.light = light;
                	this.light.updateMatrixWorld();
                	this.matrix = light.matrixWorld;
                	this.matrixAutoUpdate = false;
                	this.color = color;
                	if ( size === undefined ) size = 1;
                	var geometry = new BufferGeometry();
                	geometry.setAttribute( 'position', new Float32BufferAttribute( [
                		- size, size, 0,
                		size, size, 0,
                		size, - size, 0,
                		- size, - size, 0,
                		- size, size, 0
                	], 3 ) );
                	var material = new LineBasicMaterial( { fog: false } );
                	this.lightPlane = new Line( geometry, material );
                	this.add( this.lightPlane );
                	geometry = new BufferGeometry();
                	geometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );
                	this.targetLine = new Line( geometry, material );
                	this.add( this.targetLine );
                	this.update();
                }
                DirectionalLightHelper.prototype = Object.create( Object3D.prototype );
                DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;
                DirectionalLightHelper.prototype.dispose = function () {
                	this.lightPlane.geometry.dispose();
                	this.lightPlane.material.dispose();
                	this.targetLine.geometry.dispose();
                	this.targetLine.material.dispose();
                };
                DirectionalLightHelper.prototype.update = function () {
                	_v1$7.setFromMatrixPosition( this.light.matrixWorld );
                	_v2$5.setFromMatrixPosition( this.light.target.matrixWorld );
                	_v3$1.subVectors( _v2$5, _v1$7 );
                	this.lightPlane.lookAt( _v2$5 );
                	if ( this.color !== undefined ) {
                		this.lightPlane.material.color.set( this.color );
                		this.targetLine.material.color.set( this.color );
                	} else {
                		this.lightPlane.material.color.copy( this.light.color );
                		this.targetLine.material.color.copy( this.light.color );
                	}
                	this.targetLine.lookAt( _v2$5 );
                	this.targetLine.scale.z = _v3$1.length();
                };
                var _vector$a = new Vector3();
                var _camera = new Camera();
                function CameraHelper( camera ) {
                	var geometry = new BufferGeometry();
                	var material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );
                	var vertices = [];
                	var colors = [];
                	var pointMap = {};
                	var colorFrustum = new Color( 0xffaa00 );
                	var colorCone = new Color( 0xff0000 );
                	var colorUp = new Color( 0x00aaff );
                	var colorTarget = new Color( 0xffffff );
                	var colorCross = new Color( 0x333333 );
                	addLine( 'n1', 'n2', colorFrustum );
                	addLine( 'n2', 'n4', colorFrustum );
                	addLine( 'n4', 'n3', colorFrustum );
                	addLine( 'n3', 'n1', colorFrustum );
                	addLine( 'f1', 'f2', colorFrustum );
                	addLine( 'f2', 'f4', colorFrustum );
                	addLine( 'f4', 'f3', colorFrustum );
                	addLine( 'f3', 'f1', colorFrustum );
                	addLine( 'n1', 'f1', colorFrustum );
                	addLine( 'n2', 'f2', colorFrustum );
                	addLine( 'n3', 'f3', colorFrustum );
                	addLine( 'n4', 'f4', colorFrustum );
                	addLine( 'p', 'n1', colorCone );
                	addLine( 'p', 'n2', colorCone );
                	addLine( 'p', 'n3', colorCone );
                	addLine( 'p', 'n4', colorCone );
                	addLine( 'u1', 'u2', colorUp );
                	addLine( 'u2', 'u3', colorUp );
                	addLine( 'u3', 'u1', colorUp );
                	addLine( 'c', 't', colorTarget );
                	addLine( 'p', 'c', colorCross );
                	addLine( 'cn1', 'cn2', colorCross );
                	addLine( 'cn3', 'cn4', colorCross );
                	addLine( 'cf1', 'cf2', colorCross );
                	addLine( 'cf3', 'cf4', colorCross );
                	function addLine( a, b, color ) {
                		addPoint( a, color );
                		addPoint( b, color );
                	}
                	function addPoint( id, color ) {
                		vertices.push( 0, 0, 0 );
                		colors.push( color.r, color.g, color.b );
                		if ( pointMap[ id ] === undefined ) {
                			pointMap[ id ] = [];
                		}
                		pointMap[ id ].push( ( vertices.length / 3 ) - 1 );
                	}
                	geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
                	geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
                	LineSegments.call( this, geometry, material );
                	this.camera = camera;
                	if ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();
                	this.matrix = camera.matrixWorld;
                	this.matrixAutoUpdate = false;
                	this.pointMap = pointMap;
                	this.update();
                }
                CameraHelper.prototype = Object.create( LineSegments.prototype );
                CameraHelper.prototype.constructor = CameraHelper;
                CameraHelper.prototype.update = function () {
                	var geometry = this.geometry;
                	var pointMap = this.pointMap;
                	var w = 1, h = 1;
                	_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );
                	setPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );
                	setPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );
                	setPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );
                	setPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );
                	setPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );
                	setPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );
                	setPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );
                	setPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );
                	setPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );
                	setPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );
                	setPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );
                	setPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );
                	setPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );
                	setPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );
                	setPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );
                	setPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );
                	setPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );
                	setPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );
                	setPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );
                	setPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );
                	setPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );
                	geometry.getAttribute( 'position' ).needsUpdate = true;
                };
                function setPoint( point, pointMap, geometry, camera, x, y, z ) {
                	_vector$a.set( x, y, z ).unproject( camera );
                	var points = pointMap[ point ];
                	if ( points !== undefined ) {
                		var position = geometry.getAttribute( 'position' );
                		for ( var i = 0, l = points.length; i < l; i ++ ) {
                			position.setXYZ( points[ i ], _vector$a.x, _vector$a.y, _vector$a.z );
                		}
                	}
                }
                var _box$3 = new Box3();
                function BoxHelper( object, color ) {
                	this.object = object;
                	if ( color === undefined ) color = 0xffff00;
                	var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
                	var positions = new Float32Array( 8 * 3 );
                	var geometry = new BufferGeometry();
                	geometry.setIndex( new BufferAttribute( indices, 1 ) );
                	geometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );
                	LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );
                	this.matrixAutoUpdate = false;
                	this.update();
                }
                BoxHelper.prototype = Object.create( LineSegments.prototype );
                BoxHelper.prototype.constructor = BoxHelper;
                BoxHelper.prototype.update = function ( object ) {
                	if ( object !== undefined ) {
                		console.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );
                	}
                	if ( this.object !== undefined ) {
                		_box$3.setFromObject( this.object );
                	}
                	if ( _box$3.isEmpty() ) return;
                	var min = _box$3.min;
                	var max = _box$3.max;
                	var position = this.geometry.attributes.position;
                	var array = position.array;
                	array[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;
                	array[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;
                	array[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;
                	array[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
                	array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
                	array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
                	array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
                	array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;
                	position.needsUpdate = true;
                	this.geometry.computeBoundingSphere();
                };
                BoxHelper.prototype.setFromObject = function ( object ) {
                	this.object = object;
                	this.update();
                	return this;
                };
                BoxHelper.prototype.copy = function ( source ) {
                	LineSegments.prototype.copy.call( this, source );
                	this.object = source.object;
                	return this;
                };
                BoxHelper.prototype.clone = function () {
                	return new this.constructor().copy( this );
                };
                function Box3Helper( box, color ) {
                	this.type = 'Box3Helper';
                	this.box = box;
                	color = color || 0xffff00;
                	var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
                	var positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];
                	var geometry = new BufferGeometry();
                	geometry.setIndex( new BufferAttribute( indices, 1 ) );
                	geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
                	LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );
                	this.geometry.computeBoundingSphere();
                }
                Box3Helper.prototype = Object.create( LineSegments.prototype );
                Box3Helper.prototype.constructor = Box3Helper;
                Box3Helper.prototype.updateMatrixWorld = function ( force ) {
                	var box = this.box;
                	if ( box.isEmpty() ) return;
                	box.getCenter( this.position );
                	box.getSize( this.scale );
                	this.scale.multiplyScalar( 0.5 );
                	Object3D.prototype.updateMatrixWorld.call( this, force );
                };
                function PlaneHelper( plane, size, hex ) {
                	this.type = 'PlaneHelper';
                	this.plane = plane;
                	this.size = ( size === undefined ) ? 1 : size;
                	var color = ( hex !== undefined ) ? hex : 0xffff00;
                	var positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];
                	var geometry = new BufferGeometry();
                	geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
                	geometry.computeBoundingSphere();
                	Line.call( this, geometry, new LineBasicMaterial( { color: color } ) );
                	var positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];
                	var geometry2 = new BufferGeometry();
                	geometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );
                	geometry2.computeBoundingSphere();
                	this.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false } ) ) );
                }
                PlaneHelper.prototype = Object.create( Line.prototype );
                PlaneHelper.prototype.constructor = PlaneHelper;
                PlaneHelper.prototype.updateMatrixWorld = function ( force ) {
                	var scale = - this.plane.constant;
                	if ( Math.abs( scale ) < 1e-8 ) scale = 1e-8;
                	this.scale.set( 0.5 * this.size, 0.5 * this.size, scale );
                	this.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide;
                	this.lookAt( this.plane.normal );
                	Object3D.prototype.updateMatrixWorld.call( this, force );
                };
                var _axis = new Vector3();
                var _lineGeometry, _coneGeometry;
                function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {
                	Object3D.call( this );
                	if ( dir === undefined ) dir = new Vector3( 0, 0, 1 );
                	if ( origin === undefined ) origin = new Vector3( 0, 0, 0 );
                	if ( length === undefined ) length = 1;
                	if ( color === undefined ) color = 0xffff00;
                	if ( headLength === undefined ) headLength = 0.2 * length;
                	if ( headWidth === undefined ) headWidth = 0.2 * headLength;
                	if ( _lineGeometry === undefined ) {
                		_lineGeometry = new BufferGeometry();
                		_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );
                		_coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );
                		_coneGeometry.translate( 0, - 0.5, 0 );
                	}
                	this.position.copy( origin );
                	this.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color } ) );
                	this.line.matrixAutoUpdate = false;
                	this.add( this.line );
                	this.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color } ) );
                	this.cone.matrixAutoUpdate = false;
                	this.add( this.cone );
                	this.setDirection( dir );
                	this.setLength( length, headLength, headWidth );
                }
                ArrowHelper.prototype = Object.create( Object3D.prototype );
                ArrowHelper.prototype.constructor = ArrowHelper;
                ArrowHelper.prototype.setDirection = function ( dir ) {
                	if ( dir.y > 0.99999 ) {
                		this.quaternion.set( 0, 0, 0, 1 );
                	} else if ( dir.y < - 0.99999 ) {
                		this.quaternion.set( 1, 0, 0, 0 );
                	} else {
                		_axis.set( dir.z, 0, - dir.x ).normalize();
                		var radians = Math.acos( dir.y );
                		this.quaternion.setFromAxisAngle( _axis, radians );
                	}
                };
                ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {
                	if ( headLength === undefined ) headLength = 0.2 * length;
                	if ( headWidth === undefined ) headWidth = 0.2 * headLength;
                	this.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 );
                	this.line.updateMatrix();
                	this.cone.scale.set( headWidth, headLength, headWidth );
                	this.cone.position.y = length;
                	this.cone.updateMatrix();
                };
                ArrowHelper.prototype.setColor = function ( color ) {
                	this.line.material.color.set( color );
                	this.cone.material.color.set( color );
                };
                ArrowHelper.prototype.copy = function ( source ) {
                	Object3D.prototype.copy.call( this, source, false );
                	this.line.copy( source.line );
                	this.cone.copy( source.cone );
                	return this;
                };
                ArrowHelper.prototype.clone = function () {
                	return new this.constructor().copy( this );
                };
                function AxesHelper( size ) {
                	size = size || 1;
                	var vertices = [
                		0, 0, 0,	size, 0, 0,
                		0, 0, 0,	0, size, 0,
                		0, 0, 0,	0, 0, size
                	];
                	var colors = [
                		1, 0, 0,	1, 0.6, 0,
                		0, 1, 0,	0.6, 1, 0,
                		0, 0, 1,	0, 0.6, 1
                	];
                	var geometry = new BufferGeometry();
                	geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
                	geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
                	var material = new LineBasicMaterial( { vertexColors: VertexColors } );
                	LineSegments.call( this, geometry, material );
                }
                AxesHelper.prototype = Object.create( LineSegments.prototype );
                AxesHelper.prototype.constructor = AxesHelper;
                Curve.create = function ( construct, getPoint ) {
                	console.log( 'THREE.Curve.create() has been deprecated' );
                	construct.prototype = Object.create( Curve.prototype );
                	construct.prototype.constructor = construct;
                	construct.prototype.getPoint = getPoint;
                	return construct;
                };
                Object.assign( CurvePath.prototype, {
                	createPointsGeometry: function ( divisions ) {
                		console.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );
                		var pts = this.getPoints( divisions );
                		return this.createGeometry( pts );
                	},
                	createSpacedPointsGeometry: function ( divisions ) {
                		console.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );
                		var pts = this.getSpacedPoints( divisions );
                		return this.createGeometry( pts );
                	},
                	createGeometry: function ( points ) {
                		console.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );
                		var geometry = new Geometry();
                		for ( var i = 0, l = points.length; i < l; i ++ ) {
                			var point = points[ i ];
                			geometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );
                		}
                		return geometry;
                	}
                } );
                Object.assign( Path.prototype, {
                	fromPoints: function ( points ) {
                		console.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );
                		return this.setFromPoints( points );
                	}
                } );
                function Spline( points ) {
                	console.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );
                	CatmullRomCurve3.call( this, points );
                	this.type = 'catmullrom';
                }
                Spline.prototype = Object.create( CatmullRomCurve3.prototype );
                Object.assign( Spline.prototype, {
                	initFromArray: function (         ) {
                		console.error( 'THREE.Spline: .initFromArray() has been removed.' );
                	},
                	getControlPointsArray: function (                      ) {
                		console.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );
                	},
                	reparametrizeByArcLength: function (                    ) {
                		console.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );
                	}
                } );
                GridHelper.prototype.setColors = function () {
                	console.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );
                };
                SkeletonHelper.prototype.update = function () {
                	console.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );
                };
                Object.assign( Loader.prototype, {
                	extractUrlBase: function ( url ) {
                		console.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );
                		return LoaderUtils.extractUrlBase( url );
                	}
                } );
                Loader.Handlers = {
                	add: function (                     ) {
                		console.error( 'THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.' );
                	},
                	get: function (            ) {
                		console.error( 'THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.' );
                	}
                };
                Object.assign( ObjectLoader.prototype, {
                	setTexturePath: function ( value ) {
                		console.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );
                		return this.setResourcePath( value );
                	}
                } );
                Object.assign( Box2.prototype, {
                	center: function ( optionalTarget ) {
                		console.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );
                		return this.getCenter( optionalTarget );
                	},
                	empty: function () {
                		console.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );
                		return this.isEmpty();
                	},
                	isIntersectionBox: function ( box ) {
                		console.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );
                		return this.intersectsBox( box );
                	},
                	size: function ( optionalTarget ) {
                		console.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );
                		return this.getSize( optionalTarget );
                	}
                } );
                Object.assign( Box3.prototype, {
                	center: function ( optionalTarget ) {
                		console.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );
                		return this.getCenter( optionalTarget );
                	},
                	empty: function () {
                		console.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );
                		return this.isEmpty();
                	},
                	isIntersectionBox: function ( box ) {
                		console.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );
                		return this.intersectsBox( box );
                	},
                	isIntersectionSphere: function ( sphere ) {
                		console.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
                		return this.intersectsSphere( sphere );
                	},
                	size: function ( optionalTarget ) {
                		console.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );
                		return this.getSize( optionalTarget );
                	}
                } );
                Line3.prototype.center = function ( optionalTarget ) {
                	console.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );
                	return this.getCenter( optionalTarget );
                };
                Object.assign( _Math, {
                	random16: function () {
                		console.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );
                		return Math.random();
                	},
                	nearestPowerOfTwo: function ( value ) {
                		console.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );
                		return _Math.floorPowerOfTwo( value );
                	},
                	nextPowerOfTwo: function ( value ) {
                		console.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );
                		return _Math.ceilPowerOfTwo( value );
                	}
                } );
                Object.assign( Matrix3.prototype, {
                	flattenToArrayOffset: function ( array, offset ) {
                		console.warn( "THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
                		return this.toArray( array, offset );
                	},
                	multiplyVector3: function ( vector ) {
                		console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
                		return vector.applyMatrix3( this );
                	},
                	multiplyVector3Array: function (         ) {
                		console.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );
                	},
                	applyToBuffer: function ( buffer                       ) {
                		console.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );
                		return this.applyToBufferAttribute( buffer );
                	},
                	applyToVector3Array: function (                             ) {
                		console.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );
                	}
                } );
                Object.assign( Matrix4.prototype, {
                	extractPosition: function ( m ) {
                		console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
                		return this.copyPosition( m );
                	},
                	flattenToArrayOffset: function ( array, offset ) {
                		console.warn( "THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
                		return this.toArray( array, offset );
                	},
                	getPosition: function () {
                		console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );
                		return new Vector3().setFromMatrixColumn( this, 3 );
                	},
                	setRotationFromQuaternion: function ( q ) {
                		console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
                		return this.makeRotationFromQuaternion( q );
                	},
                	multiplyToArray: function () {
                		console.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );
                	},
                	multiplyVector3: function ( vector ) {
                		console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
                		return vector.applyMatrix4( this );
                	},
                	multiplyVector4: function ( vector ) {
                		console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
                		return vector.applyMatrix4( this );
                	},
                	multiplyVector3Array: function (         ) {
                		console.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );
                	},
                	rotateAxis: function ( v ) {
                		console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
                		v.transformDirection( this );
                	},
                	crossVector: function ( vector ) {
                		console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
                		return vector.applyMatrix4( this );
                	},
                	translate: function () {
                		console.error( 'THREE.Matrix4: .translate() has been removed.' );
                	},
                	rotateX: function () {
                		console.error( 'THREE.Matrix4: .rotateX() has been removed.' );
                	},
                	rotateY: function () {
                		console.error( 'THREE.Matrix4: .rotateY() has been removed.' );
                	},
                	rotateZ: function () {
                		console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );
                	},
                	rotateByAxis: function () {
                		console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );
                	},
                	applyToBuffer: function ( buffer                       ) {
                		console.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );
                		return this.applyToBufferAttribute( buffer );
                	},
                	applyToVector3Array: function (                             ) {
                		console.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );
                	},
                	makeFrustum: function ( left, right, bottom, top, near, far ) {
                		console.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );
                		return this.makePerspective( left, right, top, bottom, near, far );
                	}
                } );
                Plane.prototype.isIntersectionLine = function ( line ) {
                	console.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );
                	return this.intersectsLine( line );
                };
                Quaternion.prototype.multiplyVector3 = function ( vector ) {
                	console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
                	return vector.applyQuaternion( this );
                };
                Object.assign( Ray.prototype, {
                	isIntersectionBox: function ( box ) {
                		console.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );
                		return this.intersectsBox( box );
                	},
                	isIntersectionPlane: function ( plane ) {
                		console.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );
                		return this.intersectsPlane( plane );
                	},
                	isIntersectionSphere: function ( sphere ) {
                		console.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
                		return this.intersectsSphere( sphere );
                	}
                } );
                Object.assign( Triangle.prototype, {
                	area: function () {
                		console.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );
                		return this.getArea();
                	},
                	barycoordFromPoint: function ( point, target ) {
                		console.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );
                		return this.getBarycoord( point, target );
                	},
                	midpoint: function ( target ) {
                		console.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );
                		return this.getMidpoint( target );
                	},
                	normal: function ( target ) {
                		console.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );
                		return this.getNormal( target );
                	},
                	plane: function ( target ) {
                		console.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );
                		return this.getPlane( target );
                	}
                } );
                Object.assign( Triangle, {
                	barycoordFromPoint: function ( point, a, b, c, target ) {
                		console.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );
                		return Triangle.getBarycoord( point, a, b, c, target );
                	},
                	normal: function ( a, b, c, target ) {
                		console.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );
                		return Triangle.getNormal( a, b, c, target );
                	}
                } );
                Object.assign( Shape.prototype, {
                	extractAllPoints: function ( divisions ) {
                		console.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );
                		return this.extractPoints( divisions );
                	},
                	extrude: function ( options ) {
                		console.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );
                		return new ExtrudeGeometry( this, options );
                	},
                	makeGeometry: function ( options ) {
                		console.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );
                		return new ShapeGeometry( this, options );
                	}
                } );
                Object.assign( Vector2.prototype, {
                	fromAttribute: function ( attribute, index, offset ) {
                		console.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );
                		return this.fromBufferAttribute( attribute, index, offset );
                	},
                	distanceToManhattan: function ( v ) {
                		console.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
                		return this.manhattanDistanceTo( v );
                	},
                	lengthManhattan: function () {
                		console.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );
                		return this.manhattanLength();
                	}
                } );
                Object.assign( Vector3.prototype, {
                	setEulerFromRotationMatrix: function () {
                		console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );
                	},
                	setEulerFromQuaternion: function () {
                		console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );
                	},
                	getPositionFromMatrix: function ( m ) {
                		console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
                		return this.setFromMatrixPosition( m );
                	},
                	getScaleFromMatrix: function ( m ) {
                		console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
                		return this.setFromMatrixScale( m );
                	},
                	getColumnFromMatrix: function ( index, matrix ) {
                		console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
                		return this.setFromMatrixColumn( matrix, index );
                	},
                	applyProjection: function ( m ) {
                		console.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );
                		return this.applyMatrix4( m );
                	},
                	fromAttribute: function ( attribute, index, offset ) {
                		console.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );
                		return this.fromBufferAttribute( attribute, index, offset );
                	},
                	distanceToManhattan: function ( v ) {
                		console.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
                		return this.manhattanDistanceTo( v );
                	},
                	lengthManhattan: function () {
                		console.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );
                		return this.manhattanLength();
                	}
                } );
                Object.assign( Vector4.prototype, {
                	fromAttribute: function ( attribute, index, offset ) {
                		console.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );
                		return this.fromBufferAttribute( attribute, index, offset );
                	},
                	lengthManhattan: function () {
                		console.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );
                		return this.manhattanLength();
                	}
                } );
                Object.assign( Geometry.prototype, {
                	computeTangents: function () {
                		console.error( 'THREE.Geometry: .computeTangents() has been removed.' );
                	},
                	computeLineDistances: function () {
                		console.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );
                	}
                } );
                Object.assign( Object3D.prototype, {
                	getChildByName: function ( name ) {
                		console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
                		return this.getObjectByName( name );
                	},
                	renderDepth: function () {
                		console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );
                	},
                	translate: function ( distance, axis ) {
                		console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
                		return this.translateOnAxis( axis, distance );
                	},
                	getWorldRotation: function () {
                		console.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );
                	}
                } );
                Object.defineProperties( Object3D.prototype, {
                	eulerOrder: {
                		get: function () {
                			console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
                			return this.rotation.order;
                		},
                		set: function ( value ) {
                			console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
                			this.rotation.order = value;
                		}
                	},
                	useQuaternion: {
                		get: function () {
                			console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
                		},
                		set: function () {
                			console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
                		}
                	}
                } );
                Object.defineProperties( LOD.prototype, {
                	objects: {
                		get: function () {
                			console.warn( 'THREE.LOD: .objects has been renamed to .levels.' );
                			return this.levels;
                		}
                	}
                } );
                Object.defineProperty( Skeleton.prototype, 'useVertexTexture', {
                	get: function () {
                		console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );
                	},
                	set: function () {
                		console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );
                	}
                } );
                SkinnedMesh.prototype.initBones = function () {
                	console.error( 'THREE.SkinnedMesh: initBones() has been removed.' );
                };
                Object.defineProperty( Curve.prototype, '__arcLengthDivisions', {
                	get: function () {
                		console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
                		return this.arcLengthDivisions;
                	},
                	set: function ( value ) {
                		console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
                		this.arcLengthDivisions = value;
                	}
                } );
                PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {
                	console.warn( "THREE.PerspectiveCamera.setLens is deprecated. " +
                			"Use .setFocalLength and .filmGauge for a photographic setup." );
                	if ( filmGauge !== undefined ) this.filmGauge = filmGauge;
                	this.setFocalLength( focalLength );
                };
                Object.defineProperties( Light.prototype, {
                	onlyShadow: {
                		set: function () {
                			console.warn( 'THREE.Light: .onlyShadow has been removed.' );
                		}
                	},
                	shadowCameraFov: {
                		set: function ( value ) {
                			console.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );
                			this.shadow.camera.fov = value;
                		}
                	},
                	shadowCameraLeft: {
                		set: function ( value ) {
                			console.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );
                			this.shadow.camera.left = value;
                		}
                	},
                	shadowCameraRight: {
                		set: function ( value ) {
                			console.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );
                			this.shadow.camera.right = value;
                		}
                	},
                	shadowCameraTop: {
                		set: function ( value ) {
                			console.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );
                			this.shadow.camera.top = value;
                		}
                	},
                	shadowCameraBottom: {
                		set: function ( value ) {
                			console.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );
                			this.shadow.camera.bottom = value;
                		}
                	},
                	shadowCameraNear: {
                		set: function ( value ) {
                			console.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );
                			this.shadow.camera.near = value;
                		}
                	},
                	shadowCameraFar: {
                		set: function ( value ) {
                			console.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );
                			this.shadow.camera.far = value;
                		}
                	},
                	shadowCameraVisible: {
                		set: function () {
                			console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );
                		}
                	},
                	shadowBias: {
                		set: function ( value ) {
                			console.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );
                			this.shadow.bias = value;
                		}
                	},
                	shadowDarkness: {
                		set: function () {
                			console.warn( 'THREE.Light: .shadowDarkness has been removed.' );
                		}
                	},
                	shadowMapWidth: {
                		set: function ( value ) {
                			console.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );
                			this.shadow.mapSize.width = value;
                		}
                	},
                	shadowMapHeight: {
                		set: function ( value ) {
                			console.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );
                			this.shadow.mapSize.height = value;
                		}
                	}
                } );
                Object.defineProperties( BufferAttribute.prototype, {
                	length: {
                		get: function () {
                			console.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );
                			return this.array.length;
                		}
                	},
                	dynamic: {
                		get: function () {
                			console.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );
                			return this.usage === DynamicDrawUsage;
                		},
                		set: function (             ) {
                			console.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );
                			this.setUsage( DynamicDrawUsage );
                		}
                	}
                } );
                Object.assign( BufferAttribute.prototype, {
                	setDynamic: function ( value ) {
                		console.warn( 'THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.' );
                		this.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );
                		return this;
                	},
                	copyIndicesArray: function (               ) {
                		console.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );
                	},
                	setArray: function (             ) {
                		console.error( 'THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );
                	}
                } );
                Object.assign( BufferGeometry.prototype, {
                	addIndex: function ( index ) {
                		console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );
                		this.setIndex( index );
                	},
                	addAttribute: function ( name, attribute ) {
                		console.warn( 'THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().' );
                		if ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {
                			console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );
                			return this.setAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );
                		}
                		if ( name === 'index' ) {
                			console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );
                			this.setIndex( attribute );
                			return this;
                		}
                		return this.setAttribute( name, attribute );
                	},
                	addDrawCall: function ( start, count, indexOffset ) {
                		if ( indexOffset !== undefined ) {
                			console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );
                		}
                		console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );
                		this.addGroup( start, count );
                	},
                	clearDrawCalls: function () {
                		console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );
                		this.clearGroups();
                	},
                	computeTangents: function () {
                		console.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );
                	},
                	computeOffsets: function () {
                		console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );
                	},
                	removeAttribute: function ( name ) {
                		console.warn( 'THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().' );
                		return this.deleteAttribute( name );
                	}
                } );
                Object.defineProperties( BufferGeometry.prototype, {
                	drawcalls: {
                		get: function () {
                			console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );
                			return this.groups;
                		}
                	},
                	offsets: {
                		get: function () {
                			console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );
                			return this.groups;
                		}
                	}
                } );
                Object.defineProperties( InterleavedBuffer.prototype, {
                	dynamic: {
                		get: function () {
                			console.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );
                			return this.usage === DynamicDrawUsage;
                		},
                		set: function ( value ) {
                			console.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );
                			this.setUsage( value );
                		}
                	}
                } );
                Object.assign( InterleavedBuffer.prototype, {
                	setDynamic: function ( value ) {
                		console.warn( 'THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.' );
                		this.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );
                		return this;
                	},
                	setArray: function (             ) {
                		console.error( 'THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );
                	}
                } );
                Object.assign( ExtrudeBufferGeometry.prototype, {
                	getArrays: function () {
                		console.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );
                	},
                	addShapeList: function () {
                		console.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );
                	},
                	addShape: function () {
                		console.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );
                	}
                } );
                Object.defineProperties( Uniform.prototype, {
                	dynamic: {
                		set: function () {
                			console.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );
                		}
                	},
                	onUpdate: {
                		value: function () {
                			console.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );
                			return this;
                		}
                	}
                } );
                Object.defineProperties( Material.prototype, {
                	wrapAround: {
                		get: function () {
                			console.warn( 'THREE.Material: .wrapAround has been removed.' );
                		},
                		set: function () {
                			console.warn( 'THREE.Material: .wrapAround has been removed.' );
                		}
                	},
                	overdraw: {
                		get: function () {
                			console.warn( 'THREE.Material: .overdraw has been removed.' );
                		},
                		set: function () {
                			console.warn( 'THREE.Material: .overdraw has been removed.' );
                		}
                	},
                	wrapRGB: {
                		get: function () {
                			console.warn( 'THREE.Material: .wrapRGB has been removed.' );
                			return new Color();
                		}
                	},
                	shading: {
                		get: function () {
                			console.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
                		},
                		set: function ( value ) {
                			console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
                			this.flatShading = ( value === FlatShading );
                		}
                	},
                	stencilMask: {
                		get: function () {
                			console.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );
                			return this.stencilFuncMask;
                		},
                		set: function ( value ) {
                			console.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );
                			this.stencilFuncMask = value;
                		}
                	}
                } );
                Object.defineProperties( MeshPhongMaterial.prototype, {
                	metal: {
                		get: function () {
                			console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );
                			return false;
                		},
                		set: function () {
                			console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );
                		}
                	}
                } );
                Object.defineProperties( ShaderMaterial.prototype, {
                	derivatives: {
                		get: function () {
                			console.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
                			return this.extensions.derivatives;
                		},
                		set: function ( value ) {
                			console.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
                			this.extensions.derivatives = value;
                		}
                	}
                } );
                Object.assign( WebGLRenderer.prototype, {
                	clearTarget: function ( renderTarget, color, depth, stencil ) {
                		console.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );
                		this.setRenderTarget( renderTarget );
                		this.clear( color, depth, stencil );
                	},
                	animate: function ( callback ) {
                		console.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );
                		this.setAnimationLoop( callback );
                	},
                	getCurrentRenderTarget: function () {
                		console.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );
                		return this.getRenderTarget();
                	},
                	getMaxAnisotropy: function () {
                		console.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );
                		return this.capabilities.getMaxAnisotropy();
                	},
                	getPrecision: function () {
                		console.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );
                		return this.capabilities.precision;
                	},
                	resetGLState: function () {
                		console.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );
                		return this.state.reset();
                	},
                	supportsFloatTextures: function () {
                		console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).' );
                		return this.extensions.get( 'OES_texture_float' );
                	},
                	supportsHalfFloatTextures: function () {
                		console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).' );
                		return this.extensions.get( 'OES_texture_half_float' );
                	},
                	supportsStandardDerivatives: function () {
                		console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).' );
                		return this.extensions.get( 'OES_standard_derivatives' );
                	},
                	supportsCompressedTextureS3TC: function () {
                		console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).' );
                		return this.extensions.get( 'WEBGL_compressed_texture_s3tc' );
                	},
                	supportsCompressedTexturePVRTC: function () {
                		console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).' );
                		return this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );
                	},
                	supportsBlendMinMax: function () {
                		console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).' );
                		return this.extensions.get( 'EXT_blend_minmax' );
                	},
                	supportsVertexTextures: function () {
                		console.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );
                		return this.capabilities.vertexTextures;
                	},
                	supportsInstancedArrays: function () {
                		console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).' );
                		return this.extensions.get( 'ANGLE_instanced_arrays' );
                	},
                	enableScissorTest: function ( boolean ) {
                		console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );
                		this.setScissorTest( boolean );
                	},
                	initMaterial: function () {
                		console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );
                	},
                	addPrePlugin: function () {
                		console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );
                	},
                	addPostPlugin: function () {
                		console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );
                	},
                	updateShadowMap: function () {
                		console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );
                	},
                	setFaceCulling: function () {
                		console.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );
                	},
                	allocTextureUnit: function () {
                		console.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );
                	},
                	setTexture: function () {
                		console.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );
                	},
                	setTexture2D: function () {
                		console.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );
                	},
                	setTextureCube: function () {
                		console.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );
                	},
                	getActiveMipMapLevel: function () {
                		console.warn( 'THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().' );
                		return this.getActiveMipmapLevel();
                	}
                } );
                Object.defineProperties( WebGLRenderer.prototype, {
                	shadowMapEnabled: {
                		get: function () {
                			return this.shadowMap.enabled;
                		},
                		set: function ( value ) {
                			console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );
                			this.shadowMap.enabled = value;
                		}
                	},
                	shadowMapType: {
                		get: function () {
                			return this.shadowMap.type;
                		},
                		set: function ( value ) {
                			console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );
                			this.shadowMap.type = value;
                		}
                	},
                	shadowMapCullFace: {
                		get: function () {
                			console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );
                			return undefined;
                		},
                		set: function (             ) {
                			console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );
                		}
                	},
                	context: {
                		get: function () {
                			console.warn( 'THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.' );
                			return this.getContext();
                		}
                	}
                } );
                Object.defineProperties( WebGLShadowMap.prototype, {
                	cullFace: {
                		get: function () {
                			console.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );
                			return undefined;
                		},
                		set: function (                ) {
                			console.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );
                		}
                	},
                	renderReverseSided: {
                		get: function () {
                			console.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );
                			return undefined;
                		},
                		set: function () {
                			console.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );
                		}
                	},
                	renderSingleSided: {
                		get: function () {
                			console.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );
                			return undefined;
                		},
                		set: function () {
                			console.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );
                		}
                	}
                } );
                Object.defineProperties( WebGLRenderTargetCube.prototype, {
                	activeCubeFace: {
                		set: function (             ) {
                			console.warn( 'THREE.WebGLRenderTargetCube: .activeCubeFace has been removed. It is now the second parameter of WebGLRenderer.setRenderTarget().' );
                		}
                	},
                	activeMipMapLevel: {
                		set: function (             ) {
                			console.warn( 'THREE.WebGLRenderTargetCube: .activeMipMapLevel has been removed. It is now the third parameter of WebGLRenderer.setRenderTarget().' );
                		}
                	}
                } );
                Object.defineProperties( WebGLRenderTarget.prototype, {
                	wrapS: {
                		get: function () {
                			console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
                			return this.texture.wrapS;
                		},
                		set: function ( value ) {
                			console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
                			this.texture.wrapS = value;
                		}
                	},
                	wrapT: {
                		get: function () {
                			console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
                			return this.texture.wrapT;
                		},
                		set: function ( value ) {
                			console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
                			this.texture.wrapT = value;
                		}
                	},
                	magFilter: {
                		get: function () {
                			console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
                			return this.texture.magFilter;
                		},
                		set: function ( value ) {
                			console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
                			this.texture.magFilter = value;
                		}
                	},
                	minFilter: {
                		get: function () {
                			console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
                			return this.texture.minFilter;
                		},
                		set: function ( value ) {
                			console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
                			this.texture.minFilter = value;
                		}
                	},
                	anisotropy: {
                		get: function () {
                			console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
                			return this.texture.anisotropy;
                		},
                		set: function ( value ) {
                			console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
                			this.texture.anisotropy = value;
                		}
                	},
                	offset: {
                		get: function () {
                			console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
                			return this.texture.offset;
                		},
                		set: function ( value ) {
                			console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
                			this.texture.offset = value;
                		}
                	},
                	repeat: {
                		get: function () {
                			console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
                			return this.texture.repeat;
                		},
                		set: function ( value ) {
                			console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
                			this.texture.repeat = value;
                		}
                	},
                	format: {
                		get: function () {
                			console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
                			return this.texture.format;
                		},
                		set: function ( value ) {
                			console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
                			this.texture.format = value;
                		}
                	},
                	type: {
                		get: function () {
                			console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
                			return this.texture.type;
                		},
                		set: function ( value ) {
                			console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
                			this.texture.type = value;
                		}
                	},
                	generateMipmaps: {
                		get: function () {
                			console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
                			return this.texture.generateMipmaps;
                		},
                		set: function ( value ) {
                			console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
                			this.texture.generateMipmaps = value;
                		}
                	}
                } );
                Object.defineProperties( WebVRManager.prototype, {
                	standing: {
                		set: function (             ) {
                			console.warn( 'THREE.WebVRManager: .standing has been removed.' );
                		}
                	},
                	userHeight: {
                		set: function (             ) {
                			console.warn( 'THREE.WebVRManager: .userHeight has been removed.' );
                		}
                	}
                } );
                Object.defineProperties( Audio.prototype, {
                	load: {
                		value: function ( file ) {
                			console.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );
                			var scope = this;
                			var audioLoader = new AudioLoader();
                			audioLoader.load( file, function ( buffer ) {
                				scope.setBuffer( buffer );
                			} );
                			return this;
                		}
                	},
                	startTime: {
                		set: function () {
                			console.warn( 'THREE.Audio: .startTime is now .play( delay ).' );
                		}
                	}
                } );
                AudioAnalyser.prototype.getData = function () {
                	console.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );
                	return this.getFrequencyData();
                };
                CubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {
                	console.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );
                	return this.update( renderer, scene );
                };
                ImageUtils.crossOrigin = undefined;
                ImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {
                	console.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );
                	var loader = new TextureLoader();
                	loader.setCrossOrigin( this.crossOrigin );
                	var texture = loader.load( url, onLoad, undefined, onError );
                	if ( mapping ) texture.mapping = mapping;
                	return texture;
                };
                ImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {
                	console.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );
                	var loader = new CubeTextureLoader();
                	loader.setCrossOrigin( this.crossOrigin );
                	var texture = loader.load( urls, onLoad, undefined, onError );
                	if ( mapping ) texture.mapping = mapping;
                	return texture;
                };
                ImageUtils.loadCompressedTexture = function () {
                	console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );
                };
                ImageUtils.loadCompressedTextureCube = function () {
                	console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );
                };
                if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {
                	__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {
                		revision: REVISION,
                	} } ) );
                }

                var TransformControls = function ( camera, domElement ) {
                	if ( domElement === undefined ) {
                		console.warn( 'THREE.TransformControls: The second parameter "domElement" is now mandatory.' );
                		domElement = document;
                	}
                	Object3D.call( this );
                	this.visible = false;
                	var _gizmo = new TransformControlsGizmo();
                	this.add( _gizmo );
                	var _plane = new TransformControlsPlane();
                	this.add( _plane );
                	var scope = this;
                	defineProperty( "camera", camera );
                	defineProperty( "object", undefined );
                	defineProperty( "enabled", true );
                	defineProperty( "axis", null );
                	defineProperty( "mode", "translate" );
                	defineProperty( "translationSnap", null );
                	defineProperty( "rotationSnap", null );
                	defineProperty( "space", "world" );
                	defineProperty( "size", 1 );
                	defineProperty( "dragging", false );
                	defineProperty( "showX", true );
                	defineProperty( "showY", true );
                	defineProperty( "showZ", true );
                	var changeEvent = { type: "change" };
                	var mouseDownEvent = { type: "mouseDown" };
                	var mouseUpEvent = { type: "mouseUp", mode: scope.mode };
                	var objectChangeEvent = { type: "objectChange" };
                	var ray = new Raycaster();
                	var _tempVector = new Vector3();
                	var _tempVector2 = new Vector3();
                	var _tempQuaternion = new Quaternion();
                	var _unit = {
                		X: new Vector3( 1, 0, 0 ),
                		Y: new Vector3( 0, 1, 0 ),
                		Z: new Vector3( 0, 0, 1 )
                	};
                	var pointStart = new Vector3();
                	var pointEnd = new Vector3();
                	var offset = new Vector3();
                	var rotationAxis = new Vector3();
                	var startNorm = new Vector3();
                	var endNorm = new Vector3();
                	var rotationAngle = 0;
                	var cameraPosition = new Vector3();
                	var cameraQuaternion = new Quaternion();
                	var cameraScale = new Vector3();
                	var parentPosition = new Vector3();
                	var parentQuaternion = new Quaternion();
                	var parentQuaternionInv = new Quaternion();
                	var parentScale = new Vector3();
                	var worldPositionStart = new Vector3();
                	var worldQuaternionStart = new Quaternion();
                	var worldScaleStart = new Vector3();
                	var worldPosition = new Vector3();
                	var worldQuaternion = new Quaternion();
                	var worldQuaternionInv = new Quaternion();
                	var worldScale = new Vector3();
                	var eye = new Vector3();
                	var positionStart = new Vector3();
                	var quaternionStart = new Quaternion();
                	var scaleStart = new Vector3();
                	defineProperty( "worldPosition", worldPosition );
                	defineProperty( "worldPositionStart", worldPositionStart );
                	defineProperty( "worldQuaternion", worldQuaternion );
                	defineProperty( "worldQuaternionStart", worldQuaternionStart );
                	defineProperty( "cameraPosition", cameraPosition );
                	defineProperty( "cameraQuaternion", cameraQuaternion );
                	defineProperty( "pointStart", pointStart );
                	defineProperty( "pointEnd", pointEnd );
                	defineProperty( "rotationAxis", rotationAxis );
                	defineProperty( "rotationAngle", rotationAngle );
                	defineProperty( "eye", eye );
                	{
                		domElement.addEventListener( "mousedown", onPointerDown, false );
                		domElement.addEventListener( "touchstart", onPointerDown, false );
                		domElement.addEventListener( "mousemove", onPointerHover, false );
                		domElement.addEventListener( "touchmove", onPointerHover, false );
                		domElement.addEventListener( "touchmove", onPointerMove, false );
                		document.addEventListener( "mouseup", onPointerUp, false );
                		domElement.addEventListener( "touchend", onPointerUp, false );
                		domElement.addEventListener( "touchcancel", onPointerUp, false );
                		domElement.addEventListener( "touchleave", onPointerUp, false );
                	}
                	this.dispose = function () {
                		domElement.removeEventListener( "mousedown", onPointerDown );
                		domElement.removeEventListener( "touchstart", onPointerDown );
                		domElement.removeEventListener( "mousemove", onPointerHover );
                		document.removeEventListener( "mousemove", onPointerMove );
                		domElement.removeEventListener( "touchmove", onPointerHover );
                		domElement.removeEventListener( "touchmove", onPointerMove );
                		document.removeEventListener( "mouseup", onPointerUp );
                		domElement.removeEventListener( "touchend", onPointerUp );
                		domElement.removeEventListener( "touchcancel", onPointerUp );
                		domElement.removeEventListener( "touchleave", onPointerUp );
                		this.traverse( function ( child ) {
                			if ( child.geometry ) child.geometry.dispose();
                			if ( child.material ) child.material.dispose();
                		} );
                	};
                	this.attach = function ( object ) {
                		this.object = object;
                		this.visible = true;
                		return this;
                	};
                	this.detach = function () {
                		this.object = undefined;
                		this.visible = false;
                		this.axis = null;
                		return this;
                	};
                	function defineProperty( propName, defaultValue ) {
                		var propValue = defaultValue;
                		Object.defineProperty( scope, propName, {
                			get: function () {
                				return propValue !== undefined ? propValue : defaultValue;
                			},
                			set: function ( value ) {
                				if ( propValue !== value ) {
                					propValue = value;
                					_plane[ propName ] = value;
                					_gizmo[ propName ] = value;
                					scope.dispatchEvent( { type: propName + "-changed", value: value } );
                					scope.dispatchEvent( changeEvent );
                				}
                			}
                		} );
                		scope[ propName ] = defaultValue;
                		_plane[ propName ] = defaultValue;
                		_gizmo[ propName ] = defaultValue;
                	}
                	this.updateMatrixWorld = function () {
                		if ( this.object !== undefined ) {
                			this.object.updateMatrixWorld();
                			this.object.parent.matrixWorld.decompose( parentPosition, parentQuaternion, parentScale );
                			this.object.matrixWorld.decompose( worldPosition, worldQuaternion, worldScale );
                			parentQuaternionInv.copy( parentQuaternion ).inverse();
                			worldQuaternionInv.copy( worldQuaternion ).inverse();
                		}
                		this.camera.updateMatrixWorld();
                		this.camera.matrixWorld.decompose( cameraPosition, cameraQuaternion, cameraScale );
                		eye.copy( cameraPosition ).sub( worldPosition ).normalize();
                		Object3D.prototype.updateMatrixWorld.call( this );
                	};
                	this.pointerHover = function ( pointer ) {
                		if ( this.object === undefined || this.dragging === true || ( pointer.button !== undefined && pointer.button !== 0 ) ) return;
                		ray.setFromCamera( pointer, this.camera );
                		var intersect = ray.intersectObjects( _gizmo.picker[ this.mode ].children, true )[ 0 ] || false;
                		if ( intersect ) {
                			this.axis = intersect.object.name;
                		} else {
                			this.axis = null;
                		}
                	};
                	this.pointerDown = function ( pointer ) {
                		if ( this.object === undefined || this.dragging === true || ( pointer.button !== undefined && pointer.button !== 0 ) ) return;
                		if ( ( pointer.button === 0 || pointer.button === undefined ) && this.axis !== null ) {
                			ray.setFromCamera( pointer, this.camera );
                			var planeIntersect = ray.intersectObjects( [ _plane ], true )[ 0 ] || false;
                			if ( planeIntersect ) {
                				var space = this.space;
                				if ( this.mode === 'scale' ) {
                					space = 'local';
                				} else if ( this.axis === 'E' || this.axis === 'XYZE' || this.axis === 'XYZ' ) {
                					space = 'world';
                				}
                				if ( space === 'local' && this.mode === 'rotate' ) {
                					var snap = this.rotationSnap;
                					if ( this.axis === 'X' && snap ) this.object.rotation.x = Math.round( this.object.rotation.x / snap ) * snap;
                					if ( this.axis === 'Y' && snap ) this.object.rotation.y = Math.round( this.object.rotation.y / snap ) * snap;
                					if ( this.axis === 'Z' && snap ) this.object.rotation.z = Math.round( this.object.rotation.z / snap ) * snap;
                				}
                				this.object.updateMatrixWorld();
                				this.object.parent.updateMatrixWorld();
                				positionStart.copy( this.object.position );
                				quaternionStart.copy( this.object.quaternion );
                				scaleStart.copy( this.object.scale );
                				this.object.matrixWorld.decompose( worldPositionStart, worldQuaternionStart, worldScaleStart );
                				pointStart.copy( planeIntersect.point ).sub( worldPositionStart );
                			}
                			this.dragging = true;
                			mouseDownEvent.mode = this.mode;
                			this.dispatchEvent( mouseDownEvent );
                		}
                	};
                	this.pointerMove = function ( pointer ) {
                		var axis = this.axis;
                		var mode = this.mode;
                		var object = this.object;
                		var space = this.space;
                		if ( mode === 'scale' ) {
                			space = 'local';
                		} else if ( axis === 'E' || axis === 'XYZE' || axis === 'XYZ' ) {
                			space = 'world';
                		}
                		if ( object === undefined || axis === null || this.dragging === false || ( pointer.button !== undefined && pointer.button !== 0 ) ) return;
                		ray.setFromCamera( pointer, this.camera );
                		var planeIntersect = ray.intersectObjects( [ _plane ], true )[ 0 ] || false;
                		if ( planeIntersect === false ) return;
                		pointEnd.copy( planeIntersect.point ).sub( worldPositionStart );
                		if ( mode === 'translate' ) {
                			offset.copy( pointEnd ).sub( pointStart );
                			if ( space === 'local' && axis !== 'XYZ' ) {
                				offset.applyQuaternion( worldQuaternionInv );
                			}
                			if ( axis.indexOf( 'X' ) === - 1 ) offset.x = 0;
                			if ( axis.indexOf( 'Y' ) === - 1 ) offset.y = 0;
                			if ( axis.indexOf( 'Z' ) === - 1 ) offset.z = 0;
                			if ( space === 'local' && axis !== 'XYZ' ) {
                				offset.applyQuaternion( quaternionStart ).divide( parentScale );
                			} else {
                				offset.applyQuaternion( parentQuaternionInv ).divide( parentScale );
                			}
                			object.position.copy( offset ).add( positionStart );
                			if ( this.translationSnap ) {
                				if ( space === 'local' ) {
                					object.position.applyQuaternion( _tempQuaternion.copy( quaternionStart ).inverse() );
                					if ( axis.search( 'X' ) !== - 1 ) {
                						object.position.x = Math.round( object.position.x / this.translationSnap ) * this.translationSnap;
                					}
                					if ( axis.search( 'Y' ) !== - 1 ) {
                						object.position.y = Math.round( object.position.y / this.translationSnap ) * this.translationSnap;
                					}
                					if ( axis.search( 'Z' ) !== - 1 ) {
                						object.position.z = Math.round( object.position.z / this.translationSnap ) * this.translationSnap;
                					}
                					object.position.applyQuaternion( quaternionStart );
                				}
                				if ( space === 'world' ) {
                					if ( object.parent ) {
                						object.position.add( _tempVector.setFromMatrixPosition( object.parent.matrixWorld ) );
                					}
                					if ( axis.search( 'X' ) !== - 1 ) {
                						object.position.x = Math.round( object.position.x / this.translationSnap ) * this.translationSnap;
                					}
                					if ( axis.search( 'Y' ) !== - 1 ) {
                						object.position.y = Math.round( object.position.y / this.translationSnap ) * this.translationSnap;
                					}
                					if ( axis.search( 'Z' ) !== - 1 ) {
                						object.position.z = Math.round( object.position.z / this.translationSnap ) * this.translationSnap;
                					}
                					if ( object.parent ) {
                						object.position.sub( _tempVector.setFromMatrixPosition( object.parent.matrixWorld ) );
                					}
                				}
                			}
                		} else if ( mode === 'scale' ) {
                			if ( axis.search( 'XYZ' ) !== - 1 ) {
                				var d = pointEnd.length() / pointStart.length();
                				if ( pointEnd.dot( pointStart ) < 0 ) d *= - 1;
                				_tempVector2.set( d, d, d );
                			} else {
                				_tempVector.copy( pointStart );
                				_tempVector2.copy( pointEnd );
                				_tempVector.applyQuaternion( worldQuaternionInv );
                				_tempVector2.applyQuaternion( worldQuaternionInv );
                				_tempVector2.divide( _tempVector );
                				if ( axis.search( 'X' ) === - 1 ) {
                					_tempVector2.x = 1;
                				}
                				if ( axis.search( 'Y' ) === - 1 ) {
                					_tempVector2.y = 1;
                				}
                				if ( axis.search( 'Z' ) === - 1 ) {
                					_tempVector2.z = 1;
                				}
                			}
                			object.scale.copy( scaleStart ).multiply( _tempVector2 );
                		} else if ( mode === 'rotate' ) {
                			offset.copy( pointEnd ).sub( pointStart );
                			var ROTATION_SPEED = 20 / worldPosition.distanceTo( _tempVector.setFromMatrixPosition( this.camera.matrixWorld ) );
                			if ( axis === 'E' ) {
                				rotationAxis.copy( eye );
                				rotationAngle = pointEnd.angleTo( pointStart );
                				startNorm.copy( pointStart ).normalize();
                				endNorm.copy( pointEnd ).normalize();
                				rotationAngle *= ( endNorm.cross( startNorm ).dot( eye ) < 0 ? 1 : - 1 );
                			} else if ( axis === 'XYZE' ) {
                				rotationAxis.copy( offset ).cross( eye ).normalize();
                				rotationAngle = offset.dot( _tempVector.copy( rotationAxis ).cross( this.eye ) ) * ROTATION_SPEED;
                			} else if ( axis === 'X' || axis === 'Y' || axis === 'Z' ) {
                				rotationAxis.copy( _unit[ axis ] );
                				_tempVector.copy( _unit[ axis ] );
                				if ( space === 'local' ) {
                					_tempVector.applyQuaternion( worldQuaternion );
                				}
                				rotationAngle = offset.dot( _tempVector.cross( eye ).normalize() ) * ROTATION_SPEED;
                			}
                			if ( this.rotationSnap ) rotationAngle = Math.round( rotationAngle / this.rotationSnap ) * this.rotationSnap;
                			this.rotationAngle = rotationAngle;
                			if ( space === 'local' && axis !== 'E' && axis !== 'XYZE' ) {
                				object.quaternion.copy( quaternionStart );
                				object.quaternion.multiply( _tempQuaternion.setFromAxisAngle( rotationAxis, rotationAngle ) ).normalize();
                			} else {
                				rotationAxis.applyQuaternion( parentQuaternionInv );
                				object.quaternion.copy( _tempQuaternion.setFromAxisAngle( rotationAxis, rotationAngle ) );
                				object.quaternion.multiply( quaternionStart ).normalize();
                			}
                		}
                		this.dispatchEvent( changeEvent );
                		this.dispatchEvent( objectChangeEvent );
                	};
                	this.pointerUp = function ( pointer ) {
                		if ( pointer.button !== undefined && pointer.button !== 0 ) return;
                		if ( this.dragging && ( this.axis !== null ) ) {
                			mouseUpEvent.mode = this.mode;
                			this.dispatchEvent( mouseUpEvent );
                		}
                		this.dragging = false;
                		if ( pointer.button === undefined ) this.axis = null;
                	};
                	function getPointer( event ) {
                		if ( document.pointerLockElement ) {
                			return {
                				x: 0,
                				y: 0,
                				button: event.button
                			};
                		} else {
                			var pointer = event.changedTouches ? event.changedTouches[ 0 ] : event;
                			var rect = domElement.getBoundingClientRect();
                			return {
                				x: ( pointer.clientX - rect.left ) / rect.width * 2 - 1,
                				y: - ( pointer.clientY - rect.top ) / rect.height * 2 + 1,
                				button: event.button
                			};
                		}
                	}
                	function onPointerHover( event ) {
                		if ( ! scope.enabled ) return;
                		scope.pointerHover( getPointer( event ) );
                	}
                	function onPointerDown( event ) {
                		if ( ! scope.enabled ) return;
                		document.addEventListener( "mousemove", onPointerMove, false );
                		scope.pointerHover( getPointer( event ) );
                		scope.pointerDown( getPointer( event ) );
                	}
                	function onPointerMove( event ) {
                		if ( ! scope.enabled ) return;
                		scope.pointerMove( getPointer( event ) );
                	}
                	function onPointerUp( event ) {
                		if ( ! scope.enabled ) return;
                		document.removeEventListener( "mousemove", onPointerMove, false );
                		scope.pointerUp( getPointer( event ) );
                	}
                	this.getMode = function () {
                		return scope.mode;
                	};
                	this.setMode = function ( mode ) {
                		scope.mode = mode;
                	};
                	this.setTranslationSnap = function ( translationSnap ) {
                		scope.translationSnap = translationSnap;
                	};
                	this.setRotationSnap = function ( rotationSnap ) {
                		scope.rotationSnap = rotationSnap;
                	};
                	this.setSize = function ( size ) {
                		scope.size = size;
                	};
                	this.setSpace = function ( space ) {
                		scope.space = space;
                	};
                	this.update = function () {
                		console.warn( 'THREE.TransformControls: update function has no more functionality and therefore has been deprecated.' );
                	};
                };
                TransformControls.prototype = Object.assign( Object.create( Object3D.prototype ), {
                	constructor: TransformControls,
                	isTransformControls: true
                } );
                var TransformControlsGizmo = function () {
                	Object3D.call( this );
                	this.type = 'TransformControlsGizmo';
                	var gizmoMaterial = new MeshBasicMaterial( {
                		depthTest: false,
                		depthWrite: false,
                		transparent: true,
                		side: DoubleSide,
                		fog: false
                	} );
                	var gizmoLineMaterial = new LineBasicMaterial( {
                		depthTest: false,
                		depthWrite: false,
                		transparent: true,
                		linewidth: 1,
                		fog: false
                	} );
                	var matInvisible = gizmoMaterial.clone();
                	matInvisible.opacity = 0.15;
                	var matHelper = gizmoMaterial.clone();
                	matHelper.opacity = 0.33;
                	var matRed = gizmoMaterial.clone();
                	matRed.color.set( 0xff0000 );
                	var matGreen = gizmoMaterial.clone();
                	matGreen.color.set( 0x00ff00 );
                	var matBlue = gizmoMaterial.clone();
                	matBlue.color.set( 0x0000ff );
                	var matWhiteTransparent = gizmoMaterial.clone();
                	matWhiteTransparent.opacity = 0.25;
                	var matYellowTransparent = matWhiteTransparent.clone();
                	matYellowTransparent.color.set( 0xffff00 );
                	var matCyanTransparent = matWhiteTransparent.clone();
                	matCyanTransparent.color.set( 0x00ffff );
                	var matMagentaTransparent = matWhiteTransparent.clone();
                	matMagentaTransparent.color.set( 0xff00ff );
                	var matYellow = gizmoMaterial.clone();
                	matYellow.color.set( 0xffff00 );
                	var matLineRed = gizmoLineMaterial.clone();
                	matLineRed.color.set( 0xff0000 );
                	var matLineGreen = gizmoLineMaterial.clone();
                	matLineGreen.color.set( 0x00ff00 );
                	var matLineBlue = gizmoLineMaterial.clone();
                	matLineBlue.color.set( 0x0000ff );
                	var matLineCyan = gizmoLineMaterial.clone();
                	matLineCyan.color.set( 0x00ffff );
                	var matLineMagenta = gizmoLineMaterial.clone();
                	matLineMagenta.color.set( 0xff00ff );
                	var matLineYellow = gizmoLineMaterial.clone();
                	matLineYellow.color.set( 0xffff00 );
                	var matLineGray = gizmoLineMaterial.clone();
                	matLineGray.color.set( 0x787878 );
                	var matLineYellowTransparent = matLineYellow.clone();
                	matLineYellowTransparent.opacity = 0.25;
                	var arrowGeometry = new CylinderBufferGeometry( 0, 0.05, 0.2, 12, 1, false );
                	var scaleHandleGeometry = new BoxBufferGeometry( 0.125, 0.125, 0.125 );
                	var lineGeometry = new BufferGeometry( );
                	lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0,	1, 0, 0 ], 3 ) );
                	var CircleGeometry = function ( radius, arc ) {
                		var geometry = new BufferGeometry( );
                		var vertices = [];
                		for ( var i = 0; i <= 64 * arc; ++ i ) {
                			vertices.push( 0, Math.cos( i / 32 * Math.PI ) * radius, Math.sin( i / 32 * Math.PI ) * radius );
                		}
                		geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
                		return geometry;
                	};
                	var TranslateHelperGeometry = function () {
                		var geometry = new BufferGeometry();
                		geometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 1, 1, 1 ], 3 ) );
                		return geometry;
                	};
                	var gizmoTranslate = {
                		X: [
                			[ new Mesh( arrowGeometry, matRed ), [ 1, 0, 0 ], [ 0, 0, - Math.PI / 2 ], null, 'fwd' ],
                			[ new Mesh( arrowGeometry, matRed ), [ 1, 0, 0 ], [ 0, 0, Math.PI / 2 ], null, 'bwd' ],
                			[ new Line( lineGeometry, matLineRed ) ]
                		],
                		Y: [
                			[ new Mesh( arrowGeometry, matGreen ), [ 0, 1, 0 ], null, null, 'fwd' ],
                			[ new Mesh( arrowGeometry, matGreen ), [ 0, 1, 0 ], [ Math.PI, 0, 0 ], null, 'bwd' ],
                			[ new Line( lineGeometry, matLineGreen ), null, [ 0, 0, Math.PI / 2 ]]
                		],
                		Z: [
                			[ new Mesh( arrowGeometry, matBlue ), [ 0, 0, 1 ], [ Math.PI / 2, 0, 0 ], null, 'fwd' ],
                			[ new Mesh( arrowGeometry, matBlue ), [ 0, 0, 1 ], [ - Math.PI / 2, 0, 0 ], null, 'bwd' ],
                			[ new Line( lineGeometry, matLineBlue ), null, [ 0, - Math.PI / 2, 0 ]]
                		],
                		XYZ: [
                			[ new Mesh( new OctahedronBufferGeometry( 0.1, 0 ), matWhiteTransparent.clone() ), [ 0, 0, 0 ], [ 0, 0, 0 ]]
                		],
                		XY: [
                			[ new Mesh( new PlaneBufferGeometry( 0.295, 0.295 ), matYellowTransparent.clone() ), [ 0.15, 0.15, 0 ]],
                			[ new Line( lineGeometry, matLineYellow ), [ 0.18, 0.3, 0 ], null, [ 0.125, 1, 1 ]],
                			[ new Line( lineGeometry, matLineYellow ), [ 0.3, 0.18, 0 ], [ 0, 0, Math.PI / 2 ], [ 0.125, 1, 1 ]]
                		],
                		YZ: [
                			[ new Mesh( new PlaneBufferGeometry( 0.295, 0.295 ), matCyanTransparent.clone() ), [ 0, 0.15, 0.15 ], [ 0, Math.PI / 2, 0 ]],
                			[ new Line( lineGeometry, matLineCyan ), [ 0, 0.18, 0.3 ], [ 0, 0, Math.PI / 2 ], [ 0.125, 1, 1 ]],
                			[ new Line( lineGeometry, matLineCyan ), [ 0, 0.3, 0.18 ], [ 0, - Math.PI / 2, 0 ], [ 0.125, 1, 1 ]]
                		],
                		XZ: [
                			[ new Mesh( new PlaneBufferGeometry( 0.295, 0.295 ), matMagentaTransparent.clone() ), [ 0.15, 0, 0.15 ], [ - Math.PI / 2, 0, 0 ]],
                			[ new Line( lineGeometry, matLineMagenta ), [ 0.18, 0, 0.3 ], null, [ 0.125, 1, 1 ]],
                			[ new Line( lineGeometry, matLineMagenta ), [ 0.3, 0, 0.18 ], [ 0, - Math.PI / 2, 0 ], [ 0.125, 1, 1 ]]
                		]
                	};
                	var pickerTranslate = {
                		X: [
                			[ new Mesh( new CylinderBufferGeometry( 0.2, 0, 1, 4, 1, false ), matInvisible ), [ 0.6, 0, 0 ], [ 0, 0, - Math.PI / 2 ]]
                		],
                		Y: [
                			[ new Mesh( new CylinderBufferGeometry( 0.2, 0, 1, 4, 1, false ), matInvisible ), [ 0, 0.6, 0 ]]
                		],
                		Z: [
                			[ new Mesh( new CylinderBufferGeometry( 0.2, 0, 1, 4, 1, false ), matInvisible ), [ 0, 0, 0.6 ], [ Math.PI / 2, 0, 0 ]]
                		],
                		XYZ: [
                			[ new Mesh( new OctahedronBufferGeometry( 0.2, 0 ), matInvisible ) ]
                		],
                		XY: [
                			[ new Mesh( new PlaneBufferGeometry( 0.4, 0.4 ), matInvisible ), [ 0.2, 0.2, 0 ]]
                		],
                		YZ: [
                			[ new Mesh( new PlaneBufferGeometry( 0.4, 0.4 ), matInvisible ), [ 0, 0.2, 0.2 ], [ 0, Math.PI / 2, 0 ]]
                		],
                		XZ: [
                			[ new Mesh( new PlaneBufferGeometry( 0.4, 0.4 ), matInvisible ), [ 0.2, 0, 0.2 ], [ - Math.PI / 2, 0, 0 ]]
                		]
                	};
                	var helperTranslate = {
                		START: [
                			[ new Mesh( new OctahedronBufferGeometry( 0.01, 2 ), matHelper ), null, null, null, 'helper' ]
                		],
                		END: [
                			[ new Mesh( new OctahedronBufferGeometry( 0.01, 2 ), matHelper ), null, null, null, 'helper' ]
                		],
                		DELTA: [
                			[ new Line( TranslateHelperGeometry(), matHelper ), null, null, null, 'helper' ]
                		],
                		X: [
                			[ new Line( lineGeometry, matHelper.clone() ), [ - 1e3, 0, 0 ], null, [ 1e6, 1, 1 ], 'helper' ]
                		],
                		Y: [
                			[ new Line( lineGeometry, matHelper.clone() ), [ 0, - 1e3, 0 ], [ 0, 0, Math.PI / 2 ], [ 1e6, 1, 1 ], 'helper' ]
                		],
                		Z: [
                			[ new Line( lineGeometry, matHelper.clone() ), [ 0, 0, - 1e3 ], [ 0, - Math.PI / 2, 0 ], [ 1e6, 1, 1 ], 'helper' ]
                		]
                	};
                	var gizmoRotate = {
                		X: [
                			[ new Line( CircleGeometry( 1, 0.5 ), matLineRed ) ],
                			[ new Mesh( new OctahedronBufferGeometry( 0.04, 0 ), matRed ), [ 0, 0, 0.99 ], null, [ 1, 3, 1 ]],
                		],
                		Y: [
                			[ new Line( CircleGeometry( 1, 0.5 ), matLineGreen ), null, [ 0, 0, - Math.PI / 2 ]],
                			[ new Mesh( new OctahedronBufferGeometry( 0.04, 0 ), matGreen ), [ 0, 0, 0.99 ], null, [ 3, 1, 1 ]],
                		],
                		Z: [
                			[ new Line( CircleGeometry( 1, 0.5 ), matLineBlue ), null, [ 0, Math.PI / 2, 0 ]],
                			[ new Mesh( new OctahedronBufferGeometry( 0.04, 0 ), matBlue ), [ 0.99, 0, 0 ], null, [ 1, 3, 1 ]],
                		],
                		E: [
                			[ new Line( CircleGeometry( 1.25, 1 ), matLineYellowTransparent ), null, [ 0, Math.PI / 2, 0 ]],
                			[ new Mesh( new CylinderBufferGeometry( 0.03, 0, 0.15, 4, 1, false ), matLineYellowTransparent ), [ 1.17, 0, 0 ], [ 0, 0, - Math.PI / 2 ], [ 1, 1, 0.001 ]],
                			[ new Mesh( new CylinderBufferGeometry( 0.03, 0, 0.15, 4, 1, false ), matLineYellowTransparent ), [ - 1.17, 0, 0 ], [ 0, 0, Math.PI / 2 ], [ 1, 1, 0.001 ]],
                			[ new Mesh( new CylinderBufferGeometry( 0.03, 0, 0.15, 4, 1, false ), matLineYellowTransparent ), [ 0, - 1.17, 0 ], [ Math.PI, 0, 0 ], [ 1, 1, 0.001 ]],
                			[ new Mesh( new CylinderBufferGeometry( 0.03, 0, 0.15, 4, 1, false ), matLineYellowTransparent ), [ 0, 1.17, 0 ], [ 0, 0, 0 ], [ 1, 1, 0.001 ]],
                		],
                		XYZE: [
                			[ new Line( CircleGeometry( 1, 1 ), matLineGray ), null, [ 0, Math.PI / 2, 0 ]]
                		]
                	};
                	var helperRotate = {
                		AXIS: [
                			[ new Line( lineGeometry, matHelper.clone() ), [ - 1e3, 0, 0 ], null, [ 1e6, 1, 1 ], 'helper' ]
                		]
                	};
                	var pickerRotate = {
                		X: [
                			[ new Mesh( new TorusBufferGeometry( 1, 0.1, 4, 24 ), matInvisible ), [ 0, 0, 0 ], [ 0, - Math.PI / 2, - Math.PI / 2 ]],
                		],
                		Y: [
                			[ new Mesh( new TorusBufferGeometry( 1, 0.1, 4, 24 ), matInvisible ), [ 0, 0, 0 ], [ Math.PI / 2, 0, 0 ]],
                		],
                		Z: [
                			[ new Mesh( new TorusBufferGeometry( 1, 0.1, 4, 24 ), matInvisible ), [ 0, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],
                		],
                		E: [
                			[ new Mesh( new TorusBufferGeometry( 1.25, 0.1, 2, 24 ), matInvisible ) ]
                		],
                		XYZE: [
                			[ new Mesh( new SphereBufferGeometry( 0.7, 10, 8 ), matInvisible ) ]
                		]
                	};
                	var gizmoScale = {
                		X: [
                			[ new Mesh( scaleHandleGeometry, matRed ), [ 0.8, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],
                			[ new Line( lineGeometry, matLineRed ), null, null, [ 0.8, 1, 1 ]]
                		],
                		Y: [
                			[ new Mesh( scaleHandleGeometry, matGreen ), [ 0, 0.8, 0 ]],
                			[ new Line( lineGeometry, matLineGreen ), null, [ 0, 0, Math.PI / 2 ], [ 0.8, 1, 1 ]]
                		],
                		Z: [
                			[ new Mesh( scaleHandleGeometry, matBlue ), [ 0, 0, 0.8 ], [ Math.PI / 2, 0, 0 ]],
                			[ new Line( lineGeometry, matLineBlue ), null, [ 0, - Math.PI / 2, 0 ], [ 0.8, 1, 1 ]]
                		],
                		XY: [
                			[ new Mesh( scaleHandleGeometry, matYellowTransparent ), [ 0.85, 0.85, 0 ], null, [ 2, 2, 0.2 ]],
                			[ new Line( lineGeometry, matLineYellow ), [ 0.855, 0.98, 0 ], null, [ 0.125, 1, 1 ]],
                			[ new Line( lineGeometry, matLineYellow ), [ 0.98, 0.855, 0 ], [ 0, 0, Math.PI / 2 ], [ 0.125, 1, 1 ]]
                		],
                		YZ: [
                			[ new Mesh( scaleHandleGeometry, matCyanTransparent ), [ 0, 0.85, 0.85 ], null, [ 0.2, 2, 2 ]],
                			[ new Line( lineGeometry, matLineCyan ), [ 0, 0.855, 0.98 ], [ 0, 0, Math.PI / 2 ], [ 0.125, 1, 1 ]],
                			[ new Line( lineGeometry, matLineCyan ), [ 0, 0.98, 0.855 ], [ 0, - Math.PI / 2, 0 ], [ 0.125, 1, 1 ]]
                		],
                		XZ: [
                			[ new Mesh( scaleHandleGeometry, matMagentaTransparent ), [ 0.85, 0, 0.85 ], null, [ 2, 0.2, 2 ]],
                			[ new Line( lineGeometry, matLineMagenta ), [ 0.855, 0, 0.98 ], null, [ 0.125, 1, 1 ]],
                			[ new Line( lineGeometry, matLineMagenta ), [ 0.98, 0, 0.855 ], [ 0, - Math.PI / 2, 0 ], [ 0.125, 1, 1 ]]
                		],
                		XYZX: [
                			[ new Mesh( new BoxBufferGeometry( 0.125, 0.125, 0.125 ), matWhiteTransparent.clone() ), [ 1.1, 0, 0 ]],
                		],
                		XYZY: [
                			[ new Mesh( new BoxBufferGeometry( 0.125, 0.125, 0.125 ), matWhiteTransparent.clone() ), [ 0, 1.1, 0 ]],
                		],
                		XYZZ: [
                			[ new Mesh( new BoxBufferGeometry( 0.125, 0.125, 0.125 ), matWhiteTransparent.clone() ), [ 0, 0, 1.1 ]],
                		]
                	};
                	var pickerScale = {
                		X: [
                			[ new Mesh( new CylinderBufferGeometry( 0.2, 0, 0.8, 4, 1, false ), matInvisible ), [ 0.5, 0, 0 ], [ 0, 0, - Math.PI / 2 ]]
                		],
                		Y: [
                			[ new Mesh( new CylinderBufferGeometry( 0.2, 0, 0.8, 4, 1, false ), matInvisible ), [ 0, 0.5, 0 ]]
                		],
                		Z: [
                			[ new Mesh( new CylinderBufferGeometry( 0.2, 0, 0.8, 4, 1, false ), matInvisible ), [ 0, 0, 0.5 ], [ Math.PI / 2, 0, 0 ]]
                		],
                		XY: [
                			[ new Mesh( scaleHandleGeometry, matInvisible ), [ 0.85, 0.85, 0 ], null, [ 3, 3, 0.2 ]],
                		],
                		YZ: [
                			[ new Mesh( scaleHandleGeometry, matInvisible ), [ 0, 0.85, 0.85 ], null, [ 0.2, 3, 3 ]],
                		],
                		XZ: [
                			[ new Mesh( scaleHandleGeometry, matInvisible ), [ 0.85, 0, 0.85 ], null, [ 3, 0.2, 3 ]],
                		],
                		XYZX: [
                			[ new Mesh( new BoxBufferGeometry( 0.2, 0.2, 0.2 ), matInvisible ), [ 1.1, 0, 0 ]],
                		],
                		XYZY: [
                			[ new Mesh( new BoxBufferGeometry( 0.2, 0.2, 0.2 ), matInvisible ), [ 0, 1.1, 0 ]],
                		],
                		XYZZ: [
                			[ new Mesh( new BoxBufferGeometry( 0.2, 0.2, 0.2 ), matInvisible ), [ 0, 0, 1.1 ]],
                		]
                	};
                	var helperScale = {
                		X: [
                			[ new Line( lineGeometry, matHelper.clone() ), [ - 1e3, 0, 0 ], null, [ 1e6, 1, 1 ], 'helper' ]
                		],
                		Y: [
                			[ new Line( lineGeometry, matHelper.clone() ), [ 0, - 1e3, 0 ], [ 0, 0, Math.PI / 2 ], [ 1e6, 1, 1 ], 'helper' ]
                		],
                		Z: [
                			[ new Line( lineGeometry, matHelper.clone() ), [ 0, 0, - 1e3 ], [ 0, - Math.PI / 2, 0 ], [ 1e6, 1, 1 ], 'helper' ]
                		]
                	};
                	var setupGizmo = function ( gizmoMap ) {
                		var gizmo = new Object3D();
                		for ( var name in gizmoMap ) {
                			for ( var i = gizmoMap[ name ].length; i --; ) {
                				var object = gizmoMap[ name ][ i ][ 0 ].clone();
                				var position = gizmoMap[ name ][ i ][ 1 ];
                				var rotation = gizmoMap[ name ][ i ][ 2 ];
                				var scale = gizmoMap[ name ][ i ][ 3 ];
                				var tag = gizmoMap[ name ][ i ][ 4 ];
                				object.name = name;
                				object.tag = tag;
                				if ( position ) {
                					object.position.set( position[ 0 ], position[ 1 ], position[ 2 ] );
                				}
                				if ( rotation ) {
                					object.rotation.set( rotation[ 0 ], rotation[ 1 ], rotation[ 2 ] );
                				}
                				if ( scale ) {
                					object.scale.set( scale[ 0 ], scale[ 1 ], scale[ 2 ] );
                				}
                				object.updateMatrix();
                				var tempGeometry = object.geometry.clone();
                				tempGeometry.applyMatrix( object.matrix );
                				object.geometry = tempGeometry;
                				object.renderOrder = Infinity;
                				object.position.set( 0, 0, 0 );
                				object.rotation.set( 0, 0, 0 );
                				object.scale.set( 1, 1, 1 );
                				gizmo.add( object );
                			}
                		}
                		return gizmo;
                	};
                	var tempVector = new Vector3( 0, 0, 0 );
                	var tempEuler = new Euler();
                	var alignVector = new Vector3( 0, 1, 0 );
                	var zeroVector = new Vector3( 0, 0, 0 );
                	var lookAtMatrix = new Matrix4();
                	var tempQuaternion = new Quaternion();
                	var tempQuaternion2 = new Quaternion();
                	var identityQuaternion = new Quaternion();
                	var unitX = new Vector3( 1, 0, 0 );
                	var unitY = new Vector3( 0, 1, 0 );
                	var unitZ = new Vector3( 0, 0, 1 );
                	this.gizmo = {};
                	this.picker = {};
                	this.helper = {};
                	this.add( this.gizmo[ "translate" ] = setupGizmo( gizmoTranslate ) );
                	this.add( this.gizmo[ "rotate" ] = setupGizmo( gizmoRotate ) );
                	this.add( this.gizmo[ "scale" ] = setupGizmo( gizmoScale ) );
                	this.add( this.picker[ "translate" ] = setupGizmo( pickerTranslate ) );
                	this.add( this.picker[ "rotate" ] = setupGizmo( pickerRotate ) );
                	this.add( this.picker[ "scale" ] = setupGizmo( pickerScale ) );
                	this.add( this.helper[ "translate" ] = setupGizmo( helperTranslate ) );
                	this.add( this.helper[ "rotate" ] = setupGizmo( helperRotate ) );
                	this.add( this.helper[ "scale" ] = setupGizmo( helperScale ) );
                	this.picker[ "translate" ].visible = false;
                	this.picker[ "rotate" ].visible = false;
                	this.picker[ "scale" ].visible = false;
                	this.updateMatrixWorld = function () {
                		var space = this.space;
                		if ( this.mode === 'scale' ) space = 'local';
                		var quaternion = space === "local" ? this.worldQuaternion : identityQuaternion;
                		this.gizmo[ "translate" ].visible = this.mode === "translate";
                		this.gizmo[ "rotate" ].visible = this.mode === "rotate";
                		this.gizmo[ "scale" ].visible = this.mode === "scale";
                		this.helper[ "translate" ].visible = this.mode === "translate";
                		this.helper[ "rotate" ].visible = this.mode === "rotate";
                		this.helper[ "scale" ].visible = this.mode === "scale";
                		var handles = [];
                		handles = handles.concat( this.picker[ this.mode ].children );
                		handles = handles.concat( this.gizmo[ this.mode ].children );
                		handles = handles.concat( this.helper[ this.mode ].children );
                		for ( var i = 0; i < handles.length; i ++ ) {
                			var handle = handles[ i ];
                			handle.visible = true;
                			handle.rotation.set( 0, 0, 0 );
                			handle.position.copy( this.worldPosition );
                			var eyeDistance = this.worldPosition.distanceTo( this.cameraPosition );
                			handle.scale.set( 1, 1, 1 ).multiplyScalar( eyeDistance * this.size / 7 );
                			if ( handle.tag === 'helper' ) {
                				handle.visible = false;
                				if ( handle.name === 'AXIS' ) {
                					handle.position.copy( this.worldPositionStart );
                					handle.visible = !! this.axis;
                					if ( this.axis === 'X' ) {
                						tempQuaternion.setFromEuler( tempEuler.set( 0, 0, 0 ) );
                						handle.quaternion.copy( quaternion ).multiply( tempQuaternion );
                						if ( Math.abs( alignVector.copy( unitX ).applyQuaternion( quaternion ).dot( this.eye ) ) > 0.9 ) {
                							handle.visible = false;
                						}
                					}
                					if ( this.axis === 'Y' ) {
                						tempQuaternion.setFromEuler( tempEuler.set( 0, 0, Math.PI / 2 ) );
                						handle.quaternion.copy( quaternion ).multiply( tempQuaternion );
                						if ( Math.abs( alignVector.copy( unitY ).applyQuaternion( quaternion ).dot( this.eye ) ) > 0.9 ) {
                							handle.visible = false;
                						}
                					}
                					if ( this.axis === 'Z' ) {
                						tempQuaternion.setFromEuler( tempEuler.set( 0, Math.PI / 2, 0 ) );
                						handle.quaternion.copy( quaternion ).multiply( tempQuaternion );
                						if ( Math.abs( alignVector.copy( unitZ ).applyQuaternion( quaternion ).dot( this.eye ) ) > 0.9 ) {
                							handle.visible = false;
                						}
                					}
                					if ( this.axis === 'XYZE' ) {
                						tempQuaternion.setFromEuler( tempEuler.set( 0, Math.PI / 2, 0 ) );
                						alignVector.copy( this.rotationAxis );
                						handle.quaternion.setFromRotationMatrix( lookAtMatrix.lookAt( zeroVector, alignVector, unitY ) );
                						handle.quaternion.multiply( tempQuaternion );
                						handle.visible = this.dragging;
                					}
                					if ( this.axis === 'E' ) {
                						handle.visible = false;
                					}
                				} else if ( handle.name === 'START' ) {
                					handle.position.copy( this.worldPositionStart );
                					handle.visible = this.dragging;
                				} else if ( handle.name === 'END' ) {
                					handle.position.copy( this.worldPosition );
                					handle.visible = this.dragging;
                				} else if ( handle.name === 'DELTA' ) {
                					handle.position.copy( this.worldPositionStart );
                					handle.quaternion.copy( this.worldQuaternionStart );
                					tempVector.set( 1e-10, 1e-10, 1e-10 ).add( this.worldPositionStart ).sub( this.worldPosition ).multiplyScalar( - 1 );
                					tempVector.applyQuaternion( this.worldQuaternionStart.clone().inverse() );
                					handle.scale.copy( tempVector );
                					handle.visible = this.dragging;
                				} else {
                					handle.quaternion.copy( quaternion );
                					if ( this.dragging ) {
                						handle.position.copy( this.worldPositionStart );
                					} else {
                						handle.position.copy( this.worldPosition );
                					}
                					if ( this.axis ) {
                						handle.visible = this.axis.search( handle.name ) !== - 1;
                					}
                				}
                				continue;
                			}
                			handle.quaternion.copy( quaternion );
                			if ( this.mode === 'translate' || this.mode === 'scale' ) {
                				var AXIS_HIDE_TRESHOLD = 0.99;
                				var PLANE_HIDE_TRESHOLD = 0.2;
                				var AXIS_FLIP_TRESHOLD = 0.0;
                				if ( handle.name === 'X' || handle.name === 'XYZX' ) {
                					if ( Math.abs( alignVector.copy( unitX ).applyQuaternion( quaternion ).dot( this.eye ) ) > AXIS_HIDE_TRESHOLD ) {
                						handle.scale.set( 1e-10, 1e-10, 1e-10 );
                						handle.visible = false;
                					}
                				}
                				if ( handle.name === 'Y' || handle.name === 'XYZY' ) {
                					if ( Math.abs( alignVector.copy( unitY ).applyQuaternion( quaternion ).dot( this.eye ) ) > AXIS_HIDE_TRESHOLD ) {
                						handle.scale.set( 1e-10, 1e-10, 1e-10 );
                						handle.visible = false;
                					}
                				}
                				if ( handle.name === 'Z' || handle.name === 'XYZZ' ) {
                					if ( Math.abs( alignVector.copy( unitZ ).applyQuaternion( quaternion ).dot( this.eye ) ) > AXIS_HIDE_TRESHOLD ) {
                						handle.scale.set( 1e-10, 1e-10, 1e-10 );
                						handle.visible = false;
                					}
                				}
                				if ( handle.name === 'XY' ) {
                					if ( Math.abs( alignVector.copy( unitZ ).applyQuaternion( quaternion ).dot( this.eye ) ) < PLANE_HIDE_TRESHOLD ) {
                						handle.scale.set( 1e-10, 1e-10, 1e-10 );
                						handle.visible = false;
                					}
                				}
                				if ( handle.name === 'YZ' ) {
                					if ( Math.abs( alignVector.copy( unitX ).applyQuaternion( quaternion ).dot( this.eye ) ) < PLANE_HIDE_TRESHOLD ) {
                						handle.scale.set( 1e-10, 1e-10, 1e-10 );
                						handle.visible = false;
                					}
                				}
                				if ( handle.name === 'XZ' ) {
                					if ( Math.abs( alignVector.copy( unitY ).applyQuaternion( quaternion ).dot( this.eye ) ) < PLANE_HIDE_TRESHOLD ) {
                						handle.scale.set( 1e-10, 1e-10, 1e-10 );
                						handle.visible = false;
                					}
                				}
                				if ( handle.name.search( 'X' ) !== - 1 ) {
                					if ( alignVector.copy( unitX ).applyQuaternion( quaternion ).dot( this.eye ) < AXIS_FLIP_TRESHOLD ) {
                						if ( handle.tag === 'fwd' ) {
                							handle.visible = false;
                						} else {
                							handle.scale.x *= - 1;
                						}
                					} else if ( handle.tag === 'bwd' ) {
                						handle.visible = false;
                					}
                				}
                				if ( handle.name.search( 'Y' ) !== - 1 ) {
                					if ( alignVector.copy( unitY ).applyQuaternion( quaternion ).dot( this.eye ) < AXIS_FLIP_TRESHOLD ) {
                						if ( handle.tag === 'fwd' ) {
                							handle.visible = false;
                						} else {
                							handle.scale.y *= - 1;
                						}
                					} else if ( handle.tag === 'bwd' ) {
                						handle.visible = false;
                					}
                				}
                				if ( handle.name.search( 'Z' ) !== - 1 ) {
                					if ( alignVector.copy( unitZ ).applyQuaternion( quaternion ).dot( this.eye ) < AXIS_FLIP_TRESHOLD ) {
                						if ( handle.tag === 'fwd' ) {
                							handle.visible = false;
                						} else {
                							handle.scale.z *= - 1;
                						}
                					} else if ( handle.tag === 'bwd' ) {
                						handle.visible = false;
                					}
                				}
                			} else if ( this.mode === 'rotate' ) {
                				tempQuaternion2.copy( quaternion );
                				alignVector.copy( this.eye ).applyQuaternion( tempQuaternion.copy( quaternion ).inverse() );
                				if ( handle.name.search( "E" ) !== - 1 ) {
                					handle.quaternion.setFromRotationMatrix( lookAtMatrix.lookAt( this.eye, zeroVector, unitY ) );
                				}
                				if ( handle.name === 'X' ) {
                					tempQuaternion.setFromAxisAngle( unitX, Math.atan2( - alignVector.y, alignVector.z ) );
                					tempQuaternion.multiplyQuaternions( tempQuaternion2, tempQuaternion );
                					handle.quaternion.copy( tempQuaternion );
                				}
                				if ( handle.name === 'Y' ) {
                					tempQuaternion.setFromAxisAngle( unitY, Math.atan2( alignVector.x, alignVector.z ) );
                					tempQuaternion.multiplyQuaternions( tempQuaternion2, tempQuaternion );
                					handle.quaternion.copy( tempQuaternion );
                				}
                				if ( handle.name === 'Z' ) {
                					tempQuaternion.setFromAxisAngle( unitZ, Math.atan2( alignVector.y, alignVector.x ) );
                					tempQuaternion.multiplyQuaternions( tempQuaternion2, tempQuaternion );
                					handle.quaternion.copy( tempQuaternion );
                				}
                			}
                			handle.visible = handle.visible && ( handle.name.indexOf( "X" ) === - 1 || this.showX );
                			handle.visible = handle.visible && ( handle.name.indexOf( "Y" ) === - 1 || this.showY );
                			handle.visible = handle.visible && ( handle.name.indexOf( "Z" ) === - 1 || this.showZ );
                			handle.visible = handle.visible && ( handle.name.indexOf( "E" ) === - 1 || ( this.showX && this.showY && this.showZ ) );
                			handle.material._opacity = handle.material._opacity || handle.material.opacity;
                			handle.material._color = handle.material._color || handle.material.color.clone();
                			handle.material.color.copy( handle.material._color );
                			handle.material.opacity = handle.material._opacity;
                			if ( ! this.enabled ) {
                				handle.material.opacity *= 0.5;
                				handle.material.color.lerp( new Color( 1, 1, 1 ), 0.5 );
                			} else if ( this.axis ) {
                				if ( handle.name === this.axis ) {
                					handle.material.opacity = 1.0;
                					handle.material.color.lerp( new Color( 1, 1, 1 ), 0.5 );
                				} else if ( this.axis.split( '' ).some( function ( a ) {
                					return handle.name === a;
                				} ) ) {
                					handle.material.opacity = 1.0;
                					handle.material.color.lerp( new Color( 1, 1, 1 ), 0.5 );
                				} else {
                					handle.material.opacity *= 0.25;
                					handle.material.color.lerp( new Color( 1, 1, 1 ), 0.5 );
                				}
                			}
                		}
                		Object3D.prototype.updateMatrixWorld.call( this );
                	};
                };
                TransformControlsGizmo.prototype = Object.assign( Object.create( Object3D.prototype ), {
                	constructor: TransformControlsGizmo,
                	isTransformControlsGizmo: true
                } );
                var TransformControlsPlane = function () {
                	Mesh.call( this,
                		new PlaneBufferGeometry( 100000, 100000, 2, 2 ),
                		new MeshBasicMaterial( { visible: false, wireframe: true, side: DoubleSide, transparent: true, opacity: 0.1 } )
                	);
                	this.type = 'TransformControlsPlane';
                	var unitX = new Vector3( 1, 0, 0 );
                	var unitY = new Vector3( 0, 1, 0 );
                	var unitZ = new Vector3( 0, 0, 1 );
                	var tempVector = new Vector3();
                	var dirVector = new Vector3();
                	var alignVector = new Vector3();
                	var tempMatrix = new Matrix4();
                	var identityQuaternion = new Quaternion();
                	this.updateMatrixWorld = function () {
                		var space = this.space;
                		this.position.copy( this.worldPosition );
                		if ( this.mode === 'scale' ) space = 'local';
                		unitX.set( 1, 0, 0 ).applyQuaternion( space === "local" ? this.worldQuaternion : identityQuaternion );
                		unitY.set( 0, 1, 0 ).applyQuaternion( space === "local" ? this.worldQuaternion : identityQuaternion );
                		unitZ.set( 0, 0, 1 ).applyQuaternion( space === "local" ? this.worldQuaternion : identityQuaternion );
                		alignVector.copy( unitY );
                		switch ( this.mode ) {
                			case 'translate':
                			case 'scale':
                				switch ( this.axis ) {
                					case 'X':
                						alignVector.copy( this.eye ).cross( unitX );
                						dirVector.copy( unitX ).cross( alignVector );
                						break;
                					case 'Y':
                						alignVector.copy( this.eye ).cross( unitY );
                						dirVector.copy( unitY ).cross( alignVector );
                						break;
                					case 'Z':
                						alignVector.copy( this.eye ).cross( unitZ );
                						dirVector.copy( unitZ ).cross( alignVector );
                						break;
                					case 'XY':
                						dirVector.copy( unitZ );
                						break;
                					case 'YZ':
                						dirVector.copy( unitX );
                						break;
                					case 'XZ':
                						alignVector.copy( unitZ );
                						dirVector.copy( unitY );
                						break;
                					case 'XYZ':
                					case 'E':
                						dirVector.set( 0, 0, 0 );
                						break;
                				}
                				break;
                			case 'rotate':
                			default:
                				dirVector.set( 0, 0, 0 );
                		}
                		if ( dirVector.length() === 0 ) {
                			this.quaternion.copy( this.cameraQuaternion );
                		} else {
                			tempMatrix.lookAt( tempVector.set( 0, 0, 0 ), dirVector, alignVector );
                			this.quaternion.setFromRotationMatrix( tempMatrix );
                		}
                		Object3D.prototype.updateMatrixWorld.call( this );
                	};
                };
                TransformControlsPlane.prototype = Object.assign( Object.create( Mesh.prototype ), {
                	constructor: TransformControlsPlane,
                	isTransformControlsPlane: true
                } );

                var GLTFLoader = ( function () {
                	function GLTFLoader( manager ) {
                		Loader.call( this, manager );
                		this.dracoLoader = null;
                		this.ddsLoader = null;
                	}
                	GLTFLoader.prototype = Object.assign( Object.create( Loader.prototype ), {
                		constructor: GLTFLoader,
                		load: function ( url, onLoad, onProgress, onError ) {
                			var scope = this;
                			var resourcePath;
                			if ( this.resourcePath !== '' ) {
                				resourcePath = this.resourcePath;
                			} else if ( this.path !== '' ) {
                				resourcePath = this.path;
                			} else {
                				resourcePath = LoaderUtils.extractUrlBase( url );
                			}
                			scope.manager.itemStart( url );
                			var _onError = function ( e ) {
                				if ( onError ) {
                					onError( e );
                				} else {
                					console.error( e );
                				}
                				scope.manager.itemError( url );
                				scope.manager.itemEnd( url );
                			};
                			var loader = new FileLoader( scope.manager );
                			loader.setPath( this.path );
                			loader.setResponseType( 'arraybuffer' );
                			if ( scope.crossOrigin === 'use-credentials' ) {
                				loader.setWithCredentials( true );
                			}
                			loader.load( url, function ( data ) {
                				try {
                					scope.parse( data, resourcePath, function ( gltf ) {
                						onLoad( gltf );
                						scope.manager.itemEnd( url );
                					}, _onError );
                				} catch ( e ) {
                					_onError( e );
                				}
                			}, onProgress, _onError );
                		},
                		setDRACOLoader: function ( dracoLoader ) {
                			this.dracoLoader = dracoLoader;
                			return this;
                		},
                		setDDSLoader: function ( ddsLoader ) {
                			this.ddsLoader = ddsLoader;
                			return this;
                		},
                		parse: function ( data, path, onLoad, onError ) {
                			var content;
                			var extensions = {};
                			if ( typeof data === 'string' ) {
                				content = data;
                			} else {
                				var magic = LoaderUtils.decodeText( new Uint8Array( data, 0, 4 ) );
                				if ( magic === BINARY_EXTENSION_HEADER_MAGIC ) {
                					try {
                						extensions[ EXTENSIONS.KHR_BINARY_GLTF ] = new GLTFBinaryExtension( data );
                					} catch ( error ) {
                						if ( onError ) onError( error );
                						return;
                					}
                					content = extensions[ EXTENSIONS.KHR_BINARY_GLTF ].content;
                				} else {
                					content = LoaderUtils.decodeText( new Uint8Array( data ) );
                				}
                			}
                			var json = JSON.parse( content );
                			if ( json.asset === undefined || json.asset.version[ 0 ] < 2 ) {
                				if ( onError ) onError( new Error( 'THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported.' ) );
                				return;
                			}
                			if ( json.extensionsUsed ) {
                				for ( var i = 0; i < json.extensionsUsed.length; ++ i ) {
                					var extensionName = json.extensionsUsed[ i ];
                					var extensionsRequired = json.extensionsRequired || [];
                					switch ( extensionName ) {
                						case EXTENSIONS.KHR_LIGHTS_PUNCTUAL:
                							extensions[ extensionName ] = new GLTFLightsExtension( json );
                							break;
                						case EXTENSIONS.KHR_MATERIALS_UNLIT:
                							extensions[ extensionName ] = new GLTFMaterialsUnlitExtension();
                							break;
                						case EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:
                							extensions[ extensionName ] = new GLTFMaterialsPbrSpecularGlossinessExtension();
                							break;
                						case EXTENSIONS.KHR_DRACO_MESH_COMPRESSION:
                							extensions[ extensionName ] = new GLTFDracoMeshCompressionExtension( json, this.dracoLoader );
                							break;
                						case EXTENSIONS.MSFT_TEXTURE_DDS:
                							extensions[ extensionName ] = new GLTFTextureDDSExtension( this.ddsLoader );
                							break;
                						case EXTENSIONS.KHR_TEXTURE_TRANSFORM:
                							extensions[ extensionName ] = new GLTFTextureTransformExtension();
                							break;
                						case EXTENSIONS.KHR_MESH_QUANTIZATION:
                							extensions[ extensionName ] = new GLTFMeshQuantizationExtension();
                							break;
                						default:
                							if ( extensionsRequired.indexOf( extensionName ) >= 0 ) {
                								console.warn( 'THREE.GLTFLoader: Unknown extension "' + extensionName + '".' );
                							}
                					}
                				}
                			}
                			var parser = new GLTFParser( json, extensions, {
                				path: path || this.resourcePath || '',
                				crossOrigin: this.crossOrigin,
                				manager: this.manager
                			} );
                			parser.parse( onLoad, onError );
                		}
                	} );
                	function GLTFRegistry() {
                		var objects = {};
                		return	{
                			get: function ( key ) {
                				return objects[ key ];
                			},
                			add: function ( key, object ) {
                				objects[ key ] = object;
                			},
                			remove: function ( key ) {
                				delete objects[ key ];
                			},
                			removeAll: function () {
                				objects = {};
                			}
                		};
                	}
                	var EXTENSIONS = {
                		KHR_BINARY_GLTF: 'KHR_binary_glTF',
                		KHR_DRACO_MESH_COMPRESSION: 'KHR_draco_mesh_compression',
                		KHR_LIGHTS_PUNCTUAL: 'KHR_lights_punctual',
                		KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS: 'KHR_materials_pbrSpecularGlossiness',
                		KHR_MATERIALS_UNLIT: 'KHR_materials_unlit',
                		KHR_TEXTURE_TRANSFORM: 'KHR_texture_transform',
                		KHR_MESH_QUANTIZATION: 'KHR_mesh_quantization',
                		MSFT_TEXTURE_DDS: 'MSFT_texture_dds'
                	};
                	function GLTFTextureDDSExtension( ddsLoader ) {
                		if ( ! ddsLoader ) {
                			throw new Error( 'THREE.GLTFLoader: Attempting to load .dds texture without importing DDSLoader' );
                		}
                		this.name = EXTENSIONS.MSFT_TEXTURE_DDS;
                		this.ddsLoader = ddsLoader;
                	}
                	function GLTFLightsExtension( json ) {
                		this.name = EXTENSIONS.KHR_LIGHTS_PUNCTUAL;
                		var extension = ( json.extensions && json.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ] ) || {};
                		this.lightDefs = extension.lights || [];
                	}
                	GLTFLightsExtension.prototype.loadLight = function ( lightIndex ) {
                		var lightDef = this.lightDefs[ lightIndex ];
                		var lightNode;
                		var color = new Color( 0xffffff );
                		if ( lightDef.color !== undefined ) color.fromArray( lightDef.color );
                		var range = lightDef.range !== undefined ? lightDef.range : 0;
                		switch ( lightDef.type ) {
                			case 'directional':
                				lightNode = new DirectionalLight( color );
                				lightNode.target.position.set( 0, 0, - 1 );
                				lightNode.add( lightNode.target );
                				break;
                			case 'point':
                				lightNode = new PointLight( color );
                				lightNode.distance = range;
                				break;
                			case 'spot':
                				lightNode = new SpotLight( color );
                				lightNode.distance = range;
                				lightDef.spot = lightDef.spot || {};
                				lightDef.spot.innerConeAngle = lightDef.spot.innerConeAngle !== undefined ? lightDef.spot.innerConeAngle : 0;
                				lightDef.spot.outerConeAngle = lightDef.spot.outerConeAngle !== undefined ? lightDef.spot.outerConeAngle : Math.PI / 4.0;
                				lightNode.angle = lightDef.spot.outerConeAngle;
                				lightNode.penumbra = 1.0 - lightDef.spot.innerConeAngle / lightDef.spot.outerConeAngle;
                				lightNode.target.position.set( 0, 0, - 1 );
                				lightNode.add( lightNode.target );
                				break;
                			default:
                				throw new Error( 'THREE.GLTFLoader: Unexpected light type, "' + lightDef.type + '".' );
                		}
                		lightNode.position.set( 0, 0, 0 );
                		lightNode.decay = 2;
                		if ( lightDef.intensity !== undefined ) lightNode.intensity = lightDef.intensity;
                		lightNode.name = lightDef.name || ( 'light_' + lightIndex );
                		return Promise.resolve( lightNode );
                	};
                	function GLTFMaterialsUnlitExtension() {
                		this.name = EXTENSIONS.KHR_MATERIALS_UNLIT;
                	}
                	GLTFMaterialsUnlitExtension.prototype.getMaterialType = function () {
                		return MeshBasicMaterial;
                	};
                	GLTFMaterialsUnlitExtension.prototype.extendParams = function ( materialParams, materialDef, parser ) {
                		var pending = [];
                		materialParams.color = new Color( 1.0, 1.0, 1.0 );
                		materialParams.opacity = 1.0;
                		var metallicRoughness = materialDef.pbrMetallicRoughness;
                		if ( metallicRoughness ) {
                			if ( Array.isArray( metallicRoughness.baseColorFactor ) ) {
                				var array = metallicRoughness.baseColorFactor;
                				materialParams.color.fromArray( array );
                				materialParams.opacity = array[ 3 ];
                			}
                			if ( metallicRoughness.baseColorTexture !== undefined ) {
                				pending.push( parser.assignTexture( materialParams, 'map', metallicRoughness.baseColorTexture ) );
                			}
                		}
                		return Promise.all( pending );
                	};
                	var BINARY_EXTENSION_HEADER_MAGIC = 'glTF';
                	var BINARY_EXTENSION_HEADER_LENGTH = 12;
                	var BINARY_EXTENSION_CHUNK_TYPES = { JSON: 0x4E4F534A, BIN: 0x004E4942 };
                	function GLTFBinaryExtension( data ) {
                		this.name = EXTENSIONS.KHR_BINARY_GLTF;
                		this.content = null;
                		this.body = null;
                		var headerView = new DataView( data, 0, BINARY_EXTENSION_HEADER_LENGTH );
                		this.header = {
                			magic: LoaderUtils.decodeText( new Uint8Array( data.slice( 0, 4 ) ) ),
                			version: headerView.getUint32( 4, true ),
                			length: headerView.getUint32( 8, true )
                		};
                		if ( this.header.magic !== BINARY_EXTENSION_HEADER_MAGIC ) {
                			throw new Error( 'THREE.GLTFLoader: Unsupported glTF-Binary header.' );
                		} else if ( this.header.version < 2.0 ) {
                			throw new Error( 'THREE.GLTFLoader: Legacy binary file detected.' );
                		}
                		var chunkView = new DataView( data, BINARY_EXTENSION_HEADER_LENGTH );
                		var chunkIndex = 0;
                		while ( chunkIndex < chunkView.byteLength ) {
                			var chunkLength = chunkView.getUint32( chunkIndex, true );
                			chunkIndex += 4;
                			var chunkType = chunkView.getUint32( chunkIndex, true );
                			chunkIndex += 4;
                			if ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.JSON ) {
                				var contentArray = new Uint8Array( data, BINARY_EXTENSION_HEADER_LENGTH + chunkIndex, chunkLength );
                				this.content = LoaderUtils.decodeText( contentArray );
                			} else if ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.BIN ) {
                				var byteOffset = BINARY_EXTENSION_HEADER_LENGTH + chunkIndex;
                				this.body = data.slice( byteOffset, byteOffset + chunkLength );
                			}
                			chunkIndex += chunkLength;
                		}
                		if ( this.content === null ) {
                			throw new Error( 'THREE.GLTFLoader: JSON content not found.' );
                		}
                	}
                	function GLTFDracoMeshCompressionExtension( json, dracoLoader ) {
                		if ( ! dracoLoader ) {
                			throw new Error( 'THREE.GLTFLoader: No DRACOLoader instance provided.' );
                		}
                		this.name = EXTENSIONS.KHR_DRACO_MESH_COMPRESSION;
                		this.json = json;
                		this.dracoLoader = dracoLoader;
                	}
                	GLTFDracoMeshCompressionExtension.prototype.decodePrimitive = function ( primitive, parser ) {
                		var json = this.json;
                		var dracoLoader = this.dracoLoader;
                		var bufferViewIndex = primitive.extensions[ this.name ].bufferView;
                		var gltfAttributeMap = primitive.extensions[ this.name ].attributes;
                		var threeAttributeMap = {};
                		var attributeNormalizedMap = {};
                		var attributeTypeMap = {};
                		for ( var attributeName in gltfAttributeMap ) {
                			var threeAttributeName = ATTRIBUTES[ attributeName ] || attributeName.toLowerCase();
                			threeAttributeMap[ threeAttributeName ] = gltfAttributeMap[ attributeName ];
                		}
                		for ( attributeName in primitive.attributes ) {
                			var threeAttributeName = ATTRIBUTES[ attributeName ] || attributeName.toLowerCase();
                			if ( gltfAttributeMap[ attributeName ] !== undefined ) {
                				var accessorDef = json.accessors[ primitive.attributes[ attributeName ] ];
                				var componentType = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];
                				attributeTypeMap[ threeAttributeName ] = componentType;
                				attributeNormalizedMap[ threeAttributeName ] = accessorDef.normalized === true;
                			}
                		}
                		return parser.getDependency( 'bufferView', bufferViewIndex ).then( function ( bufferView ) {
                			return new Promise( function ( resolve ) {
                				dracoLoader.decodeDracoFile( bufferView, function ( geometry ) {
                					for ( var attributeName in geometry.attributes ) {
                						var attribute = geometry.attributes[ attributeName ];
                						var normalized = attributeNormalizedMap[ attributeName ];
                						if ( normalized !== undefined ) attribute.normalized = normalized;
                					}
                					resolve( geometry );
                				}, threeAttributeMap, attributeTypeMap );
                			} );
                		} );
                	};
                	function GLTFTextureTransformExtension() {
                		this.name = EXTENSIONS.KHR_TEXTURE_TRANSFORM;
                	}
                	GLTFTextureTransformExtension.prototype.extendTexture = function ( texture, transform ) {
                		texture = texture.clone();
                		if ( transform.offset !== undefined ) {
                			texture.offset.fromArray( transform.offset );
                		}
                		if ( transform.rotation !== undefined ) {
                			texture.rotation = transform.rotation;
                		}
                		if ( transform.scale !== undefined ) {
                			texture.repeat.fromArray( transform.scale );
                		}
                		if ( transform.texCoord !== undefined ) {
                			console.warn( 'THREE.GLTFLoader: Custom UV sets in "' + this.name + '" extension not yet supported.' );
                		}
                		texture.needsUpdate = true;
                		return texture;
                	};
                	function GLTFMaterialsPbrSpecularGlossinessExtension() {
                		return {
                			name: EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,
                			specularGlossinessParams: [
                				'color',
                				'map',
                				'lightMap',
                				'lightMapIntensity',
                				'aoMap',
                				'aoMapIntensity',
                				'emissive',
                				'emissiveIntensity',
                				'emissiveMap',
                				'bumpMap',
                				'bumpScale',
                				'normalMap',
                				'displacementMap',
                				'displacementScale',
                				'displacementBias',
                				'specularMap',
                				'specular',
                				'glossinessMap',
                				'glossiness',
                				'alphaMap',
                				'envMap',
                				'envMapIntensity',
                				'refractionRatio',
                			],
                			getMaterialType: function () {
                				return ShaderMaterial;
                			},
                			extendParams: function ( materialParams, materialDef, parser ) {
                				var pbrSpecularGlossiness = materialDef.extensions[ this.name ];
                				var shader = ShaderLib[ 'standard' ];
                				var uniforms = UniformsUtils.clone( shader.uniforms );
                				var specularMapParsFragmentChunk = [
                					'#ifdef USE_SPECULARMAP',
                					'	uniform sampler2D specularMap;',
                					'#endif'
                				].join( '\n' );
                				var glossinessMapParsFragmentChunk = [
                					'#ifdef USE_GLOSSINESSMAP',
                					'	uniform sampler2D glossinessMap;',
                					'#endif'
                				].join( '\n' );
                				var specularMapFragmentChunk = [
                					'vec3 specularFactor = specular;',
                					'#ifdef USE_SPECULARMAP',
                					'	vec4 texelSpecular = texture2D( specularMap, vUv );',
                					'	texelSpecular = sRGBToLinear( texelSpecular );',
                					'	// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture',
                					'	specularFactor *= texelSpecular.rgb;',
                					'#endif'
                				].join( '\n' );
                				var glossinessMapFragmentChunk = [
                					'float glossinessFactor = glossiness;',
                					'#ifdef USE_GLOSSINESSMAP',
                					'	vec4 texelGlossiness = texture2D( glossinessMap, vUv );',
                					'	// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture',
                					'	glossinessFactor *= texelGlossiness.a;',
                					'#endif'
                				].join( '\n' );
                				var lightPhysicalFragmentChunk = [
                					'PhysicalMaterial material;',
                					'material.diffuseColor = diffuseColor.rgb;',
                					'material.specularRoughness = clamp( 1.0 - glossinessFactor, 0.04, 1.0 );',
                					'material.specularColor = specularFactor.rgb;',
                				].join( '\n' );
                				var fragmentShader = shader.fragmentShader
                					.replace( 'uniform float roughness;', 'uniform vec3 specular;' )
                					.replace( 'uniform float metalness;', 'uniform float glossiness;' )
                					.replace( '#include <roughnessmap_pars_fragment>', specularMapParsFragmentChunk )
                					.replace( '#include <metalnessmap_pars_fragment>', glossinessMapParsFragmentChunk )
                					.replace( '#include <roughnessmap_fragment>', specularMapFragmentChunk )
                					.replace( '#include <metalnessmap_fragment>', glossinessMapFragmentChunk )
                					.replace( '#include <lights_physical_fragment>', lightPhysicalFragmentChunk );
                				delete uniforms.roughness;
                				delete uniforms.metalness;
                				delete uniforms.roughnessMap;
                				delete uniforms.metalnessMap;
                				uniforms.specular = { value: new Color().setHex( 0x111111 ) };
                				uniforms.glossiness = { value: 0.5 };
                				uniforms.specularMap = { value: null };
                				uniforms.glossinessMap = { value: null };
                				materialParams.vertexShader = shader.vertexShader;
                				materialParams.fragmentShader = fragmentShader;
                				materialParams.uniforms = uniforms;
                				materialParams.defines = { 'STANDARD': '' };
                				materialParams.color = new Color( 1.0, 1.0, 1.0 );
                				materialParams.opacity = 1.0;
                				var pending = [];
                				if ( Array.isArray( pbrSpecularGlossiness.diffuseFactor ) ) {
                					var array = pbrSpecularGlossiness.diffuseFactor;
                					materialParams.color.fromArray( array );
                					materialParams.opacity = array[ 3 ];
                				}
                				if ( pbrSpecularGlossiness.diffuseTexture !== undefined ) {
                					pending.push( parser.assignTexture( materialParams, 'map', pbrSpecularGlossiness.diffuseTexture ) );
                				}
                				materialParams.emissive = new Color( 0.0, 0.0, 0.0 );
                				materialParams.glossiness = pbrSpecularGlossiness.glossinessFactor !== undefined ? pbrSpecularGlossiness.glossinessFactor : 1.0;
                				materialParams.specular = new Color( 1.0, 1.0, 1.0 );
                				if ( Array.isArray( pbrSpecularGlossiness.specularFactor ) ) {
                					materialParams.specular.fromArray( pbrSpecularGlossiness.specularFactor );
                				}
                				if ( pbrSpecularGlossiness.specularGlossinessTexture !== undefined ) {
                					var specGlossMapDef = pbrSpecularGlossiness.specularGlossinessTexture;
                					pending.push( parser.assignTexture( materialParams, 'glossinessMap', specGlossMapDef ) );
                					pending.push( parser.assignTexture( materialParams, 'specularMap', specGlossMapDef ) );
                				}
                				return Promise.all( pending );
                			},
                			createMaterial: function ( params ) {
                				var material = new ShaderMaterial( {
                					defines: params.defines,
                					vertexShader: params.vertexShader,
                					fragmentShader: params.fragmentShader,
                					uniforms: params.uniforms,
                					fog: true,
                					lights: true,
                					opacity: params.opacity,
                					transparent: params.transparent
                				} );
                				material.isGLTFSpecularGlossinessMaterial = true;
                				material.color = params.color;
                				material.map = params.map === undefined ? null : params.map;
                				material.lightMap = null;
                				material.lightMapIntensity = 1.0;
                				material.aoMap = params.aoMap === undefined ? null : params.aoMap;
                				material.aoMapIntensity = 1.0;
                				material.emissive = params.emissive;
                				material.emissiveIntensity = 1.0;
                				material.emissiveMap = params.emissiveMap === undefined ? null : params.emissiveMap;
                				material.bumpMap = params.bumpMap === undefined ? null : params.bumpMap;
                				material.bumpScale = 1;
                				material.normalMap = params.normalMap === undefined ? null : params.normalMap;
                				if ( params.normalScale ) material.normalScale = params.normalScale;
                				material.displacementMap = null;
                				material.displacementScale = 1;
                				material.displacementBias = 0;
                				material.specularMap = params.specularMap === undefined ? null : params.specularMap;
                				material.specular = params.specular;
                				material.glossinessMap = params.glossinessMap === undefined ? null : params.glossinessMap;
                				material.glossiness = params.glossiness;
                				material.alphaMap = null;
                				material.envMap = params.envMap === undefined ? null : params.envMap;
                				material.envMapIntensity = 1.0;
                				material.refractionRatio = 0.98;
                				material.extensions.derivatives = true;
                				return material;
                			},
                			cloneMaterial: function ( source ) {
                				var target = source.clone();
                				target.isGLTFSpecularGlossinessMaterial = true;
                				var params = this.specularGlossinessParams;
                				for ( var i = 0, il = params.length; i < il; i ++ ) {
                					var value = source[ params[ i ] ];
                					target[ params[ i ] ] = ( value && value.isColor ) ? value.clone() : value;
                				}
                				return target;
                			},
                			refreshUniforms: function ( renderer, scene, camera, geometry, material ) {
                				if ( material.isGLTFSpecularGlossinessMaterial !== true ) {
                					return;
                				}
                				var uniforms = material.uniforms;
                				var defines = material.defines;
                				uniforms.opacity.value = material.opacity;
                				uniforms.diffuse.value.copy( material.color );
                				uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );
                				uniforms.map.value = material.map;
                				uniforms.specularMap.value = material.specularMap;
                				uniforms.alphaMap.value = material.alphaMap;
                				uniforms.lightMap.value = material.lightMap;
                				uniforms.lightMapIntensity.value = material.lightMapIntensity;
                				uniforms.aoMap.value = material.aoMap;
                				uniforms.aoMapIntensity.value = material.aoMapIntensity;
                				var uvScaleMap;
                				if ( material.map ) {
                					uvScaleMap = material.map;
                				} else if ( material.specularMap ) {
                					uvScaleMap = material.specularMap;
                				} else if ( material.displacementMap ) {
                					uvScaleMap = material.displacementMap;
                				} else if ( material.normalMap ) {
                					uvScaleMap = material.normalMap;
                				} else if ( material.bumpMap ) {
                					uvScaleMap = material.bumpMap;
                				} else if ( material.glossinessMap ) {
                					uvScaleMap = material.glossinessMap;
                				} else if ( material.alphaMap ) {
                					uvScaleMap = material.alphaMap;
                				} else if ( material.emissiveMap ) {
                					uvScaleMap = material.emissiveMap;
                				}
                				if ( uvScaleMap !== undefined ) {
                					if ( uvScaleMap.isWebGLRenderTarget ) {
                						uvScaleMap = uvScaleMap.texture;
                					}
                					if ( uvScaleMap.matrixAutoUpdate === true ) {
                						uvScaleMap.updateMatrix();
                					}
                					uniforms.uvTransform.value.copy( uvScaleMap.matrix );
                				}
                				if ( material.envMap ) {
                					uniforms.envMap.value = material.envMap;
                					uniforms.envMapIntensity.value = material.envMapIntensity;
                					uniforms.flipEnvMap.value = material.envMap.isCubeTexture ? - 1 : 1;
                					uniforms.reflectivity.value = material.reflectivity;
                					uniforms.refractionRatio.value = material.refractionRatio;
                					uniforms.maxMipLevel.value = renderer.properties.get( material.envMap ).__maxMipLevel;
                				}
                				uniforms.specular.value.copy( material.specular );
                				uniforms.glossiness.value = material.glossiness;
                				uniforms.glossinessMap.value = material.glossinessMap;
                				uniforms.emissiveMap.value = material.emissiveMap;
                				uniforms.bumpMap.value = material.bumpMap;
                				uniforms.normalMap.value = material.normalMap;
                				uniforms.displacementMap.value = material.displacementMap;
                				uniforms.displacementScale.value = material.displacementScale;
                				uniforms.displacementBias.value = material.displacementBias;
                				if ( uniforms.glossinessMap.value !== null && defines.USE_GLOSSINESSMAP === undefined ) {
                					defines.USE_GLOSSINESSMAP = '';
                					defines.USE_ROUGHNESSMAP = '';
                				}
                				if ( uniforms.glossinessMap.value === null && defines.USE_GLOSSINESSMAP !== undefined ) {
                					delete defines.USE_GLOSSINESSMAP;
                					delete defines.USE_ROUGHNESSMAP;
                				}
                			}
                		};
                	}
                	function GLTFMeshQuantizationExtension() {
                		this.name = EXTENSIONS.KHR_MESH_QUANTIZATION;
                	}
                	function GLTFCubicSplineInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
                		Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );
                	}
                	GLTFCubicSplineInterpolant.prototype = Object.create( Interpolant.prototype );
                	GLTFCubicSplineInterpolant.prototype.constructor = GLTFCubicSplineInterpolant;
                	GLTFCubicSplineInterpolant.prototype.copySampleValue_ = function ( index ) {
                		var result = this.resultBuffer,
                			values = this.sampleValues,
                			valueSize = this.valueSize,
                			offset = index * valueSize * 3 + valueSize;
                		for ( var i = 0; i !== valueSize; i ++ ) {
                			result[ i ] = values[ offset + i ];
                		}
                		return result;
                	};
                	GLTFCubicSplineInterpolant.prototype.beforeStart_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;
                	GLTFCubicSplineInterpolant.prototype.afterEnd_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;
                	GLTFCubicSplineInterpolant.prototype.interpolate_ = function ( i1, t0, t, t1 ) {
                		var result = this.resultBuffer;
                		var values = this.sampleValues;
                		var stride = this.valueSize;
                		var stride2 = stride * 2;
                		var stride3 = stride * 3;
                		var td = t1 - t0;
                		var p = ( t - t0 ) / td;
                		var pp = p * p;
                		var ppp = pp * p;
                		var offset1 = i1 * stride3;
                		var offset0 = offset1 - stride3;
                		var s2 = - 2 * ppp + 3 * pp;
                		var s3 = ppp - pp;
                		var s0 = 1 - s2;
                		var s1 = s3 - pp + p;
                		for ( var i = 0; i !== stride; i ++ ) {
                			var p0 = values[ offset0 + i + stride ];
                			var m0 = values[ offset0 + i + stride2 ] * td;
                			var p1 = values[ offset1 + i + stride ];
                			var m1 = values[ offset1 + i ] * td;
                			result[ i ] = s0 * p0 + s1 * m0 + s2 * p1 + s3 * m1;
                		}
                		return result;
                	};
                	var WEBGL_CONSTANTS = {
                		FLOAT: 5126,
                		FLOAT_MAT3: 35675,
                		FLOAT_MAT4: 35676,
                		FLOAT_VEC2: 35664,
                		FLOAT_VEC3: 35665,
                		FLOAT_VEC4: 35666,
                		LINEAR: 9729,
                		REPEAT: 10497,
                		SAMPLER_2D: 35678,
                		POINTS: 0,
                		LINES: 1,
                		LINE_LOOP: 2,
                		LINE_STRIP: 3,
                		TRIANGLES: 4,
                		TRIANGLE_STRIP: 5,
                		TRIANGLE_FAN: 6,
                		UNSIGNED_BYTE: 5121,
                		UNSIGNED_SHORT: 5123
                	};
                	var WEBGL_COMPONENT_TYPES = {
                		5120: Int8Array,
                		5121: Uint8Array,
                		5122: Int16Array,
                		5123: Uint16Array,
                		5125: Uint32Array,
                		5126: Float32Array
                	};
                	var WEBGL_FILTERS = {
                		9728: NearestFilter,
                		9729: LinearFilter,
                		9984: NearestMipmapNearestFilter,
                		9985: LinearMipmapNearestFilter,
                		9986: NearestMipmapLinearFilter,
                		9987: LinearMipmapLinearFilter
                	};
                	var WEBGL_WRAPPINGS = {
                		33071: ClampToEdgeWrapping,
                		33648: MirroredRepeatWrapping,
                		10497: RepeatWrapping
                	};
                	var WEBGL_TYPE_SIZES = {
                		'SCALAR': 1,
                		'VEC2': 2,
                		'VEC3': 3,
                		'VEC4': 4,
                		'MAT2': 4,
                		'MAT3': 9,
                		'MAT4': 16
                	};
                	var ATTRIBUTES = {
                		POSITION: 'position',
                		NORMAL: 'normal',
                		TANGENT: 'tangent',
                		TEXCOORD_0: 'uv',
                		TEXCOORD_1: 'uv2',
                		COLOR_0: 'color',
                		WEIGHTS_0: 'skinWeight',
                		JOINTS_0: 'skinIndex',
                	};
                	var PATH_PROPERTIES = {
                		scale: 'scale',
                		translation: 'position',
                		rotation: 'quaternion',
                		weights: 'morphTargetInfluences'
                	};
                	var INTERPOLATION = {
                		CUBICSPLINE: undefined,
                		LINEAR: InterpolateLinear,
                		STEP: InterpolateDiscrete
                	};
                	var ALPHA_MODES = {
                		OPAQUE: 'OPAQUE',
                		MASK: 'MASK',
                		BLEND: 'BLEND'
                	};
                	var MIME_TYPE_FORMATS = {
                		'image/png': RGBAFormat,
                		'image/jpeg': RGBFormat
                	};
                	function resolveURL( url, path ) {
                		if ( typeof url !== 'string' || url === '' ) return '';
                		if ( /^https?:\/\//i.test( path ) && /^\//.test( url ) ) {
                			path = path.replace( /(^https?:\/\/[^\/]+).*/i, '$1' );
                		}
                		if ( /^(https?:)?\/\//i.test( url ) ) return url;
                		if ( /^data:.*,.*$/i.test( url ) ) return url;
                		if ( /^blob:.*$/i.test( url ) ) return url;
                		return path + url;
                	}
                	var defaultMaterial;
                	function createDefaultMaterial() {
                		defaultMaterial = defaultMaterial || new MeshStandardMaterial( {
                			color: 0xFFFFFF,
                			emissive: 0x000000,
                			metalness: 1,
                			roughness: 1,
                			transparent: false,
                			depthTest: true,
                			side: FrontSide
                		} );
                		return defaultMaterial;
                	}
                	function addUnknownExtensionsToUserData( knownExtensions, object, objectDef ) {
                		for ( var name in objectDef.extensions ) {
                			if ( knownExtensions[ name ] === undefined ) {
                				object.userData.gltfExtensions = object.userData.gltfExtensions || {};
                				object.userData.gltfExtensions[ name ] = objectDef.extensions[ name ];
                			}
                		}
                	}
                	function assignExtrasToUserData( object, gltfDef ) {
                		if ( gltfDef.extras !== undefined ) {
                			if ( typeof gltfDef.extras === 'object' ) {
                				Object.assign( object.userData, gltfDef.extras );
                			} else {
                				console.warn( 'THREE.GLTFLoader: Ignoring primitive type .extras, ' + gltfDef.extras );
                			}
                		}
                	}
                	function addMorphTargets( geometry, targets, parser ) {
                		var hasMorphPosition = false;
                		var hasMorphNormal = false;
                		for ( var i = 0, il = targets.length; i < il; i ++ ) {
                			var target = targets[ i ];
                			if ( target.POSITION !== undefined ) hasMorphPosition = true;
                			if ( target.NORMAL !== undefined ) hasMorphNormal = true;
                			if ( hasMorphPosition && hasMorphNormal ) break;
                		}
                		if ( ! hasMorphPosition && ! hasMorphNormal ) return Promise.resolve( geometry );
                		var pendingPositionAccessors = [];
                		var pendingNormalAccessors = [];
                		for ( var i = 0, il = targets.length; i < il; i ++ ) {
                			var target = targets[ i ];
                			if ( hasMorphPosition ) {
                				var pendingAccessor = target.POSITION !== undefined
                					? parser.getDependency( 'accessor', target.POSITION )
                					: geometry.attributes.position;
                				pendingPositionAccessors.push( pendingAccessor );
                			}
                			if ( hasMorphNormal ) {
                				var pendingAccessor = target.NORMAL !== undefined
                					? parser.getDependency( 'accessor', target.NORMAL )
                					: geometry.attributes.normal;
                				pendingNormalAccessors.push( pendingAccessor );
                			}
                		}
                		return Promise.all( [
                			Promise.all( pendingPositionAccessors ),
                			Promise.all( pendingNormalAccessors )
                		] ).then( function ( accessors ) {
                			var morphPositions = accessors[ 0 ];
                			var morphNormals = accessors[ 1 ];
                			if ( hasMorphPosition ) geometry.morphAttributes.position = morphPositions;
                			if ( hasMorphNormal ) geometry.morphAttributes.normal = morphNormals;
                			geometry.morphTargetsRelative = true;
                			return geometry;
                		} );
                	}
                	function updateMorphTargets( mesh, meshDef ) {
                		mesh.updateMorphTargets();
                		if ( meshDef.weights !== undefined ) {
                			for ( var i = 0, il = meshDef.weights.length; i < il; i ++ ) {
                				mesh.morphTargetInfluences[ i ] = meshDef.weights[ i ];
                			}
                		}
                		if ( meshDef.extras && Array.isArray( meshDef.extras.targetNames ) ) {
                			var targetNames = meshDef.extras.targetNames;
                			if ( mesh.morphTargetInfluences.length === targetNames.length ) {
                				mesh.morphTargetDictionary = {};
                				for ( var i = 0, il = targetNames.length; i < il; i ++ ) {
                					mesh.morphTargetDictionary[ targetNames[ i ] ] = i;
                				}
                			} else {
                				console.warn( 'THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.' );
                			}
                		}
                	}
                	function createPrimitiveKey( primitiveDef ) {
                		var dracoExtension = primitiveDef.extensions && primitiveDef.extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ];
                		var geometryKey;
                		if ( dracoExtension ) {
                			geometryKey = 'draco:' + dracoExtension.bufferView
                				+ ':' + dracoExtension.indices
                				+ ':' + createAttributesKey( dracoExtension.attributes );
                		} else {
                			geometryKey = primitiveDef.indices + ':' + createAttributesKey( primitiveDef.attributes ) + ':' + primitiveDef.mode;
                		}
                		return geometryKey;
                	}
                	function createAttributesKey( attributes ) {
                		var attributesKey = '';
                		var keys = Object.keys( attributes ).sort();
                		for ( var i = 0, il = keys.length; i < il; i ++ ) {
                			attributesKey += keys[ i ] + ':' + attributes[ keys[ i ] ] + ';';
                		}
                		return attributesKey;
                	}
                	function GLTFParser( json, extensions, options ) {
                		this.json = json || {};
                		this.extensions = extensions || {};
                		this.options = options || {};
                		this.cache = new GLTFRegistry();
                		this.primitiveCache = {};
                		this.textureLoader = new TextureLoader( this.options.manager );
                		this.textureLoader.setCrossOrigin( this.options.crossOrigin );
                		this.fileLoader = new FileLoader( this.options.manager );
                		this.fileLoader.setResponseType( 'arraybuffer' );
                		if ( this.options.crossOrigin === 'use-credentials' ) {
                			this.fileLoader.setWithCredentials( true );
                		}
                	}
                	GLTFParser.prototype.parse = function ( onLoad, onError ) {
                		var parser = this;
                		var json = this.json;
                		var extensions = this.extensions;
                		this.cache.removeAll();
                		this.markDefs();
                		Promise.all( [
                			this.getDependencies( 'scene' ),
                			this.getDependencies( 'animation' ),
                			this.getDependencies( 'camera' ),
                		] ).then( function ( dependencies ) {
                			var result = {
                				scene: dependencies[ 0 ][ json.scene || 0 ],
                				scenes: dependencies[ 0 ],
                				animations: dependencies[ 1 ],
                				cameras: dependencies[ 2 ],
                				asset: json.asset,
                				parser: parser,
                				userData: {}
                			};
                			addUnknownExtensionsToUserData( extensions, result, json );
                			assignExtrasToUserData( result, json );
                			onLoad( result );
                		} ).catch( onError );
                	};
                	GLTFParser.prototype.markDefs = function () {
                		var nodeDefs = this.json.nodes || [];
                		var skinDefs = this.json.skins || [];
                		var meshDefs = this.json.meshes || [];
                		var meshReferences = {};
                		var meshUses = {};
                		for ( var skinIndex = 0, skinLength = skinDefs.length; skinIndex < skinLength; skinIndex ++ ) {
                			var joints = skinDefs[ skinIndex ].joints;
                			for ( var i = 0, il = joints.length; i < il; i ++ ) {
                				nodeDefs[ joints[ i ] ].isBone = true;
                			}
                		}
                		for ( var nodeIndex = 0, nodeLength = nodeDefs.length; nodeIndex < nodeLength; nodeIndex ++ ) {
                			var nodeDef = nodeDefs[ nodeIndex ];
                			if ( nodeDef.mesh !== undefined ) {
                				if ( meshReferences[ nodeDef.mesh ] === undefined ) {
                					meshReferences[ nodeDef.mesh ] = meshUses[ nodeDef.mesh ] = 0;
                				}
                				meshReferences[ nodeDef.mesh ] ++;
                				if ( nodeDef.skin !== undefined ) {
                					meshDefs[ nodeDef.mesh ].isSkinnedMesh = true;
                				}
                			}
                		}
                		this.json.meshReferences = meshReferences;
                		this.json.meshUses = meshUses;
                	};
                	GLTFParser.prototype.getDependency = function ( type, index ) {
                		var cacheKey = type + ':' + index;
                		var dependency = this.cache.get( cacheKey );
                		if ( ! dependency ) {
                			switch ( type ) {
                				case 'scene':
                					dependency = this.loadScene( index );
                					break;
                				case 'node':
                					dependency = this.loadNode( index );
                					break;
                				case 'mesh':
                					dependency = this.loadMesh( index );
                					break;
                				case 'accessor':
                					dependency = this.loadAccessor( index );
                					break;
                				case 'bufferView':
                					dependency = this.loadBufferView( index );
                					break;
                				case 'buffer':
                					dependency = this.loadBuffer( index );
                					break;
                				case 'material':
                					dependency = this.loadMaterial( index );
                					break;
                				case 'texture':
                					dependency = this.loadTexture( index );
                					break;
                				case 'skin':
                					dependency = this.loadSkin( index );
                					break;
                				case 'animation':
                					dependency = this.loadAnimation( index );
                					break;
                				case 'camera':
                					dependency = this.loadCamera( index );
                					break;
                				case 'light':
                					dependency = this.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ].loadLight( index );
                					break;
                				default:
                					throw new Error( 'Unknown type: ' + type );
                			}
                			this.cache.add( cacheKey, dependency );
                		}
                		return dependency;
                	};
                	GLTFParser.prototype.getDependencies = function ( type ) {
                		var dependencies = this.cache.get( type );
                		if ( ! dependencies ) {
                			var parser = this;
                			var defs = this.json[ type + ( type === 'mesh' ? 'es' : 's' ) ] || [];
                			dependencies = Promise.all( defs.map( function ( def, index ) {
                				return parser.getDependency( type, index );
                			} ) );
                			this.cache.add( type, dependencies );
                		}
                		return dependencies;
                	};
                	GLTFParser.prototype.loadBuffer = function ( bufferIndex ) {
                		var bufferDef = this.json.buffers[ bufferIndex ];
                		var loader = this.fileLoader;
                		if ( bufferDef.type && bufferDef.type !== 'arraybuffer' ) {
                			throw new Error( 'THREE.GLTFLoader: ' + bufferDef.type + ' buffer type is not supported.' );
                		}
                		if ( bufferDef.uri === undefined && bufferIndex === 0 ) {
                			return Promise.resolve( this.extensions[ EXTENSIONS.KHR_BINARY_GLTF ].body );
                		}
                		var options = this.options;
                		return new Promise( function ( resolve, reject ) {
                			loader.load( resolveURL( bufferDef.uri, options.path ), resolve, undefined, function () {
                				reject( new Error( 'THREE.GLTFLoader: Failed to load buffer "' + bufferDef.uri + '".' ) );
                			} );
                		} );
                	};
                	GLTFParser.prototype.loadBufferView = function ( bufferViewIndex ) {
                		var bufferViewDef = this.json.bufferViews[ bufferViewIndex ];
                		return this.getDependency( 'buffer', bufferViewDef.buffer ).then( function ( buffer ) {
                			var byteLength = bufferViewDef.byteLength || 0;
                			var byteOffset = bufferViewDef.byteOffset || 0;
                			return buffer.slice( byteOffset, byteOffset + byteLength );
                		} );
                	};
                	GLTFParser.prototype.loadAccessor = function ( accessorIndex ) {
                		var parser = this;
                		var json = this.json;
                		var accessorDef = this.json.accessors[ accessorIndex ];
                		if ( accessorDef.bufferView === undefined && accessorDef.sparse === undefined ) {
                			return Promise.resolve( null );
                		}
                		var pendingBufferViews = [];
                		if ( accessorDef.bufferView !== undefined ) {
                			pendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.bufferView ) );
                		} else {
                			pendingBufferViews.push( null );
                		}
                		if ( accessorDef.sparse !== undefined ) {
                			pendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.indices.bufferView ) );
                			pendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.values.bufferView ) );
                		}
                		return Promise.all( pendingBufferViews ).then( function ( bufferViews ) {
                			var bufferView = bufferViews[ 0 ];
                			var itemSize = WEBGL_TYPE_SIZES[ accessorDef.type ];
                			var TypedArray = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];
                			var elementBytes = TypedArray.BYTES_PER_ELEMENT;
                			var itemBytes = elementBytes * itemSize;
                			var byteOffset = accessorDef.byteOffset || 0;
                			var byteStride = accessorDef.bufferView !== undefined ? json.bufferViews[ accessorDef.bufferView ].byteStride : undefined;
                			var normalized = accessorDef.normalized === true;
                			var array, bufferAttribute;
                			if ( byteStride && byteStride !== itemBytes ) {
                				var ibSlice = Math.floor( byteOffset / byteStride );
                				var ibCacheKey = 'InterleavedBuffer:' + accessorDef.bufferView + ':' + accessorDef.componentType + ':' + ibSlice + ':' + accessorDef.count;
                				var ib = parser.cache.get( ibCacheKey );
                				if ( ! ib ) {
                					array = new TypedArray( bufferView, ibSlice * byteStride, accessorDef.count * byteStride / elementBytes );
                					ib = new InterleavedBuffer( array, byteStride / elementBytes );
                					parser.cache.add( ibCacheKey, ib );
                				}
                				bufferAttribute = new InterleavedBufferAttribute( ib, itemSize, ( byteOffset % byteStride ) / elementBytes, normalized );
                			} else {
                				if ( bufferView === null ) {
                					array = new TypedArray( accessorDef.count * itemSize );
                				} else {
                					array = new TypedArray( bufferView, byteOffset, accessorDef.count * itemSize );
                				}
                				bufferAttribute = new BufferAttribute( array, itemSize, normalized );
                			}
                			if ( accessorDef.sparse !== undefined ) {
                				var itemSizeIndices = WEBGL_TYPE_SIZES.SCALAR;
                				var TypedArrayIndices = WEBGL_COMPONENT_TYPES[ accessorDef.sparse.indices.componentType ];
                				var byteOffsetIndices = accessorDef.sparse.indices.byteOffset || 0;
                				var byteOffsetValues = accessorDef.sparse.values.byteOffset || 0;
                				var sparseIndices = new TypedArrayIndices( bufferViews[ 1 ], byteOffsetIndices, accessorDef.sparse.count * itemSizeIndices );
                				var sparseValues = new TypedArray( bufferViews[ 2 ], byteOffsetValues, accessorDef.sparse.count * itemSize );
                				if ( bufferView !== null ) {
                					bufferAttribute = new BufferAttribute( bufferAttribute.array.slice(), bufferAttribute.itemSize, bufferAttribute.normalized );
                				}
                				for ( var i = 0, il = sparseIndices.length; i < il; i ++ ) {
                					var index = sparseIndices[ i ];
                					bufferAttribute.setX( index, sparseValues[ i * itemSize ] );
                					if ( itemSize >= 2 ) bufferAttribute.setY( index, sparseValues[ i * itemSize + 1 ] );
                					if ( itemSize >= 3 ) bufferAttribute.setZ( index, sparseValues[ i * itemSize + 2 ] );
                					if ( itemSize >= 4 ) bufferAttribute.setW( index, sparseValues[ i * itemSize + 3 ] );
                					if ( itemSize >= 5 ) throw new Error( 'THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.' );
                				}
                			}
                			return bufferAttribute;
                		} );
                	};
                	GLTFParser.prototype.loadTexture = function ( textureIndex ) {
                		var parser = this;
                		var json = this.json;
                		var options = this.options;
                		var textureLoader = this.textureLoader;
                		var URL = window.URL || window.webkitURL;
                		var textureDef = json.textures[ textureIndex ];
                		var textureExtensions = textureDef.extensions || {};
                		var source;
                		if ( textureExtensions[ EXTENSIONS.MSFT_TEXTURE_DDS ] ) {
                			source = json.images[ textureExtensions[ EXTENSIONS.MSFT_TEXTURE_DDS ].source ];
                		} else {
                			source = json.images[ textureDef.source ];
                		}
                		var sourceURI = source.uri;
                		var isObjectURL = false;
                		if ( source.bufferView !== undefined ) {
                			sourceURI = parser.getDependency( 'bufferView', source.bufferView ).then( function ( bufferView ) {
                				isObjectURL = true;
                				var blob = new Blob( [ bufferView ], { type: source.mimeType } );
                				sourceURI = URL.createObjectURL( blob );
                				return sourceURI;
                			} );
                		}
                		return Promise.resolve( sourceURI ).then( function ( sourceURI ) {
                			var loader = options.manager.getHandler( sourceURI );
                			if ( ! loader ) {
                				loader = textureExtensions[ EXTENSIONS.MSFT_TEXTURE_DDS ]
                					? parser.extensions[ EXTENSIONS.MSFT_TEXTURE_DDS ].ddsLoader
                					: textureLoader;
                			}
                			return new Promise( function ( resolve, reject ) {
                				loader.load( resolveURL( sourceURI, options.path ), resolve, undefined, reject );
                			} );
                		} ).then( function ( texture ) {
                			if ( isObjectURL === true ) {
                				URL.revokeObjectURL( sourceURI );
                			}
                			texture.flipY = false;
                			if ( textureDef.name !== undefined ) texture.name = textureDef.name;
                			if ( source.mimeType in MIME_TYPE_FORMATS ) {
                				texture.format = MIME_TYPE_FORMATS[ source.mimeType ];
                			}
                			var samplers = json.samplers || {};
                			var sampler = samplers[ textureDef.sampler ] || {};
                			texture.magFilter = WEBGL_FILTERS[ sampler.magFilter ] || LinearFilter;
                			texture.minFilter = WEBGL_FILTERS[ sampler.minFilter ] || LinearMipmapLinearFilter;
                			texture.wrapS = WEBGL_WRAPPINGS[ sampler.wrapS ] || RepeatWrapping;
                			texture.wrapT = WEBGL_WRAPPINGS[ sampler.wrapT ] || RepeatWrapping;
                			return texture;
                		} );
                	};
                	GLTFParser.prototype.assignTexture = function ( materialParams, mapName, mapDef ) {
                		var parser = this;
                		return this.getDependency( 'texture', mapDef.index ).then( function ( texture ) {
                			if ( ! texture.isCompressedTexture ) {
                				switch ( mapName ) {
                					case 'aoMap':
                					case 'emissiveMap':
                					case 'metalnessMap':
                					case 'normalMap':
                					case 'roughnessMap':
                						texture.format = RGBFormat;
                						break;
                				}
                			}
                			if ( parser.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ] ) {
                				var transform = mapDef.extensions !== undefined ? mapDef.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ] : undefined;
                				if ( transform ) {
                					texture = parser.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ].extendTexture( texture, transform );
                				}
                			}
                			materialParams[ mapName ] = texture;
                		} );
                	};
                	GLTFParser.prototype.assignFinalMaterial = function ( mesh ) {
                		var geometry = mesh.geometry;
                		var material = mesh.material;
                		var extensions = this.extensions;
                		var useVertexTangents = geometry.attributes.tangent !== undefined;
                		var useVertexColors = geometry.attributes.color !== undefined;
                		var useFlatShading = geometry.attributes.normal === undefined;
                		var useSkinning = mesh.isSkinnedMesh === true;
                		var useMorphTargets = Object.keys( geometry.morphAttributes ).length > 0;
                		var useMorphNormals = useMorphTargets && geometry.morphAttributes.normal !== undefined;
                		if ( mesh.isPoints ) {
                			var cacheKey = 'PointsMaterial:' + material.uuid;
                			var pointsMaterial = this.cache.get( cacheKey );
                			if ( ! pointsMaterial ) {
                				pointsMaterial = new PointsMaterial();
                				Material.prototype.copy.call( pointsMaterial, material );
                				pointsMaterial.color.copy( material.color );
                				pointsMaterial.map = material.map;
                				pointsMaterial.sizeAttenuation = false;
                				this.cache.add( cacheKey, pointsMaterial );
                			}
                			material = pointsMaterial;
                		} else if ( mesh.isLine ) {
                			var cacheKey = 'LineBasicMaterial:' + material.uuid;
                			var lineMaterial = this.cache.get( cacheKey );
                			if ( ! lineMaterial ) {
                				lineMaterial = new LineBasicMaterial();
                				Material.prototype.copy.call( lineMaterial, material );
                				lineMaterial.color.copy( material.color );
                				this.cache.add( cacheKey, lineMaterial );
                			}
                			material = lineMaterial;
                		}
                		if ( useVertexTangents || useVertexColors || useFlatShading || useSkinning || useMorphTargets ) {
                			var cacheKey = 'ClonedMaterial:' + material.uuid + ':';
                			if ( material.isGLTFSpecularGlossinessMaterial ) cacheKey += 'specular-glossiness:';
                			if ( useSkinning ) cacheKey += 'skinning:';
                			if ( useVertexTangents ) cacheKey += 'vertex-tangents:';
                			if ( useVertexColors ) cacheKey += 'vertex-colors:';
                			if ( useFlatShading ) cacheKey += 'flat-shading:';
                			if ( useMorphTargets ) cacheKey += 'morph-targets:';
                			if ( useMorphNormals ) cacheKey += 'morph-normals:';
                			var cachedMaterial = this.cache.get( cacheKey );
                			if ( ! cachedMaterial ) {
                				cachedMaterial = material.isGLTFSpecularGlossinessMaterial
                					? extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ].cloneMaterial( material )
                					: material.clone();
                				if ( useSkinning ) cachedMaterial.skinning = true;
                				if ( useVertexTangents ) cachedMaterial.vertexTangents = true;
                				if ( useVertexColors ) cachedMaterial.vertexColors = VertexColors;
                				if ( useFlatShading ) cachedMaterial.flatShading = true;
                				if ( useMorphTargets ) cachedMaterial.morphTargets = true;
                				if ( useMorphNormals ) cachedMaterial.morphNormals = true;
                				this.cache.add( cacheKey, cachedMaterial );
                			}
                			material = cachedMaterial;
                		}
                		if ( material.aoMap && geometry.attributes.uv2 === undefined && geometry.attributes.uv !== undefined ) {
                			console.log( 'THREE.GLTFLoader: Duplicating UVs to support aoMap.' );
                			geometry.setAttribute( 'uv2', new BufferAttribute( geometry.attributes.uv.array, 2 ) );
                		}
                		if ( material.isGLTFSpecularGlossinessMaterial ) {
                			mesh.onBeforeRender = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ].refreshUniforms;
                		}
                		mesh.material = material;
                	};
                	GLTFParser.prototype.loadMaterial = function ( materialIndex ) {
                		var parser = this;
                		var json = this.json;
                		var extensions = this.extensions;
                		var materialDef = json.materials[ materialIndex ];
                		var materialType;
                		var materialParams = {};
                		var materialExtensions = materialDef.extensions || {};
                		var pending = [];
                		if ( materialExtensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ] ) {
                			var sgExtension = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ];
                			materialType = sgExtension.getMaterialType();
                			pending.push( sgExtension.extendParams( materialParams, materialDef, parser ) );
                		} else if ( materialExtensions[ EXTENSIONS.KHR_MATERIALS_UNLIT ] ) {
                			var kmuExtension = extensions[ EXTENSIONS.KHR_MATERIALS_UNLIT ];
                			materialType = kmuExtension.getMaterialType();
                			pending.push( kmuExtension.extendParams( materialParams, materialDef, parser ) );
                		} else {
                			materialType = MeshStandardMaterial;
                			var metallicRoughness = materialDef.pbrMetallicRoughness || {};
                			materialParams.color = new Color( 1.0, 1.0, 1.0 );
                			materialParams.opacity = 1.0;
                			if ( Array.isArray( metallicRoughness.baseColorFactor ) ) {
                				var array = metallicRoughness.baseColorFactor;
                				materialParams.color.fromArray( array );
                				materialParams.opacity = array[ 3 ];
                			}
                			if ( metallicRoughness.baseColorTexture !== undefined ) {
                				pending.push( parser.assignTexture( materialParams, 'map', metallicRoughness.baseColorTexture ) );
                			}
                			materialParams.metalness = metallicRoughness.metallicFactor !== undefined ? metallicRoughness.metallicFactor : 1.0;
                			materialParams.roughness = metallicRoughness.roughnessFactor !== undefined ? metallicRoughness.roughnessFactor : 1.0;
                			if ( metallicRoughness.metallicRoughnessTexture !== undefined ) {
                				pending.push( parser.assignTexture( materialParams, 'metalnessMap', metallicRoughness.metallicRoughnessTexture ) );
                				pending.push( parser.assignTexture( materialParams, 'roughnessMap', metallicRoughness.metallicRoughnessTexture ) );
                			}
                		}
                		if ( materialDef.doubleSided === true ) {
                			materialParams.side = DoubleSide;
                		}
                		var alphaMode = materialDef.alphaMode || ALPHA_MODES.OPAQUE;
                		if ( alphaMode === ALPHA_MODES.BLEND ) {
                			materialParams.transparent = true;
                		} else {
                			materialParams.transparent = false;
                			if ( alphaMode === ALPHA_MODES.MASK ) {
                				materialParams.alphaTest = materialDef.alphaCutoff !== undefined ? materialDef.alphaCutoff : 0.5;
                			}
                		}
                		if ( materialDef.normalTexture !== undefined && materialType !== MeshBasicMaterial ) {
                			pending.push( parser.assignTexture( materialParams, 'normalMap', materialDef.normalTexture ) );
                			materialParams.normalScale = new Vector2( 1, 1 );
                			if ( materialDef.normalTexture.scale !== undefined ) {
                				materialParams.normalScale.set( materialDef.normalTexture.scale, materialDef.normalTexture.scale );
                			}
                		}
                		if ( materialDef.occlusionTexture !== undefined && materialType !== MeshBasicMaterial ) {
                			pending.push( parser.assignTexture( materialParams, 'aoMap', materialDef.occlusionTexture ) );
                			if ( materialDef.occlusionTexture.strength !== undefined ) {
                				materialParams.aoMapIntensity = materialDef.occlusionTexture.strength;
                			}
                		}
                		if ( materialDef.emissiveFactor !== undefined && materialType !== MeshBasicMaterial ) {
                			materialParams.emissive = new Color().fromArray( materialDef.emissiveFactor );
                		}
                		if ( materialDef.emissiveTexture !== undefined && materialType !== MeshBasicMaterial ) {
                			pending.push( parser.assignTexture( materialParams, 'emissiveMap', materialDef.emissiveTexture ) );
                		}
                		return Promise.all( pending ).then( function () {
                			var material;
                			if ( materialType === ShaderMaterial ) {
                				material = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ].createMaterial( materialParams );
                			} else {
                				material = new materialType( materialParams );
                			}
                			if ( materialDef.name !== undefined ) material.name = materialDef.name;
                			if ( material.map ) material.map.encoding = sRGBEncoding;
                			if ( material.emissiveMap ) material.emissiveMap.encoding = sRGBEncoding;
                			if ( material.specularMap ) material.specularMap.encoding = sRGBEncoding;
                			assignExtrasToUserData( material, materialDef );
                			if ( materialDef.extensions ) addUnknownExtensionsToUserData( extensions, material, materialDef );
                			return material;
                		} );
                	};
                	function computeBounds( geometry, primitiveDef, parser ) {
                		var attributes = primitiveDef.attributes;
                		var box = new Box3();
                		if ( attributes.POSITION !== undefined ) {
                			var accessor = parser.json.accessors[ attributes.POSITION ];
                			var min = accessor.min;
                			var max = accessor.max;
                			box.set(
                				new Vector3( min[ 0 ], min[ 1 ], min[ 2 ] ),
                				new Vector3( max[ 0 ], max[ 1 ], max[ 2 ] ) );
                		} else {
                			return;
                		}
                		var targets = primitiveDef.targets;
                		if ( targets !== undefined ) {
                			var vector = new Vector3();
                			for ( var i = 0, il = targets.length; i < il; i ++ ) {
                				var target = targets[ i ];
                				if ( target.POSITION !== undefined ) {
                					var accessor = parser.json.accessors[ target.POSITION ];
                					var min = accessor.min;
                					var max = accessor.max;
                					vector.setX( Math.max( Math.abs( min[ 0 ] ), Math.abs( max[ 0 ] ) ) );
                					vector.setY( Math.max( Math.abs( min[ 1 ] ), Math.abs( max[ 1 ] ) ) );
                					vector.setZ( Math.max( Math.abs( min[ 2 ] ), Math.abs( max[ 2 ] ) ) );
                					box.expandByVector( vector );
                				}
                			}
                		}
                		geometry.boundingBox = box;
                		var sphere = new Sphere();
                		box.getCenter( sphere.center );
                		sphere.radius = box.min.distanceTo( box.max ) / 2;
                		geometry.boundingSphere = sphere;
                	}
                	function addPrimitiveAttributes( geometry, primitiveDef, parser ) {
                		var attributes = primitiveDef.attributes;
                		var pending = [];
                		function assignAttributeAccessor( accessorIndex, attributeName ) {
                			return parser.getDependency( 'accessor', accessorIndex )
                				.then( function ( accessor ) {
                					geometry.setAttribute( attributeName, accessor );
                				} );
                		}
                		for ( var gltfAttributeName in attributes ) {
                			var threeAttributeName = ATTRIBUTES[ gltfAttributeName ] || gltfAttributeName.toLowerCase();
                			if ( threeAttributeName in geometry.attributes ) continue;
                			pending.push( assignAttributeAccessor( attributes[ gltfAttributeName ], threeAttributeName ) );
                		}
                		if ( primitiveDef.indices !== undefined && ! geometry.index ) {
                			var accessor = parser.getDependency( 'accessor', primitiveDef.indices ).then( function ( accessor ) {
                				geometry.setIndex( accessor );
                			} );
                			pending.push( accessor );
                		}
                		assignExtrasToUserData( geometry, primitiveDef );
                		computeBounds( geometry, primitiveDef, parser );
                		return Promise.all( pending ).then( function () {
                			return primitiveDef.targets !== undefined
                				? addMorphTargets( geometry, primitiveDef.targets, parser )
                				: geometry;
                		} );
                	}
                	GLTFParser.prototype.loadGeometries = function ( primitives ) {
                		var parser = this;
                		var extensions = this.extensions;
                		var cache = this.primitiveCache;
                		function createDracoPrimitive( primitive ) {
                			return extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ]
                				.decodePrimitive( primitive, parser )
                				.then( function ( geometry ) {
                					return addPrimitiveAttributes( geometry, primitive, parser );
                				} );
                		}
                		var pending = [];
                		for ( var i = 0, il = primitives.length; i < il; i ++ ) {
                			var primitive = primitives[ i ];
                			var cacheKey = createPrimitiveKey( primitive );
                			var cached = cache[ cacheKey ];
                			if ( cached ) {
                				pending.push( cached.promise );
                			} else {
                				var geometryPromise;
                				if ( primitive.extensions && primitive.extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ] ) {
                					geometryPromise = createDracoPrimitive( primitive );
                				} else {
                					geometryPromise = addPrimitiveAttributes( new BufferGeometry(), primitive, parser );
                				}
                				cache[ cacheKey ] = { primitive: primitive, promise: geometryPromise };
                				pending.push( geometryPromise );
                			}
                		}
                		return Promise.all( pending );
                	};
                	GLTFParser.prototype.loadMesh = function ( meshIndex ) {
                		var parser = this;
                		var json = this.json;
                		var meshDef = json.meshes[ meshIndex ];
                		var primitives = meshDef.primitives;
                		var pending = [];
                		for ( var i = 0, il = primitives.length; i < il; i ++ ) {
                			var material = primitives[ i ].material === undefined
                				? createDefaultMaterial()
                				: this.getDependency( 'material', primitives[ i ].material );
                			pending.push( material );
                		}
                		return Promise.all( pending ).then( function ( originalMaterials ) {
                			return parser.loadGeometries( primitives ).then( function ( geometries ) {
                				var meshes = [];
                				for ( var i = 0, il = geometries.length; i < il; i ++ ) {
                					var geometry = geometries[ i ];
                					var primitive = primitives[ i ];
                					var mesh;
                					var material = originalMaterials[ i ];
                					if ( primitive.mode === WEBGL_CONSTANTS.TRIANGLES ||
                						primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ||
                						primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ||
                						primitive.mode === undefined ) {
                						mesh = meshDef.isSkinnedMesh === true
                							? new SkinnedMesh( geometry, material )
                							: new Mesh( geometry, material );
                						if ( mesh.isSkinnedMesh === true && ! mesh.geometry.attributes.skinWeight.normalized ) {
                							mesh.normalizeSkinWeights();
                						}
                						if ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ) {
                							mesh.drawMode = TriangleStripDrawMode;
                						} else if ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ) {
                							mesh.drawMode = TriangleFanDrawMode;
                						}
                					} else if ( primitive.mode === WEBGL_CONSTANTS.LINES ) {
                						mesh = new LineSegments( geometry, material );
                					} else if ( primitive.mode === WEBGL_CONSTANTS.LINE_STRIP ) {
                						mesh = new Line( geometry, material );
                					} else if ( primitive.mode === WEBGL_CONSTANTS.LINE_LOOP ) {
                						mesh = new LineLoop( geometry, material );
                					} else if ( primitive.mode === WEBGL_CONSTANTS.POINTS ) {
                						mesh = new Points( geometry, material );
                					} else {
                						throw new Error( 'THREE.GLTFLoader: Primitive mode unsupported: ' + primitive.mode );
                					}
                					if ( Object.keys( mesh.geometry.morphAttributes ).length > 0 ) {
                						updateMorphTargets( mesh, meshDef );
                					}
                					mesh.name = meshDef.name || ( 'mesh_' + meshIndex );
                					if ( geometries.length > 1 ) mesh.name += '_' + i;
                					assignExtrasToUserData( mesh, meshDef );
                					parser.assignFinalMaterial( mesh );
                					meshes.push( mesh );
                				}
                				if ( meshes.length === 1 ) {
                					return meshes[ 0 ];
                				}
                				var group = new Group();
                				for ( var i = 0, il = meshes.length; i < il; i ++ ) {
                					group.add( meshes[ i ] );
                				}
                				return group;
                			} );
                		} );
                	};
                	GLTFParser.prototype.loadCamera = function ( cameraIndex ) {
                		var camera;
                		var cameraDef = this.json.cameras[ cameraIndex ];
                		var params = cameraDef[ cameraDef.type ];
                		if ( ! params ) {
                			console.warn( 'THREE.GLTFLoader: Missing camera parameters.' );
                			return;
                		}
                		if ( cameraDef.type === 'perspective' ) {
                			camera = new PerspectiveCamera( _Math.radToDeg( params.yfov ), params.aspectRatio || 1, params.znear || 1, params.zfar || 2e6 );
                		} else if ( cameraDef.type === 'orthographic' ) {
                			camera = new OrthographicCamera( params.xmag / - 2, params.xmag / 2, params.ymag / 2, params.ymag / - 2, params.znear, params.zfar );
                		}
                		if ( cameraDef.name !== undefined ) camera.name = cameraDef.name;
                		assignExtrasToUserData( camera, cameraDef );
                		return Promise.resolve( camera );
                	};
                	GLTFParser.prototype.loadSkin = function ( skinIndex ) {
                		var skinDef = this.json.skins[ skinIndex ];
                		var skinEntry = { joints: skinDef.joints };
                		if ( skinDef.inverseBindMatrices === undefined ) {
                			return Promise.resolve( skinEntry );
                		}
                		return this.getDependency( 'accessor', skinDef.inverseBindMatrices ).then( function ( accessor ) {
                			skinEntry.inverseBindMatrices = accessor;
                			return skinEntry;
                		} );
                	};
                	GLTFParser.prototype.loadAnimation = function ( animationIndex ) {
                		var json = this.json;
                		var animationDef = json.animations[ animationIndex ];
                		var pendingNodes = [];
                		var pendingInputAccessors = [];
                		var pendingOutputAccessors = [];
                		var pendingSamplers = [];
                		var pendingTargets = [];
                		for ( var i = 0, il = animationDef.channels.length; i < il; i ++ ) {
                			var channel = animationDef.channels[ i ];
                			var sampler = animationDef.samplers[ channel.sampler ];
                			var target = channel.target;
                			var name = target.node !== undefined ? target.node : target.id;
                			var input = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.input ] : sampler.input;
                			var output = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.output ] : sampler.output;
                			pendingNodes.push( this.getDependency( 'node', name ) );
                			pendingInputAccessors.push( this.getDependency( 'accessor', input ) );
                			pendingOutputAccessors.push( this.getDependency( 'accessor', output ) );
                			pendingSamplers.push( sampler );
                			pendingTargets.push( target );
                		}
                		return Promise.all( [
                			Promise.all( pendingNodes ),
                			Promise.all( pendingInputAccessors ),
                			Promise.all( pendingOutputAccessors ),
                			Promise.all( pendingSamplers ),
                			Promise.all( pendingTargets )
                		] ).then( function ( dependencies ) {
                			var nodes = dependencies[ 0 ];
                			var inputAccessors = dependencies[ 1 ];
                			var outputAccessors = dependencies[ 2 ];
                			var samplers = dependencies[ 3 ];
                			var targets = dependencies[ 4 ];
                			var tracks = [];
                			for ( var i = 0, il = nodes.length; i < il; i ++ ) {
                				var node = nodes[ i ];
                				var inputAccessor = inputAccessors[ i ];
                				var outputAccessor = outputAccessors[ i ];
                				var sampler = samplers[ i ];
                				var target = targets[ i ];
                				if ( node === undefined ) continue;
                				node.updateMatrix();
                				node.matrixAutoUpdate = true;
                				var TypedKeyframeTrack;
                				switch ( PATH_PROPERTIES[ target.path ] ) {
                					case PATH_PROPERTIES.weights:
                						TypedKeyframeTrack = NumberKeyframeTrack;
                						break;
                					case PATH_PROPERTIES.rotation:
                						TypedKeyframeTrack = QuaternionKeyframeTrack;
                						break;
                					case PATH_PROPERTIES.position:
                					case PATH_PROPERTIES.scale:
                					default:
                						TypedKeyframeTrack = VectorKeyframeTrack;
                						break;
                				}
                				var targetName = node.name ? node.name : node.uuid;
                				var interpolation = sampler.interpolation !== undefined ? INTERPOLATION[ sampler.interpolation ] : InterpolateLinear;
                				var targetNames = [];
                				if ( PATH_PROPERTIES[ target.path ] === PATH_PROPERTIES.weights ) {
                					node.traverse( function ( object ) {
                						if ( object.isMesh === true && object.morphTargetInfluences ) {
                							targetNames.push( object.name ? object.name : object.uuid );
                						}
                					} );
                				} else {
                					targetNames.push( targetName );
                				}
                				var outputArray = outputAccessor.array;
                				if ( outputAccessor.normalized ) {
                					var scale;
                					if ( outputArray.constructor === Int8Array ) {
                						scale = 1 / 127;
                					} else if ( outputArray.constructor === Uint8Array ) {
                						scale = 1 / 255;
                					} else if ( outputArray.constructor == Int16Array ) {
                						scale = 1 / 32767;
                					} else if ( outputArray.constructor === Uint16Array ) {
                						scale = 1 / 65535;
                					} else {
                						throw new Error( 'THREE.GLTFLoader: Unsupported output accessor component type.' );
                					}
                					var scaled = new Float32Array( outputArray.length );
                					for ( var j = 0, jl = outputArray.length; j < jl; j ++ ) {
                						scaled[ j ] = outputArray[ j ] * scale;
                					}
                					outputArray = scaled;
                				}
                				for ( var j = 0, jl = targetNames.length; j < jl; j ++ ) {
                					var track = new TypedKeyframeTrack(
                						targetNames[ j ] + '.' + PATH_PROPERTIES[ target.path ],
                						inputAccessor.array,
                						outputArray,
                						interpolation
                					);
                					if ( sampler.interpolation === 'CUBICSPLINE' ) {
                						track.createInterpolant = function InterpolantFactoryMethodGLTFCubicSpline( result ) {
                							return new GLTFCubicSplineInterpolant( this.times, this.values, this.getValueSize() / 3, result );
                						};
                						track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline = true;
                					}
                					tracks.push( track );
                				}
                			}
                			var name = animationDef.name !== undefined ? animationDef.name : 'animation_' + animationIndex;
                			return new AnimationClip( name, undefined, tracks );
                		} );
                	};
                	GLTFParser.prototype.loadNode = function ( nodeIndex ) {
                		var json = this.json;
                		var extensions = this.extensions;
                		var parser = this;
                		var meshReferences = json.meshReferences;
                		var meshUses = json.meshUses;
                		var nodeDef = json.nodes[ nodeIndex ];
                		return ( function () {
                			var pending = [];
                			if ( nodeDef.mesh !== undefined ) {
                				pending.push( parser.getDependency( 'mesh', nodeDef.mesh ).then( function ( mesh ) {
                					var node;
                					if ( meshReferences[ nodeDef.mesh ] > 1 ) {
                						var instanceNum = meshUses[ nodeDef.mesh ] ++;
                						node = mesh.clone();
                						node.name += '_instance_' + instanceNum;
                						node.onBeforeRender = mesh.onBeforeRender;
                						for ( var i = 0, il = node.children.length; i < il; i ++ ) {
                							node.children[ i ].name += '_instance_' + instanceNum;
                							node.children[ i ].onBeforeRender = mesh.children[ i ].onBeforeRender;
                						}
                					} else {
                						node = mesh;
                					}
                					if ( nodeDef.weights !== undefined ) {
                						node.traverse( function ( o ) {
                							if ( ! o.isMesh ) return;
                							for ( var i = 0, il = nodeDef.weights.length; i < il; i ++ ) {
                								o.morphTargetInfluences[ i ] = nodeDef.weights[ i ];
                							}
                						} );
                					}
                					return node;
                				} ) );
                			}
                			if ( nodeDef.camera !== undefined ) {
                				pending.push( parser.getDependency( 'camera', nodeDef.camera ) );
                			}
                			if ( nodeDef.extensions
                				&& nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ]
                				&& nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ].light !== undefined ) {
                				pending.push( parser.getDependency( 'light', nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ].light ) );
                			}
                			return Promise.all( pending );
                		}() ).then( function ( objects ) {
                			var node;
                			if ( nodeDef.isBone === true ) {
                				node = new Bone();
                			} else if ( objects.length > 1 ) {
                				node = new Group();
                			} else if ( objects.length === 1 ) {
                				node = objects[ 0 ];
                			} else {
                				node = new Object3D();
                			}
                			if ( node !== objects[ 0 ] ) {
                				for ( var i = 0, il = objects.length; i < il; i ++ ) {
                					node.add( objects[ i ] );
                				}
                			}
                			if ( nodeDef.name !== undefined ) {
                				node.userData.name = nodeDef.name;
                				node.name = PropertyBinding.sanitizeNodeName( nodeDef.name );
                			}
                			assignExtrasToUserData( node, nodeDef );
                			if ( nodeDef.extensions ) addUnknownExtensionsToUserData( extensions, node, nodeDef );
                			if ( nodeDef.matrix !== undefined ) {
                				var matrix = new Matrix4();
                				matrix.fromArray( nodeDef.matrix );
                				node.applyMatrix( matrix );
                			} else {
                				if ( nodeDef.translation !== undefined ) {
                					node.position.fromArray( nodeDef.translation );
                				}
                				if ( nodeDef.rotation !== undefined ) {
                					node.quaternion.fromArray( nodeDef.rotation );
                				}
                				if ( nodeDef.scale !== undefined ) {
                					node.scale.fromArray( nodeDef.scale );
                				}
                			}
                			return node;
                		} );
                	};
                	GLTFParser.prototype.loadScene = function () {
                		function buildNodeHierachy( nodeId, parentObject, json, parser ) {
                			var nodeDef = json.nodes[ nodeId ];
                			return parser.getDependency( 'node', nodeId ).then( function ( node ) {
                				if ( nodeDef.skin === undefined ) return node;
                				var skinEntry;
                				return parser.getDependency( 'skin', nodeDef.skin ).then( function ( skin ) {
                					skinEntry = skin;
                					var pendingJoints = [];
                					for ( var i = 0, il = skinEntry.joints.length; i < il; i ++ ) {
                						pendingJoints.push( parser.getDependency( 'node', skinEntry.joints[ i ] ) );
                					}
                					return Promise.all( pendingJoints );
                				} ).then( function ( jointNodes ) {
                					node.traverse( function ( mesh ) {
                						if ( ! mesh.isMesh ) return;
                						var bones = [];
                						var boneInverses = [];
                						for ( var j = 0, jl = jointNodes.length; j < jl; j ++ ) {
                							var jointNode = jointNodes[ j ];
                							if ( jointNode ) {
                								bones.push( jointNode );
                								var mat = new Matrix4();
                								if ( skinEntry.inverseBindMatrices !== undefined ) {
                									mat.fromArray( skinEntry.inverseBindMatrices.array, j * 16 );
                								}
                								boneInverses.push( mat );
                							} else {
                								console.warn( 'THREE.GLTFLoader: Joint "%s" could not be found.', skinEntry.joints[ j ] );
                							}
                						}
                						mesh.bind( new Skeleton( bones, boneInverses ), mesh.matrixWorld );
                					} );
                					return node;
                				} );
                			} ).then( function ( node ) {
                				parentObject.add( node );
                				var pending = [];
                				if ( nodeDef.children ) {
                					var children = nodeDef.children;
                					for ( var i = 0, il = children.length; i < il; i ++ ) {
                						var child = children[ i ];
                						pending.push( buildNodeHierachy( child, node, json, parser ) );
                					}
                				}
                				return Promise.all( pending );
                			} );
                		}
                		return function loadScene( sceneIndex ) {
                			var json = this.json;
                			var extensions = this.extensions;
                			var sceneDef = this.json.scenes[ sceneIndex ];
                			var parser = this;
                			var scene = new Scene();
                			if ( sceneDef.name !== undefined ) scene.name = sceneDef.name;
                			assignExtrasToUserData( scene, sceneDef );
                			if ( sceneDef.extensions ) addUnknownExtensionsToUserData( extensions, scene, sceneDef );
                			var nodeIds = sceneDef.nodes || [];
                			var pending = [];
                			for ( var i = 0, il = nodeIds.length; i < il; i ++ ) {
                				pending.push( buildNodeHierachy( nodeIds[ i ], scene, json, parser ) );
                			}
                			return Promise.all( pending ).then( function () {
                				return scene;
                			} );
                		};
                	}();
                	return GLTFLoader;
                } )();

                const STATE = {
                  NONE: -1,
                  ROTATE: 0,
                  FORWARD: 1,
                  PAN: 2
                };
                const MOUSE = {
                  ROTATE: 0,
                  FORWARD: 1,
                  PAN: 2
                };
                const changeEvent = {type: 'change'};
                class MyControls extends EventDispatcher {
                  constructor(object, domElement) {
                    super();
                    this.object = object;
                    this.domElement = domElement;
                    this._enabled = true;
                    this.state = STATE.NONE;
                    this.screen = { left: 0, top: 0, width: 0, height: 0 };
                    this.rotateSpeed = 1.0;
                    this.forwardSpeed = 1.0;
                    this.panSpeed = 1.0;
                    this._rotateStart = new Vector2();
                    this._rotateEnd = new Vector2();
                    this._forwardStart = new Vector2();
                    this._forwardEnd = new Vector2();
                    this._panStart = new Vector2();
                    this._panEnd = new Vector2();
                    domElement.addEventListener('mousedown', event => {
                      if (!this.enabled || this.state !== STATE.NONE) {
                        return;
                      }
                      switch (event.button) {
                        case MOUSE.ROTATE:
                          this.state = STATE.ROTATE;
                          break;
                        case MOUSE.FORWARD:
                          this.state = STATE.FORWARD;
                          break;
                        case MOUSE.PAN:
                          this.state = STATE.PAN;
                          break;
                      }
                      switch (this.state) {
                        case STATE.ROTATE:
                          this._rotateStart.copy(getMouseOnScreen());
                          this._rotateEnd.copy(this._rotateStart);
                          break;
                        case STATE.FORWARD:
                          this._forwardStart.copy(getMouseOnScreen());
                          this._forwardEnd.copy(this._forwardStart);
                          break;
                        case STATE.PAN:
                          this._panStart.copy(getMouseOnScreen());
                          this._panEnd.copy(this._panStart);
                          break;
                      }
                    }, false);
                    domElement.addEventListener('mouseup', event => {
                      if (!this.enabled || this.state === STATE.NONE) {
                        return;
                      }
                      switch (this.state) {
                        case STATE.ROTATE:
                          this._rotateEnd.copy(getMouseOnScreen());
                          break;
                        case STATE.FORWARD:
                          this._forwardEnd.copy(getMouseOnScreen());
                          break;
                        case STATE.PAN:
                          this._panEnd.copy(getMouseOnScreen());
                          break;
                      }
                      this.state = STATE.NONE;
                    }, false);
                    domElement.addEventListener('mousemove', event => {
                      if (!this.enabled || this.state === STATE.NONE) {
                        return;
                      }
                      switch (this.state) {
                        case STATE.ROTATE:
                          this._rotateEnd.copy(getMouseOnScreen());
                          break;
                        case STATE.FORWARD:
                          this._forwardEnd.copy(getMouseOnScreen());
                          break;
                        case STATE.PAN:
                          this._panEnd.copy(getMouseOnScreen());
                          break;
                      }
                    }, false);
                    domElement.addEventListener('wheel', event => {
                      if (!this.enabled) {
                        return;
                      }
                      event.preventDefault();
                      if (this.state !== STATE.NONE) {
                        return;
                      }
                      this._forwardStart.set(0, 0);
                      this._forwardEnd.set(0, 0);
                      switch (event.deltaMode) {
                        case 0:
                          this._forwardEnd.y += event.deltaY * 0.000025;
                          break;
                        case 1:
                          this._forwardEnd.y += event.deltaY * 0.001;
                          break;
                        case 2:
                          this._forwardEnd.y += event.deltaY * 0.0025;
                          break;
                      }
                      this.forwardCamera();
                    }, false);
                    const vector2 = new Vector2();
                    const getMouseOnScreen = (pageX, pageY) => {
                      const rect = domElement.getBoundingClientRect();
                      vector2.set(
                        (event.clientX - rect.left) / rect.width,
                        (event.clientY - rect.top) / rect.height
                      );
                      return vector2;
                    };
                    this.update();
                  }
                  rotateCamera() {
                    const vector2 = new Vector2().copy(this._rotateEnd).sub(this._rotateStart);
                    const rotation = new Vector3(vector2.y, vector2.x, 0);
                    const quaternion = new Quaternion().setFromEuler(new Euler().setFromVector3(rotation));
                    this.object.quaternion.multiply(quaternion);
                    this._rotateStart.copy(this._rotateEnd);
                    this.dispatchEvent(changeEvent);
                  }
                  forwardCamera() {
                    const vector2 = new Vector2().copy(this._forwardEnd).sub(this._forwardStart);
                    const direction = new Vector3(0, 0, vector2.y).applyQuaternion(this.object.quaternion);
                    this.object.position.add(direction) * this.forwardSpeed;
                    this._forwardStart.copy(this._forwardEnd);
                    this.dispatchEvent(changeEvent);
                  }
                  panCamera() {
                    const vector2 = new Vector2().copy(this._panEnd).sub(this._panStart);
                    const direction = new Vector3(-vector2.x, vector2.y, 0).applyQuaternion(this.object.quaternion);
                    this.object.position.add(direction) * this.panSpeed;
                    this._panStart.copy(this._panEnd);
                    this.dispatchEvent(changeEvent);
                  }
                  update() {
                    if (!this.enabled) {
                      return;
                    }
                    switch (this.state) {
                      case STATE.ROTATE:
                        this.rotateCamera();
                        break;
                      case STATE.FORWARD:
                        this.forwardCamera();
                        break;
                      case STATE.PAN:
                        this.panCamera();
                        break;
                    }
                  }
                  dispose() {
                  }
                  get enabled() {
                    return this._enabled;
                  }
                  set enabled(value) {
                    this._enabled = value;
                    if (!value) {
                      this.state = STATE.NONE;
                      this._rotateStart.copy(this._rotateEnd);
                      this._forwardStart.copy(this._forwardEnd);
                      this._panStart.copy(this._panEnd);
                    }
                  }
                }

                const DEFAULT_CAMERA_POSITION = [0, 1.6, 0];
                const DEFAULT_TABLET_POSITION = [0, 1.6, -0.2];
                const DEFAULT_POINTER_POSITION = [0, 1.6, -0.15];
                const dummyCanvasTexture = new CanvasTexture(document.createElement('canvas'));
                const raycaster = new Raycaster();
                class ARScene {
                  constructor(deviceSize) {
                    this.renderer = null;
                    this.camera = null;
                    this.tablet = null;
                    this.pointer = null;
                    this.screen = null;
                    this.isTouched = false;
                    this.onCameraPoseUpdate = null;
                    this.onTabletPoseUpdate = null;
                    this.onTouch = null;
                    this.onRelease = null;
                    this._init(deviceSize);
                  }
                  _init(deviceSize) {
                    const width = window.innerWidth;
                    const height = window.innerHeight;
                    const canvas = document.createElement('canvas');
                    const context = canvas.getContext('webgl2', {antialias: true});
                    const renderer = new WebGLRenderer({canvas: canvas, context: context});
                    renderer.setSize(width, height);
                    renderer.setPixelRatio(window.devicePixelRatio);
                    renderer.domElement.oncontextmenu = () => { return false; };
                    const renderTarget = new WebGLRenderTarget(1024, 1024);
                    const scene = new Scene();
                    scene.background = new Color(0x444444);
                    const camera = new PerspectiveCamera(90, width / height, 0.001, 1000.0);
                    camera.position.fromArray(DEFAULT_CAMERA_POSITION);
                    const tabletCamera = new PerspectiveCamera(90, deviceSize.width / deviceSize.height, 0.1, 1000.0);
                    const light = new DirectionalLight(0xffffff, 4.0);
                    light.position.set(-1, 1, -1);
                    scene.add(light);
                    const outsideFrameWidth = 0.005;
                    const screen = new Mesh(
                      new PlaneBufferGeometry(deviceSize.width - outsideFrameWidth, deviceSize.height - outsideFrameWidth),
                      new MeshBasicMaterial({color: 0xffffff, map: renderTarget.texture})
                    );
                    screen.position.z = deviceSize.depth * 0.5 + 0.0001;
                    screen.material.userData.map2 = {value: {needsUpdate: true}};
                    screen.add(tabletCamera);
                    screen.material.onBeforeCompile = shader => {
                      shader.uniforms.map2 = {
                        value: dummyCanvasTexture
                      };
                      shader.fragmentShader = shader.fragmentShader
                        .replace(
                          '#include <map_pars_fragment>\n',
                          '#include <map_pars_fragment>\n' +
                          'uniform sampler2D map2;\n'
                        ).replace(
                          '#include <map_fragment>\n',
                          'vec4 texelColor = mapTexelToLinear(texture2D(map, vUv));\n' +
                          'vec4 texelColor2 = mapTexelToLinear(texture2D(map2, vUv));\n' +
                          'diffuseColor *= vec4(texelColor.rgb * (1.0 - texelColor2.a) + texelColor2.rgb * texelColor2.a, texelColor.a);\n'
                        );
                      screen.material.userData.map2 = shader.uniforms.map2;
                    };
                    const tablet = new Mesh(
                      new BoxBufferGeometry(deviceSize.width, deviceSize.height, deviceSize.depth),
                      new MeshStandardMaterial({color: 0x000000})
                    );
                    tablet.position.fromArray(DEFAULT_TABLET_POSITION);
                    tablet.add(screen);
                    scene.add(tablet);
                    const pointer = new Mesh(
                      new SphereBufferGeometry(0.01),
                      new MeshBasicMaterial({color: 0xff8888, transparent: true, opacity: 0.6})
                    );
                    pointer.visible = false;
                    pointer.position.fromArray(DEFAULT_POINTER_POSITION);
                    scene.add(pointer);
                    const cameraControls = new MyControls(camera, renderer.domElement);
                    cameraControls.addEventListener('change', () => {
                      if (this.onCameraPoseUpdate) {
                        this.onCameraPoseUpdate(camera.position.toArray(), camera.quaternion.toArray());
                      }
                    });
                    const transformControls = new TransformControls(camera, renderer.domElement);
                    transformControls.setMode('translate');
                    transformControls.attach(tablet);
                    transformControls.addEventListener('change', () => {
                      if (this.onTabletPoseUpdate) {
                        this.onTabletPoseUpdate(tablet.position.toArray(), tablet.quaternion.toArray());
                      }
                    });
                    transformControls.addEventListener('mouseDown', () => {
                      cameraControls.enabled = false;
                    });
                    transformControls.addEventListener('mouseUp', () => {
                      cameraControls.enabled = true;
                    });
                    scene.add(transformControls);
                    const mouse = new Vector2();
                    const targetObjects = [screen, tablet];
                    let mouseDownTime = null;
                    const transformModes = {
                      disabled: 0,
                      translate: 1,
                      rotate: 2
                    };
                    let transformMode = transformModes.translate;
                    const raycast = event => {
                      const rect = renderer.domElement.getBoundingClientRect();
                      const point = {
                        x: (event.clientX - rect.left) / rect.width,
                        y: (event.clientY - rect.top) / rect.height
                      };
                      mouse.set(point.x * 2 - 1, -(point.y * 2) + 1);
                      raycaster.setFromCamera(mouse, camera);
                      return raycaster.intersectObjects(targetObjects);
                    };
                    renderer.domElement.addEventListener('mousedown', event => {
                      if (event.button === 0) {
                        if (raycast(event).length > 0) {
                          mouseDownTime = performance.now();
                        }
                      } else if (event.button === 2) {
                        if (this.isTouched) {
                          return;
                        }
                        const results = raycast(event);
                        if (results.length > 0 && results[0].object === screen) {
                          this.isTouched = true;
                          cameraControls.enabled = false;
                          if (this.onTouch) {
                            this.onTouch(results[0].point.toArray());
                          }
                        }
                      }
                      event.preventDefault();
                    }, false);
                    renderer.domElement.addEventListener('mouseup', event => {
                      if (event.button === 0) {
                        if (mouseDownTime === null) {
                          return;
                        }
                        const mouseUpTime = performance.now();
                        const thresholdTime = 300;
                        if (mouseUpTime - mouseDownTime > thresholdTime) {
                          return;
                        }
                        transformMode = transformMode === transformModes.disabled ? transformModes.translate :
                                        transformMode === transformModes.translate ? transformModes.rotate :
                                        transformModes.disabled;
                        switch (transformMode) {
                          case transformModes.disabled:
                            transformControls.visible = false;
                            transformControls.enabled = false;
                            break;
                          case transformModes.translate:
                            transformControls.visible = true;
                            transformControls.enabled = true;
                            transformControls.setMode('translate');
                            break;
                          case transformModes.rotate:
                            transformControls.visible = true;
                            transformControls.enabled = true;
                            transformControls.setMode('rotate');
                            break;
                        }
                      } else if (event.button === 2) {
                        cameraControls.enabled = true;
                        if (!this.isTouched) {
                          return;
                        }
                        this.isTouched = false;
                        if (this.onRelease) {
                          this.onRelease();
                        }
                      }
                      event.preventDefault();
                    }, false);
                    renderer.domElement.addEventListener('mousemove', event => {
                      event.preventDefault();
                      if (!this.isTouched) {
                        return;
                      }
                      const results = raycast(event);
                      if (results.length === 0 || results[0].object !== screen) {
                        this.isTouched = false;
                        if (this.onRelease) {
                          this.onRelease();
                        }
                        return;
                      }
                      if (this.onTouch) {
                        this.onTouch(results[0].point.toArray());
                      }
                    }, false);
                    const animate = () => {
                      requestAnimationFrame(animate);
                      screen.visible = false;
                      scene.traverse(object => {
                        if (object.userData.virtual) {
                          object.visible = true;
                        }
                      });
                      renderer.setRenderTarget(renderTarget);
                      renderer.render(scene, tabletCamera);
                      cameraControls.update();
                      screen.material.userData.map2.value.needsUpdate = true;
                      screen.visible = true;
                      scene.traverse(object => {
                        if (object.userData.virtual) {
                          object.visible = false;
                        }
                      });
                      renderer.setRenderTarget(null);
                      renderer.render(scene, camera);
                    };
                    animate();
                    window.addEventListener('resize', event => {
                      const width = window.innerWidth;
                      const height = window.innerHeight;
                      renderer.setSize(width, height);
                      camera.aspect = width / height;
                      camera.updateProjectionMatrix();
                    }, false);
                    this.renderer = renderer;
                    this.scene = scene;
                    this.camera = camera;
                    this.screen = screen;
                    this.tablet = tablet;
                    this.pointer = pointer;
                    this.tabletCamera = tabletCamera;
                    this.room = null;
                  }
                  inject(div) {
                    const appendCanvas = () => {
                      div.appendChild(this.renderer.domElement);
                    };
                    if (document.body) {
                      appendCanvas();
                    } else {
                      document.addEventListener('DOMContentLoaded', appendCanvas);
                    }
                  }
                  eject() {
                    const element = this.renderer.domElement;
                    element.parentElement.removeChild(element);
                  }
                  setCanvas(canvas) {
                    this.screen.material.userData.map2.value = new CanvasTexture(canvas);
                  }
                  releaseCanvas() {
                    this.screen.material.userData.map2.value = dummyCanvasTexture;
                  }
                  getHitTestResults(origin, direction) {
                    raycaster.set(new Vector3().fromArray(origin), new Vector3().fromArray(direction));
                    const targets = [];
                    if (this.room) {
                      targets.push(this.room);
                    }
                    return raycaster.intersectObjects(targets, true);
                  }
                  loadVirtualRoomAsset(buffer) {
                    new GLTFLoader().parse(buffer, '', gltf => {
                      this.scene.add(gltf.scene);
                      this.room = gltf.scene;
                    }, undefined, error => {
                      console.error(error);
                    });
                  }
                  updateCameraTransform(positionArray, quaternionArray) {
                    this.camera.position.fromArray(positionArray);
                    this.camera.quaternion.fromArray(quaternionArray);
                  }
                  updateTabletTransform(positionArray, quaternionArray) {
                    this.tablet.position.fromArray(positionArray);
                    this.tablet.quaternion.fromArray(quaternionArray);
                  }
                  updatePointerTransform(positionArray, quaternionArray) {
                    this.pointer.position.fromArray(positionArray);
                    this.pointer.quaternion.fromArray(quaternionArray);
                  }
                  touched() {
                    this.pointer.material.color.setHex(0x8888ff);
                    this.pointer.visible = true;
                  }
                  released() {
                    this.pointer.material.color.setHex(0xff8888);
                    this.pointer.visible = false;
                  }
                }

                const DEFAULT_MODES = ['inline'];
                const DEFAULT_HEADSET_POSITION = [0, 1.6, 0];
                const DIV_Z_INDEX = '9999';
                const DOM_OVERLAY_Z_INDEX = '10001';
                const DEFAULT_RESOLUTION = {width: 1024, height: 2048};
                const DEFAULT_DEVICE_SIZE = {width: 0.05, height: 0.1, depth: 0.005};
                const dispatchCustomEvent = (type, detail) => {
                  window.dispatchEvent(new CustomEvent(type, {
                    detail: typeof cloneInto !== 'undefined' ? cloneInto(detail, window) : detail
                  }));
                };
                class EmulatedXRDevice extends XRDevice {
                  constructor(global, config={}) {
                    super(global);
                    this.sessions = new Map();
                    this.modes = config.modes || DEFAULT_MODES;
                    this.features = config.features || [];
                    this.position = copy$5(create$7(), DEFAULT_HEADSET_POSITION);
                    this.quaternion = create$9();
                    this.scale = fromValues$3(1, 1, 1);
                    this.matrix = create$6();
                    this.projectionMatrix = create$6();
                    this.leftProjectionMatrix = create$6();
                    this.rightProjectionMatrix = create$6();
                    this.viewMatrix = create$6();
                    this.leftViewMatrix = create$6();
                    this.rightViewMatrix = create$6();
                    this.gamepads = [];
                    this.gamepadInputSources = [];
                    this.stereoEffectEnabled = config.stereoEffect !== undefined ? config.stereoEffect : true;
                    this.div = document.createElement('div');
                    this.div.style.position = 'absolute';
                    this.div.style.width = '100%';
                    this.div.style.height = '100%';
                    this.div.style.top = '0';
                    this.div.style.left = '0';
                    this.div.style.zIndex = DIV_Z_INDEX;
                    this.originalCanvasParams = {
                      parentElement: null,
                      width: 0,
                      height: 0
                    };
                    this.domOverlayRoot = null;
                    this.arDevice = this.modes.includes('immersive-ar');
                    this.resolution = config.resolution !== undefined ? config.resolution : DEFAULT_RESOLUTION;
                    this.deviceSize = config.size !== undefined ? config.size : DEFAULT_DEVICE_SIZE;
                    this.arScene = null;
                    this.touched = false;
                    this.isPointerAndTabledCloseEnough = false;
                    this.hitTestSources = [];
                    this.hitTestResults = new Map();
                    this.hitTestSourcesForTransientInput = [];
                    this.hitTestResultsForTransientInput = new Map();
                    this._initializeControllers(config);
                    this._setupEventListeners();
                  }
                  onBaseLayerSet(sessionId, layer) {
                    const session = this.sessions.get(sessionId);
                    if (session.immersive && session.baseLayer) {
                      this._removeBaseLayerCanvasFromDiv(sessionId);
                    }
                    session.baseLayer = layer;
                    if (session.immersive && session.baseLayer) {
                      this._appendBaseLayerCanvasToDiv(sessionId);
                      if (session.ar) {
                        const canvas = session.baseLayer.context.canvas;
                        canvas.width = this.resolution.width;
                        canvas.height = this.resolution.height;
                        this.arScene.setCanvas(canvas);
                        if (canvas.parentElement) {
                          canvas.parentElement.removeChild(canvas);
                        }
                      }
                    }
                  }
                  isSessionSupported(mode) {
                    return this.modes.includes(mode);
                  }
                  isFeatureSupported(featureDescriptor) {
                    if (this.features.includes(featureDescriptor)) {
                      return true;
                    }
                    switch(featureDescriptor) {
                      case 'viewer': return true;
                      case 'local': return true;
                      case 'local-floor': return true;
                      case 'bounded-floor': return false;
                      case 'unbounded': return false;
                      case 'dom-overlay': return true;
                      default: return false;
                    }
                  }
                  async requestSession(mode, enabledFeatures) {
                    if(!this.isSessionSupported(mode)) {
                      return Promise.reject();
                    }
                    const immersive = mode === 'immersive-vr' || mode === 'immersive-ar';
                    const session = new Session$2(mode, enabledFeatures);
                    this.sessions.set(session.id, session);
                    if (mode === 'immersive-ar') {
                      if (!this.arScene) {
                        this.arScene = new ARScene(this.deviceSize);
                        this._requestVirtualRoomAsset();
                        this.arScene.onTouch = position => {
                          this.touched = true;
                          for (let i = 0; i < 3; i++) {
                            this.gamepads[0].pose.position[i] = position[i];
                          }
                          this.arScene.updatePointerTransform(this.gamepads[0].pose.position, this.gamepads[0].pose.orientation);
                          this._notifyInputPoseUpdate(0);
                        };
                        this.arScene.onRelease = () => {
                          this.touched = false;
                        };
                        this.arScene.onCameraPoseUpdate = (positionArray, quaternionArray) => {
                          this._updatePose(positionArray, quaternionArray);
                          this.arScene.updateCameraTransform(positionArray, quaternionArray);
                          this._notifyPoseUpdate();
                        };
                        this.arScene.onTabletPoseUpdate = (positionArray, quaternionArray) => {
                          this._updateInputPose(positionArray, quaternionArray, 1);
                          this.arScene.updateTabletTransform(positionArray, quaternionArray);
                          this._notifyInputPoseUpdate(1);
                        };
                      }
                      this.arScene.inject(this.div);
                    }
                    if (immersive) {
                      this.dispatchEvent('@@webxr-polyfill/vr-present-start', session.id);
                      this._notifyEnterImmersive();
                    }
                    return Promise.resolve(session.id);
                  }
                  requestAnimationFrame(callback) {
                    return this.global.requestAnimationFrame(callback);
                  }
                  cancelAnimationFrame(handle) {
                    this.global.cancelAnimationFrame(handle);
                  }
                  onFrameStart(sessionId, renderState) {
                    const session = this.sessions.get(sessionId);
                    const context = session.baseLayer.context;
                    const canvas = context.canvas;
                    const near = renderState.depthNear;
                    const far = renderState.depthFar;
                    const width = canvas.width;
                    const height = canvas.height;
                    if (session.immersive) {
                      const currentClearColor = context.getParameter(context.COLOR_CLEAR_VALUE);
                      const currentClearDepth = context.getParameter(context.DEPTH_CLEAR_VALUE);
                      const currentClearStencil = context.getParameter(context.STENCIL_CLEAR_VALUE);
                      context.clearColor(0.0, 0.0, 0.0, 0.0);
                      context.clearDepth(1,0);
                      context.clearStencil(0.0);
                      context.clear(context.DEPTH_BUFFER_BIT | context.COLOR_BUFFER_BIT | context.STENCIL_BUFFER_BIT );
                      context.clearColor(currentClearColor[0], currentClearColor[1], currentClearColor[2], currentClearColor[3]);
                      context.clearDepth(currentClearDepth);
                      context.clearStencil(currentClearStencil);
                    }
                    if (session.vr) {
                      const aspect = width * (this.stereoEffectEnabled ? 0.5 : 1.0) / height;
                      perspective$1(this.leftProjectionMatrix, Math.PI / 2, aspect, near, far);
                      perspective$1(this.rightProjectionMatrix, Math.PI / 2, aspect, near, far);
                    } else if (session.ar) {
                      const aspect = this.deviceSize.width / this.deviceSize.height;
                      perspective$1(this.projectionMatrix, Math.PI / 2, aspect, near, far);
                    } else {
                      const aspect = width / height;
                      perspective$1(this.projectionMatrix, renderState.inlineVerticalFieldOfView, aspect, near, far);
                    }
                    if (session.ar) {
                      fromRotationTranslationScale(this.matrix, this.gamepads[1].pose.orientation, this.gamepads[1].pose.position, this.scale);
                    } else {
                      fromRotationTranslationScale(this.matrix, this.quaternion, this.position, this.scale);
                    }
                    invert$2(this.viewMatrix, this.matrix);
                    invert$2(this.leftViewMatrix, translateOnX(copy$4(this.leftViewMatrix, this.matrix), -0.02));
                    invert$2(this.rightViewMatrix, translateOnX(copy$4(this.rightViewMatrix, this.matrix), 0.02));
                    if (session.immersive) {
                      if (this.arDevice) {
                        if (this.touched && this._isPointerCloseEnoughToTablet()) {
                          if (!this.isPointerAndTabledCloseEnough) {
                            this._updateInputButtonPressed(true, 0, 0);
                            this.isPointerAndTabledCloseEnough = true;
                            this.arScene.touched();
                          }
                          const coordinates = this._getTouchCoordinates();
                          this._updateInputAxes(0, coordinates[0], -coordinates[1]);
                        } else {
                          if (this.isPointerAndTabledCloseEnough) {
                            this._updateInputButtonPressed(false, 0, 0);
                            this.isPointerAndTabledCloseEnough = false;
                            this.arScene.released();
                          }
                          this._updateInputAxes(0, 0, 0);
                        }
                      }
                      for (let i = 0; i < this.gamepads.length; ++i) {
                        const gamepad = this.gamepads[i];
                        const inputSourceImpl = this.gamepadInputSources[i];
                        inputSourceImpl.updateFromGamepad(gamepad);
                        if (this.arDevice && i === 0) {
                          inputSourceImpl.targetRayMode = 'screen';
                        }
                        if (inputSourceImpl.primaryButtonIndex !== -1) {
                          const primaryActionPressed = gamepad.buttons[inputSourceImpl.primaryButtonIndex].pressed;
                          if (primaryActionPressed && !inputSourceImpl.primaryActionPressed) {
                            if (this.arDevice) {
                              inputSourceImpl.active = true;
                            } else {
                              this.dispatchEvent('@@webxr-polyfill/input-select-start', { sessionId: session.id, inputSource: inputSourceImpl.inputSource });
                            }
                          } else if (!primaryActionPressed && inputSourceImpl.primaryActionPressed) {
                            if (this.arDevice) {
                              inputSourceImpl.active = false;
                            }
                            this.dispatchEvent('@@webxr-polyfill/input-select-end', { sessionId: session.id, inputSource: inputSourceImpl.inputSource });
                          }
                        }
                        if (inputSourceImpl.primarySqueezeButtonIndex !== -1) {
                          const primarySqueezeActionPressed = gamepad.buttons[inputSourceImpl.primarySqueezeButtonIndex].pressed;
                          if (primarySqueezeActionPressed && !inputSourceImpl.primarySqueezeActionPressed) {
                            this.dispatchEvent('@@webxr-polyfill/input-squeeze-start', { sessionId: session.id, inputSource: inputSourceImpl.inputSource });
                          } else if (!primarySqueezeActionPressed && inputSourceImpl.primarySqueezeActionPressed) {
                            this.dispatchEvent('@@webxr-polyfill/input-squeeze-end', { sessionId: session.id, inputSource: inputSourceImpl.inputSource });
                          }
                          inputSourceImpl.primarySqueezeActionPressed = primarySqueezeActionPressed;
                        }
                      }
                      this._hitTest(sessionId, this.hitTestSources, this.hitTestResults);
                      this._hitTest(sessionId, this.hitTestSourcesForTransientInput, this.hitTestResultsForTransientInput);
                    }
                  }
                  onFrameEnd(sessionId) {
                    const session = this.sessions.get(sessionId);
                    if (session.immersive) {
                      for (let i = 0; i < this.gamepads.length; ++i) {
                        const gamepad = this.gamepads[i];
                        const inputSourceImpl = this.gamepadInputSources[i];
                        if (inputSourceImpl.primaryButtonIndex !== -1) {
                          const primaryActionPressed = gamepad.buttons[inputSourceImpl.primaryButtonIndex].pressed;
                          if (primaryActionPressed && !inputSourceImpl.primaryActionPressed) {
                            if (this.arDevice) {
                              this.dispatchEvent('@@webxr-polyfill/input-select-start', { sessionId: session.id, inputSource: inputSourceImpl.inputSource });
                            }
                          }
                          inputSourceImpl.primaryActionPressed = primaryActionPressed;
                        }
                      }
                    }
                  }
                  async requestFrameOfReferenceTransform(type, options) {
                    const matrix = create$6();
                    switch (type) {
                      case 'viewer':
                      case 'local':
                        matrix[13] = -DEFAULT_HEADSET_POSITION[1];
                        return matrix;
                      case 'local-floor':
                        return matrix;
                      case 'bounded-floor':
                      case 'unbound':
                      default:
                        return matrix;
                    }
                  }
                  endSession(sessionId) {
                    const session = this.sessions.get(sessionId);
                    if (session.immersive && session.baseLayer) {
                      this._removeBaseLayerCanvasFromDiv(sessionId);
                      this.domOverlayRoot = null;
                      if (session.ar) {
                        this.arScene.eject();
                        this.arScene.releaseCanvas();
                      }
                      this.dispatchEvent('@@webxr-polyfill/vr-present-end', sessionId);
                      this._notifyLeaveImmersive();
                    }
                    session.ended = true;
                  }
                  doesSessionSupportReferenceSpace(sessionId, type) {
                    const session = this.sessions.get(sessionId);
                    if (session.ended) {
                      return false;
                    }
                    return session.enabledFeatures.has(type);
                  }
                  getViewport(sessionId, eye, layer, target) {
                    const session = this.sessions.get(sessionId);
                    const canvas = session.baseLayer.context.canvas;
                    const width = canvas.width;
                    const height = canvas.height;
                    if (session.ar) {
                      target.x = 0;
                      target.y = 0;
                      target.width = width;
                      target.height = height;
                    } else {
                      if (eye === 'none') {
                        target.x = 0;
                        target.width = width;
                      } else if (this.stereoEffectEnabled) {
                        target.x = eye === 'left' ? 0 : width / 2;
                        target.width = width / 2;
                      } else {
                        target.x = 0;
                        target.width = eye === 'left' ? width : 0;
                      }
                      target.y = 0;
                      target.height = height;
                    }
                    return true;
                  }
                  getProjectionMatrix(eye) {
                    return this.arDevice || eye === 'none' ? this.projectionMatrix :
                           eye === 'left' ? this.leftProjectionMatrix : this.rightProjectionMatrix;
                  }
                  getBasePoseMatrix() {
                    return this.matrix;
                  }
                  getBaseViewMatrix(eye) {
                    if (eye === 'none' || this.arDevice || !this.stereoEffectEnabled) { return this.viewMatrix; }
                    return eye === 'left' ? this.leftViewMatrix : this.rightViewMatrix;
                  }
                  getInputSources() {
                    const inputSources = [];
                    for (const inputSourceImpl of this.gamepadInputSources) {
                      if (inputSourceImpl.active) {
                        inputSources.push(inputSourceImpl.inputSource);
                      }
                    }
                    return inputSources;
                  }
                  getInputPose(inputSource, coordinateSystem, poseType) {
                    for (const inputSourceImpl of this.gamepadInputSources) {
                      if (inputSourceImpl.inputSource === inputSource) {
                        const pose = inputSourceImpl.getXRPose(coordinateSystem, poseType);
                        if (this.arDevice && inputSourceImpl === this.gamepadInputSources[0]) {
                          if (!inputSourceImpl.active) { return null; }
                          const viewMatrixInverse = invert$2(create$6(), this.viewMatrix);
                          coordinateSystem._transformBasePoseMatrix(viewMatrixInverse, viewMatrixInverse);
                          const viewMatrix = invert$2(create$6(), viewMatrixInverse);
                          multiply$2(pose.transform.matrix, viewMatrix, pose.transform.matrix);
                          const matrix = identity$1(create$6());
                          const near = 0.1;
                          const aspect = this.deviceSize.width / this.deviceSize.height;
                          const outsideFrameWidth = 0.005;
                          const dx = pose.transform.matrix[12] /
                            ((this.deviceSize.width - outsideFrameWidth) * 0.5) * aspect;
                          const dy = pose.transform.matrix[13] /
                            ((this.deviceSize.height - outsideFrameWidth) * 0.5);
                          rotateY(matrix, matrix, -dx * Math.PI / 4);
                          rotateX(matrix, matrix, dy * Math.PI / 4);
                          matrix[12] = dx * near;
                          matrix[13] = dy * near;
                          matrix[14] = -near;
                          multiply$2(pose.transform.matrix, viewMatrixInverse, matrix);
                          invert$2(pose.transform.inverse.matrix, pose.transform.matrix);
                        }
                        return pose;
                      }
                    }
                    return null;
                  }
                  onWindowResize() {
                  }
                  setDomOverlayRoot(root) {
                    this.domOverlayRoot = root;
                  }
                  addHitTestSource(source) {
                    this.hitTestSources.push(source);
                  }
                  getHitTestResults(source) {
                    return this.hitTestResults.get(source) || [];
                  }
                  addHitTestSourceForTransientInput(source) {
                    this.hitTestSourcesForTransientInput.push(source);
                  }
                  getHitTestResultsForTransientInput(source) {
                    return this.hitTestResultsForTransientInput.get(source) || [];
                  }
                  _appendBaseLayerCanvasToDiv(sessionId) {
                    const session = this.sessions.get(sessionId);
                    const canvas = session.baseLayer.context.canvas;
                    this.originalCanvasParams.width = canvas.width;
                    this.originalCanvasParams.height = canvas.height;
                    document.body.appendChild(this.div);
                    if (!(canvas instanceof HTMLCanvasElement)) { return; }
                    this.originalCanvasParams.parentElement = canvas.parentElement;
                    canvas.width = window.innerWidth;
                    canvas.height = window.innerHeight;
                    this.div.appendChild(canvas);
                    if (this.domOverlayRoot) {
                      const el = this.domOverlayRoot;
                      el.style._zIndex = el.style.zIndex;
                      if (this.domOverlayRoot.contains(this.div)) {
                        this.div.style.zIndex = '';
                      } else {
                        el.style.zIndex = DOM_OVERLAY_Z_INDEX;
                      }
                    }
                  }
                  _removeBaseLayerCanvasFromDiv(sessionId) {
                    const session = this.sessions.get(sessionId);
                    const canvas = session.baseLayer.context.canvas;
                    canvas.width = this.originalCanvasParams.width;
                    canvas.height = this.originalCanvasParams.height;
                    if (this.div.parentElement === document.body) {
                      document.body.removeChild(this.div);
                    }
                    if (canvas.parentElement === this.div) {
                      this.div.removeChild(canvas);
                    }
                    if (!(canvas instanceof HTMLCanvasElement)) { return; }
                    if (this.originalCanvasParams.parentElement) {
                      this.originalCanvasParams.parentElement.appendChild(canvas);
                    }
                    this.originalCanvasParams.parentElement = null;
                    if (this.domOverlayRoot) {
                      const el = this.domOverlayRoot;
                      el.style.zIndex = el.style._zIndex;
                      delete el.style._zIndex;
                      this.div.style.zIndex = DIV_Z_INDEX;
                    }
                  }
                  _isPointerCloseEnoughToTablet() {
                    const pose = this.gamepads[0].pose;
                    const matrix = fromRotationTranslation$1(create$6(), pose.orientation, pose.position);
                    multiply$2(matrix, this.viewMatrix, matrix);
                    const dx = matrix[12] / (this.deviceSize.width * 0.5);
                    const dy = matrix[13] / (this.deviceSize.height * 0.5);
                    const dz = matrix[14];
                    return dx <= 1.0 && dx >= -1.0 &&
                           dy <= 1.0 && dy >= -1.0 &&
                           dz <= 0.01 && dz >= 0.0;
                  }
                  _getTouchCoordinates() {
                    const pose = this.gamepads[0].pose;
                    const matrix = fromRotationTranslation$1(create$6(), pose.orientation, pose.position);
                    multiply$2(matrix, this.viewMatrix, matrix);
                    const dx = matrix[12] / (this.deviceSize.width * 0.5);
                    const dy = matrix[13] / (this.deviceSize.height * 0.5);
                    return [dx, dy];
                  }
                  _hitTest(sessionId, hitTestSources, hitTestResults) {
                    let activeHitTestSourceNum = 0;
                    for (let i = 0; i < hitTestSources.length; i++) {
                      const source = hitTestSources[i];
                      if (source._active) {
                        hitTestSources[activeHitTestSourceNum++] = source;
                      }
                    }
                    hitTestSources.length = activeHitTestSourceNum;
                    hitTestResults.clear();
                    for (const source of hitTestSources) {
                      if (sessionId !== source._session[PRIVATE$e].id) {
                        continue;
                      }
                      let baseMatrix;
                      if (source instanceof XRTransientInputHitTestSource) {
                        if (!this.gamepadInputSources[0].active) {
                          continue;
                        }
                        if (!source._profile.includes('touch')) {
                          continue;
                        }
                        const gamepad = this.gamepads[0];
                        const matrix = identity$1(create$6());
                        matrix[12] = gamepad.axes[0];
                        matrix[13] = -gamepad.axes[1];
                        baseMatrix = multiply$2(matrix, this.matrix, matrix);
                      } else {
                        baseMatrix = source._space._baseMatrix;
                        if (!baseMatrix) {
                          continue;
                        }
                      }
                      const offsetRay = source._offsetRay;
                      const origin = set(create$7(), offsetRay.origin.x, offsetRay.origin.y, offsetRay.origin.z);
                      const direction = set(create$7(), offsetRay.direction.x, offsetRay.direction.y, offsetRay.direction.z);
                      transformMat4(origin, origin, baseMatrix);
                      transformQuat$1(direction, direction, getRotation$1(create$9(), baseMatrix));
                      const arHitTestResults = this.arScene.getHitTestResults(origin, direction);
                      const results = [];
                      for (const result of arHitTestResults) {
                        const matrix = create$6();
                        matrix[12] = result.point.x;
                        matrix[13] = result.point.y;
                        matrix[14] = result.point.z;
                        results.push(matrix);
                      }
                      hitTestResults.set(source, results);
                    }
                  }
                  _notifyPoseUpdate() {
                    dispatchCustomEvent('device-pose', {
                      position: this.position,
                      quaternion: this.quaternion
                    });
                  }
                  _notifyInputPoseUpdate(controllerIndex) {
                    const pose = this.gamepads[controllerIndex].pose;
                    const objectName = controllerIndex === 0 ? 'rightController' : 'leftController';
                    dispatchCustomEvent('device-input-pose', {
                      position: pose.position,
                      quaternion: pose.orientation,
                      objectName: objectName
                    });
                  }
                  _notifyEnterImmersive() {
                    dispatchCustomEvent('device-enter-immersive', {});
                  }
                  _notifyLeaveImmersive() {
                    dispatchCustomEvent('device-leave-immersive', {});
                  }
                  _requestVirtualRoomAsset() {
                    dispatchCustomEvent('webxr-virtual-room-request', {});
                  }
                  _updateStereoEffect(enabled) {
                    this.stereoEffectEnabled = enabled;
                  }
                  _updatePose(positionArray, quaternionArray) {
                    for (let i = 0; i < 3; i++) {
                      this.position[i] = positionArray[i];
                    }
                    for (let i = 0; i < 4; i++) {
                      this.quaternion[i] = quaternionArray[i];
                    }
                  }
                  _updateInputPose(positionArray, quaternionArray, index) {
                    if (index >= this.gamepads.length) { return; }
                    const gamepad = this.gamepads[index];
                    const pose = gamepad.pose;
                    for (let i = 0; i < 3; i++) {
                      pose.position[i] = positionArray[i];
                    }
                    for (let i = 0; i < 4; i++) {
                      pose.orientation[i] = quaternionArray[i];
                    }
                  }
                  _updateInputButtonPressed(pressed, controllerIndex, buttonIndex) {
                    if (controllerIndex >= this.gamepads.length) { return; }
                    const gamepad = this.gamepads[controllerIndex];
                    if (buttonIndex >= gamepad.buttons.length) { return; }
                    gamepad.buttons[buttonIndex].pressed = pressed;
                    gamepad.buttons[buttonIndex].value = pressed ? 1.0 : 0.0;
                  }
                  _updateInputAxesChanged(value, controllerIndex, axesIndex) {
                    if (controllerIndex >= this.gamepads.length) { return; }
                    const gamepad = this.gamepads[controllerIndex];
                    if (axesIndex >= gamepad.axes.length) { return; }
                    gamepad.axes[axesIndex] = value;
                  }
                  _updateInputAxes(controllerIndex, x, y) {
                    if (controllerIndex >= this.gamepads.length) { return; }
                    const gamepad = this.gamepads[controllerIndex];
                    gamepad.axes[0] = x;
                    gamepad.axes[1] = y;
                  }
                  _initializeControllers(config) {
                    const hasController = config.controllers !== undefined;
                    const controllerNum = hasController ? config.controllers.length : 0;
                    this.gamepads.length = 0;
                    this.gamepadInputSources.length = 0;
                    for (let i = 0; i < controllerNum; i++) {
                      const controller = config.controllers[i];
                      const id = controller.id || '';
                      const hasPosition = controller.hasPosition || false;
                      const buttonNum = controller.buttonNum || 0;
                      const primaryButtonIndex = controller.primaryButtonIndex !== undefined ? controller.primaryButtonIndex : 0;
                      const primarySqueezeButtonIndex = controller.primarySqueezeButtonIndex !== undefined ? controller.primarySqueezeButtonIndex : -1;
                      this.gamepads.push(createGamepad(id, i === 0 ? 'right' : 'left', buttonNum, hasPosition));
                      const imputSourceImpl = new GamepadXRInputSource(this, {}, primaryButtonIndex, primarySqueezeButtonIndex);
                      imputSourceImpl.active = !this.arDevice;
                      this.gamepadInputSources.push(imputSourceImpl);
                    }
                  }
                  _setupEventListeners() {
                    window.addEventListener('webxr-device', event => {
                      const config = event.detail.deviceDefinition;
                      this.modes = config.modes || DEFAULT_MODES;
                      this.features = config.features || [];
                      this.arDevice = this.modes.includes('immersive-ar');
                      this.resolution = config.resolution !== undefined ? config.resolution : DEFAULT_RESOLUTION;
                      this.deviceSize = config.size !== undefined ? config.size : DEFAULT_DEVICE_SIZE;
                      for (let i = 0; i < this.gamepads.length; ++i) {
                        const gamepad = this.gamepads[i];
                        const inputSourceImpl = this.gamepadInputSources[i];
                        inputSourceImpl.active = !this.arDevice;
                        if (inputSourceImpl.primaryButtonIndex !== -1) {
                          gamepad.buttons[inputSourceImpl.primaryButtonIndex].pressed = false;
                        }
                        if (inputSourceImpl.primarySqueezeButtonIndex !== -1) {
                          gamepad.buttons[inputSourceImpl.primarySqueezeButtonIndex].pressed = false;
                        }
                      }
                      this.requestAnimationFrame(() => {
                        this.requestAnimationFrame(() => {
                          this._initializeControllers(config);
                        });
                      });
                    });
                    window.addEventListener('webxr-pose', event => {
                      const positionArray = event.detail.position;
                      const quaternionArray = event.detail.quaternion;
                      if (this.arDevice) {
                        if (this.arScene) {
                          this._updatePose(positionArray, quaternionArray);
                          this.arScene.updateCameraTransform(positionArray, quaternionArray);
                        }
                      } else {
                        this._updatePose(positionArray, quaternionArray);
                      }
                    }, false);
                    window.addEventListener('webxr-input-pose', event => {
                      const positionArray = event.detail.position;
                      const quaternionArray = event.detail.quaternion;
                      const objectName = event.detail.objectName;
                      if (this.arDevice) {
                        switch (objectName) {
                          case 'rightController':
                            this._updateInputPose(positionArray, quaternionArray, 0);
                            if (this.arScene) {
                              this.arScene.updatePointerTransform(positionArray, quaternionArray);
                            }
                            break;
                          case 'leftController':
                            this._updateInputPose(positionArray, quaternionArray, 1);
                            if (this.arScene) {
                              this.arScene.updateTabletTransform(positionArray, quaternionArray);
                            }
                            break;
                        }
                      } else {
                        switch (objectName) {
                          case 'rightController':
                          case 'leftController':
                            this._updateInputPose(positionArray, quaternionArray,
                              objectName === 'rightController' ? 0 : 1);
                            break;
                        }
                      }
                    });
                    window.addEventListener('webxr-input-button', event => {
                      if (this.arDevice) {
                        return;
                      }
                      const pressed = event.detail.pressed;
                      const objectName = event.detail.objectName;
                      const buttonIndex = event.detail.buttonIndex;
                      switch (objectName) {
                        case 'rightController':
                        case 'leftController':
                          this._updateInputButtonPressed(pressed,
                            objectName === 'rightController' ? 0 : 1,
                            buttonIndex);
                          break;
                      }
                    }, false);
                    window.addEventListener('webxr-input-axes', event => {
                      if (this.arDevice) {
                        return;
                      }
                      const value = event.detail.value;
                      const objectName = event.detail.objectName;
                      const axesIndex = event.detail.axesIndex;
                      switch (objectName) {
                        case 'rightController':
                        case 'leftController':
                          this._updateInputAxesChanged(value,
                            objectName === 'rightController' ? 0 : 1,
                            axesIndex);
                          break;
                      }
                    }, false);
                    window.addEventListener('webxr-stereo-effect', event => {
                      this._updateStereoEffect(event.detail.enabled);
                    });
                    window.addEventListener('webxr-virtual-room-response', event => {
                      const virtualRoomAssetBuffer = event.detail.buffer;
                      this.arScene.loadVirtualRoomAsset(virtualRoomAssetBuffer);
                    });
                  }
                }let SESSION_ID$2 = 0;
                class Session$2 {
                  constructor(mode, enabledFeatures) {
                    this.mode = mode;
                    this.immersive = mode == 'immersive-vr' || mode == 'immersive-ar';
                    this.vr = mode === 'immersive-vr';
                    this.ar = mode === 'immersive-ar';
                    this.id = ++SESSION_ID$2;
                    this.baseLayer = null;
                    this.inlineVerticalFieldOfView = Math.PI * 0.5;
                    this.ended = false;
                    this.enabledFeatures = enabledFeatures;
                  }
                }
                const createGamepad = (id, hand, buttonNum, hasPosition) => {
                  const buttons = [];
                  for (let i = 0; i < buttonNum; i++) {
                    buttons.push({
                      pressed: false,
                      touched: false,
                      value: 0.0
                    });
                  }
                  return {
                    id: id || '',
                    pose: {
                      hasPosition: hasPosition,
                      position: [0, 0, 0],
                      orientation: [0, 0, 0, 1]
                    },
                    buttons: buttons,
                    hand: hand,
                    mapping: 'xr-standard',
                    axes: [0, 0]
                  };
                };
                const tmpVec3 = create$7();
                const translateOnX = (matrix, distance) => {
                  set(tmpVec3, distance, 0, 0);
                  return translate(matrix, matrix, tmpVec3);
                };

                class CustomWebXRPolyfill extends WebXRPolyfill {
                  constructor() {
                    super();
                    let activeImmersiveSession = null;
                    const originalRequestSession = XRSystem.prototype.requestSession;
                    XRSystem.prototype.requestSession = function(mode, enabledFeatures = {}) {
                      return originalRequestSession.call(this, mode, enabledFeatures).then(session => {
                        if (mode === 'immersive-vr' || mode === 'immersive-ar') {
                          activeImmersiveSession = session;
                          const optionalFeatures = enabledFeatures.optionalFeatures;
                          const domOverlay = enabledFeatures.domOverlay;
                          if (optionalFeatures && optionalFeatures.includes('dom-overlay') &&
                            domOverlay && domOverlay.root) {
                            const device = session[PRIVATE$e].device;
                            device.setDomOverlayRoot(domOverlay.root);
                            session.domOverlayState = { type: 'screen' };
                          }
                        }
                        return session;
                      });
                    };
                    const originalEnd = XRSession$1.prototype.end;
                    XRSession$1.prototype.end = function () {
                      return originalEnd.call(this).then(() => {
                        if (activeImmersiveSession === this) {
                          activeImmersiveSession = null;
                        }
                      });
                    };
                    window.addEventListener('webxr-exit-immersive', event => {
                      if (activeImmersiveSession && !activeImmersiveSession.ended) {
                        activeImmersiveSession.end().then(() => {
                          activeImmersiveSession = null;
                        });
                      }
                    });
                    XRSession$1.prototype.requestHitTestSource = function (options) {
                      const source = new XRHitTestSource(this, options);
                      const device = this[PRIVATE$e].device;
                      device.addHitTestSource(source);
                      return Promise.resolve(source);
                    };
                    XRSession$1.prototype.requestHitTestSourceForTransientInput = function (options) {
                      const source = new XRTransientInputHitTestSource(this, options);
                      const device = this[PRIVATE$e].device;
                      device.addHitTestSourceForTransientInput(source);
                      return Promise.resolve(source);
                    };
                    XRFrame.prototype.getHitTestResults = function (hitTestSource) {
                      const device = this.session[PRIVATE$e].device;
                      const hitTestResults = device.getHitTestResults(hitTestSource);
                      const results = [];
                      for (const matrix of hitTestResults) {
                        results.push(new XRHitTestResult(this, new XRRigidTransform$1(matrix)));
                      }
                      return results;
                    };
                    XRFrame.prototype.getHitTestResultsForTransientInput = function (hitTestSource) {
                      const device = this.session[PRIVATE$e].device;
                      const hitTestResults = device.getHitTestResultsForTransientInput(hitTestSource);
                      if (hitTestResults.length === 0) {
                        return [];
                      }
                      const results = [];
                      for (const matrix of hitTestResults) {
                        results.push(new XRHitTestResult(this, new XRRigidTransform$1(matrix)));
                      }
                      const inputSource = device.getInputSources()[0];
                      return [new XRTransientInputHitTestResult(this, results, inputSource)];
                    };
                    if (this.nativeWebXR) {
                      overrideAPI(this.global);
                      this.injected = true;
                      this._patchNavigatorXR();
                    } else {
                      installEX_API(this.global);
                      let overridden = false;
                      const overrideIfNeeded = () => {
                        if (overridden) { return false; }
                        if (isNativeFunction(this.global.XRSystem)) {
                          overrideAPI(this.global);
                          overridden = true;
                          return true;
                        }
                        return false;
                      };
                      const observer = new MutationObserver(list => {
                        for (const record of list) {
                          for (const node of record.addedNodes) {
                            if (node.localName === 'script' && overrideIfNeeded()) {
                              observer.disconnect();
                              break;
                            }
                          }
                          if (overridden) { break; }
                        }
                      });
                      observer.observe(document, {subtree: true, childList: true});
                      const onLoad = event => {
                        if (!overridden) {
                          observer.disconnect();
                          overrideIfNeeded();
                        }
                        document.removeEventListener('DOMContentLoaded', onLoad);
                      };
                      document.addEventListener('DOMContentLoaded', onLoad);
                    }
                  }
                  _patchNavigatorXR() {
                    const devicePromise = requestXRDevice$1(this.global);
                    this.xr = new XRSystem(devicePromise);
                    Object.defineProperty(this.global.navigator, 'xr', {
                      value: this.xr,
                      configurable: true,
                    });
                  }
                }
                const requestXRDevice$1 = async (global, config) => {
                  return new Promise((resolve, reject) => {
                    const callback = (event) => {
                      window.removeEventListener('webxr-device-init', callback);
                      resolve(new EmulatedXRDevice(global,
                        Object.assign({},
                          event.detail.deviceDefinition,
                          {stereoEffect: event.detail.stereoEffect}
                        )));
                    };
                    window.addEventListener('webxr-device-init', callback, false);
                  });
                };
                const isNativeFunction = func => {
                  return /\[native code\]/i.test(func.toString());
                };
                const overrideAPI = global => {
                  console.log('WebXR emulator extension overrides native WebXR API with polyfill.');
                  for (const className in API) {
                    global[className] = API[className];
                  }
                  installEX_API(global);
                  if (typeof WebGLRenderingContext !== 'undefined') {
                    overrideMakeXRCompatible(WebGLRenderingContext);
                  }
                  if (typeof WebGL2RenderingContext !== 'undefined') {
                    overrideMakeXRCompatible(WebGL2RenderingContext);
                  }
                };
                const installEX_API = global => {
                  for (const className in EX_API) {
                    global[className] = EX_API[className];
                  }
                };
                const overrideMakeXRCompatible = Context => {
                  Context.prototype.makeXRCompatible = function () {
                    this[XR_COMPATIBLE] = true;
                    return Promise.resolve();
                  };
                };

                return CustomWebXRPolyfill;

})));
}
